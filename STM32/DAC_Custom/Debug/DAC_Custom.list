
DAC_Custom.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008410  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004b8  080085d8  080085d8  000185d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008a90  08008a90  0002012c  2**0
                  CONTENTS
  4 .ARM          00000008  08008a90  08008a90  00018a90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008a98  08008a98  0002012c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008a98  08008a98  00018a98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008a9c  08008a9c  00018a9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000012c  20000000  08008aa0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001fe98  2000012c  08008bcc  0002012c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2001ffc4  08008bcc  0002ffc4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019b7c  00000000  00000000  0002015c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003154  00000000  00000000  00039cd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013d0  00000000  00000000  0003ce30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001298  00000000  00000000  0003e200  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000284f8  00000000  00000000  0003f498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018543  00000000  00000000  00067990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f5b86  00000000  00000000  0007fed3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00175a59  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005324  00000000  00000000  00175aac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000012c 	.word	0x2000012c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080085c0 	.word	0x080085c0

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000130 	.word	0x20000130
 8000204:	080085c0 	.word	0x080085c0

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b96e 	b.w	80004fc <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9d08      	ldr	r5, [sp, #32]
 800023e:	4604      	mov	r4, r0
 8000240:	468c      	mov	ip, r1
 8000242:	2b00      	cmp	r3, #0
 8000244:	f040 8083 	bne.w	800034e <__udivmoddi4+0x116>
 8000248:	428a      	cmp	r2, r1
 800024a:	4617      	mov	r7, r2
 800024c:	d947      	bls.n	80002de <__udivmoddi4+0xa6>
 800024e:	fab2 f282 	clz	r2, r2
 8000252:	b142      	cbz	r2, 8000266 <__udivmoddi4+0x2e>
 8000254:	f1c2 0020 	rsb	r0, r2, #32
 8000258:	fa24 f000 	lsr.w	r0, r4, r0
 800025c:	4091      	lsls	r1, r2
 800025e:	4097      	lsls	r7, r2
 8000260:	ea40 0c01 	orr.w	ip, r0, r1
 8000264:	4094      	lsls	r4, r2
 8000266:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800026a:	0c23      	lsrs	r3, r4, #16
 800026c:	fbbc f6f8 	udiv	r6, ip, r8
 8000270:	fa1f fe87 	uxth.w	lr, r7
 8000274:	fb08 c116 	mls	r1, r8, r6, ip
 8000278:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027c:	fb06 f10e 	mul.w	r1, r6, lr
 8000280:	4299      	cmp	r1, r3
 8000282:	d909      	bls.n	8000298 <__udivmoddi4+0x60>
 8000284:	18fb      	adds	r3, r7, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295
 800028a:	f080 8119 	bcs.w	80004c0 <__udivmoddi4+0x288>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 8116 	bls.w	80004c0 <__udivmoddi4+0x288>
 8000294:	3e02      	subs	r6, #2
 8000296:	443b      	add	r3, r7
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002ac:	45a6      	cmp	lr, r4
 80002ae:	d909      	bls.n	80002c4 <__udivmoddi4+0x8c>
 80002b0:	193c      	adds	r4, r7, r4
 80002b2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b6:	f080 8105 	bcs.w	80004c4 <__udivmoddi4+0x28c>
 80002ba:	45a6      	cmp	lr, r4
 80002bc:	f240 8102 	bls.w	80004c4 <__udivmoddi4+0x28c>
 80002c0:	3802      	subs	r0, #2
 80002c2:	443c      	add	r4, r7
 80002c4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c8:	eba4 040e 	sub.w	r4, r4, lr
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa0>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	b902      	cbnz	r2, 80002e2 <__udivmoddi4+0xaa>
 80002e0:	deff      	udf	#255	; 0xff
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d150      	bne.n	800038c <__udivmoddi4+0x154>
 80002ea:	1bcb      	subs	r3, r1, r7
 80002ec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f0:	fa1f f887 	uxth.w	r8, r7
 80002f4:	2601      	movs	r6, #1
 80002f6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002fa:	0c21      	lsrs	r1, r4, #16
 80002fc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000300:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000304:	fb08 f30c 	mul.w	r3, r8, ip
 8000308:	428b      	cmp	r3, r1
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0xe4>
 800030c:	1879      	adds	r1, r7, r1
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0xe2>
 8000314:	428b      	cmp	r3, r1
 8000316:	f200 80e9 	bhi.w	80004ec <__udivmoddi4+0x2b4>
 800031a:	4684      	mov	ip, r0
 800031c:	1ac9      	subs	r1, r1, r3
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1110 	mls	r1, lr, r0, r1
 8000328:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x10c>
 8000334:	193c      	adds	r4, r7, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x10a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80d9 	bhi.w	80004f4 <__udivmoddi4+0x2bc>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e7bf      	b.n	80002ce <__udivmoddi4+0x96>
 800034e:	428b      	cmp	r3, r1
 8000350:	d909      	bls.n	8000366 <__udivmoddi4+0x12e>
 8000352:	2d00      	cmp	r5, #0
 8000354:	f000 80b1 	beq.w	80004ba <__udivmoddi4+0x282>
 8000358:	2600      	movs	r6, #0
 800035a:	e9c5 0100 	strd	r0, r1, [r5]
 800035e:	4630      	mov	r0, r6
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	fab3 f683 	clz	r6, r3
 800036a:	2e00      	cmp	r6, #0
 800036c:	d14a      	bne.n	8000404 <__udivmoddi4+0x1cc>
 800036e:	428b      	cmp	r3, r1
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0x140>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 80b8 	bhi.w	80004e8 <__udivmoddi4+0x2b0>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb61 0103 	sbc.w	r1, r1, r3
 800037e:	2001      	movs	r0, #1
 8000380:	468c      	mov	ip, r1
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0a8      	beq.n	80002d8 <__udivmoddi4+0xa0>
 8000386:	e9c5 4c00 	strd	r4, ip, [r5]
 800038a:	e7a5      	b.n	80002d8 <__udivmoddi4+0xa0>
 800038c:	f1c2 0320 	rsb	r3, r2, #32
 8000390:	fa20 f603 	lsr.w	r6, r0, r3
 8000394:	4097      	lsls	r7, r2
 8000396:	fa01 f002 	lsl.w	r0, r1, r2
 800039a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800039e:	40d9      	lsrs	r1, r3
 80003a0:	4330      	orrs	r0, r6
 80003a2:	0c03      	lsrs	r3, r0, #16
 80003a4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003a8:	fa1f f887 	uxth.w	r8, r7
 80003ac:	fb0e 1116 	mls	r1, lr, r6, r1
 80003b0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b4:	fb06 f108 	mul.w	r1, r6, r8
 80003b8:	4299      	cmp	r1, r3
 80003ba:	fa04 f402 	lsl.w	r4, r4, r2
 80003be:	d909      	bls.n	80003d4 <__udivmoddi4+0x19c>
 80003c0:	18fb      	adds	r3, r7, r3
 80003c2:	f106 3cff 	add.w	ip, r6, #4294967295
 80003c6:	f080 808d 	bcs.w	80004e4 <__udivmoddi4+0x2ac>
 80003ca:	4299      	cmp	r1, r3
 80003cc:	f240 808a 	bls.w	80004e4 <__udivmoddi4+0x2ac>
 80003d0:	3e02      	subs	r6, #2
 80003d2:	443b      	add	r3, r7
 80003d4:	1a5b      	subs	r3, r3, r1
 80003d6:	b281      	uxth	r1, r0
 80003d8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003dc:	fb0e 3310 	mls	r3, lr, r0, r3
 80003e0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003e4:	fb00 f308 	mul.w	r3, r0, r8
 80003e8:	428b      	cmp	r3, r1
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x1c4>
 80003ec:	1879      	adds	r1, r7, r1
 80003ee:	f100 3cff 	add.w	ip, r0, #4294967295
 80003f2:	d273      	bcs.n	80004dc <__udivmoddi4+0x2a4>
 80003f4:	428b      	cmp	r3, r1
 80003f6:	d971      	bls.n	80004dc <__udivmoddi4+0x2a4>
 80003f8:	3802      	subs	r0, #2
 80003fa:	4439      	add	r1, r7
 80003fc:	1acb      	subs	r3, r1, r3
 80003fe:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000402:	e778      	b.n	80002f6 <__udivmoddi4+0xbe>
 8000404:	f1c6 0c20 	rsb	ip, r6, #32
 8000408:	fa03 f406 	lsl.w	r4, r3, r6
 800040c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000410:	431c      	orrs	r4, r3
 8000412:	fa20 f70c 	lsr.w	r7, r0, ip
 8000416:	fa01 f306 	lsl.w	r3, r1, r6
 800041a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800041e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000422:	431f      	orrs	r7, r3
 8000424:	0c3b      	lsrs	r3, r7, #16
 8000426:	fbb1 f9fe 	udiv	r9, r1, lr
 800042a:	fa1f f884 	uxth.w	r8, r4
 800042e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000432:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000436:	fb09 fa08 	mul.w	sl, r9, r8
 800043a:	458a      	cmp	sl, r1
 800043c:	fa02 f206 	lsl.w	r2, r2, r6
 8000440:	fa00 f306 	lsl.w	r3, r0, r6
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x220>
 8000446:	1861      	adds	r1, r4, r1
 8000448:	f109 30ff 	add.w	r0, r9, #4294967295
 800044c:	d248      	bcs.n	80004e0 <__udivmoddi4+0x2a8>
 800044e:	458a      	cmp	sl, r1
 8000450:	d946      	bls.n	80004e0 <__udivmoddi4+0x2a8>
 8000452:	f1a9 0902 	sub.w	r9, r9, #2
 8000456:	4421      	add	r1, r4
 8000458:	eba1 010a 	sub.w	r1, r1, sl
 800045c:	b2bf      	uxth	r7, r7
 800045e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000462:	fb0e 1110 	mls	r1, lr, r0, r1
 8000466:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800046a:	fb00 f808 	mul.w	r8, r0, r8
 800046e:	45b8      	cmp	r8, r7
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x24a>
 8000472:	19e7      	adds	r7, r4, r7
 8000474:	f100 31ff 	add.w	r1, r0, #4294967295
 8000478:	d22e      	bcs.n	80004d8 <__udivmoddi4+0x2a0>
 800047a:	45b8      	cmp	r8, r7
 800047c:	d92c      	bls.n	80004d8 <__udivmoddi4+0x2a0>
 800047e:	3802      	subs	r0, #2
 8000480:	4427      	add	r7, r4
 8000482:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000486:	eba7 0708 	sub.w	r7, r7, r8
 800048a:	fba0 8902 	umull	r8, r9, r0, r2
 800048e:	454f      	cmp	r7, r9
 8000490:	46c6      	mov	lr, r8
 8000492:	4649      	mov	r1, r9
 8000494:	d31a      	bcc.n	80004cc <__udivmoddi4+0x294>
 8000496:	d017      	beq.n	80004c8 <__udivmoddi4+0x290>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x27a>
 800049a:	ebb3 020e 	subs.w	r2, r3, lr
 800049e:	eb67 0701 	sbc.w	r7, r7, r1
 80004a2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004a6:	40f2      	lsrs	r2, r6
 80004a8:	ea4c 0202 	orr.w	r2, ip, r2
 80004ac:	40f7      	lsrs	r7, r6
 80004ae:	e9c5 2700 	strd	r2, r7, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	462e      	mov	r6, r5
 80004bc:	4628      	mov	r0, r5
 80004be:	e70b      	b.n	80002d8 <__udivmoddi4+0xa0>
 80004c0:	4606      	mov	r6, r0
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0x60>
 80004c4:	4618      	mov	r0, r3
 80004c6:	e6fd      	b.n	80002c4 <__udivmoddi4+0x8c>
 80004c8:	4543      	cmp	r3, r8
 80004ca:	d2e5      	bcs.n	8000498 <__udivmoddi4+0x260>
 80004cc:	ebb8 0e02 	subs.w	lr, r8, r2
 80004d0:	eb69 0104 	sbc.w	r1, r9, r4
 80004d4:	3801      	subs	r0, #1
 80004d6:	e7df      	b.n	8000498 <__udivmoddi4+0x260>
 80004d8:	4608      	mov	r0, r1
 80004da:	e7d2      	b.n	8000482 <__udivmoddi4+0x24a>
 80004dc:	4660      	mov	r0, ip
 80004de:	e78d      	b.n	80003fc <__udivmoddi4+0x1c4>
 80004e0:	4681      	mov	r9, r0
 80004e2:	e7b9      	b.n	8000458 <__udivmoddi4+0x220>
 80004e4:	4666      	mov	r6, ip
 80004e6:	e775      	b.n	80003d4 <__udivmoddi4+0x19c>
 80004e8:	4630      	mov	r0, r6
 80004ea:	e74a      	b.n	8000382 <__udivmoddi4+0x14a>
 80004ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f0:	4439      	add	r1, r7
 80004f2:	e713      	b.n	800031c <__udivmoddi4+0xe4>
 80004f4:	3802      	subs	r0, #2
 80004f6:	443c      	add	r4, r7
 80004f8:	e724      	b.n	8000344 <__udivmoddi4+0x10c>
 80004fa:	bf00      	nop

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000500:	b480      	push	{r7}
 8000502:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000504:	f3bf 8f4f 	dsb	sy
}
 8000508:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800050a:	f3bf 8f6f 	isb	sy
}
 800050e:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000510:	4b0d      	ldr	r3, [pc, #52]	; (8000548 <SCB_EnableICache+0x48>)
 8000512:	2200      	movs	r2, #0
 8000514:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000518:	f3bf 8f4f 	dsb	sy
}
 800051c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800051e:	f3bf 8f6f 	isb	sy
}
 8000522:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000524:	4b08      	ldr	r3, [pc, #32]	; (8000548 <SCB_EnableICache+0x48>)
 8000526:	695b      	ldr	r3, [r3, #20]
 8000528:	4a07      	ldr	r2, [pc, #28]	; (8000548 <SCB_EnableICache+0x48>)
 800052a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800052e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000530:	f3bf 8f4f 	dsb	sy
}
 8000534:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000536:	f3bf 8f6f 	isb	sy
}
 800053a:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 800053c:	bf00      	nop
 800053e:	46bd      	mov	sp, r7
 8000540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000544:	4770      	bx	lr
 8000546:	bf00      	nop
 8000548:	e000ed00 	.word	0xe000ed00

0800054c <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 800054c:	b480      	push	{r7}
 800054e:	b085      	sub	sp, #20
 8000550:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000552:	4b1f      	ldr	r3, [pc, #124]	; (80005d0 <SCB_EnableDCache+0x84>)
 8000554:	2200      	movs	r2, #0
 8000556:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800055a:	f3bf 8f4f 	dsb	sy
}
 800055e:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000560:	4b1b      	ldr	r3, [pc, #108]	; (80005d0 <SCB_EnableDCache+0x84>)
 8000562:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000566:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	0b5b      	lsrs	r3, r3, #13
 800056c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000570:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	08db      	lsrs	r3, r3, #3
 8000576:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800057a:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	015a      	lsls	r2, r3, #5
 8000580:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000584:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000586:	68ba      	ldr	r2, [r7, #8]
 8000588:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800058a:	4911      	ldr	r1, [pc, #68]	; (80005d0 <SCB_EnableDCache+0x84>)
 800058c:	4313      	orrs	r3, r2
 800058e:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000592:	68bb      	ldr	r3, [r7, #8]
 8000594:	1e5a      	subs	r2, r3, #1
 8000596:	60ba      	str	r2, [r7, #8]
 8000598:	2b00      	cmp	r3, #0
 800059a:	d1ef      	bne.n	800057c <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 800059c:	68fb      	ldr	r3, [r7, #12]
 800059e:	1e5a      	subs	r2, r3, #1
 80005a0:	60fa      	str	r2, [r7, #12]
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d1e5      	bne.n	8000572 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 80005a6:	f3bf 8f4f 	dsb	sy
}
 80005aa:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80005ac:	4b08      	ldr	r3, [pc, #32]	; (80005d0 <SCB_EnableDCache+0x84>)
 80005ae:	695b      	ldr	r3, [r3, #20]
 80005b0:	4a07      	ldr	r2, [pc, #28]	; (80005d0 <SCB_EnableDCache+0x84>)
 80005b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80005b6:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80005b8:	f3bf 8f4f 	dsb	sy
}
 80005bc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005be:	f3bf 8f6f 	isb	sy
}
 80005c2:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 80005c4:	bf00      	nop
 80005c6:	3714      	adds	r7, #20
 80005c8:	46bd      	mov	sp, r7
 80005ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ce:	4770      	bx	lr
 80005d0:	e000ed00 	.word	0xe000ed00

080005d4 <init_SD>:
/* USER CODE BEGIN 0 */

/******************************* SD CARD HANDLER FUNCTIONS *********************************/

void init_SD()
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
	res = BSP_SD_Init();				// initialize SD stuff
 80005d8:	f004 ffac 	bl	8005534 <BSP_SD_Init>
 80005dc:	4603      	mov	r3, r0
 80005de:	461a      	mov	r2, r3
 80005e0:	4b06      	ldr	r3, [pc, #24]	; (80005fc <init_SD+0x28>)
 80005e2:	701a      	strb	r2, [r3, #0]
	res = f_mount(&SDFatFs, "", 1);		// mount the SD card
 80005e4:	2201      	movs	r2, #1
 80005e6:	4906      	ldr	r1, [pc, #24]	; (8000600 <init_SD+0x2c>)
 80005e8:	4806      	ldr	r0, [pc, #24]	; (8000604 <init_SD+0x30>)
 80005ea:	f007 fa23 	bl	8007a34 <f_mount>
 80005ee:	4603      	mov	r3, r0
 80005f0:	461a      	mov	r2, r3
 80005f2:	4b02      	ldr	r3, [pc, #8]	; (80005fc <init_SD+0x28>)
 80005f4:	701a      	strb	r2, [r3, #0]
}
 80005f6:	bf00      	nop
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	2001fb44 	.word	0x2001fb44
 8000600:	080085d8 	.word	0x080085d8
 8000604:	2000fec4 	.word	0x2000fec4

08000608 <read_BIN_AUDIO>:

void read_BIN_AUDIO(int note)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
	//res = f_open(&myFile, "c5.bin", FA_OPEN_ALWAYS|FA_WRITE|FA_READ);
	res = f_open(&myFile, audio_filenames[note], FA_OPEN_ALWAYS|FA_WRITE|FA_READ);
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	00db      	lsls	r3, r3, #3
 8000614:	4a0e      	ldr	r2, [pc, #56]	; (8000650 <read_BIN_AUDIO+0x48>)
 8000616:	4413      	add	r3, r2
 8000618:	2213      	movs	r2, #19
 800061a:	4619      	mov	r1, r3
 800061c:	480d      	ldr	r0, [pc, #52]	; (8000654 <read_BIN_AUDIO+0x4c>)
 800061e:	f007 fa4f 	bl	8007ac0 <f_open>
 8000622:	4603      	mov	r3, r0
 8000624:	461a      	mov	r2, r3
 8000626:	4b0c      	ldr	r3, [pc, #48]	; (8000658 <read_BIN_AUDIO+0x50>)
 8000628:	701a      	strb	r2, [r3, #0]
	res = f_read(&myFile, DATA_BUFFER, BUFF_SIZE, &bytesRead);
 800062a:	4b0c      	ldr	r3, [pc, #48]	; (800065c <read_BIN_AUDIO+0x54>)
 800062c:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 8000630:	490b      	ldr	r1, [pc, #44]	; (8000660 <read_BIN_AUDIO+0x58>)
 8000632:	4808      	ldr	r0, [pc, #32]	; (8000654 <read_BIN_AUDIO+0x4c>)
 8000634:	f007 fc8e 	bl	8007f54 <f_read>
 8000638:	4603      	mov	r3, r0
 800063a:	461a      	mov	r2, r3
 800063c:	4b06      	ldr	r3, [pc, #24]	; (8000658 <read_BIN_AUDIO+0x50>)
 800063e:	701a      	strb	r2, [r3, #0]
	f_close(&myFile);
 8000640:	4804      	ldr	r0, [pc, #16]	; (8000654 <read_BIN_AUDIO+0x4c>)
 8000642:	f007 fe44 	bl	80082ce <f_close>
}
 8000646:	bf00      	nop
 8000648:	3708      	adds	r7, #8
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	20000000 	.word	0x20000000
 8000654:	2000017c 	.word	0x2000017c
 8000658:	2001fb44 	.word	0x2001fb44
 800065c:	200003ac 	.word	0x200003ac
 8000660:	200100f8 	.word	0x200100f8

08000664 <DAC_OUTPUT>:
pin1	PC6
pin0	PC7
*/

// this function reads DAC_REG and generates corresponding DC voltage level to the DAC
void DAC_OUTPUT(){
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOI, GPIO_PIN_3, !!(DAC_REG & (1<<7)));
 8000668:	4b37      	ldr	r3, [pc, #220]	; (8000748 <DAC_OUTPUT+0xe4>)
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	b25b      	sxtb	r3, r3
 800066e:	b2db      	uxtb	r3, r3
 8000670:	09db      	lsrs	r3, r3, #7
 8000672:	b2db      	uxtb	r3, r3
 8000674:	461a      	mov	r2, r3
 8000676:	2108      	movs	r1, #8
 8000678:	4834      	ldr	r0, [pc, #208]	; (800074c <DAC_OUTPUT+0xe8>)
 800067a:	f001 f8c3 	bl	8001804 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOH, GPIO_PIN_6, !!(DAC_REG & (1<<6)));
 800067e:	4b32      	ldr	r3, [pc, #200]	; (8000748 <DAC_OUTPUT+0xe4>)
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000686:	2b00      	cmp	r3, #0
 8000688:	bf14      	ite	ne
 800068a:	2301      	movne	r3, #1
 800068c:	2300      	moveq	r3, #0
 800068e:	b2db      	uxtb	r3, r3
 8000690:	461a      	mov	r2, r3
 8000692:	2140      	movs	r1, #64	; 0x40
 8000694:	482e      	ldr	r0, [pc, #184]	; (8000750 <DAC_OUTPUT+0xec>)
 8000696:	f001 f8b5 	bl	8001804 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, !!(DAC_REG & (1<<5)));
 800069a:	4b2b      	ldr	r3, [pc, #172]	; (8000748 <DAC_OUTPUT+0xe4>)
 800069c:	781b      	ldrb	r3, [r3, #0]
 800069e:	f003 0320 	and.w	r3, r3, #32
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	bf14      	ite	ne
 80006a6:	2301      	movne	r3, #1
 80006a8:	2300      	moveq	r3, #0
 80006aa:	b2db      	uxtb	r3, r3
 80006ac:	461a      	mov	r2, r3
 80006ae:	2101      	movs	r1, #1
 80006b0:	4826      	ldr	r0, [pc, #152]	; (800074c <DAC_OUTPUT+0xe8>)
 80006b2:	f001 f8a7 	bl	8001804 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7, !!(DAC_REG & (1<<4)));
 80006b6:	4b24      	ldr	r3, [pc, #144]	; (8000748 <DAC_OUTPUT+0xe4>)
 80006b8:	781b      	ldrb	r3, [r3, #0]
 80006ba:	f003 0310 	and.w	r3, r3, #16
 80006be:	2b00      	cmp	r3, #0
 80006c0:	bf14      	ite	ne
 80006c2:	2301      	movne	r3, #1
 80006c4:	2300      	moveq	r3, #0
 80006c6:	b2db      	uxtb	r3, r3
 80006c8:	461a      	mov	r2, r3
 80006ca:	2180      	movs	r1, #128	; 0x80
 80006cc:	4821      	ldr	r0, [pc, #132]	; (8000754 <DAC_OUTPUT+0xf0>)
 80006ce:	f001 f899 	bl	8001804 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, !!(DAC_REG & (1<<3)));
 80006d2:	4b1d      	ldr	r3, [pc, #116]	; (8000748 <DAC_OUTPUT+0xe4>)
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	f003 0308 	and.w	r3, r3, #8
 80006da:	2b00      	cmp	r3, #0
 80006dc:	bf14      	ite	ne
 80006de:	2301      	movne	r3, #1
 80006e0:	2300      	moveq	r3, #0
 80006e2:	b2db      	uxtb	r3, r3
 80006e4:	461a      	mov	r2, r3
 80006e6:	2110      	movs	r1, #16
 80006e8:	481b      	ldr	r0, [pc, #108]	; (8000758 <DAC_OUTPUT+0xf4>)
 80006ea:	f001 f88b 	bl	8001804 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, !!(DAC_REG & (1<<2)));
 80006ee:	4b16      	ldr	r3, [pc, #88]	; (8000748 <DAC_OUTPUT+0xe4>)
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	f003 0304 	and.w	r3, r3, #4
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	bf14      	ite	ne
 80006fa:	2301      	movne	r3, #1
 80006fc:	2300      	moveq	r3, #0
 80006fe:	b2db      	uxtb	r3, r3
 8000700:	461a      	mov	r2, r3
 8000702:	2140      	movs	r1, #64	; 0x40
 8000704:	4813      	ldr	r0, [pc, #76]	; (8000754 <DAC_OUTPUT+0xf0>)
 8000706:	f001 f87d 	bl	8001804 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, !!(DAC_REG & (1<<1)));
 800070a:	4b0f      	ldr	r3, [pc, #60]	; (8000748 <DAC_OUTPUT+0xe4>)
 800070c:	781b      	ldrb	r3, [r3, #0]
 800070e:	f003 0302 	and.w	r3, r3, #2
 8000712:	2b00      	cmp	r3, #0
 8000714:	bf14      	ite	ne
 8000716:	2301      	movne	r3, #1
 8000718:	2300      	moveq	r3, #0
 800071a:	b2db      	uxtb	r3, r3
 800071c:	461a      	mov	r2, r3
 800071e:	2140      	movs	r1, #64	; 0x40
 8000720:	480e      	ldr	r0, [pc, #56]	; (800075c <DAC_OUTPUT+0xf8>)
 8000722:	f001 f86f 	bl	8001804 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, !!(DAC_REG & (1<<0)));
 8000726:	4b08      	ldr	r3, [pc, #32]	; (8000748 <DAC_OUTPUT+0xe4>)
 8000728:	781b      	ldrb	r3, [r3, #0]
 800072a:	f003 0301 	and.w	r3, r3, #1
 800072e:	2b00      	cmp	r3, #0
 8000730:	bf14      	ite	ne
 8000732:	2301      	movne	r3, #1
 8000734:	2300      	moveq	r3, #0
 8000736:	b2db      	uxtb	r3, r3
 8000738:	461a      	mov	r2, r3
 800073a:	2180      	movs	r1, #128	; 0x80
 800073c:	4807      	ldr	r0, [pc, #28]	; (800075c <DAC_OUTPUT+0xf8>)
 800073e:	f001 f861 	bl	8001804 <HAL_GPIO_WritePin>
}
 8000742:	bf00      	nop
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	20000434 	.word	0x20000434
 800074c:	40022000 	.word	0x40022000
 8000750:	40021c00 	.word	0x40021c00
 8000754:	40021800 	.word	0x40021800
 8000758:	40020400 	.word	0x40020400
 800075c:	40020800 	.word	0x40020800

08000760 <update_audio_buffer>:

// starts at the current audio_pointer location and from there keeps adding values of data
// buffer to audio buffer for new tone.
void update_audio_buffer(){
 8000760:	b480      	push	{r7}
 8000762:	b083      	sub	sp, #12
 8000764:	af00      	add	r7, sp, #0
	int idx_audio, idx_data;
	// int scaling_factor = 2;		// scaling factor to make sure value does not overflow
	idx_audio = AUDIO_PTR + 1;	// get current position of audio buffer pointer
 8000766:	4b16      	ldr	r3, [pc, #88]	; (80007c0 <update_audio_buffer+0x60>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	3301      	adds	r3, #1
 800076c:	607b      	str	r3, [r7, #4]
	for (idx_data=0; idx_data<bytesRead; idx_data++){
 800076e:	2300      	movs	r3, #0
 8000770:	603b      	str	r3, [r7, #0]
 8000772:	e019      	b.n	80007a8 <update_audio_buffer+0x48>
		idx_audio = (idx_audio+1) % BUFF_SIZE;
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	3301      	adds	r3, #1
 8000778:	4a12      	ldr	r2, [pc, #72]	; (80007c4 <update_audio_buffer+0x64>)
 800077a:	fb82 1203 	smull	r1, r2, r2, r3
 800077e:	1311      	asrs	r1, r2, #12
 8000780:	17da      	asrs	r2, r3, #31
 8000782:	1a8a      	subs	r2, r1, r2
 8000784:	f44f 417a 	mov.w	r1, #64000	; 0xfa00
 8000788:	fb01 f202 	mul.w	r2, r1, r2
 800078c:	1a9b      	subs	r3, r3, r2
 800078e:	607b      	str	r3, [r7, #4]
		AUDIO_BUFFER[idx_audio]= DATA_BUFFER[idx_data];
 8000790:	4a0d      	ldr	r2, [pc, #52]	; (80007c8 <update_audio_buffer+0x68>)
 8000792:	683b      	ldr	r3, [r7, #0]
 8000794:	4413      	add	r3, r2
 8000796:	7819      	ldrb	r1, [r3, #0]
 8000798:	4a0c      	ldr	r2, [pc, #48]	; (80007cc <update_audio_buffer+0x6c>)
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	4413      	add	r3, r2
 800079e:	460a      	mov	r2, r1
 80007a0:	701a      	strb	r2, [r3, #0]
	for (idx_data=0; idx_data<bytesRead; idx_data++){
 80007a2:	683b      	ldr	r3, [r7, #0]
 80007a4:	3301      	adds	r3, #1
 80007a6:	603b      	str	r3, [r7, #0]
 80007a8:	683a      	ldr	r2, [r7, #0]
 80007aa:	4b09      	ldr	r3, [pc, #36]	; (80007d0 <update_audio_buffer+0x70>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	429a      	cmp	r2, r3
 80007b0:	d3e0      	bcc.n	8000774 <update_audio_buffer+0x14>
	}
}
 80007b2:	bf00      	nop
 80007b4:	bf00      	nop
 80007b6:	370c      	adds	r7, #12
 80007b8:	46bd      	mov	sp, r7
 80007ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007be:	4770      	bx	lr
 80007c0:	2001fb50 	.word	0x2001fb50
 80007c4:	10624dd3 	.word	0x10624dd3
 80007c8:	200100f8 	.word	0x200100f8
 80007cc:	20000438 	.word	0x20000438
 80007d0:	200003ac 	.word	0x200003ac

080007d4 <keyboard_interrupt_handler>:
IDP[3] A3 PF8		INF[3] pin11 PB15
IDP[4] A4 PF7		INF[4] pin12 PB14
IDP[5] A5 PF6		INF[5] pin13 PI1
*/
// reads key press/release information from Arduino DUE
void keyboard_interrupt_handler(){
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
	key_ID[0] = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 80007d8:	2101      	movs	r1, #1
 80007da:	482e      	ldr	r0, [pc, #184]	; (8000894 <keyboard_interrupt_handler+0xc0>)
 80007dc:	f000 fffa 	bl	80017d4 <HAL_GPIO_ReadPin>
 80007e0:	4603      	mov	r3, r0
 80007e2:	461a      	mov	r2, r3
 80007e4:	4b2c      	ldr	r3, [pc, #176]	; (8000898 <keyboard_interrupt_handler+0xc4>)
 80007e6:	701a      	strb	r2, [r3, #0]
	key_ID[1] = HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_10);
 80007e8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007ec:	482b      	ldr	r0, [pc, #172]	; (800089c <keyboard_interrupt_handler+0xc8>)
 80007ee:	f000 fff1 	bl	80017d4 <HAL_GPIO_ReadPin>
 80007f2:	4603      	mov	r3, r0
 80007f4:	461a      	mov	r2, r3
 80007f6:	4b28      	ldr	r3, [pc, #160]	; (8000898 <keyboard_interrupt_handler+0xc4>)
 80007f8:	705a      	strb	r2, [r3, #1]
	key_ID[2] = HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_9);
 80007fa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007fe:	4827      	ldr	r0, [pc, #156]	; (800089c <keyboard_interrupt_handler+0xc8>)
 8000800:	f000 ffe8 	bl	80017d4 <HAL_GPIO_ReadPin>
 8000804:	4603      	mov	r3, r0
 8000806:	461a      	mov	r2, r3
 8000808:	4b23      	ldr	r3, [pc, #140]	; (8000898 <keyboard_interrupt_handler+0xc4>)
 800080a:	709a      	strb	r2, [r3, #2]
	key_ID[3] = HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_8);
 800080c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000810:	4822      	ldr	r0, [pc, #136]	; (800089c <keyboard_interrupt_handler+0xc8>)
 8000812:	f000 ffdf 	bl	80017d4 <HAL_GPIO_ReadPin>
 8000816:	4603      	mov	r3, r0
 8000818:	461a      	mov	r2, r3
 800081a:	4b1f      	ldr	r3, [pc, #124]	; (8000898 <keyboard_interrupt_handler+0xc4>)
 800081c:	70da      	strb	r2, [r3, #3]
	key_ID[4] = HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_7);
 800081e:	2180      	movs	r1, #128	; 0x80
 8000820:	481e      	ldr	r0, [pc, #120]	; (800089c <keyboard_interrupt_handler+0xc8>)
 8000822:	f000 ffd7 	bl	80017d4 <HAL_GPIO_ReadPin>
 8000826:	4603      	mov	r3, r0
 8000828:	461a      	mov	r2, r3
 800082a:	4b1b      	ldr	r3, [pc, #108]	; (8000898 <keyboard_interrupt_handler+0xc4>)
 800082c:	711a      	strb	r2, [r3, #4]
	key_ID[5] = HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_6);
 800082e:	2140      	movs	r1, #64	; 0x40
 8000830:	481a      	ldr	r0, [pc, #104]	; (800089c <keyboard_interrupt_handler+0xc8>)
 8000832:	f000 ffcf 	bl	80017d4 <HAL_GPIO_ReadPin>
 8000836:	4603      	mov	r3, r0
 8000838:	461a      	mov	r2, r3
 800083a:	4b17      	ldr	r3, [pc, #92]	; (8000898 <keyboard_interrupt_handler+0xc4>)
 800083c:	715a      	strb	r2, [r3, #5]

	keypress = (key_ID[5]<<5) + (key_ID[4]<<4) + (key_ID[3]<<3) + (key_ID[2]<<2) + (key_ID[1]<<1) + (key_ID[0]<<0);
 800083e:	4b16      	ldr	r3, [pc, #88]	; (8000898 <keyboard_interrupt_handler+0xc4>)
 8000840:	795b      	ldrb	r3, [r3, #5]
 8000842:	015b      	lsls	r3, r3, #5
 8000844:	b2da      	uxtb	r2, r3
 8000846:	4b14      	ldr	r3, [pc, #80]	; (8000898 <keyboard_interrupt_handler+0xc4>)
 8000848:	791b      	ldrb	r3, [r3, #4]
 800084a:	011b      	lsls	r3, r3, #4
 800084c:	b2db      	uxtb	r3, r3
 800084e:	4413      	add	r3, r2
 8000850:	b2da      	uxtb	r2, r3
 8000852:	4b11      	ldr	r3, [pc, #68]	; (8000898 <keyboard_interrupt_handler+0xc4>)
 8000854:	78db      	ldrb	r3, [r3, #3]
 8000856:	00db      	lsls	r3, r3, #3
 8000858:	b2db      	uxtb	r3, r3
 800085a:	4413      	add	r3, r2
 800085c:	b2da      	uxtb	r2, r3
 800085e:	4b0e      	ldr	r3, [pc, #56]	; (8000898 <keyboard_interrupt_handler+0xc4>)
 8000860:	789b      	ldrb	r3, [r3, #2]
 8000862:	009b      	lsls	r3, r3, #2
 8000864:	b2db      	uxtb	r3, r3
 8000866:	4413      	add	r3, r2
 8000868:	b2da      	uxtb	r2, r3
 800086a:	4b0b      	ldr	r3, [pc, #44]	; (8000898 <keyboard_interrupt_handler+0xc4>)
 800086c:	785b      	ldrb	r3, [r3, #1]
 800086e:	005b      	lsls	r3, r3, #1
 8000870:	b2db      	uxtb	r3, r3
 8000872:	4413      	add	r3, r2
 8000874:	b2da      	uxtb	r2, r3
 8000876:	4b08      	ldr	r3, [pc, #32]	; (8000898 <keyboard_interrupt_handler+0xc4>)
 8000878:	781b      	ldrb	r3, [r3, #0]
 800087a:	4413      	add	r3, r2
 800087c:	b2da      	uxtb	r2, r3
 800087e:	4b08      	ldr	r3, [pc, #32]	; (80008a0 <keyboard_interrupt_handler+0xcc>)
 8000880:	701a      	strb	r2, [r3, #0]
//	key_info[2] = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8);
//	key_info[3] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15);
//	key_info[4] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14);
//	key_info[5] = HAL_GPIO_ReadPin(GPIOI, GPIO_PIN_1);

	read_BIN_AUDIO(keypress);	// read the corresponding audio file from SD card and save to data buffer
 8000882:	4b07      	ldr	r3, [pc, #28]	; (80008a0 <keyboard_interrupt_handler+0xcc>)
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	4618      	mov	r0, r3
 8000888:	f7ff febe 	bl	8000608 <read_BIN_AUDIO>
	update_audio_buffer();		// add the tone to the audio buffer
 800088c:	f7ff ff68 	bl	8000760 <update_audio_buffer>

}
 8000890:	bf00      	nop
 8000892:	bd80      	pop	{r7, pc}
 8000894:	40020000 	.word	0x40020000
 8000898:	2001fb48 	.word	0x2001fb48
 800089c:	40021400 	.word	0x40021400
 80008a0:	2001fb4e 	.word	0x2001fb4e

080008a4 <init_audio_buffer>:

/******************************* AUDIO HANDLER FUNCTIONS *********************************/

// initializing the audio buffer to all values = 127 (mid value of DAC)
void init_audio_buffer()
{
 80008a4:	b480      	push	{r7}
 80008a6:	b083      	sub	sp, #12
 80008a8:	af00      	add	r7, sp, #0
	int idx;
	for (idx=0; idx<BUFF_SIZE; idx++){
 80008aa:	2300      	movs	r3, #0
 80008ac:	607b      	str	r3, [r7, #4]
 80008ae:	e007      	b.n	80008c0 <init_audio_buffer+0x1c>
		AUDIO_BUFFER[idx] = 127;
 80008b0:	4a09      	ldr	r2, [pc, #36]	; (80008d8 <init_audio_buffer+0x34>)
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	4413      	add	r3, r2
 80008b6:	227f      	movs	r2, #127	; 0x7f
 80008b8:	701a      	strb	r2, [r3, #0]
	for (idx=0; idx<BUFF_SIZE; idx++){
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	3301      	adds	r3, #1
 80008be:	607b      	str	r3, [r7, #4]
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	f5b3 4f7a 	cmp.w	r3, #64000	; 0xfa00
 80008c6:	dbf3      	blt.n	80008b0 <init_audio_buffer+0xc>
	}
}
 80008c8:	bf00      	nop
 80008ca:	bf00      	nop
 80008cc:	370c      	adds	r7, #12
 80008ce:	46bd      	mov	sp, r7
 80008d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d4:	4770      	bx	lr
 80008d6:	bf00      	nop
 80008d8:	20000438 	.word	0x20000438

080008dc <HAL_TIM_PeriodElapsedCallback>:

// Timer interrupt service routine, regularly reads a value from the audio
// buffer at the sampling frequency and outputs the sample via DAC
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b082      	sub	sp, #8
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
	AUDIO_PTR = (AUDIO_PTR+1) % BUFF_SIZE;
 80008e4:	4b10      	ldr	r3, [pc, #64]	; (8000928 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	1c5a      	adds	r2, r3, #1
 80008ea:	4b10      	ldr	r3, [pc, #64]	; (800092c <HAL_TIM_PeriodElapsedCallback+0x50>)
 80008ec:	fb83 1302 	smull	r1, r3, r3, r2
 80008f0:	1319      	asrs	r1, r3, #12
 80008f2:	17d3      	asrs	r3, r2, #31
 80008f4:	1acb      	subs	r3, r1, r3
 80008f6:	f44f 417a 	mov.w	r1, #64000	; 0xfa00
 80008fa:	fb01 f303 	mul.w	r3, r1, r3
 80008fe:	1ad3      	subs	r3, r2, r3
 8000900:	4a09      	ldr	r2, [pc, #36]	; (8000928 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000902:	6013      	str	r3, [r2, #0]

	DAC_REG = AUDIO_BUFFER[AUDIO_PTR];
 8000904:	4b08      	ldr	r3, [pc, #32]	; (8000928 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	4a09      	ldr	r2, [pc, #36]	; (8000930 <HAL_TIM_PeriodElapsedCallback+0x54>)
 800090a:	5cd2      	ldrb	r2, [r2, r3]
 800090c:	4b09      	ldr	r3, [pc, #36]	; (8000934 <HAL_TIM_PeriodElapsedCallback+0x58>)
 800090e:	701a      	strb	r2, [r3, #0]
	AUDIO_BUFFER[AUDIO_PTR] = 127;		// after reading a sample, reset it
 8000910:	4b05      	ldr	r3, [pc, #20]	; (8000928 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4a06      	ldr	r2, [pc, #24]	; (8000930 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000916:	217f      	movs	r1, #127	; 0x7f
 8000918:	54d1      	strb	r1, [r2, r3]

	DAC_OUTPUT();
 800091a:	f7ff fea3 	bl	8000664 <DAC_OUTPUT>
}
 800091e:	bf00      	nop
 8000920:	3708      	adds	r7, #8
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	2001fb50 	.word	0x2001fb50
 800092c:	10624dd3 	.word	0x10624dd3
 8000930:	20000438 	.word	0x20000438
 8000934:	20000434 	.word	0x20000434

08000938 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 800093c:	f7ff fde0 	bl	8000500 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8000940:	f7ff fe04 	bl	800054c <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000944:	f000 fbf8 	bl	8001138 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000948:	f000 f814 	bl	8000974 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800094c:	f000 f952 	bl	8000bf4 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000950:	f000 f8d4 	bl	8000afc <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000954:	f000 f91e 	bl	8000b94 <MX_USART1_UART_Init>
  MX_SDMMC1_SD_Init();
 8000958:	f000 f8b0 	bl	8000abc <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 800095c:	f004 fdd0 	bl	8005500 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  init_audio_buffer();
 8000960:	f7ff ffa0 	bl	80008a4 <init_audio_buffer>

  init_SD();
 8000964:	f7ff fe36 	bl	80005d4 <init_SD>
  // read_BIN_AUDIO(0);
  // umount_SD();

  HAL_TIM_Base_Start_IT(&htim2);	// initialize timer counter interrupt for audio sample rate
 8000968:	4801      	ldr	r0, [pc, #4]	; (8000970 <main+0x38>)
 800096a:	f003 f827 	bl	80039bc <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800096e:	e7fe      	b.n	800096e <main+0x36>
 8000970:	2001faf8 	.word	0x2001faf8

08000974 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b0b4      	sub	sp, #208	; 0xd0
 8000978:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800097a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800097e:	2230      	movs	r2, #48	; 0x30
 8000980:	2100      	movs	r1, #0
 8000982:	4618      	mov	r0, r3
 8000984:	f007 fe14 	bl	80085b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000988:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800098c:	2200      	movs	r2, #0
 800098e:	601a      	str	r2, [r3, #0]
 8000990:	605a      	str	r2, [r3, #4]
 8000992:	609a      	str	r2, [r3, #8]
 8000994:	60da      	str	r2, [r3, #12]
 8000996:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000998:	f107 0308 	add.w	r3, r7, #8
 800099c:	2284      	movs	r2, #132	; 0x84
 800099e:	2100      	movs	r1, #0
 80009a0:	4618      	mov	r0, r3
 80009a2:	f007 fe05 	bl	80085b0 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009a6:	4b42      	ldr	r3, [pc, #264]	; (8000ab0 <SystemClock_Config+0x13c>)
 80009a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009aa:	4a41      	ldr	r2, [pc, #260]	; (8000ab0 <SystemClock_Config+0x13c>)
 80009ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009b0:	6413      	str	r3, [r2, #64]	; 0x40
 80009b2:	4b3f      	ldr	r3, [pc, #252]	; (8000ab0 <SystemClock_Config+0x13c>)
 80009b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ba:	607b      	str	r3, [r7, #4]
 80009bc:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009be:	4b3d      	ldr	r3, [pc, #244]	; (8000ab4 <SystemClock_Config+0x140>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	4a3c      	ldr	r2, [pc, #240]	; (8000ab4 <SystemClock_Config+0x140>)
 80009c4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80009c8:	6013      	str	r3, [r2, #0]
 80009ca:	4b3a      	ldr	r3, [pc, #232]	; (8000ab4 <SystemClock_Config+0x140>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009d2:	603b      	str	r3, [r7, #0]
 80009d4:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009d6:	2301      	movs	r3, #1
 80009d8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009e0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009e4:	2302      	movs	r3, #2
 80009e6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009ea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80009ee:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 12;
 80009f2:	230c      	movs	r3, #12
 80009f4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 192;
 80009f8:	23c0      	movs	r3, #192	; 0xc0
 80009fa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009fe:	2302      	movs	r3, #2
 8000a00:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000a04:	2309      	movs	r3, #9
 8000a06:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a0a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f000 ff86 	bl	8001920 <HAL_RCC_OscConfig>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000a1a:	f000 fa13 	bl	8000e44 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000a1e:	f000 ff2f 	bl	8001880 <HAL_PWREx_EnableOverDrive>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d001      	beq.n	8000a2c <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000a28:	f000 fa0c 	bl	8000e44 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a2c:	230f      	movs	r3, #15
 8000a2e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a32:	2302      	movs	r3, #2
 8000a34:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a3e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a42:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a4a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000a4e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000a52:	2106      	movs	r1, #6
 8000a54:	4618      	mov	r0, r3
 8000a56:	f001 fa07 	bl	8001e68 <HAL_RCC_ClockConfig>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <SystemClock_Config+0xf0>
  {
    Error_Handler();
 8000a60:	f000 f9f0 	bl	8000e44 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_SDMMC1
 8000a64:	4b14      	ldr	r3, [pc, #80]	; (8000ab8 <SystemClock_Config+0x144>)
 8000a66:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8000a68:	2332      	movs	r3, #50	; 0x32
 8000a6a:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8000a6c:	2305      	movs	r3, #5
 8000a6e:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8000a70:	2302      	movs	r3, #2
 8000a72:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV4;
 8000a74:	2301      	movs	r3, #1
 8000a76:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8000a78:	2301      	movs	r3, #1
 8000a7a:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000a7c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000a80:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000a82:	2300      	movs	r3, #0
 8000a84:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8000a86:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000a8a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a94:	f107 0308 	add.w	r3, r7, #8
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f001 fbbb 	bl	8002214 <HAL_RCCEx_PeriphCLKConfig>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <SystemClock_Config+0x134>
  {
    Error_Handler();
 8000aa4:	f000 f9ce 	bl	8000e44 <Error_Handler>
  }
}
 8000aa8:	bf00      	nop
 8000aaa:	37d0      	adds	r7, #208	; 0xd0
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	40023800 	.word	0x40023800
 8000ab4:	40007000 	.word	0x40007000
 8000ab8:	00a00040 	.word	0x00a00040

08000abc <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000ac0:	4b0c      	ldr	r3, [pc, #48]	; (8000af4 <MX_SDMMC1_SD_Init+0x38>)
 8000ac2:	4a0d      	ldr	r2, [pc, #52]	; (8000af8 <MX_SDMMC1_SD_Init+0x3c>)
 8000ac4:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000ac6:	4b0b      	ldr	r3, [pc, #44]	; (8000af4 <MX_SDMMC1_SD_Init+0x38>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8000acc:	4b09      	ldr	r3, [pc, #36]	; (8000af4 <MX_SDMMC1_SD_Init+0x38>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000ad2:	4b08      	ldr	r3, [pc, #32]	; (8000af4 <MX_SDMMC1_SD_Init+0x38>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8000ad8:	4b06      	ldr	r3, [pc, #24]	; (8000af4 <MX_SDMMC1_SD_Init+0x38>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000ade:	4b05      	ldr	r3, [pc, #20]	; (8000af4 <MX_SDMMC1_SD_Init+0x38>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8000ae4:	4b03      	ldr	r3, [pc, #12]	; (8000af4 <MX_SDMMC1_SD_Init+0x38>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000aea:	bf00      	nop
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr
 8000af4:	200003b0 	.word	0x200003b0
 8000af8:	40012c00 	.word	0x40012c00

08000afc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b088      	sub	sp, #32
 8000b00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b02:	f107 0310 	add.w	r3, r7, #16
 8000b06:	2200      	movs	r2, #0
 8000b08:	601a      	str	r2, [r3, #0]
 8000b0a:	605a      	str	r2, [r3, #4]
 8000b0c:	609a      	str	r2, [r3, #8]
 8000b0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b10:	1d3b      	adds	r3, r7, #4
 8000b12:	2200      	movs	r2, #0
 8000b14:	601a      	str	r2, [r3, #0]
 8000b16:	605a      	str	r2, [r3, #4]
 8000b18:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b1a:	4b1d      	ldr	r3, [pc, #116]	; (8000b90 <MX_TIM2_Init+0x94>)
 8000b1c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b20:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100;
 8000b22:	4b1b      	ldr	r3, [pc, #108]	; (8000b90 <MX_TIM2_Init+0x94>)
 8000b24:	2264      	movs	r2, #100	; 0x64
 8000b26:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b28:	4b19      	ldr	r3, [pc, #100]	; (8000b90 <MX_TIM2_Init+0x94>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 124;
 8000b2e:	4b18      	ldr	r3, [pc, #96]	; (8000b90 <MX_TIM2_Init+0x94>)
 8000b30:	227c      	movs	r2, #124	; 0x7c
 8000b32:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b34:	4b16      	ldr	r3, [pc, #88]	; (8000b90 <MX_TIM2_Init+0x94>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b3a:	4b15      	ldr	r3, [pc, #84]	; (8000b90 <MX_TIM2_Init+0x94>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b40:	4813      	ldr	r0, [pc, #76]	; (8000b90 <MX_TIM2_Init+0x94>)
 8000b42:	f002 fee3 	bl	800390c <HAL_TIM_Base_Init>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000b4c:	f000 f97a 	bl	8000e44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b54:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b56:	f107 0310 	add.w	r3, r7, #16
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	480c      	ldr	r0, [pc, #48]	; (8000b90 <MX_TIM2_Init+0x94>)
 8000b5e:	f003 f8c5 	bl	8003cec <HAL_TIM_ConfigClockSource>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000b68:	f000 f96c 	bl	8000e44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000b6c:	2320      	movs	r3, #32
 8000b6e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b70:	2300      	movs	r3, #0
 8000b72:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b74:	1d3b      	adds	r3, r7, #4
 8000b76:	4619      	mov	r1, r3
 8000b78:	4805      	ldr	r0, [pc, #20]	; (8000b90 <MX_TIM2_Init+0x94>)
 8000b7a:	f003 fadf 	bl	800413c <HAL_TIMEx_MasterConfigSynchronization>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000b84:	f000 f95e 	bl	8000e44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000b88:	bf00      	nop
 8000b8a:	3720      	adds	r7, #32
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	2001faf8 	.word	0x2001faf8

08000b94 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b98:	4b14      	ldr	r3, [pc, #80]	; (8000bec <MX_USART1_UART_Init+0x58>)
 8000b9a:	4a15      	ldr	r2, [pc, #84]	; (8000bf0 <MX_USART1_UART_Init+0x5c>)
 8000b9c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000b9e:	4b13      	ldr	r3, [pc, #76]	; (8000bec <MX_USART1_UART_Init+0x58>)
 8000ba0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000ba4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ba6:	4b11      	ldr	r3, [pc, #68]	; (8000bec <MX_USART1_UART_Init+0x58>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000bac:	4b0f      	ldr	r3, [pc, #60]	; (8000bec <MX_USART1_UART_Init+0x58>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000bb2:	4b0e      	ldr	r3, [pc, #56]	; (8000bec <MX_USART1_UART_Init+0x58>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000bb8:	4b0c      	ldr	r3, [pc, #48]	; (8000bec <MX_USART1_UART_Init+0x58>)
 8000bba:	220c      	movs	r2, #12
 8000bbc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bbe:	4b0b      	ldr	r3, [pc, #44]	; (8000bec <MX_USART1_UART_Init+0x58>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bc4:	4b09      	ldr	r3, [pc, #36]	; (8000bec <MX_USART1_UART_Init+0x58>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bca:	4b08      	ldr	r3, [pc, #32]	; (8000bec <MX_USART1_UART_Init+0x58>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bd0:	4b06      	ldr	r3, [pc, #24]	; (8000bec <MX_USART1_UART_Init+0x58>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000bd6:	4805      	ldr	r0, [pc, #20]	; (8000bec <MX_USART1_UART_Init+0x58>)
 8000bd8:	f003 fb5c 	bl	8004294 <HAL_UART_Init>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000be2:	f000 f92f 	bl	8000e44 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000be6:	bf00      	nop
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	2000fe38 	.word	0x2000fe38
 8000bf0:	40011000 	.word	0x40011000

08000bf4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b08e      	sub	sp, #56	; 0x38
 8000bf8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bfa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bfe:	2200      	movs	r2, #0
 8000c00:	601a      	str	r2, [r3, #0]
 8000c02:	605a      	str	r2, [r3, #4]
 8000c04:	609a      	str	r2, [r3, #8]
 8000c06:	60da      	str	r2, [r3, #12]
 8000c08:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c0a:	4b85      	ldr	r3, [pc, #532]	; (8000e20 <MX_GPIO_Init+0x22c>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0e:	4a84      	ldr	r2, [pc, #528]	; (8000e20 <MX_GPIO_Init+0x22c>)
 8000c10:	f043 0302 	orr.w	r3, r3, #2
 8000c14:	6313      	str	r3, [r2, #48]	; 0x30
 8000c16:	4b82      	ldr	r3, [pc, #520]	; (8000e20 <MX_GPIO_Init+0x22c>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1a:	f003 0302 	and.w	r3, r3, #2
 8000c1e:	623b      	str	r3, [r7, #32]
 8000c20:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c22:	4b7f      	ldr	r3, [pc, #508]	; (8000e20 <MX_GPIO_Init+0x22c>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c26:	4a7e      	ldr	r2, [pc, #504]	; (8000e20 <MX_GPIO_Init+0x22c>)
 8000c28:	f043 0304 	orr.w	r3, r3, #4
 8000c2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c2e:	4b7c      	ldr	r3, [pc, #496]	; (8000e20 <MX_GPIO_Init+0x22c>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c32:	f003 0304 	and.w	r3, r3, #4
 8000c36:	61fb      	str	r3, [r7, #28]
 8000c38:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c3a:	4b79      	ldr	r3, [pc, #484]	; (8000e20 <MX_GPIO_Init+0x22c>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3e:	4a78      	ldr	r2, [pc, #480]	; (8000e20 <MX_GPIO_Init+0x22c>)
 8000c40:	f043 0301 	orr.w	r3, r3, #1
 8000c44:	6313      	str	r3, [r2, #48]	; 0x30
 8000c46:	4b76      	ldr	r3, [pc, #472]	; (8000e20 <MX_GPIO_Init+0x22c>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4a:	f003 0301 	and.w	r3, r3, #1
 8000c4e:	61bb      	str	r3, [r7, #24]
 8000c50:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000c52:	4b73      	ldr	r3, [pc, #460]	; (8000e20 <MX_GPIO_Init+0x22c>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c56:	4a72      	ldr	r2, [pc, #456]	; (8000e20 <MX_GPIO_Init+0x22c>)
 8000c58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c5e:	4b70      	ldr	r3, [pc, #448]	; (8000e20 <MX_GPIO_Init+0x22c>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c66:	617b      	str	r3, [r7, #20]
 8000c68:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c6a:	4b6d      	ldr	r3, [pc, #436]	; (8000e20 <MX_GPIO_Init+0x22c>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6e:	4a6c      	ldr	r2, [pc, #432]	; (8000e20 <MX_GPIO_Init+0x22c>)
 8000c70:	f043 0308 	orr.w	r3, r3, #8
 8000c74:	6313      	str	r3, [r2, #48]	; 0x30
 8000c76:	4b6a      	ldr	r3, [pc, #424]	; (8000e20 <MX_GPIO_Init+0x22c>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7a:	f003 0308 	and.w	r3, r3, #8
 8000c7e:	613b      	str	r3, [r7, #16]
 8000c80:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c82:	4b67      	ldr	r3, [pc, #412]	; (8000e20 <MX_GPIO_Init+0x22c>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c86:	4a66      	ldr	r2, [pc, #408]	; (8000e20 <MX_GPIO_Init+0x22c>)
 8000c88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c8e:	4b64      	ldr	r3, [pc, #400]	; (8000e20 <MX_GPIO_Init+0x22c>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c96:	60fb      	str	r3, [r7, #12]
 8000c98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c9a:	4b61      	ldr	r3, [pc, #388]	; (8000e20 <MX_GPIO_Init+0x22c>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9e:	4a60      	ldr	r2, [pc, #384]	; (8000e20 <MX_GPIO_Init+0x22c>)
 8000ca0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ca4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ca6:	4b5e      	ldr	r3, [pc, #376]	; (8000e20 <MX_GPIO_Init+0x22c>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000caa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000cae:	60bb      	str	r3, [r7, #8]
 8000cb0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000cb2:	4b5b      	ldr	r3, [pc, #364]	; (8000e20 <MX_GPIO_Init+0x22c>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb6:	4a5a      	ldr	r2, [pc, #360]	; (8000e20 <MX_GPIO_Init+0x22c>)
 8000cb8:	f043 0320 	orr.w	r3, r3, #32
 8000cbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cbe:	4b58      	ldr	r3, [pc, #352]	; (8000e20 <MX_GPIO_Init+0x22c>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc2:	f003 0320 	and.w	r3, r3, #32
 8000cc6:	607b      	str	r3, [r7, #4]
 8000cc8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2110      	movs	r1, #16
 8000cce:	4855      	ldr	r0, [pc, #340]	; (8000e24 <MX_GPIO_Init+0x230>)
 8000cd0:	f000 fd98 	bl	8001804 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_3|GPIO_PIN_0, GPIO_PIN_RESET);
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	2109      	movs	r1, #9
 8000cd8:	4853      	ldr	r0, [pc, #332]	; (8000e28 <MX_GPIO_Init+0x234>)
 8000cda:	f000 fd93 	bl	8001804 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7|GPIO_PIN_6, GPIO_PIN_RESET);
 8000cde:	2200      	movs	r2, #0
 8000ce0:	21c0      	movs	r1, #192	; 0xc0
 8000ce2:	4852      	ldr	r0, [pc, #328]	; (8000e2c <MX_GPIO_Init+0x238>)
 8000ce4:	f000 fd8e 	bl	8001804 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7|GPIO_PIN_6, GPIO_PIN_RESET);
 8000ce8:	2200      	movs	r2, #0
 8000cea:	21c0      	movs	r1, #192	; 0xc0
 8000cec:	4850      	ldr	r0, [pc, #320]	; (8000e30 <MX_GPIO_Init+0x23c>)
 8000cee:	f000 fd89 	bl	8001804 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_6, GPIO_PIN_RESET);
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	2140      	movs	r1, #64	; 0x40
 8000cf6:	484f      	ldr	r0, [pc, #316]	; (8000e34 <MX_GPIO_Init+0x240>)
 8000cf8:	f000 fd84 	bl	8001804 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000cfc:	2310      	movs	r3, #16
 8000cfe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d00:	2301      	movs	r3, #1
 8000d02:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d04:	2300      	movs	r3, #0
 8000d06:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d10:	4619      	mov	r1, r3
 8000d12:	4844      	ldr	r0, [pc, #272]	; (8000e24 <MX_GPIO_Init+0x230>)
 8000d14:	f000 fbb2 	bl	800147c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA15 PA8 PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_0;
 8000d18:	f248 1301 	movw	r3, #33025	; 0x8101
 8000d1c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d22:	2300      	movs	r3, #0
 8000d24:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	4842      	ldr	r0, [pc, #264]	; (8000e38 <MX_GPIO_Init+0x244>)
 8000d2e:	f000 fba5 	bl	800147c <HAL_GPIO_Init>

  /*Configure GPIO pins : PI3 PI0 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_0;
 8000d32:	2309      	movs	r3, #9
 8000d34:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d36:	2301      	movs	r3, #1
 8000d38:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000d42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d46:	4619      	mov	r1, r3
 8000d48:	4837      	ldr	r0, [pc, #220]	; (8000e28 <MX_GPIO_Init+0x234>)
 8000d4a:	f000 fb97 	bl	800147c <HAL_GPIO_Init>

  /*Configure GPIO pin : PI2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000d4e:	2304      	movs	r3, #4
 8000d50:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d52:	4b3a      	ldr	r3, [pc, #232]	; (8000e3c <MX_GPIO_Init+0x248>)
 8000d54:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d56:	2300      	movs	r3, #0
 8000d58:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000d5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d5e:	4619      	mov	r1, r3
 8000d60:	4831      	ldr	r0, [pc, #196]	; (8000e28 <MX_GPIO_Init+0x234>)
 8000d62:	f000 fb8b 	bl	800147c <HAL_GPIO_Init>

  /*Configure GPIO pin : PI1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000d66:	2302      	movs	r3, #2
 8000d68:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000d72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d76:	4619      	mov	r1, r3
 8000d78:	482b      	ldr	r0, [pc, #172]	; (8000e28 <MX_GPIO_Init+0x234>)
 8000d7a:	f000 fb7f 	bl	800147c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC7 PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8000d7e:	23c0      	movs	r3, #192	; 0xc0
 8000d80:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d82:	2301      	movs	r3, #1
 8000d84:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d86:	2300      	movs	r3, #0
 8000d88:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d92:	4619      	mov	r1, r3
 8000d94:	4825      	ldr	r0, [pc, #148]	; (8000e2c <MX_GPIO_Init+0x238>)
 8000d96:	f000 fb71 	bl	800147c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG7 PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8000d9a:	23c0      	movs	r3, #192	; 0xc0
 8000d9c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da2:	2300      	movs	r3, #0
 8000da4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da6:	2300      	movs	r3, #0
 8000da8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000daa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dae:	4619      	mov	r1, r3
 8000db0:	481f      	ldr	r0, [pc, #124]	; (8000e30 <MX_GPIO_Init+0x23c>)
 8000db2:	f000 fb63 	bl	800147c <HAL_GPIO_Init>

  /*Configure GPIO pins : PF7 PF6 PF10 PF9
                           PF8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_10|GPIO_PIN_9
 8000db6:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8000dba:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000dc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dc8:	4619      	mov	r1, r3
 8000dca:	481d      	ldr	r0, [pc, #116]	; (8000e40 <MX_GPIO_Init+0x24c>)
 8000dcc:	f000 fb56 	bl	800147c <HAL_GPIO_Init>

  /*Configure GPIO pin : PH6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000dd0:	2340      	movs	r3, #64	; 0x40
 8000dd2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000de0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000de4:	4619      	mov	r1, r3
 8000de6:	4813      	ldr	r0, [pc, #76]	; (8000e34 <MX_GPIO_Init+0x240>)
 8000de8:	f000 fb48 	bl	800147c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000dec:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000df0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000df2:	2300      	movs	r3, #0
 8000df4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df6:	2300      	movs	r3, #0
 8000df8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dfa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dfe:	4619      	mov	r1, r3
 8000e00:	4808      	ldr	r0, [pc, #32]	; (8000e24 <MX_GPIO_Init+0x230>)
 8000e02:	f000 fb3b 	bl	800147c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000e06:	2200      	movs	r2, #0
 8000e08:	2100      	movs	r1, #0
 8000e0a:	2008      	movs	r0, #8
 8000e0c:	f000 faff 	bl	800140e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000e10:	2008      	movs	r0, #8
 8000e12:	f000 fb18 	bl	8001446 <HAL_NVIC_EnableIRQ>

}
 8000e16:	bf00      	nop
 8000e18:	3738      	adds	r7, #56	; 0x38
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	40023800 	.word	0x40023800
 8000e24:	40020400 	.word	0x40020400
 8000e28:	40022000 	.word	0x40022000
 8000e2c:	40020800 	.word	0x40020800
 8000e30:	40021800 	.word	0x40021800
 8000e34:	40021c00 	.word	0x40021c00
 8000e38:	40020000 	.word	0x40020000
 8000e3c:	10110000 	.word	0x10110000
 8000e40:	40021400 	.word	0x40021400

08000e44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000e48:	b672      	cpsid	i
}
 8000e4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e4c:	e7fe      	b.n	8000e4c <Error_Handler+0x8>
	...

08000e50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000e56:	4b12      	ldr	r3, [pc, #72]	; (8000ea0 <HAL_MspInit+0x50>)
 8000e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e5a:	4a11      	ldr	r2, [pc, #68]	; (8000ea0 <HAL_MspInit+0x50>)
 8000e5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e60:	6413      	str	r3, [r2, #64]	; 0x40
 8000e62:	4b0f      	ldr	r3, [pc, #60]	; (8000ea0 <HAL_MspInit+0x50>)
 8000e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e6a:	607b      	str	r3, [r7, #4]
 8000e6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e6e:	4b0c      	ldr	r3, [pc, #48]	; (8000ea0 <HAL_MspInit+0x50>)
 8000e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e72:	4a0b      	ldr	r2, [pc, #44]	; (8000ea0 <HAL_MspInit+0x50>)
 8000e74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e78:	6453      	str	r3, [r2, #68]	; 0x44
 8000e7a:	4b09      	ldr	r3, [pc, #36]	; (8000ea0 <HAL_MspInit+0x50>)
 8000e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e82:	603b      	str	r3, [r7, #0]
 8000e84:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8000e86:	2200      	movs	r2, #0
 8000e88:	2100      	movs	r1, #0
 8000e8a:	2005      	movs	r0, #5
 8000e8c:	f000 fabf 	bl	800140e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8000e90:	2005      	movs	r0, #5
 8000e92:	f000 fad8 	bl	8001446 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e96:	bf00      	nop
 8000e98:	3708      	adds	r7, #8
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	40023800 	.word	0x40023800

08000ea4 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b08a      	sub	sp, #40	; 0x28
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eac:	f107 0314 	add.w	r3, r7, #20
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	601a      	str	r2, [r3, #0]
 8000eb4:	605a      	str	r2, [r3, #4]
 8000eb6:	609a      	str	r2, [r3, #8]
 8000eb8:	60da      	str	r2, [r3, #12]
 8000eba:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a25      	ldr	r2, [pc, #148]	; (8000f58 <HAL_SD_MspInit+0xb4>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d144      	bne.n	8000f50 <HAL_SD_MspInit+0xac>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8000ec6:	4b25      	ldr	r3, [pc, #148]	; (8000f5c <HAL_SD_MspInit+0xb8>)
 8000ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eca:	4a24      	ldr	r2, [pc, #144]	; (8000f5c <HAL_SD_MspInit+0xb8>)
 8000ecc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000ed0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ed2:	4b22      	ldr	r3, [pc, #136]	; (8000f5c <HAL_SD_MspInit+0xb8>)
 8000ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ed6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000eda:	613b      	str	r3, [r7, #16]
 8000edc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ede:	4b1f      	ldr	r3, [pc, #124]	; (8000f5c <HAL_SD_MspInit+0xb8>)
 8000ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee2:	4a1e      	ldr	r2, [pc, #120]	; (8000f5c <HAL_SD_MspInit+0xb8>)
 8000ee4:	f043 0304 	orr.w	r3, r3, #4
 8000ee8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eea:	4b1c      	ldr	r3, [pc, #112]	; (8000f5c <HAL_SD_MspInit+0xb8>)
 8000eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eee:	f003 0304 	and.w	r3, r3, #4
 8000ef2:	60fb      	str	r3, [r7, #12]
 8000ef4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ef6:	4b19      	ldr	r3, [pc, #100]	; (8000f5c <HAL_SD_MspInit+0xb8>)
 8000ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efa:	4a18      	ldr	r2, [pc, #96]	; (8000f5c <HAL_SD_MspInit+0xb8>)
 8000efc:	f043 0308 	orr.w	r3, r3, #8
 8000f00:	6313      	str	r3, [r2, #48]	; 0x30
 8000f02:	4b16      	ldr	r3, [pc, #88]	; (8000f5c <HAL_SD_MspInit+0xb8>)
 8000f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f06:	f003 0308 	and.w	r3, r3, #8
 8000f0a:	60bb      	str	r3, [r7, #8]
 8000f0c:	68bb      	ldr	r3, [r7, #8]
    /**SDMMC1 GPIO Configuration
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_8;
 8000f0e:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 8000f12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f14:	2302      	movs	r3, #2
 8000f16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f1c:	2303      	movs	r3, #3
 8000f1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000f20:	230c      	movs	r3, #12
 8000f22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f24:	f107 0314 	add.w	r3, r7, #20
 8000f28:	4619      	mov	r1, r3
 8000f2a:	480d      	ldr	r0, [pc, #52]	; (8000f60 <HAL_SD_MspInit+0xbc>)
 8000f2c:	f000 faa6 	bl	800147c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000f30:	2304      	movs	r3, #4
 8000f32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f34:	2302      	movs	r3, #2
 8000f36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f3c:	2303      	movs	r3, #3
 8000f3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000f40:	230c      	movs	r3, #12
 8000f42:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f44:	f107 0314 	add.w	r3, r7, #20
 8000f48:	4619      	mov	r1, r3
 8000f4a:	4806      	ldr	r0, [pc, #24]	; (8000f64 <HAL_SD_MspInit+0xc0>)
 8000f4c:	f000 fa96 	bl	800147c <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8000f50:	bf00      	nop
 8000f52:	3728      	adds	r7, #40	; 0x28
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	40012c00 	.word	0x40012c00
 8000f5c:	40023800 	.word	0x40023800
 8000f60:	40020800 	.word	0x40020800
 8000f64:	40020c00 	.word	0x40020c00

08000f68 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b084      	sub	sp, #16
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f78:	d113      	bne.n	8000fa2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f7a:	4b0c      	ldr	r3, [pc, #48]	; (8000fac <HAL_TIM_Base_MspInit+0x44>)
 8000f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f7e:	4a0b      	ldr	r2, [pc, #44]	; (8000fac <HAL_TIM_Base_MspInit+0x44>)
 8000f80:	f043 0301 	orr.w	r3, r3, #1
 8000f84:	6413      	str	r3, [r2, #64]	; 0x40
 8000f86:	4b09      	ldr	r3, [pc, #36]	; (8000fac <HAL_TIM_Base_MspInit+0x44>)
 8000f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f8a:	f003 0301 	and.w	r3, r3, #1
 8000f8e:	60fb      	str	r3, [r7, #12]
 8000f90:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000f92:	2200      	movs	r2, #0
 8000f94:	2100      	movs	r1, #0
 8000f96:	201c      	movs	r0, #28
 8000f98:	f000 fa39 	bl	800140e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000f9c:	201c      	movs	r0, #28
 8000f9e:	f000 fa52 	bl	8001446 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000fa2:	bf00      	nop
 8000fa4:	3710      	adds	r7, #16
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	40023800 	.word	0x40023800

08000fb0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b08a      	sub	sp, #40	; 0x28
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb8:	f107 0314 	add.w	r3, r7, #20
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]
 8000fc0:	605a      	str	r2, [r3, #4]
 8000fc2:	609a      	str	r2, [r3, #8]
 8000fc4:	60da      	str	r2, [r3, #12]
 8000fc6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a17      	ldr	r2, [pc, #92]	; (800102c <HAL_UART_MspInit+0x7c>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d127      	bne.n	8001022 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000fd2:	4b17      	ldr	r3, [pc, #92]	; (8001030 <HAL_UART_MspInit+0x80>)
 8000fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fd6:	4a16      	ldr	r2, [pc, #88]	; (8001030 <HAL_UART_MspInit+0x80>)
 8000fd8:	f043 0310 	orr.w	r3, r3, #16
 8000fdc:	6453      	str	r3, [r2, #68]	; 0x44
 8000fde:	4b14      	ldr	r3, [pc, #80]	; (8001030 <HAL_UART_MspInit+0x80>)
 8000fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fe2:	f003 0310 	and.w	r3, r3, #16
 8000fe6:	613b      	str	r3, [r7, #16]
 8000fe8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fea:	4b11      	ldr	r3, [pc, #68]	; (8001030 <HAL_UART_MspInit+0x80>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fee:	4a10      	ldr	r2, [pc, #64]	; (8001030 <HAL_UART_MspInit+0x80>)
 8000ff0:	f043 0302 	orr.w	r3, r3, #2
 8000ff4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ff6:	4b0e      	ldr	r3, [pc, #56]	; (8001030 <HAL_UART_MspInit+0x80>)
 8000ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffa:	f003 0302 	and.w	r3, r3, #2
 8000ffe:	60fb      	str	r3, [r7, #12]
 8001000:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8001002:	23c0      	movs	r3, #192	; 0xc0
 8001004:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001006:	2302      	movs	r3, #2
 8001008:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100a:	2300      	movs	r3, #0
 800100c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800100e:	2303      	movs	r3, #3
 8001010:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001012:	2307      	movs	r3, #7
 8001014:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001016:	f107 0314 	add.w	r3, r7, #20
 800101a:	4619      	mov	r1, r3
 800101c:	4805      	ldr	r0, [pc, #20]	; (8001034 <HAL_UART_MspInit+0x84>)
 800101e:	f000 fa2d 	bl	800147c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001022:	bf00      	nop
 8001024:	3728      	adds	r7, #40	; 0x28
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	40011000 	.word	0x40011000
 8001030:	40023800 	.word	0x40023800
 8001034:	40020400 	.word	0x40020400

08001038 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800103c:	e7fe      	b.n	800103c <NMI_Handler+0x4>

0800103e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800103e:	b480      	push	{r7}
 8001040:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001042:	e7fe      	b.n	8001042 <HardFault_Handler+0x4>

08001044 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001048:	e7fe      	b.n	8001048 <MemManage_Handler+0x4>

0800104a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800104a:	b480      	push	{r7}
 800104c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800104e:	e7fe      	b.n	800104e <BusFault_Handler+0x4>

08001050 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001054:	e7fe      	b.n	8001054 <UsageFault_Handler+0x4>

08001056 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001056:	b480      	push	{r7}
 8001058:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800105a:	bf00      	nop
 800105c:	46bd      	mov	sp, r7
 800105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001062:	4770      	bx	lr

08001064 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001068:	bf00      	nop
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr

08001072 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001072:	b480      	push	{r7}
 8001074:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001076:	bf00      	nop
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr

08001080 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001084:	f000 f8a4 	bl	80011d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001088:	bf00      	nop
 800108a:	bd80      	pop	{r7, pc}

0800108c <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001090:	bf00      	nop
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr

0800109a <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800109a:	b580      	push	{r7, lr}
 800109c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */
	keyboard_interrupt_handler();
 800109e:	f7ff fb99 	bl	80007d4 <keyboard_interrupt_handler>
  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80010a2:	2004      	movs	r0, #4
 80010a4:	f000 fbc8 	bl	8001838 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80010a8:	bf00      	nop
 80010aa:	bd80      	pop	{r7, pc}

080010ac <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80010b0:	4802      	ldr	r0, [pc, #8]	; (80010bc <TIM2_IRQHandler+0x10>)
 80010b2:	f002 fcfb 	bl	8003aac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80010b6:	bf00      	nop
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	2001faf8 	.word	0x2001faf8

080010c0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010c4:	4b06      	ldr	r3, [pc, #24]	; (80010e0 <SystemInit+0x20>)
 80010c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010ca:	4a05      	ldr	r2, [pc, #20]	; (80010e0 <SystemInit+0x20>)
 80010cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010d4:	bf00      	nop
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop
 80010e0:	e000ed00 	.word	0xe000ed00

080010e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80010e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800111c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010e8:	480d      	ldr	r0, [pc, #52]	; (8001120 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80010ea:	490e      	ldr	r1, [pc, #56]	; (8001124 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80010ec:	4a0e      	ldr	r2, [pc, #56]	; (8001128 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010f0:	e002      	b.n	80010f8 <LoopCopyDataInit>

080010f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010f6:	3304      	adds	r3, #4

080010f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010fc:	d3f9      	bcc.n	80010f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010fe:	4a0b      	ldr	r2, [pc, #44]	; (800112c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001100:	4c0b      	ldr	r4, [pc, #44]	; (8001130 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001102:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001104:	e001      	b.n	800110a <LoopFillZerobss>

08001106 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001106:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001108:	3204      	adds	r2, #4

0800110a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800110a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800110c:	d3fb      	bcc.n	8001106 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800110e:	f7ff ffd7 	bl	80010c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001112:	f007 fa29 	bl	8008568 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001116:	f7ff fc0f 	bl	8000938 <main>
  bx  lr    
 800111a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800111c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001120:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001124:	2000012c 	.word	0x2000012c
  ldr r2, =_sidata
 8001128:	08008aa0 	.word	0x08008aa0
  ldr r2, =_sbss
 800112c:	2000012c 	.word	0x2000012c
  ldr r4, =_ebss
 8001130:	2001ffc4 	.word	0x2001ffc4

08001134 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001134:	e7fe      	b.n	8001134 <ADC_IRQHandler>
	...

08001138 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
 800113c:	4b0b      	ldr	r3, [pc, #44]	; (800116c <HAL_Init+0x34>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a0a      	ldr	r2, [pc, #40]	; (800116c <HAL_Init+0x34>)
 8001142:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001146:	6013      	str	r3, [r2, #0]
#endif /* ART_ACCLERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001148:	4b08      	ldr	r3, [pc, #32]	; (800116c <HAL_Init+0x34>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a07      	ldr	r2, [pc, #28]	; (800116c <HAL_Init+0x34>)
 800114e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001152:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001154:	2003      	movs	r0, #3
 8001156:	f000 f94f 	bl	80013f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800115a:	2000      	movs	r0, #0
 800115c:	f000 f808 	bl	8001170 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001160:	f7ff fe76 	bl	8000e50 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001164:	2300      	movs	r3, #0
}
 8001166:	4618      	mov	r0, r3
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	40023c00 	.word	0x40023c00

08001170 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001178:	4b12      	ldr	r3, [pc, #72]	; (80011c4 <HAL_InitTick+0x54>)
 800117a:	681a      	ldr	r2, [r3, #0]
 800117c:	4b12      	ldr	r3, [pc, #72]	; (80011c8 <HAL_InitTick+0x58>)
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	4619      	mov	r1, r3
 8001182:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001186:	fbb3 f3f1 	udiv	r3, r3, r1
 800118a:	fbb2 f3f3 	udiv	r3, r2, r3
 800118e:	4618      	mov	r0, r3
 8001190:	f000 f967 	bl	8001462 <HAL_SYSTICK_Config>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800119a:	2301      	movs	r3, #1
 800119c:	e00e      	b.n	80011bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	2b0f      	cmp	r3, #15
 80011a2:	d80a      	bhi.n	80011ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011a4:	2200      	movs	r2, #0
 80011a6:	6879      	ldr	r1, [r7, #4]
 80011a8:	f04f 30ff 	mov.w	r0, #4294967295
 80011ac:	f000 f92f 	bl	800140e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011b0:	4a06      	ldr	r2, [pc, #24]	; (80011cc <HAL_InitTick+0x5c>)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011b6:	2300      	movs	r3, #0
 80011b8:	e000      	b.n	80011bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011ba:	2301      	movs	r3, #1
}
 80011bc:	4618      	mov	r0, r3
 80011be:	3708      	adds	r7, #8
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	20000120 	.word	0x20000120
 80011c8:	20000128 	.word	0x20000128
 80011cc:	20000124 	.word	0x20000124

080011d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011d4:	4b06      	ldr	r3, [pc, #24]	; (80011f0 <HAL_IncTick+0x20>)
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	461a      	mov	r2, r3
 80011da:	4b06      	ldr	r3, [pc, #24]	; (80011f4 <HAL_IncTick+0x24>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4413      	add	r3, r2
 80011e0:	4a04      	ldr	r2, [pc, #16]	; (80011f4 <HAL_IncTick+0x24>)
 80011e2:	6013      	str	r3, [r2, #0]
}
 80011e4:	bf00      	nop
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	20000128 	.word	0x20000128
 80011f4:	2001fb54 	.word	0x2001fb54

080011f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  return uwTick;
 80011fc:	4b03      	ldr	r3, [pc, #12]	; (800120c <HAL_GetTick+0x14>)
 80011fe:	681b      	ldr	r3, [r3, #0]
}
 8001200:	4618      	mov	r0, r3
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop
 800120c:	2001fb54 	.word	0x2001fb54

08001210 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b084      	sub	sp, #16
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001218:	f7ff ffee 	bl	80011f8 <HAL_GetTick>
 800121c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001228:	d005      	beq.n	8001236 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800122a:	4b0a      	ldr	r3, [pc, #40]	; (8001254 <HAL_Delay+0x44>)
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	461a      	mov	r2, r3
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	4413      	add	r3, r2
 8001234:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001236:	bf00      	nop
 8001238:	f7ff ffde 	bl	80011f8 <HAL_GetTick>
 800123c:	4602      	mov	r2, r0
 800123e:	68bb      	ldr	r3, [r7, #8]
 8001240:	1ad3      	subs	r3, r2, r3
 8001242:	68fa      	ldr	r2, [r7, #12]
 8001244:	429a      	cmp	r2, r3
 8001246:	d8f7      	bhi.n	8001238 <HAL_Delay+0x28>
  {
  }
}
 8001248:	bf00      	nop
 800124a:	bf00      	nop
 800124c:	3710      	adds	r7, #16
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	20000128 	.word	0x20000128

08001258 <__NVIC_SetPriorityGrouping>:
{
 8001258:	b480      	push	{r7}
 800125a:	b085      	sub	sp, #20
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	f003 0307 	and.w	r3, r3, #7
 8001266:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001268:	4b0b      	ldr	r3, [pc, #44]	; (8001298 <__NVIC_SetPriorityGrouping+0x40>)
 800126a:	68db      	ldr	r3, [r3, #12]
 800126c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800126e:	68ba      	ldr	r2, [r7, #8]
 8001270:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001274:	4013      	ands	r3, r2
 8001276:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800127c:	68bb      	ldr	r3, [r7, #8]
 800127e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001280:	4b06      	ldr	r3, [pc, #24]	; (800129c <__NVIC_SetPriorityGrouping+0x44>)
 8001282:	4313      	orrs	r3, r2
 8001284:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001286:	4a04      	ldr	r2, [pc, #16]	; (8001298 <__NVIC_SetPriorityGrouping+0x40>)
 8001288:	68bb      	ldr	r3, [r7, #8]
 800128a:	60d3      	str	r3, [r2, #12]
}
 800128c:	bf00      	nop
 800128e:	3714      	adds	r7, #20
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr
 8001298:	e000ed00 	.word	0xe000ed00
 800129c:	05fa0000 	.word	0x05fa0000

080012a0 <__NVIC_GetPriorityGrouping>:
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012a4:	4b04      	ldr	r3, [pc, #16]	; (80012b8 <__NVIC_GetPriorityGrouping+0x18>)
 80012a6:	68db      	ldr	r3, [r3, #12]
 80012a8:	0a1b      	lsrs	r3, r3, #8
 80012aa:	f003 0307 	and.w	r3, r3, #7
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr
 80012b8:	e000ed00 	.word	0xe000ed00

080012bc <__NVIC_EnableIRQ>:
{
 80012bc:	b480      	push	{r7}
 80012be:	b083      	sub	sp, #12
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	4603      	mov	r3, r0
 80012c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	db0b      	blt.n	80012e6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012ce:	79fb      	ldrb	r3, [r7, #7]
 80012d0:	f003 021f 	and.w	r2, r3, #31
 80012d4:	4907      	ldr	r1, [pc, #28]	; (80012f4 <__NVIC_EnableIRQ+0x38>)
 80012d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012da:	095b      	lsrs	r3, r3, #5
 80012dc:	2001      	movs	r0, #1
 80012de:	fa00 f202 	lsl.w	r2, r0, r2
 80012e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80012e6:	bf00      	nop
 80012e8:	370c      	adds	r7, #12
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr
 80012f2:	bf00      	nop
 80012f4:	e000e100 	.word	0xe000e100

080012f8 <__NVIC_SetPriority>:
{
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	4603      	mov	r3, r0
 8001300:	6039      	str	r1, [r7, #0]
 8001302:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001304:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001308:	2b00      	cmp	r3, #0
 800130a:	db0a      	blt.n	8001322 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	b2da      	uxtb	r2, r3
 8001310:	490c      	ldr	r1, [pc, #48]	; (8001344 <__NVIC_SetPriority+0x4c>)
 8001312:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001316:	0112      	lsls	r2, r2, #4
 8001318:	b2d2      	uxtb	r2, r2
 800131a:	440b      	add	r3, r1
 800131c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001320:	e00a      	b.n	8001338 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	b2da      	uxtb	r2, r3
 8001326:	4908      	ldr	r1, [pc, #32]	; (8001348 <__NVIC_SetPriority+0x50>)
 8001328:	79fb      	ldrb	r3, [r7, #7]
 800132a:	f003 030f 	and.w	r3, r3, #15
 800132e:	3b04      	subs	r3, #4
 8001330:	0112      	lsls	r2, r2, #4
 8001332:	b2d2      	uxtb	r2, r2
 8001334:	440b      	add	r3, r1
 8001336:	761a      	strb	r2, [r3, #24]
}
 8001338:	bf00      	nop
 800133a:	370c      	adds	r7, #12
 800133c:	46bd      	mov	sp, r7
 800133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001342:	4770      	bx	lr
 8001344:	e000e100 	.word	0xe000e100
 8001348:	e000ed00 	.word	0xe000ed00

0800134c <NVIC_EncodePriority>:
{
 800134c:	b480      	push	{r7}
 800134e:	b089      	sub	sp, #36	; 0x24
 8001350:	af00      	add	r7, sp, #0
 8001352:	60f8      	str	r0, [r7, #12]
 8001354:	60b9      	str	r1, [r7, #8]
 8001356:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	f003 0307 	and.w	r3, r3, #7
 800135e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001360:	69fb      	ldr	r3, [r7, #28]
 8001362:	f1c3 0307 	rsb	r3, r3, #7
 8001366:	2b04      	cmp	r3, #4
 8001368:	bf28      	it	cs
 800136a:	2304      	movcs	r3, #4
 800136c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800136e:	69fb      	ldr	r3, [r7, #28]
 8001370:	3304      	adds	r3, #4
 8001372:	2b06      	cmp	r3, #6
 8001374:	d902      	bls.n	800137c <NVIC_EncodePriority+0x30>
 8001376:	69fb      	ldr	r3, [r7, #28]
 8001378:	3b03      	subs	r3, #3
 800137a:	e000      	b.n	800137e <NVIC_EncodePriority+0x32>
 800137c:	2300      	movs	r3, #0
 800137e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001380:	f04f 32ff 	mov.w	r2, #4294967295
 8001384:	69bb      	ldr	r3, [r7, #24]
 8001386:	fa02 f303 	lsl.w	r3, r2, r3
 800138a:	43da      	mvns	r2, r3
 800138c:	68bb      	ldr	r3, [r7, #8]
 800138e:	401a      	ands	r2, r3
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001394:	f04f 31ff 	mov.w	r1, #4294967295
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	fa01 f303 	lsl.w	r3, r1, r3
 800139e:	43d9      	mvns	r1, r3
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013a4:	4313      	orrs	r3, r2
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	3724      	adds	r7, #36	; 0x24
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr
	...

080013b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	3b01      	subs	r3, #1
 80013c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013c4:	d301      	bcc.n	80013ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013c6:	2301      	movs	r3, #1
 80013c8:	e00f      	b.n	80013ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013ca:	4a0a      	ldr	r2, [pc, #40]	; (80013f4 <SysTick_Config+0x40>)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	3b01      	subs	r3, #1
 80013d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013d2:	210f      	movs	r1, #15
 80013d4:	f04f 30ff 	mov.w	r0, #4294967295
 80013d8:	f7ff ff8e 	bl	80012f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013dc:	4b05      	ldr	r3, [pc, #20]	; (80013f4 <SysTick_Config+0x40>)
 80013de:	2200      	movs	r2, #0
 80013e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013e2:	4b04      	ldr	r3, [pc, #16]	; (80013f4 <SysTick_Config+0x40>)
 80013e4:	2207      	movs	r2, #7
 80013e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013e8:	2300      	movs	r3, #0
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	3708      	adds	r7, #8
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	e000e010 	.word	0xe000e010

080013f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001400:	6878      	ldr	r0, [r7, #4]
 8001402:	f7ff ff29 	bl	8001258 <__NVIC_SetPriorityGrouping>
}
 8001406:	bf00      	nop
 8001408:	3708      	adds	r7, #8
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}

0800140e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800140e:	b580      	push	{r7, lr}
 8001410:	b086      	sub	sp, #24
 8001412:	af00      	add	r7, sp, #0
 8001414:	4603      	mov	r3, r0
 8001416:	60b9      	str	r1, [r7, #8]
 8001418:	607a      	str	r2, [r7, #4]
 800141a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800141c:	2300      	movs	r3, #0
 800141e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001420:	f7ff ff3e 	bl	80012a0 <__NVIC_GetPriorityGrouping>
 8001424:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001426:	687a      	ldr	r2, [r7, #4]
 8001428:	68b9      	ldr	r1, [r7, #8]
 800142a:	6978      	ldr	r0, [r7, #20]
 800142c:	f7ff ff8e 	bl	800134c <NVIC_EncodePriority>
 8001430:	4602      	mov	r2, r0
 8001432:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001436:	4611      	mov	r1, r2
 8001438:	4618      	mov	r0, r3
 800143a:	f7ff ff5d 	bl	80012f8 <__NVIC_SetPriority>
}
 800143e:	bf00      	nop
 8001440:	3718      	adds	r7, #24
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}

08001446 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001446:	b580      	push	{r7, lr}
 8001448:	b082      	sub	sp, #8
 800144a:	af00      	add	r7, sp, #0
 800144c:	4603      	mov	r3, r0
 800144e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001450:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001454:	4618      	mov	r0, r3
 8001456:	f7ff ff31 	bl	80012bc <__NVIC_EnableIRQ>
}
 800145a:	bf00      	nop
 800145c:	3708      	adds	r7, #8
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}

08001462 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001462:	b580      	push	{r7, lr}
 8001464:	b082      	sub	sp, #8
 8001466:	af00      	add	r7, sp, #0
 8001468:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800146a:	6878      	ldr	r0, [r7, #4]
 800146c:	f7ff ffa2 	bl	80013b4 <SysTick_Config>
 8001470:	4603      	mov	r3, r0
}
 8001472:	4618      	mov	r0, r3
 8001474:	3708      	adds	r7, #8
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
	...

0800147c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800147c:	b480      	push	{r7}
 800147e:	b089      	sub	sp, #36	; 0x24
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
 8001484:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001486:	2300      	movs	r3, #0
 8001488:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800148a:	2300      	movs	r3, #0
 800148c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800148e:	2300      	movs	r3, #0
 8001490:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001492:	2300      	movs	r3, #0
 8001494:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001496:	2300      	movs	r3, #0
 8001498:	61fb      	str	r3, [r7, #28]
 800149a:	e175      	b.n	8001788 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800149c:	2201      	movs	r2, #1
 800149e:	69fb      	ldr	r3, [r7, #28]
 80014a0:	fa02 f303 	lsl.w	r3, r2, r3
 80014a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	697a      	ldr	r2, [r7, #20]
 80014ac:	4013      	ands	r3, r2
 80014ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80014b0:	693a      	ldr	r2, [r7, #16]
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	429a      	cmp	r2, r3
 80014b6:	f040 8164 	bne.w	8001782 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	2b01      	cmp	r3, #1
 80014c0:	d00b      	beq.n	80014da <HAL_GPIO_Init+0x5e>
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	2b02      	cmp	r3, #2
 80014c8:	d007      	beq.n	80014da <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80014ce:	2b11      	cmp	r3, #17
 80014d0:	d003      	beq.n	80014da <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	2b12      	cmp	r3, #18
 80014d8:	d130      	bne.n	800153c <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	689b      	ldr	r3, [r3, #8]
 80014de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80014e0:	69fb      	ldr	r3, [r7, #28]
 80014e2:	005b      	lsls	r3, r3, #1
 80014e4:	2203      	movs	r2, #3
 80014e6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ea:	43db      	mvns	r3, r3
 80014ec:	69ba      	ldr	r2, [r7, #24]
 80014ee:	4013      	ands	r3, r2
 80014f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	68da      	ldr	r2, [r3, #12]
 80014f6:	69fb      	ldr	r3, [r7, #28]
 80014f8:	005b      	lsls	r3, r3, #1
 80014fa:	fa02 f303 	lsl.w	r3, r2, r3
 80014fe:	69ba      	ldr	r2, [r7, #24]
 8001500:	4313      	orrs	r3, r2
 8001502:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	69ba      	ldr	r2, [r7, #24]
 8001508:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001510:	2201      	movs	r2, #1
 8001512:	69fb      	ldr	r3, [r7, #28]
 8001514:	fa02 f303 	lsl.w	r3, r2, r3
 8001518:	43db      	mvns	r3, r3
 800151a:	69ba      	ldr	r2, [r7, #24]
 800151c:	4013      	ands	r3, r2
 800151e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	091b      	lsrs	r3, r3, #4
 8001526:	f003 0201 	and.w	r2, r3, #1
 800152a:	69fb      	ldr	r3, [r7, #28]
 800152c:	fa02 f303 	lsl.w	r3, r2, r3
 8001530:	69ba      	ldr	r2, [r7, #24]
 8001532:	4313      	orrs	r3, r2
 8001534:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	69ba      	ldr	r2, [r7, #24]
 800153a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	68db      	ldr	r3, [r3, #12]
 8001540:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001542:	69fb      	ldr	r3, [r7, #28]
 8001544:	005b      	lsls	r3, r3, #1
 8001546:	2203      	movs	r2, #3
 8001548:	fa02 f303 	lsl.w	r3, r2, r3
 800154c:	43db      	mvns	r3, r3
 800154e:	69ba      	ldr	r2, [r7, #24]
 8001550:	4013      	ands	r3, r2
 8001552:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	689a      	ldr	r2, [r3, #8]
 8001558:	69fb      	ldr	r3, [r7, #28]
 800155a:	005b      	lsls	r3, r3, #1
 800155c:	fa02 f303 	lsl.w	r3, r2, r3
 8001560:	69ba      	ldr	r2, [r7, #24]
 8001562:	4313      	orrs	r3, r2
 8001564:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	69ba      	ldr	r2, [r7, #24]
 800156a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	2b02      	cmp	r3, #2
 8001572:	d003      	beq.n	800157c <HAL_GPIO_Init+0x100>
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	2b12      	cmp	r3, #18
 800157a:	d123      	bne.n	80015c4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800157c:	69fb      	ldr	r3, [r7, #28]
 800157e:	08da      	lsrs	r2, r3, #3
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	3208      	adds	r2, #8
 8001584:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001588:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800158a:	69fb      	ldr	r3, [r7, #28]
 800158c:	f003 0307 	and.w	r3, r3, #7
 8001590:	009b      	lsls	r3, r3, #2
 8001592:	220f      	movs	r2, #15
 8001594:	fa02 f303 	lsl.w	r3, r2, r3
 8001598:	43db      	mvns	r3, r3
 800159a:	69ba      	ldr	r2, [r7, #24]
 800159c:	4013      	ands	r3, r2
 800159e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	691a      	ldr	r2, [r3, #16]
 80015a4:	69fb      	ldr	r3, [r7, #28]
 80015a6:	f003 0307 	and.w	r3, r3, #7
 80015aa:	009b      	lsls	r3, r3, #2
 80015ac:	fa02 f303 	lsl.w	r3, r2, r3
 80015b0:	69ba      	ldr	r2, [r7, #24]
 80015b2:	4313      	orrs	r3, r2
 80015b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80015b6:	69fb      	ldr	r3, [r7, #28]
 80015b8:	08da      	lsrs	r2, r3, #3
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	3208      	adds	r2, #8
 80015be:	69b9      	ldr	r1, [r7, #24]
 80015c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80015ca:	69fb      	ldr	r3, [r7, #28]
 80015cc:	005b      	lsls	r3, r3, #1
 80015ce:	2203      	movs	r2, #3
 80015d0:	fa02 f303 	lsl.w	r3, r2, r3
 80015d4:	43db      	mvns	r3, r3
 80015d6:	69ba      	ldr	r2, [r7, #24]
 80015d8:	4013      	ands	r3, r2
 80015da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	f003 0203 	and.w	r2, r3, #3
 80015e4:	69fb      	ldr	r3, [r7, #28]
 80015e6:	005b      	lsls	r3, r3, #1
 80015e8:	fa02 f303 	lsl.w	r3, r2, r3
 80015ec:	69ba      	ldr	r2, [r7, #24]
 80015ee:	4313      	orrs	r3, r2
 80015f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	69ba      	ldr	r2, [r7, #24]
 80015f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001600:	2b00      	cmp	r3, #0
 8001602:	f000 80be 	beq.w	8001782 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001606:	4b66      	ldr	r3, [pc, #408]	; (80017a0 <HAL_GPIO_Init+0x324>)
 8001608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800160a:	4a65      	ldr	r2, [pc, #404]	; (80017a0 <HAL_GPIO_Init+0x324>)
 800160c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001610:	6453      	str	r3, [r2, #68]	; 0x44
 8001612:	4b63      	ldr	r3, [pc, #396]	; (80017a0 <HAL_GPIO_Init+0x324>)
 8001614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001616:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800161a:	60fb      	str	r3, [r7, #12]
 800161c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800161e:	4a61      	ldr	r2, [pc, #388]	; (80017a4 <HAL_GPIO_Init+0x328>)
 8001620:	69fb      	ldr	r3, [r7, #28]
 8001622:	089b      	lsrs	r3, r3, #2
 8001624:	3302      	adds	r3, #2
 8001626:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800162a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800162c:	69fb      	ldr	r3, [r7, #28]
 800162e:	f003 0303 	and.w	r3, r3, #3
 8001632:	009b      	lsls	r3, r3, #2
 8001634:	220f      	movs	r2, #15
 8001636:	fa02 f303 	lsl.w	r3, r2, r3
 800163a:	43db      	mvns	r3, r3
 800163c:	69ba      	ldr	r2, [r7, #24]
 800163e:	4013      	ands	r3, r2
 8001640:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	4a58      	ldr	r2, [pc, #352]	; (80017a8 <HAL_GPIO_Init+0x32c>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d037      	beq.n	80016ba <HAL_GPIO_Init+0x23e>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	4a57      	ldr	r2, [pc, #348]	; (80017ac <HAL_GPIO_Init+0x330>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d031      	beq.n	80016b6 <HAL_GPIO_Init+0x23a>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	4a56      	ldr	r2, [pc, #344]	; (80017b0 <HAL_GPIO_Init+0x334>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d02b      	beq.n	80016b2 <HAL_GPIO_Init+0x236>
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	4a55      	ldr	r2, [pc, #340]	; (80017b4 <HAL_GPIO_Init+0x338>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d025      	beq.n	80016ae <HAL_GPIO_Init+0x232>
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	4a54      	ldr	r2, [pc, #336]	; (80017b8 <HAL_GPIO_Init+0x33c>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d01f      	beq.n	80016aa <HAL_GPIO_Init+0x22e>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	4a53      	ldr	r2, [pc, #332]	; (80017bc <HAL_GPIO_Init+0x340>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d019      	beq.n	80016a6 <HAL_GPIO_Init+0x22a>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	4a52      	ldr	r2, [pc, #328]	; (80017c0 <HAL_GPIO_Init+0x344>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d013      	beq.n	80016a2 <HAL_GPIO_Init+0x226>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	4a51      	ldr	r2, [pc, #324]	; (80017c4 <HAL_GPIO_Init+0x348>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d00d      	beq.n	800169e <HAL_GPIO_Init+0x222>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	4a50      	ldr	r2, [pc, #320]	; (80017c8 <HAL_GPIO_Init+0x34c>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d007      	beq.n	800169a <HAL_GPIO_Init+0x21e>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	4a4f      	ldr	r2, [pc, #316]	; (80017cc <HAL_GPIO_Init+0x350>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d101      	bne.n	8001696 <HAL_GPIO_Init+0x21a>
 8001692:	2309      	movs	r3, #9
 8001694:	e012      	b.n	80016bc <HAL_GPIO_Init+0x240>
 8001696:	230a      	movs	r3, #10
 8001698:	e010      	b.n	80016bc <HAL_GPIO_Init+0x240>
 800169a:	2308      	movs	r3, #8
 800169c:	e00e      	b.n	80016bc <HAL_GPIO_Init+0x240>
 800169e:	2307      	movs	r3, #7
 80016a0:	e00c      	b.n	80016bc <HAL_GPIO_Init+0x240>
 80016a2:	2306      	movs	r3, #6
 80016a4:	e00a      	b.n	80016bc <HAL_GPIO_Init+0x240>
 80016a6:	2305      	movs	r3, #5
 80016a8:	e008      	b.n	80016bc <HAL_GPIO_Init+0x240>
 80016aa:	2304      	movs	r3, #4
 80016ac:	e006      	b.n	80016bc <HAL_GPIO_Init+0x240>
 80016ae:	2303      	movs	r3, #3
 80016b0:	e004      	b.n	80016bc <HAL_GPIO_Init+0x240>
 80016b2:	2302      	movs	r3, #2
 80016b4:	e002      	b.n	80016bc <HAL_GPIO_Init+0x240>
 80016b6:	2301      	movs	r3, #1
 80016b8:	e000      	b.n	80016bc <HAL_GPIO_Init+0x240>
 80016ba:	2300      	movs	r3, #0
 80016bc:	69fa      	ldr	r2, [r7, #28]
 80016be:	f002 0203 	and.w	r2, r2, #3
 80016c2:	0092      	lsls	r2, r2, #2
 80016c4:	4093      	lsls	r3, r2
 80016c6:	69ba      	ldr	r2, [r7, #24]
 80016c8:	4313      	orrs	r3, r2
 80016ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80016cc:	4935      	ldr	r1, [pc, #212]	; (80017a4 <HAL_GPIO_Init+0x328>)
 80016ce:	69fb      	ldr	r3, [r7, #28]
 80016d0:	089b      	lsrs	r3, r3, #2
 80016d2:	3302      	adds	r3, #2
 80016d4:	69ba      	ldr	r2, [r7, #24]
 80016d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016da:	4b3d      	ldr	r3, [pc, #244]	; (80017d0 <HAL_GPIO_Init+0x354>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	43db      	mvns	r3, r3
 80016e4:	69ba      	ldr	r2, [r7, #24]
 80016e6:	4013      	ands	r3, r2
 80016e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d003      	beq.n	80016fe <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80016f6:	69ba      	ldr	r2, [r7, #24]
 80016f8:	693b      	ldr	r3, [r7, #16]
 80016fa:	4313      	orrs	r3, r2
 80016fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80016fe:	4a34      	ldr	r2, [pc, #208]	; (80017d0 <HAL_GPIO_Init+0x354>)
 8001700:	69bb      	ldr	r3, [r7, #24]
 8001702:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001704:	4b32      	ldr	r3, [pc, #200]	; (80017d0 <HAL_GPIO_Init+0x354>)
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	43db      	mvns	r3, r3
 800170e:	69ba      	ldr	r2, [r7, #24]
 8001710:	4013      	ands	r3, r2
 8001712:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800171c:	2b00      	cmp	r3, #0
 800171e:	d003      	beq.n	8001728 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001720:	69ba      	ldr	r2, [r7, #24]
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	4313      	orrs	r3, r2
 8001726:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001728:	4a29      	ldr	r2, [pc, #164]	; (80017d0 <HAL_GPIO_Init+0x354>)
 800172a:	69bb      	ldr	r3, [r7, #24]
 800172c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800172e:	4b28      	ldr	r3, [pc, #160]	; (80017d0 <HAL_GPIO_Init+0x354>)
 8001730:	689b      	ldr	r3, [r3, #8]
 8001732:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	43db      	mvns	r3, r3
 8001738:	69ba      	ldr	r2, [r7, #24]
 800173a:	4013      	ands	r3, r2
 800173c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001746:	2b00      	cmp	r3, #0
 8001748:	d003      	beq.n	8001752 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800174a:	69ba      	ldr	r2, [r7, #24]
 800174c:	693b      	ldr	r3, [r7, #16]
 800174e:	4313      	orrs	r3, r2
 8001750:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001752:	4a1f      	ldr	r2, [pc, #124]	; (80017d0 <HAL_GPIO_Init+0x354>)
 8001754:	69bb      	ldr	r3, [r7, #24]
 8001756:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001758:	4b1d      	ldr	r3, [pc, #116]	; (80017d0 <HAL_GPIO_Init+0x354>)
 800175a:	68db      	ldr	r3, [r3, #12]
 800175c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	43db      	mvns	r3, r3
 8001762:	69ba      	ldr	r2, [r7, #24]
 8001764:	4013      	ands	r3, r2
 8001766:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001770:	2b00      	cmp	r3, #0
 8001772:	d003      	beq.n	800177c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001774:	69ba      	ldr	r2, [r7, #24]
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	4313      	orrs	r3, r2
 800177a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800177c:	4a14      	ldr	r2, [pc, #80]	; (80017d0 <HAL_GPIO_Init+0x354>)
 800177e:	69bb      	ldr	r3, [r7, #24]
 8001780:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001782:	69fb      	ldr	r3, [r7, #28]
 8001784:	3301      	adds	r3, #1
 8001786:	61fb      	str	r3, [r7, #28]
 8001788:	69fb      	ldr	r3, [r7, #28]
 800178a:	2b0f      	cmp	r3, #15
 800178c:	f67f ae86 	bls.w	800149c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001790:	bf00      	nop
 8001792:	bf00      	nop
 8001794:	3724      	adds	r7, #36	; 0x24
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr
 800179e:	bf00      	nop
 80017a0:	40023800 	.word	0x40023800
 80017a4:	40013800 	.word	0x40013800
 80017a8:	40020000 	.word	0x40020000
 80017ac:	40020400 	.word	0x40020400
 80017b0:	40020800 	.word	0x40020800
 80017b4:	40020c00 	.word	0x40020c00
 80017b8:	40021000 	.word	0x40021000
 80017bc:	40021400 	.word	0x40021400
 80017c0:	40021800 	.word	0x40021800
 80017c4:	40021c00 	.word	0x40021c00
 80017c8:	40022000 	.word	0x40022000
 80017cc:	40022400 	.word	0x40022400
 80017d0:	40013c00 	.word	0x40013c00

080017d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b085      	sub	sp, #20
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
 80017dc:	460b      	mov	r3, r1
 80017de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	691a      	ldr	r2, [r3, #16]
 80017e4:	887b      	ldrh	r3, [r7, #2]
 80017e6:	4013      	ands	r3, r2
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d002      	beq.n	80017f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80017ec:	2301      	movs	r3, #1
 80017ee:	73fb      	strb	r3, [r7, #15]
 80017f0:	e001      	b.n	80017f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80017f2:	2300      	movs	r3, #0
 80017f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80017f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	3714      	adds	r7, #20
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr

08001804 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001804:	b480      	push	{r7}
 8001806:	b083      	sub	sp, #12
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
 800180c:	460b      	mov	r3, r1
 800180e:	807b      	strh	r3, [r7, #2]
 8001810:	4613      	mov	r3, r2
 8001812:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001814:	787b      	ldrb	r3, [r7, #1]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d003      	beq.n	8001822 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800181a:	887a      	ldrh	r2, [r7, #2]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001820:	e003      	b.n	800182a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001822:	887b      	ldrh	r3, [r7, #2]
 8001824:	041a      	lsls	r2, r3, #16
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	619a      	str	r2, [r3, #24]
}
 800182a:	bf00      	nop
 800182c:	370c      	adds	r7, #12
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr
	...

08001838 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
 800183e:	4603      	mov	r3, r0
 8001840:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001842:	4b08      	ldr	r3, [pc, #32]	; (8001864 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001844:	695a      	ldr	r2, [r3, #20]
 8001846:	88fb      	ldrh	r3, [r7, #6]
 8001848:	4013      	ands	r3, r2
 800184a:	2b00      	cmp	r3, #0
 800184c:	d006      	beq.n	800185c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800184e:	4a05      	ldr	r2, [pc, #20]	; (8001864 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001850:	88fb      	ldrh	r3, [r7, #6]
 8001852:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001854:	88fb      	ldrh	r3, [r7, #6]
 8001856:	4618      	mov	r0, r3
 8001858:	f000 f806 	bl	8001868 <HAL_GPIO_EXTI_Callback>
  }
}
 800185c:	bf00      	nop
 800185e:	3708      	adds	r7, #8
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}
 8001864:	40013c00 	.word	0x40013c00

08001868 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
 800186e:	4603      	mov	r3, r0
 8001870:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001872:	bf00      	nop
 8001874:	370c      	adds	r7, #12
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr
	...

08001880 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b082      	sub	sp, #8
 8001884:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001886:	2300      	movs	r3, #0
 8001888:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800188a:	4b23      	ldr	r3, [pc, #140]	; (8001918 <HAL_PWREx_EnableOverDrive+0x98>)
 800188c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188e:	4a22      	ldr	r2, [pc, #136]	; (8001918 <HAL_PWREx_EnableOverDrive+0x98>)
 8001890:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001894:	6413      	str	r3, [r2, #64]	; 0x40
 8001896:	4b20      	ldr	r3, [pc, #128]	; (8001918 <HAL_PWREx_EnableOverDrive+0x98>)
 8001898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800189e:	603b      	str	r3, [r7, #0]
 80018a0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80018a2:	4b1e      	ldr	r3, [pc, #120]	; (800191c <HAL_PWREx_EnableOverDrive+0x9c>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4a1d      	ldr	r2, [pc, #116]	; (800191c <HAL_PWREx_EnableOverDrive+0x9c>)
 80018a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018ac:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80018ae:	f7ff fca3 	bl	80011f8 <HAL_GetTick>
 80018b2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80018b4:	e009      	b.n	80018ca <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80018b6:	f7ff fc9f 	bl	80011f8 <HAL_GetTick>
 80018ba:	4602      	mov	r2, r0
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	1ad3      	subs	r3, r2, r3
 80018c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80018c4:	d901      	bls.n	80018ca <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80018c6:	2303      	movs	r3, #3
 80018c8:	e022      	b.n	8001910 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80018ca:	4b14      	ldr	r3, [pc, #80]	; (800191c <HAL_PWREx_EnableOverDrive+0x9c>)
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018d6:	d1ee      	bne.n	80018b6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80018d8:	4b10      	ldr	r3, [pc, #64]	; (800191c <HAL_PWREx_EnableOverDrive+0x9c>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a0f      	ldr	r2, [pc, #60]	; (800191c <HAL_PWREx_EnableOverDrive+0x9c>)
 80018de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018e2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80018e4:	f7ff fc88 	bl	80011f8 <HAL_GetTick>
 80018e8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80018ea:	e009      	b.n	8001900 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80018ec:	f7ff fc84 	bl	80011f8 <HAL_GetTick>
 80018f0:	4602      	mov	r2, r0
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	1ad3      	subs	r3, r2, r3
 80018f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80018fa:	d901      	bls.n	8001900 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80018fc:	2303      	movs	r3, #3
 80018fe:	e007      	b.n	8001910 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001900:	4b06      	ldr	r3, [pc, #24]	; (800191c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001908:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800190c:	d1ee      	bne.n	80018ec <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800190e:	2300      	movs	r3, #0
}
 8001910:	4618      	mov	r0, r3
 8001912:	3708      	adds	r7, #8
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}
 8001918:	40023800 	.word	0x40023800
 800191c:	40007000 	.word	0x40007000

08001920 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b086      	sub	sp, #24
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001928:	2300      	movs	r3, #0
 800192a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d101      	bne.n	8001936 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	e291      	b.n	8001e5a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f003 0301 	and.w	r3, r3, #1
 800193e:	2b00      	cmp	r3, #0
 8001940:	f000 8087 	beq.w	8001a52 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001944:	4b96      	ldr	r3, [pc, #600]	; (8001ba0 <HAL_RCC_OscConfig+0x280>)
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	f003 030c 	and.w	r3, r3, #12
 800194c:	2b04      	cmp	r3, #4
 800194e:	d00c      	beq.n	800196a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001950:	4b93      	ldr	r3, [pc, #588]	; (8001ba0 <HAL_RCC_OscConfig+0x280>)
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	f003 030c 	and.w	r3, r3, #12
 8001958:	2b08      	cmp	r3, #8
 800195a:	d112      	bne.n	8001982 <HAL_RCC_OscConfig+0x62>
 800195c:	4b90      	ldr	r3, [pc, #576]	; (8001ba0 <HAL_RCC_OscConfig+0x280>)
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001964:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001968:	d10b      	bne.n	8001982 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800196a:	4b8d      	ldr	r3, [pc, #564]	; (8001ba0 <HAL_RCC_OscConfig+0x280>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001972:	2b00      	cmp	r3, #0
 8001974:	d06c      	beq.n	8001a50 <HAL_RCC_OscConfig+0x130>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d168      	bne.n	8001a50 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800197e:	2301      	movs	r3, #1
 8001980:	e26b      	b.n	8001e5a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800198a:	d106      	bne.n	800199a <HAL_RCC_OscConfig+0x7a>
 800198c:	4b84      	ldr	r3, [pc, #528]	; (8001ba0 <HAL_RCC_OscConfig+0x280>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a83      	ldr	r2, [pc, #524]	; (8001ba0 <HAL_RCC_OscConfig+0x280>)
 8001992:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001996:	6013      	str	r3, [r2, #0]
 8001998:	e02e      	b.n	80019f8 <HAL_RCC_OscConfig+0xd8>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d10c      	bne.n	80019bc <HAL_RCC_OscConfig+0x9c>
 80019a2:	4b7f      	ldr	r3, [pc, #508]	; (8001ba0 <HAL_RCC_OscConfig+0x280>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a7e      	ldr	r2, [pc, #504]	; (8001ba0 <HAL_RCC_OscConfig+0x280>)
 80019a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019ac:	6013      	str	r3, [r2, #0]
 80019ae:	4b7c      	ldr	r3, [pc, #496]	; (8001ba0 <HAL_RCC_OscConfig+0x280>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4a7b      	ldr	r2, [pc, #492]	; (8001ba0 <HAL_RCC_OscConfig+0x280>)
 80019b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019b8:	6013      	str	r3, [r2, #0]
 80019ba:	e01d      	b.n	80019f8 <HAL_RCC_OscConfig+0xd8>
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019c4:	d10c      	bne.n	80019e0 <HAL_RCC_OscConfig+0xc0>
 80019c6:	4b76      	ldr	r3, [pc, #472]	; (8001ba0 <HAL_RCC_OscConfig+0x280>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a75      	ldr	r2, [pc, #468]	; (8001ba0 <HAL_RCC_OscConfig+0x280>)
 80019cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019d0:	6013      	str	r3, [r2, #0]
 80019d2:	4b73      	ldr	r3, [pc, #460]	; (8001ba0 <HAL_RCC_OscConfig+0x280>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a72      	ldr	r2, [pc, #456]	; (8001ba0 <HAL_RCC_OscConfig+0x280>)
 80019d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019dc:	6013      	str	r3, [r2, #0]
 80019de:	e00b      	b.n	80019f8 <HAL_RCC_OscConfig+0xd8>
 80019e0:	4b6f      	ldr	r3, [pc, #444]	; (8001ba0 <HAL_RCC_OscConfig+0x280>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a6e      	ldr	r2, [pc, #440]	; (8001ba0 <HAL_RCC_OscConfig+0x280>)
 80019e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019ea:	6013      	str	r3, [r2, #0]
 80019ec:	4b6c      	ldr	r3, [pc, #432]	; (8001ba0 <HAL_RCC_OscConfig+0x280>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a6b      	ldr	r2, [pc, #428]	; (8001ba0 <HAL_RCC_OscConfig+0x280>)
 80019f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d013      	beq.n	8001a28 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a00:	f7ff fbfa 	bl	80011f8 <HAL_GetTick>
 8001a04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a06:	e008      	b.n	8001a1a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a08:	f7ff fbf6 	bl	80011f8 <HAL_GetTick>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	1ad3      	subs	r3, r2, r3
 8001a12:	2b64      	cmp	r3, #100	; 0x64
 8001a14:	d901      	bls.n	8001a1a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001a16:	2303      	movs	r3, #3
 8001a18:	e21f      	b.n	8001e5a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a1a:	4b61      	ldr	r3, [pc, #388]	; (8001ba0 <HAL_RCC_OscConfig+0x280>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d0f0      	beq.n	8001a08 <HAL_RCC_OscConfig+0xe8>
 8001a26:	e014      	b.n	8001a52 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a28:	f7ff fbe6 	bl	80011f8 <HAL_GetTick>
 8001a2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a2e:	e008      	b.n	8001a42 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a30:	f7ff fbe2 	bl	80011f8 <HAL_GetTick>
 8001a34:	4602      	mov	r2, r0
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	1ad3      	subs	r3, r2, r3
 8001a3a:	2b64      	cmp	r3, #100	; 0x64
 8001a3c:	d901      	bls.n	8001a42 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001a3e:	2303      	movs	r3, #3
 8001a40:	e20b      	b.n	8001e5a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a42:	4b57      	ldr	r3, [pc, #348]	; (8001ba0 <HAL_RCC_OscConfig+0x280>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d1f0      	bne.n	8001a30 <HAL_RCC_OscConfig+0x110>
 8001a4e:	e000      	b.n	8001a52 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f003 0302 	and.w	r3, r3, #2
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d069      	beq.n	8001b32 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a5e:	4b50      	ldr	r3, [pc, #320]	; (8001ba0 <HAL_RCC_OscConfig+0x280>)
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	f003 030c 	and.w	r3, r3, #12
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d00b      	beq.n	8001a82 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a6a:	4b4d      	ldr	r3, [pc, #308]	; (8001ba0 <HAL_RCC_OscConfig+0x280>)
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	f003 030c 	and.w	r3, r3, #12
 8001a72:	2b08      	cmp	r3, #8
 8001a74:	d11c      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x190>
 8001a76:	4b4a      	ldr	r3, [pc, #296]	; (8001ba0 <HAL_RCC_OscConfig+0x280>)
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d116      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a82:	4b47      	ldr	r3, [pc, #284]	; (8001ba0 <HAL_RCC_OscConfig+0x280>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f003 0302 	and.w	r3, r3, #2
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d005      	beq.n	8001a9a <HAL_RCC_OscConfig+0x17a>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	68db      	ldr	r3, [r3, #12]
 8001a92:	2b01      	cmp	r3, #1
 8001a94:	d001      	beq.n	8001a9a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
 8001a98:	e1df      	b.n	8001e5a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a9a:	4b41      	ldr	r3, [pc, #260]	; (8001ba0 <HAL_RCC_OscConfig+0x280>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	691b      	ldr	r3, [r3, #16]
 8001aa6:	00db      	lsls	r3, r3, #3
 8001aa8:	493d      	ldr	r1, [pc, #244]	; (8001ba0 <HAL_RCC_OscConfig+0x280>)
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001aae:	e040      	b.n	8001b32 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	68db      	ldr	r3, [r3, #12]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d023      	beq.n	8001b00 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ab8:	4b39      	ldr	r3, [pc, #228]	; (8001ba0 <HAL_RCC_OscConfig+0x280>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a38      	ldr	r2, [pc, #224]	; (8001ba0 <HAL_RCC_OscConfig+0x280>)
 8001abe:	f043 0301 	orr.w	r3, r3, #1
 8001ac2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ac4:	f7ff fb98 	bl	80011f8 <HAL_GetTick>
 8001ac8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001aca:	e008      	b.n	8001ade <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001acc:	f7ff fb94 	bl	80011f8 <HAL_GetTick>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	2b02      	cmp	r3, #2
 8001ad8:	d901      	bls.n	8001ade <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001ada:	2303      	movs	r3, #3
 8001adc:	e1bd      	b.n	8001e5a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ade:	4b30      	ldr	r3, [pc, #192]	; (8001ba0 <HAL_RCC_OscConfig+0x280>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 0302 	and.w	r3, r3, #2
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d0f0      	beq.n	8001acc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aea:	4b2d      	ldr	r3, [pc, #180]	; (8001ba0 <HAL_RCC_OscConfig+0x280>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	691b      	ldr	r3, [r3, #16]
 8001af6:	00db      	lsls	r3, r3, #3
 8001af8:	4929      	ldr	r1, [pc, #164]	; (8001ba0 <HAL_RCC_OscConfig+0x280>)
 8001afa:	4313      	orrs	r3, r2
 8001afc:	600b      	str	r3, [r1, #0]
 8001afe:	e018      	b.n	8001b32 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b00:	4b27      	ldr	r3, [pc, #156]	; (8001ba0 <HAL_RCC_OscConfig+0x280>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a26      	ldr	r2, [pc, #152]	; (8001ba0 <HAL_RCC_OscConfig+0x280>)
 8001b06:	f023 0301 	bic.w	r3, r3, #1
 8001b0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b0c:	f7ff fb74 	bl	80011f8 <HAL_GetTick>
 8001b10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b12:	e008      	b.n	8001b26 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b14:	f7ff fb70 	bl	80011f8 <HAL_GetTick>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	1ad3      	subs	r3, r2, r3
 8001b1e:	2b02      	cmp	r3, #2
 8001b20:	d901      	bls.n	8001b26 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001b22:	2303      	movs	r3, #3
 8001b24:	e199      	b.n	8001e5a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b26:	4b1e      	ldr	r3, [pc, #120]	; (8001ba0 <HAL_RCC_OscConfig+0x280>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f003 0302 	and.w	r3, r3, #2
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d1f0      	bne.n	8001b14 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f003 0308 	and.w	r3, r3, #8
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d038      	beq.n	8001bb0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	695b      	ldr	r3, [r3, #20]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d019      	beq.n	8001b7a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b46:	4b16      	ldr	r3, [pc, #88]	; (8001ba0 <HAL_RCC_OscConfig+0x280>)
 8001b48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b4a:	4a15      	ldr	r2, [pc, #84]	; (8001ba0 <HAL_RCC_OscConfig+0x280>)
 8001b4c:	f043 0301 	orr.w	r3, r3, #1
 8001b50:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b52:	f7ff fb51 	bl	80011f8 <HAL_GetTick>
 8001b56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b58:	e008      	b.n	8001b6c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b5a:	f7ff fb4d 	bl	80011f8 <HAL_GetTick>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	693b      	ldr	r3, [r7, #16]
 8001b62:	1ad3      	subs	r3, r2, r3
 8001b64:	2b02      	cmp	r3, #2
 8001b66:	d901      	bls.n	8001b6c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001b68:	2303      	movs	r3, #3
 8001b6a:	e176      	b.n	8001e5a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b6c:	4b0c      	ldr	r3, [pc, #48]	; (8001ba0 <HAL_RCC_OscConfig+0x280>)
 8001b6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b70:	f003 0302 	and.w	r3, r3, #2
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d0f0      	beq.n	8001b5a <HAL_RCC_OscConfig+0x23a>
 8001b78:	e01a      	b.n	8001bb0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b7a:	4b09      	ldr	r3, [pc, #36]	; (8001ba0 <HAL_RCC_OscConfig+0x280>)
 8001b7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b7e:	4a08      	ldr	r2, [pc, #32]	; (8001ba0 <HAL_RCC_OscConfig+0x280>)
 8001b80:	f023 0301 	bic.w	r3, r3, #1
 8001b84:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b86:	f7ff fb37 	bl	80011f8 <HAL_GetTick>
 8001b8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b8c:	e00a      	b.n	8001ba4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b8e:	f7ff fb33 	bl	80011f8 <HAL_GetTick>
 8001b92:	4602      	mov	r2, r0
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	1ad3      	subs	r3, r2, r3
 8001b98:	2b02      	cmp	r3, #2
 8001b9a:	d903      	bls.n	8001ba4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001b9c:	2303      	movs	r3, #3
 8001b9e:	e15c      	b.n	8001e5a <HAL_RCC_OscConfig+0x53a>
 8001ba0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ba4:	4b91      	ldr	r3, [pc, #580]	; (8001dec <HAL_RCC_OscConfig+0x4cc>)
 8001ba6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ba8:	f003 0302 	and.w	r3, r3, #2
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d1ee      	bne.n	8001b8e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f003 0304 	and.w	r3, r3, #4
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	f000 80a4 	beq.w	8001d06 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bbe:	4b8b      	ldr	r3, [pc, #556]	; (8001dec <HAL_RCC_OscConfig+0x4cc>)
 8001bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d10d      	bne.n	8001be6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bca:	4b88      	ldr	r3, [pc, #544]	; (8001dec <HAL_RCC_OscConfig+0x4cc>)
 8001bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bce:	4a87      	ldr	r2, [pc, #540]	; (8001dec <HAL_RCC_OscConfig+0x4cc>)
 8001bd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bd4:	6413      	str	r3, [r2, #64]	; 0x40
 8001bd6:	4b85      	ldr	r3, [pc, #532]	; (8001dec <HAL_RCC_OscConfig+0x4cc>)
 8001bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bde:	60bb      	str	r3, [r7, #8]
 8001be0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001be2:	2301      	movs	r3, #1
 8001be4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001be6:	4b82      	ldr	r3, [pc, #520]	; (8001df0 <HAL_RCC_OscConfig+0x4d0>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d118      	bne.n	8001c24 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001bf2:	4b7f      	ldr	r3, [pc, #508]	; (8001df0 <HAL_RCC_OscConfig+0x4d0>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a7e      	ldr	r2, [pc, #504]	; (8001df0 <HAL_RCC_OscConfig+0x4d0>)
 8001bf8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bfc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bfe:	f7ff fafb 	bl	80011f8 <HAL_GetTick>
 8001c02:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c04:	e008      	b.n	8001c18 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c06:	f7ff faf7 	bl	80011f8 <HAL_GetTick>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	1ad3      	subs	r3, r2, r3
 8001c10:	2b64      	cmp	r3, #100	; 0x64
 8001c12:	d901      	bls.n	8001c18 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001c14:	2303      	movs	r3, #3
 8001c16:	e120      	b.n	8001e5a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c18:	4b75      	ldr	r3, [pc, #468]	; (8001df0 <HAL_RCC_OscConfig+0x4d0>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d0f0      	beq.n	8001c06 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	2b01      	cmp	r3, #1
 8001c2a:	d106      	bne.n	8001c3a <HAL_RCC_OscConfig+0x31a>
 8001c2c:	4b6f      	ldr	r3, [pc, #444]	; (8001dec <HAL_RCC_OscConfig+0x4cc>)
 8001c2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c30:	4a6e      	ldr	r2, [pc, #440]	; (8001dec <HAL_RCC_OscConfig+0x4cc>)
 8001c32:	f043 0301 	orr.w	r3, r3, #1
 8001c36:	6713      	str	r3, [r2, #112]	; 0x70
 8001c38:	e02d      	b.n	8001c96 <HAL_RCC_OscConfig+0x376>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	689b      	ldr	r3, [r3, #8]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d10c      	bne.n	8001c5c <HAL_RCC_OscConfig+0x33c>
 8001c42:	4b6a      	ldr	r3, [pc, #424]	; (8001dec <HAL_RCC_OscConfig+0x4cc>)
 8001c44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c46:	4a69      	ldr	r2, [pc, #420]	; (8001dec <HAL_RCC_OscConfig+0x4cc>)
 8001c48:	f023 0301 	bic.w	r3, r3, #1
 8001c4c:	6713      	str	r3, [r2, #112]	; 0x70
 8001c4e:	4b67      	ldr	r3, [pc, #412]	; (8001dec <HAL_RCC_OscConfig+0x4cc>)
 8001c50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c52:	4a66      	ldr	r2, [pc, #408]	; (8001dec <HAL_RCC_OscConfig+0x4cc>)
 8001c54:	f023 0304 	bic.w	r3, r3, #4
 8001c58:	6713      	str	r3, [r2, #112]	; 0x70
 8001c5a:	e01c      	b.n	8001c96 <HAL_RCC_OscConfig+0x376>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	2b05      	cmp	r3, #5
 8001c62:	d10c      	bne.n	8001c7e <HAL_RCC_OscConfig+0x35e>
 8001c64:	4b61      	ldr	r3, [pc, #388]	; (8001dec <HAL_RCC_OscConfig+0x4cc>)
 8001c66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c68:	4a60      	ldr	r2, [pc, #384]	; (8001dec <HAL_RCC_OscConfig+0x4cc>)
 8001c6a:	f043 0304 	orr.w	r3, r3, #4
 8001c6e:	6713      	str	r3, [r2, #112]	; 0x70
 8001c70:	4b5e      	ldr	r3, [pc, #376]	; (8001dec <HAL_RCC_OscConfig+0x4cc>)
 8001c72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c74:	4a5d      	ldr	r2, [pc, #372]	; (8001dec <HAL_RCC_OscConfig+0x4cc>)
 8001c76:	f043 0301 	orr.w	r3, r3, #1
 8001c7a:	6713      	str	r3, [r2, #112]	; 0x70
 8001c7c:	e00b      	b.n	8001c96 <HAL_RCC_OscConfig+0x376>
 8001c7e:	4b5b      	ldr	r3, [pc, #364]	; (8001dec <HAL_RCC_OscConfig+0x4cc>)
 8001c80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c82:	4a5a      	ldr	r2, [pc, #360]	; (8001dec <HAL_RCC_OscConfig+0x4cc>)
 8001c84:	f023 0301 	bic.w	r3, r3, #1
 8001c88:	6713      	str	r3, [r2, #112]	; 0x70
 8001c8a:	4b58      	ldr	r3, [pc, #352]	; (8001dec <HAL_RCC_OscConfig+0x4cc>)
 8001c8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c8e:	4a57      	ldr	r2, [pc, #348]	; (8001dec <HAL_RCC_OscConfig+0x4cc>)
 8001c90:	f023 0304 	bic.w	r3, r3, #4
 8001c94:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d015      	beq.n	8001cca <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c9e:	f7ff faab 	bl	80011f8 <HAL_GetTick>
 8001ca2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ca4:	e00a      	b.n	8001cbc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ca6:	f7ff faa7 	bl	80011f8 <HAL_GetTick>
 8001caa:	4602      	mov	r2, r0
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	1ad3      	subs	r3, r2, r3
 8001cb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d901      	bls.n	8001cbc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001cb8:	2303      	movs	r3, #3
 8001cba:	e0ce      	b.n	8001e5a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cbc:	4b4b      	ldr	r3, [pc, #300]	; (8001dec <HAL_RCC_OscConfig+0x4cc>)
 8001cbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cc0:	f003 0302 	and.w	r3, r3, #2
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d0ee      	beq.n	8001ca6 <HAL_RCC_OscConfig+0x386>
 8001cc8:	e014      	b.n	8001cf4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cca:	f7ff fa95 	bl	80011f8 <HAL_GetTick>
 8001cce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cd0:	e00a      	b.n	8001ce8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cd2:	f7ff fa91 	bl	80011f8 <HAL_GetTick>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	1ad3      	subs	r3, r2, r3
 8001cdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d901      	bls.n	8001ce8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001ce4:	2303      	movs	r3, #3
 8001ce6:	e0b8      	b.n	8001e5a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ce8:	4b40      	ldr	r3, [pc, #256]	; (8001dec <HAL_RCC_OscConfig+0x4cc>)
 8001cea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cec:	f003 0302 	and.w	r3, r3, #2
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d1ee      	bne.n	8001cd2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001cf4:	7dfb      	ldrb	r3, [r7, #23]
 8001cf6:	2b01      	cmp	r3, #1
 8001cf8:	d105      	bne.n	8001d06 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cfa:	4b3c      	ldr	r3, [pc, #240]	; (8001dec <HAL_RCC_OscConfig+0x4cc>)
 8001cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cfe:	4a3b      	ldr	r2, [pc, #236]	; (8001dec <HAL_RCC_OscConfig+0x4cc>)
 8001d00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d04:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	699b      	ldr	r3, [r3, #24]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	f000 80a4 	beq.w	8001e58 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d10:	4b36      	ldr	r3, [pc, #216]	; (8001dec <HAL_RCC_OscConfig+0x4cc>)
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	f003 030c 	and.w	r3, r3, #12
 8001d18:	2b08      	cmp	r3, #8
 8001d1a:	d06b      	beq.n	8001df4 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	699b      	ldr	r3, [r3, #24]
 8001d20:	2b02      	cmp	r3, #2
 8001d22:	d149      	bne.n	8001db8 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d24:	4b31      	ldr	r3, [pc, #196]	; (8001dec <HAL_RCC_OscConfig+0x4cc>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a30      	ldr	r2, [pc, #192]	; (8001dec <HAL_RCC_OscConfig+0x4cc>)
 8001d2a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d30:	f7ff fa62 	bl	80011f8 <HAL_GetTick>
 8001d34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d36:	e008      	b.n	8001d4a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d38:	f7ff fa5e 	bl	80011f8 <HAL_GetTick>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	1ad3      	subs	r3, r2, r3
 8001d42:	2b02      	cmp	r3, #2
 8001d44:	d901      	bls.n	8001d4a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001d46:	2303      	movs	r3, #3
 8001d48:	e087      	b.n	8001e5a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d4a:	4b28      	ldr	r3, [pc, #160]	; (8001dec <HAL_RCC_OscConfig+0x4cc>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d1f0      	bne.n	8001d38 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	69da      	ldr	r2, [r3, #28]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6a1b      	ldr	r3, [r3, #32]
 8001d5e:	431a      	orrs	r2, r3
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d64:	019b      	lsls	r3, r3, #6
 8001d66:	431a      	orrs	r2, r3
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d6c:	085b      	lsrs	r3, r3, #1
 8001d6e:	3b01      	subs	r3, #1
 8001d70:	041b      	lsls	r3, r3, #16
 8001d72:	431a      	orrs	r2, r3
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d78:	061b      	lsls	r3, r3, #24
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	4a1b      	ldr	r2, [pc, #108]	; (8001dec <HAL_RCC_OscConfig+0x4cc>)
 8001d7e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001d82:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d84:	4b19      	ldr	r3, [pc, #100]	; (8001dec <HAL_RCC_OscConfig+0x4cc>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a18      	ldr	r2, [pc, #96]	; (8001dec <HAL_RCC_OscConfig+0x4cc>)
 8001d8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d90:	f7ff fa32 	bl	80011f8 <HAL_GetTick>
 8001d94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d96:	e008      	b.n	8001daa <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d98:	f7ff fa2e 	bl	80011f8 <HAL_GetTick>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	2b02      	cmp	r3, #2
 8001da4:	d901      	bls.n	8001daa <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8001da6:	2303      	movs	r3, #3
 8001da8:	e057      	b.n	8001e5a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001daa:	4b10      	ldr	r3, [pc, #64]	; (8001dec <HAL_RCC_OscConfig+0x4cc>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d0f0      	beq.n	8001d98 <HAL_RCC_OscConfig+0x478>
 8001db6:	e04f      	b.n	8001e58 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001db8:	4b0c      	ldr	r3, [pc, #48]	; (8001dec <HAL_RCC_OscConfig+0x4cc>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a0b      	ldr	r2, [pc, #44]	; (8001dec <HAL_RCC_OscConfig+0x4cc>)
 8001dbe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001dc2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dc4:	f7ff fa18 	bl	80011f8 <HAL_GetTick>
 8001dc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dca:	e008      	b.n	8001dde <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dcc:	f7ff fa14 	bl	80011f8 <HAL_GetTick>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	1ad3      	subs	r3, r2, r3
 8001dd6:	2b02      	cmp	r3, #2
 8001dd8:	d901      	bls.n	8001dde <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8001dda:	2303      	movs	r3, #3
 8001ddc:	e03d      	b.n	8001e5a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dde:	4b03      	ldr	r3, [pc, #12]	; (8001dec <HAL_RCC_OscConfig+0x4cc>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d1f0      	bne.n	8001dcc <HAL_RCC_OscConfig+0x4ac>
 8001dea:	e035      	b.n	8001e58 <HAL_RCC_OscConfig+0x538>
 8001dec:	40023800 	.word	0x40023800
 8001df0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001df4:	4b1b      	ldr	r3, [pc, #108]	; (8001e64 <HAL_RCC_OscConfig+0x544>)
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	699b      	ldr	r3, [r3, #24]
 8001dfe:	2b01      	cmp	r3, #1
 8001e00:	d028      	beq.n	8001e54 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	d121      	bne.n	8001e54 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e1a:	429a      	cmp	r2, r3
 8001e1c:	d11a      	bne.n	8001e54 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e1e:	68fa      	ldr	r2, [r7, #12]
 8001e20:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001e24:	4013      	ands	r3, r2
 8001e26:	687a      	ldr	r2, [r7, #4]
 8001e28:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001e2a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d111      	bne.n	8001e54 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e3a:	085b      	lsrs	r3, r3, #1
 8001e3c:	3b01      	subs	r3, #1
 8001e3e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d107      	bne.n	8001e54 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e4e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d001      	beq.n	8001e58 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	e000      	b.n	8001e5a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8001e58:	2300      	movs	r3, #0
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3718      	adds	r7, #24
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	40023800 	.word	0x40023800

08001e68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b084      	sub	sp, #16
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
 8001e70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001e72:	2300      	movs	r3, #0
 8001e74:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d101      	bne.n	8001e80 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e0d0      	b.n	8002022 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e80:	4b6a      	ldr	r3, [pc, #424]	; (800202c <HAL_RCC_ClockConfig+0x1c4>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 030f 	and.w	r3, r3, #15
 8001e88:	683a      	ldr	r2, [r7, #0]
 8001e8a:	429a      	cmp	r2, r3
 8001e8c:	d910      	bls.n	8001eb0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e8e:	4b67      	ldr	r3, [pc, #412]	; (800202c <HAL_RCC_ClockConfig+0x1c4>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f023 020f 	bic.w	r2, r3, #15
 8001e96:	4965      	ldr	r1, [pc, #404]	; (800202c <HAL_RCC_ClockConfig+0x1c4>)
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e9e:	4b63      	ldr	r3, [pc, #396]	; (800202c <HAL_RCC_ClockConfig+0x1c4>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 030f 	and.w	r3, r3, #15
 8001ea6:	683a      	ldr	r2, [r7, #0]
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	d001      	beq.n	8001eb0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001eac:	2301      	movs	r3, #1
 8001eae:	e0b8      	b.n	8002022 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f003 0302 	and.w	r3, r3, #2
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d020      	beq.n	8001efe <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f003 0304 	and.w	r3, r3, #4
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d005      	beq.n	8001ed4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ec8:	4b59      	ldr	r3, [pc, #356]	; (8002030 <HAL_RCC_ClockConfig+0x1c8>)
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	4a58      	ldr	r2, [pc, #352]	; (8002030 <HAL_RCC_ClockConfig+0x1c8>)
 8001ece:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001ed2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f003 0308 	and.w	r3, r3, #8
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d005      	beq.n	8001eec <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ee0:	4b53      	ldr	r3, [pc, #332]	; (8002030 <HAL_RCC_ClockConfig+0x1c8>)
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	4a52      	ldr	r2, [pc, #328]	; (8002030 <HAL_RCC_ClockConfig+0x1c8>)
 8001ee6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001eea:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001eec:	4b50      	ldr	r3, [pc, #320]	; (8002030 <HAL_RCC_ClockConfig+0x1c8>)
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	494d      	ldr	r1, [pc, #308]	; (8002030 <HAL_RCC_ClockConfig+0x1c8>)
 8001efa:	4313      	orrs	r3, r2
 8001efc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 0301 	and.w	r3, r3, #1
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d040      	beq.n	8001f8c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d107      	bne.n	8001f22 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f12:	4b47      	ldr	r3, [pc, #284]	; (8002030 <HAL_RCC_ClockConfig+0x1c8>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d115      	bne.n	8001f4a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e07f      	b.n	8002022 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	2b02      	cmp	r3, #2
 8001f28:	d107      	bne.n	8001f3a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f2a:	4b41      	ldr	r3, [pc, #260]	; (8002030 <HAL_RCC_ClockConfig+0x1c8>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d109      	bne.n	8001f4a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e073      	b.n	8002022 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f3a:	4b3d      	ldr	r3, [pc, #244]	; (8002030 <HAL_RCC_ClockConfig+0x1c8>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 0302 	and.w	r3, r3, #2
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d101      	bne.n	8001f4a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	e06b      	b.n	8002022 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f4a:	4b39      	ldr	r3, [pc, #228]	; (8002030 <HAL_RCC_ClockConfig+0x1c8>)
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	f023 0203 	bic.w	r2, r3, #3
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	4936      	ldr	r1, [pc, #216]	; (8002030 <HAL_RCC_ClockConfig+0x1c8>)
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f5c:	f7ff f94c 	bl	80011f8 <HAL_GetTick>
 8001f60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f62:	e00a      	b.n	8001f7a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f64:	f7ff f948 	bl	80011f8 <HAL_GetTick>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d901      	bls.n	8001f7a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001f76:	2303      	movs	r3, #3
 8001f78:	e053      	b.n	8002022 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f7a:	4b2d      	ldr	r3, [pc, #180]	; (8002030 <HAL_RCC_ClockConfig+0x1c8>)
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	f003 020c 	and.w	r2, r3, #12
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	009b      	lsls	r3, r3, #2
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	d1eb      	bne.n	8001f64 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f8c:	4b27      	ldr	r3, [pc, #156]	; (800202c <HAL_RCC_ClockConfig+0x1c4>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f003 030f 	and.w	r3, r3, #15
 8001f94:	683a      	ldr	r2, [r7, #0]
 8001f96:	429a      	cmp	r2, r3
 8001f98:	d210      	bcs.n	8001fbc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f9a:	4b24      	ldr	r3, [pc, #144]	; (800202c <HAL_RCC_ClockConfig+0x1c4>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f023 020f 	bic.w	r2, r3, #15
 8001fa2:	4922      	ldr	r1, [pc, #136]	; (800202c <HAL_RCC_ClockConfig+0x1c4>)
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001faa:	4b20      	ldr	r3, [pc, #128]	; (800202c <HAL_RCC_ClockConfig+0x1c4>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f003 030f 	and.w	r3, r3, #15
 8001fb2:	683a      	ldr	r2, [r7, #0]
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d001      	beq.n	8001fbc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	e032      	b.n	8002022 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f003 0304 	and.w	r3, r3, #4
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d008      	beq.n	8001fda <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fc8:	4b19      	ldr	r3, [pc, #100]	; (8002030 <HAL_RCC_ClockConfig+0x1c8>)
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	68db      	ldr	r3, [r3, #12]
 8001fd4:	4916      	ldr	r1, [pc, #88]	; (8002030 <HAL_RCC_ClockConfig+0x1c8>)
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 0308 	and.w	r3, r3, #8
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d009      	beq.n	8001ffa <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001fe6:	4b12      	ldr	r3, [pc, #72]	; (8002030 <HAL_RCC_ClockConfig+0x1c8>)
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	691b      	ldr	r3, [r3, #16]
 8001ff2:	00db      	lsls	r3, r3, #3
 8001ff4:	490e      	ldr	r1, [pc, #56]	; (8002030 <HAL_RCC_ClockConfig+0x1c8>)
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001ffa:	f000 f821 	bl	8002040 <HAL_RCC_GetSysClockFreq>
 8001ffe:	4602      	mov	r2, r0
 8002000:	4b0b      	ldr	r3, [pc, #44]	; (8002030 <HAL_RCC_ClockConfig+0x1c8>)
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	091b      	lsrs	r3, r3, #4
 8002006:	f003 030f 	and.w	r3, r3, #15
 800200a:	490a      	ldr	r1, [pc, #40]	; (8002034 <HAL_RCC_ClockConfig+0x1cc>)
 800200c:	5ccb      	ldrb	r3, [r1, r3]
 800200e:	fa22 f303 	lsr.w	r3, r2, r3
 8002012:	4a09      	ldr	r2, [pc, #36]	; (8002038 <HAL_RCC_ClockConfig+0x1d0>)
 8002014:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002016:	4b09      	ldr	r3, [pc, #36]	; (800203c <HAL_RCC_ClockConfig+0x1d4>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4618      	mov	r0, r3
 800201c:	f7ff f8a8 	bl	8001170 <HAL_InitTick>

  return HAL_OK;
 8002020:	2300      	movs	r3, #0
}
 8002022:	4618      	mov	r0, r3
 8002024:	3710      	adds	r7, #16
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	40023c00 	.word	0x40023c00
 8002030:	40023800 	.word	0x40023800
 8002034:	08008624 	.word	0x08008624
 8002038:	20000120 	.word	0x20000120
 800203c:	20000124 	.word	0x20000124

08002040 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002040:	b5b0      	push	{r4, r5, r7, lr}
 8002042:	b084      	sub	sp, #16
 8002044:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002046:	2100      	movs	r1, #0
 8002048:	6079      	str	r1, [r7, #4]
 800204a:	2100      	movs	r1, #0
 800204c:	60f9      	str	r1, [r7, #12]
 800204e:	2100      	movs	r1, #0
 8002050:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 8002052:	2100      	movs	r1, #0
 8002054:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002056:	4952      	ldr	r1, [pc, #328]	; (80021a0 <HAL_RCC_GetSysClockFreq+0x160>)
 8002058:	6889      	ldr	r1, [r1, #8]
 800205a:	f001 010c 	and.w	r1, r1, #12
 800205e:	2908      	cmp	r1, #8
 8002060:	d00d      	beq.n	800207e <HAL_RCC_GetSysClockFreq+0x3e>
 8002062:	2908      	cmp	r1, #8
 8002064:	f200 8094 	bhi.w	8002190 <HAL_RCC_GetSysClockFreq+0x150>
 8002068:	2900      	cmp	r1, #0
 800206a:	d002      	beq.n	8002072 <HAL_RCC_GetSysClockFreq+0x32>
 800206c:	2904      	cmp	r1, #4
 800206e:	d003      	beq.n	8002078 <HAL_RCC_GetSysClockFreq+0x38>
 8002070:	e08e      	b.n	8002190 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002072:	4b4c      	ldr	r3, [pc, #304]	; (80021a4 <HAL_RCC_GetSysClockFreq+0x164>)
 8002074:	60bb      	str	r3, [r7, #8]
      break;
 8002076:	e08e      	b.n	8002196 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002078:	4b4b      	ldr	r3, [pc, #300]	; (80021a8 <HAL_RCC_GetSysClockFreq+0x168>)
 800207a:	60bb      	str	r3, [r7, #8]
      break;
 800207c:	e08b      	b.n	8002196 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800207e:	4948      	ldr	r1, [pc, #288]	; (80021a0 <HAL_RCC_GetSysClockFreq+0x160>)
 8002080:	6849      	ldr	r1, [r1, #4]
 8002082:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8002086:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002088:	4945      	ldr	r1, [pc, #276]	; (80021a0 <HAL_RCC_GetSysClockFreq+0x160>)
 800208a:	6849      	ldr	r1, [r1, #4]
 800208c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8002090:	2900      	cmp	r1, #0
 8002092:	d024      	beq.n	80020de <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002094:	4942      	ldr	r1, [pc, #264]	; (80021a0 <HAL_RCC_GetSysClockFreq+0x160>)
 8002096:	6849      	ldr	r1, [r1, #4]
 8002098:	0989      	lsrs	r1, r1, #6
 800209a:	4608      	mov	r0, r1
 800209c:	f04f 0100 	mov.w	r1, #0
 80020a0:	f240 14ff 	movw	r4, #511	; 0x1ff
 80020a4:	f04f 0500 	mov.w	r5, #0
 80020a8:	ea00 0204 	and.w	r2, r0, r4
 80020ac:	ea01 0305 	and.w	r3, r1, r5
 80020b0:	493d      	ldr	r1, [pc, #244]	; (80021a8 <HAL_RCC_GetSysClockFreq+0x168>)
 80020b2:	fb01 f003 	mul.w	r0, r1, r3
 80020b6:	2100      	movs	r1, #0
 80020b8:	fb01 f102 	mul.w	r1, r1, r2
 80020bc:	1844      	adds	r4, r0, r1
 80020be:	493a      	ldr	r1, [pc, #232]	; (80021a8 <HAL_RCC_GetSysClockFreq+0x168>)
 80020c0:	fba2 0101 	umull	r0, r1, r2, r1
 80020c4:	1863      	adds	r3, r4, r1
 80020c6:	4619      	mov	r1, r3
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	461a      	mov	r2, r3
 80020cc:	f04f 0300 	mov.w	r3, #0
 80020d0:	f7fe f89a 	bl	8000208 <__aeabi_uldivmod>
 80020d4:	4602      	mov	r2, r0
 80020d6:	460b      	mov	r3, r1
 80020d8:	4613      	mov	r3, r2
 80020da:	60fb      	str	r3, [r7, #12]
 80020dc:	e04a      	b.n	8002174 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020de:	4b30      	ldr	r3, [pc, #192]	; (80021a0 <HAL_RCC_GetSysClockFreq+0x160>)
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	099b      	lsrs	r3, r3, #6
 80020e4:	461a      	mov	r2, r3
 80020e6:	f04f 0300 	mov.w	r3, #0
 80020ea:	f240 10ff 	movw	r0, #511	; 0x1ff
 80020ee:	f04f 0100 	mov.w	r1, #0
 80020f2:	ea02 0400 	and.w	r4, r2, r0
 80020f6:	ea03 0501 	and.w	r5, r3, r1
 80020fa:	4620      	mov	r0, r4
 80020fc:	4629      	mov	r1, r5
 80020fe:	f04f 0200 	mov.w	r2, #0
 8002102:	f04f 0300 	mov.w	r3, #0
 8002106:	014b      	lsls	r3, r1, #5
 8002108:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800210c:	0142      	lsls	r2, r0, #5
 800210e:	4610      	mov	r0, r2
 8002110:	4619      	mov	r1, r3
 8002112:	1b00      	subs	r0, r0, r4
 8002114:	eb61 0105 	sbc.w	r1, r1, r5
 8002118:	f04f 0200 	mov.w	r2, #0
 800211c:	f04f 0300 	mov.w	r3, #0
 8002120:	018b      	lsls	r3, r1, #6
 8002122:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002126:	0182      	lsls	r2, r0, #6
 8002128:	1a12      	subs	r2, r2, r0
 800212a:	eb63 0301 	sbc.w	r3, r3, r1
 800212e:	f04f 0000 	mov.w	r0, #0
 8002132:	f04f 0100 	mov.w	r1, #0
 8002136:	00d9      	lsls	r1, r3, #3
 8002138:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800213c:	00d0      	lsls	r0, r2, #3
 800213e:	4602      	mov	r2, r0
 8002140:	460b      	mov	r3, r1
 8002142:	1912      	adds	r2, r2, r4
 8002144:	eb45 0303 	adc.w	r3, r5, r3
 8002148:	f04f 0000 	mov.w	r0, #0
 800214c:	f04f 0100 	mov.w	r1, #0
 8002150:	0299      	lsls	r1, r3, #10
 8002152:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002156:	0290      	lsls	r0, r2, #10
 8002158:	4602      	mov	r2, r0
 800215a:	460b      	mov	r3, r1
 800215c:	4610      	mov	r0, r2
 800215e:	4619      	mov	r1, r3
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	461a      	mov	r2, r3
 8002164:	f04f 0300 	mov.w	r3, #0
 8002168:	f7fe f84e 	bl	8000208 <__aeabi_uldivmod>
 800216c:	4602      	mov	r2, r0
 800216e:	460b      	mov	r3, r1
 8002170:	4613      	mov	r3, r2
 8002172:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002174:	4b0a      	ldr	r3, [pc, #40]	; (80021a0 <HAL_RCC_GetSysClockFreq+0x160>)
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	0c1b      	lsrs	r3, r3, #16
 800217a:	f003 0303 	and.w	r3, r3, #3
 800217e:	3301      	adds	r3, #1
 8002180:	005b      	lsls	r3, r3, #1
 8002182:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8002184:	68fa      	ldr	r2, [r7, #12]
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	fbb2 f3f3 	udiv	r3, r2, r3
 800218c:	60bb      	str	r3, [r7, #8]
      break;
 800218e:	e002      	b.n	8002196 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002190:	4b04      	ldr	r3, [pc, #16]	; (80021a4 <HAL_RCC_GetSysClockFreq+0x164>)
 8002192:	60bb      	str	r3, [r7, #8]
      break;
 8002194:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002196:	68bb      	ldr	r3, [r7, #8]
}
 8002198:	4618      	mov	r0, r3
 800219a:	3710      	adds	r7, #16
 800219c:	46bd      	mov	sp, r7
 800219e:	bdb0      	pop	{r4, r5, r7, pc}
 80021a0:	40023800 	.word	0x40023800
 80021a4:	00f42400 	.word	0x00f42400
 80021a8:	017d7840 	.word	0x017d7840

080021ac <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021ac:	b480      	push	{r7}
 80021ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021b0:	4b03      	ldr	r3, [pc, #12]	; (80021c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80021b2:	681b      	ldr	r3, [r3, #0]
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr
 80021be:	bf00      	nop
 80021c0:	20000120 	.word	0x20000120

080021c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80021c8:	f7ff fff0 	bl	80021ac <HAL_RCC_GetHCLKFreq>
 80021cc:	4602      	mov	r2, r0
 80021ce:	4b05      	ldr	r3, [pc, #20]	; (80021e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	0a9b      	lsrs	r3, r3, #10
 80021d4:	f003 0307 	and.w	r3, r3, #7
 80021d8:	4903      	ldr	r1, [pc, #12]	; (80021e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80021da:	5ccb      	ldrb	r3, [r1, r3]
 80021dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	bd80      	pop	{r7, pc}
 80021e4:	40023800 	.word	0x40023800
 80021e8:	08008634 	.word	0x08008634

080021ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80021f0:	f7ff ffdc 	bl	80021ac <HAL_RCC_GetHCLKFreq>
 80021f4:	4602      	mov	r2, r0
 80021f6:	4b05      	ldr	r3, [pc, #20]	; (800220c <HAL_RCC_GetPCLK2Freq+0x20>)
 80021f8:	689b      	ldr	r3, [r3, #8]
 80021fa:	0b5b      	lsrs	r3, r3, #13
 80021fc:	f003 0307 	and.w	r3, r3, #7
 8002200:	4903      	ldr	r1, [pc, #12]	; (8002210 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002202:	5ccb      	ldrb	r3, [r1, r3]
 8002204:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002208:	4618      	mov	r0, r3
 800220a:	bd80      	pop	{r7, pc}
 800220c:	40023800 	.word	0x40023800
 8002210:	08008634 	.word	0x08008634

08002214 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b088      	sub	sp, #32
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800221c:	2300      	movs	r3, #0
 800221e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002220:	2300      	movs	r3, #0
 8002222:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002224:	2300      	movs	r3, #0
 8002226:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002228:	2300      	movs	r3, #0
 800222a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800222c:	2300      	movs	r3, #0
 800222e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 0301 	and.w	r3, r3, #1
 8002238:	2b00      	cmp	r3, #0
 800223a:	d012      	beq.n	8002262 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800223c:	4b69      	ldr	r3, [pc, #420]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	4a68      	ldr	r2, [pc, #416]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002242:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002246:	6093      	str	r3, [r2, #8]
 8002248:	4b66      	ldr	r3, [pc, #408]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800224a:	689a      	ldr	r2, [r3, #8]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002250:	4964      	ldr	r1, [pc, #400]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002252:	4313      	orrs	r3, r2
 8002254:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800225a:	2b00      	cmp	r3, #0
 800225c:	d101      	bne.n	8002262 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800225e:	2301      	movs	r3, #1
 8002260:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800226a:	2b00      	cmp	r3, #0
 800226c:	d017      	beq.n	800229e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800226e:	4b5d      	ldr	r3, [pc, #372]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002270:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002274:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800227c:	4959      	ldr	r1, [pc, #356]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800227e:	4313      	orrs	r3, r2
 8002280:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002288:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800228c:	d101      	bne.n	8002292 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800228e:	2301      	movs	r3, #1
 8002290:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002296:	2b00      	cmp	r3, #0
 8002298:	d101      	bne.n	800229e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800229a:	2301      	movs	r3, #1
 800229c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d017      	beq.n	80022da <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80022aa:	4b4e      	ldr	r3, [pc, #312]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80022b0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b8:	494a      	ldr	r1, [pc, #296]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022ba:	4313      	orrs	r3, r2
 80022bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022c8:	d101      	bne.n	80022ce <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80022ca:	2301      	movs	r3, #1
 80022cc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d101      	bne.n	80022da <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80022d6:	2301      	movs	r3, #1
 80022d8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d001      	beq.n	80022ea <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80022e6:	2301      	movs	r3, #1
 80022e8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 0320 	and.w	r3, r3, #32
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	f000 808b 	beq.w	800240e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80022f8:	4b3a      	ldr	r3, [pc, #232]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fc:	4a39      	ldr	r2, [pc, #228]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002302:	6413      	str	r3, [r2, #64]	; 0x40
 8002304:	4b37      	ldr	r3, [pc, #220]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002308:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800230c:	60bb      	str	r3, [r7, #8]
 800230e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002310:	4b35      	ldr	r3, [pc, #212]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a34      	ldr	r2, [pc, #208]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002316:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800231a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800231c:	f7fe ff6c 	bl	80011f8 <HAL_GetTick>
 8002320:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002322:	e008      	b.n	8002336 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002324:	f7fe ff68 	bl	80011f8 <HAL_GetTick>
 8002328:	4602      	mov	r2, r0
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	1ad3      	subs	r3, r2, r3
 800232e:	2b64      	cmp	r3, #100	; 0x64
 8002330:	d901      	bls.n	8002336 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002332:	2303      	movs	r3, #3
 8002334:	e357      	b.n	80029e6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002336:	4b2c      	ldr	r3, [pc, #176]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800233e:	2b00      	cmp	r3, #0
 8002340:	d0f0      	beq.n	8002324 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002342:	4b28      	ldr	r3, [pc, #160]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002344:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002346:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800234a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d035      	beq.n	80023be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002356:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800235a:	693a      	ldr	r2, [r7, #16]
 800235c:	429a      	cmp	r2, r3
 800235e:	d02e      	beq.n	80023be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002360:	4b20      	ldr	r3, [pc, #128]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002362:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002364:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002368:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800236a:	4b1e      	ldr	r3, [pc, #120]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800236c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800236e:	4a1d      	ldr	r2, [pc, #116]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002370:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002374:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002376:	4b1b      	ldr	r3, [pc, #108]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002378:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800237a:	4a1a      	ldr	r2, [pc, #104]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800237c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002380:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002382:	4a18      	ldr	r2, [pc, #96]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002388:	4b16      	ldr	r3, [pc, #88]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800238a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800238c:	f003 0301 	and.w	r3, r3, #1
 8002390:	2b01      	cmp	r3, #1
 8002392:	d114      	bne.n	80023be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002394:	f7fe ff30 	bl	80011f8 <HAL_GetTick>
 8002398:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800239a:	e00a      	b.n	80023b2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800239c:	f7fe ff2c 	bl	80011f8 <HAL_GetTick>
 80023a0:	4602      	mov	r2, r0
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	1ad3      	subs	r3, r2, r3
 80023a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d901      	bls.n	80023b2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80023ae:	2303      	movs	r3, #3
 80023b0:	e319      	b.n	80029e6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023b2:	4b0c      	ldr	r3, [pc, #48]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023b6:	f003 0302 	and.w	r3, r3, #2
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d0ee      	beq.n	800239c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80023ca:	d111      	bne.n	80023f0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80023cc:	4b05      	ldr	r3, [pc, #20]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80023d8:	4b04      	ldr	r3, [pc, #16]	; (80023ec <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80023da:	400b      	ands	r3, r1
 80023dc:	4901      	ldr	r1, [pc, #4]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023de:	4313      	orrs	r3, r2
 80023e0:	608b      	str	r3, [r1, #8]
 80023e2:	e00b      	b.n	80023fc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80023e4:	40023800 	.word	0x40023800
 80023e8:	40007000 	.word	0x40007000
 80023ec:	0ffffcff 	.word	0x0ffffcff
 80023f0:	4bb1      	ldr	r3, [pc, #708]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	4ab0      	ldr	r2, [pc, #704]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80023f6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80023fa:	6093      	str	r3, [r2, #8]
 80023fc:	4bae      	ldr	r3, [pc, #696]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80023fe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002404:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002408:	49ab      	ldr	r1, [pc, #684]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800240a:	4313      	orrs	r3, r2
 800240c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 0310 	and.w	r3, r3, #16
 8002416:	2b00      	cmp	r3, #0
 8002418:	d010      	beq.n	800243c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800241a:	4ba7      	ldr	r3, [pc, #668]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800241c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002420:	4aa5      	ldr	r2, [pc, #660]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002422:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002426:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800242a:	4ba3      	ldr	r3, [pc, #652]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800242c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002434:	49a0      	ldr	r1, [pc, #640]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002436:	4313      	orrs	r3, r2
 8002438:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002444:	2b00      	cmp	r3, #0
 8002446:	d00a      	beq.n	800245e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002448:	4b9b      	ldr	r3, [pc, #620]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800244a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800244e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002456:	4998      	ldr	r1, [pc, #608]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002458:	4313      	orrs	r3, r2
 800245a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002466:	2b00      	cmp	r3, #0
 8002468:	d00a      	beq.n	8002480 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800246a:	4b93      	ldr	r3, [pc, #588]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800246c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002470:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002478:	498f      	ldr	r1, [pc, #572]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800247a:	4313      	orrs	r3, r2
 800247c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002488:	2b00      	cmp	r3, #0
 800248a:	d00a      	beq.n	80024a2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800248c:	4b8a      	ldr	r3, [pc, #552]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800248e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002492:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800249a:	4987      	ldr	r1, [pc, #540]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800249c:	4313      	orrs	r3, r2
 800249e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d00a      	beq.n	80024c4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80024ae:	4b82      	ldr	r3, [pc, #520]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80024b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024b4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024bc:	497e      	ldr	r1, [pc, #504]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80024be:	4313      	orrs	r3, r2
 80024c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d00a      	beq.n	80024e6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80024d0:	4b79      	ldr	r3, [pc, #484]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80024d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024d6:	f023 0203 	bic.w	r2, r3, #3
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024de:	4976      	ldr	r1, [pc, #472]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80024e0:	4313      	orrs	r3, r2
 80024e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d00a      	beq.n	8002508 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80024f2:	4b71      	ldr	r3, [pc, #452]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80024f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024f8:	f023 020c 	bic.w	r2, r3, #12
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002500:	496d      	ldr	r1, [pc, #436]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002502:	4313      	orrs	r3, r2
 8002504:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002510:	2b00      	cmp	r3, #0
 8002512:	d00a      	beq.n	800252a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002514:	4b68      	ldr	r3, [pc, #416]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002516:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800251a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002522:	4965      	ldr	r1, [pc, #404]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002524:	4313      	orrs	r3, r2
 8002526:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002532:	2b00      	cmp	r3, #0
 8002534:	d00a      	beq.n	800254c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002536:	4b60      	ldr	r3, [pc, #384]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002538:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800253c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002544:	495c      	ldr	r1, [pc, #368]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002546:	4313      	orrs	r3, r2
 8002548:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002554:	2b00      	cmp	r3, #0
 8002556:	d00a      	beq.n	800256e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002558:	4b57      	ldr	r3, [pc, #348]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800255a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800255e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002566:	4954      	ldr	r1, [pc, #336]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002568:	4313      	orrs	r3, r2
 800256a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002576:	2b00      	cmp	r3, #0
 8002578:	d00a      	beq.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800257a:	4b4f      	ldr	r3, [pc, #316]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800257c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002580:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002588:	494b      	ldr	r1, [pc, #300]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800258a:	4313      	orrs	r3, r2
 800258c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002598:	2b00      	cmp	r3, #0
 800259a:	d00a      	beq.n	80025b2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800259c:	4b46      	ldr	r3, [pc, #280]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800259e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025a2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025aa:	4943      	ldr	r1, [pc, #268]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80025ac:	4313      	orrs	r3, r2
 80025ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d00a      	beq.n	80025d4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80025be:	4b3e      	ldr	r3, [pc, #248]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80025c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025c4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025cc:	493a      	ldr	r1, [pc, #232]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80025ce:	4313      	orrs	r3, r2
 80025d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d00a      	beq.n	80025f6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80025e0:	4b35      	ldr	r3, [pc, #212]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80025e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025e6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80025ee:	4932      	ldr	r1, [pc, #200]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80025f0:	4313      	orrs	r3, r2
 80025f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d011      	beq.n	8002626 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002602:	4b2d      	ldr	r3, [pc, #180]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002604:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002608:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002610:	4929      	ldr	r1, [pc, #164]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002612:	4313      	orrs	r3, r2
 8002614:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800261c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002620:	d101      	bne.n	8002626 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002622:	2301      	movs	r3, #1
 8002624:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 0308 	and.w	r3, r3, #8
 800262e:	2b00      	cmp	r3, #0
 8002630:	d001      	beq.n	8002636 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002632:	2301      	movs	r3, #1
 8002634:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800263e:	2b00      	cmp	r3, #0
 8002640:	d00a      	beq.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002642:	4b1d      	ldr	r3, [pc, #116]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002644:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002648:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002650:	4919      	ldr	r1, [pc, #100]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002652:	4313      	orrs	r3, r2
 8002654:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002660:	2b00      	cmp	r3, #0
 8002662:	d00b      	beq.n	800267c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002664:	4b14      	ldr	r3, [pc, #80]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002666:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800266a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002674:	4910      	ldr	r1, [pc, #64]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002676:	4313      	orrs	r3, r2
 8002678:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800267c:	69fb      	ldr	r3, [r7, #28]
 800267e:	2b01      	cmp	r3, #1
 8002680:	d006      	beq.n	8002690 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800268a:	2b00      	cmp	r3, #0
 800268c:	f000 80d9 	beq.w	8002842 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002690:	4b09      	ldr	r3, [pc, #36]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a08      	ldr	r2, [pc, #32]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002696:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800269a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800269c:	f7fe fdac 	bl	80011f8 <HAL_GetTick>
 80026a0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80026a2:	e00b      	b.n	80026bc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80026a4:	f7fe fda8 	bl	80011f8 <HAL_GetTick>
 80026a8:	4602      	mov	r2, r0
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	1ad3      	subs	r3, r2, r3
 80026ae:	2b64      	cmp	r3, #100	; 0x64
 80026b0:	d904      	bls.n	80026bc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80026b2:	2303      	movs	r3, #3
 80026b4:	e197      	b.n	80029e6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80026b6:	bf00      	nop
 80026b8:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80026bc:	4b6c      	ldr	r3, [pc, #432]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d1ed      	bne.n	80026a4 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 0301 	and.w	r3, r3, #1
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d021      	beq.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d11d      	bne.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80026dc:	4b64      	ldr	r3, [pc, #400]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80026de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026e2:	0c1b      	lsrs	r3, r3, #16
 80026e4:	f003 0303 	and.w	r3, r3, #3
 80026e8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80026ea:	4b61      	ldr	r3, [pc, #388]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80026ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026f0:	0e1b      	lsrs	r3, r3, #24
 80026f2:	f003 030f 	and.w	r3, r3, #15
 80026f6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	019a      	lsls	r2, r3, #6
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	041b      	lsls	r3, r3, #16
 8002702:	431a      	orrs	r2, r3
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	061b      	lsls	r3, r3, #24
 8002708:	431a      	orrs	r2, r3
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	071b      	lsls	r3, r3, #28
 8002710:	4957      	ldr	r1, [pc, #348]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002712:	4313      	orrs	r3, r2
 8002714:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002720:	2b00      	cmp	r3, #0
 8002722:	d004      	beq.n	800272e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002728:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800272c:	d00a      	beq.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002736:	2b00      	cmp	r3, #0
 8002738:	d02e      	beq.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002742:	d129      	bne.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002744:	4b4a      	ldr	r3, [pc, #296]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002746:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800274a:	0c1b      	lsrs	r3, r3, #16
 800274c:	f003 0303 	and.w	r3, r3, #3
 8002750:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002752:	4b47      	ldr	r3, [pc, #284]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002754:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002758:	0f1b      	lsrs	r3, r3, #28
 800275a:	f003 0307 	and.w	r3, r3, #7
 800275e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	019a      	lsls	r2, r3, #6
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	041b      	lsls	r3, r3, #16
 800276a:	431a      	orrs	r2, r3
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	061b      	lsls	r3, r3, #24
 8002772:	431a      	orrs	r2, r3
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	071b      	lsls	r3, r3, #28
 8002778:	493d      	ldr	r1, [pc, #244]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800277a:	4313      	orrs	r3, r2
 800277c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002780:	4b3b      	ldr	r3, [pc, #236]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002782:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002786:	f023 021f 	bic.w	r2, r3, #31
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800278e:	3b01      	subs	r3, #1
 8002790:	4937      	ldr	r1, [pc, #220]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002792:	4313      	orrs	r3, r2
 8002794:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d01d      	beq.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80027a4:	4b32      	ldr	r3, [pc, #200]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80027a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027aa:	0e1b      	lsrs	r3, r3, #24
 80027ac:	f003 030f 	and.w	r3, r3, #15
 80027b0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80027b2:	4b2f      	ldr	r3, [pc, #188]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80027b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027b8:	0f1b      	lsrs	r3, r3, #28
 80027ba:	f003 0307 	and.w	r3, r3, #7
 80027be:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	019a      	lsls	r2, r3, #6
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	691b      	ldr	r3, [r3, #16]
 80027ca:	041b      	lsls	r3, r3, #16
 80027cc:	431a      	orrs	r2, r3
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	061b      	lsls	r3, r3, #24
 80027d2:	431a      	orrs	r2, r3
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	071b      	lsls	r3, r3, #28
 80027d8:	4925      	ldr	r1, [pc, #148]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80027da:	4313      	orrs	r3, r2
 80027dc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d011      	beq.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	019a      	lsls	r2, r3, #6
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	691b      	ldr	r3, [r3, #16]
 80027f6:	041b      	lsls	r3, r3, #16
 80027f8:	431a      	orrs	r2, r3
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	68db      	ldr	r3, [r3, #12]
 80027fe:	061b      	lsls	r3, r3, #24
 8002800:	431a      	orrs	r2, r3
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	071b      	lsls	r3, r3, #28
 8002808:	4919      	ldr	r1, [pc, #100]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800280a:	4313      	orrs	r3, r2
 800280c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002810:	4b17      	ldr	r3, [pc, #92]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a16      	ldr	r2, [pc, #88]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002816:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800281a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800281c:	f7fe fcec 	bl	80011f8 <HAL_GetTick>
 8002820:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002822:	e008      	b.n	8002836 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002824:	f7fe fce8 	bl	80011f8 <HAL_GetTick>
 8002828:	4602      	mov	r2, r0
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	1ad3      	subs	r3, r2, r3
 800282e:	2b64      	cmp	r3, #100	; 0x64
 8002830:	d901      	bls.n	8002836 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002832:	2303      	movs	r3, #3
 8002834:	e0d7      	b.n	80029e6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002836:	4b0e      	ldr	r3, [pc, #56]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800283e:	2b00      	cmp	r3, #0
 8002840:	d0f0      	beq.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002842:	69bb      	ldr	r3, [r7, #24]
 8002844:	2b01      	cmp	r3, #1
 8002846:	f040 80cd 	bne.w	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800284a:	4b09      	ldr	r3, [pc, #36]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a08      	ldr	r2, [pc, #32]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002850:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002854:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002856:	f7fe fccf 	bl	80011f8 <HAL_GetTick>
 800285a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800285c:	e00a      	b.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800285e:	f7fe fccb 	bl	80011f8 <HAL_GetTick>
 8002862:	4602      	mov	r2, r0
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	1ad3      	subs	r3, r2, r3
 8002868:	2b64      	cmp	r3, #100	; 0x64
 800286a:	d903      	bls.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800286c:	2303      	movs	r3, #3
 800286e:	e0ba      	b.n	80029e6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8002870:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002874:	4b5e      	ldr	r3, [pc, #376]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800287c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002880:	d0ed      	beq.n	800285e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800288a:	2b00      	cmp	r3, #0
 800288c:	d003      	beq.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002892:	2b00      	cmp	r3, #0
 8002894:	d009      	beq.n	80028aa <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d02e      	beq.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d12a      	bne.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80028aa:	4b51      	ldr	r3, [pc, #324]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80028ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028b0:	0c1b      	lsrs	r3, r3, #16
 80028b2:	f003 0303 	and.w	r3, r3, #3
 80028b6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80028b8:	4b4d      	ldr	r3, [pc, #308]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80028ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028be:	0f1b      	lsrs	r3, r3, #28
 80028c0:	f003 0307 	and.w	r3, r3, #7
 80028c4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	695b      	ldr	r3, [r3, #20]
 80028ca:	019a      	lsls	r2, r3, #6
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	041b      	lsls	r3, r3, #16
 80028d0:	431a      	orrs	r2, r3
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	699b      	ldr	r3, [r3, #24]
 80028d6:	061b      	lsls	r3, r3, #24
 80028d8:	431a      	orrs	r2, r3
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	071b      	lsls	r3, r3, #28
 80028de:	4944      	ldr	r1, [pc, #272]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80028e0:	4313      	orrs	r3, r2
 80028e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80028e6:	4b42      	ldr	r3, [pc, #264]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80028e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80028ec:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028f4:	3b01      	subs	r3, #1
 80028f6:	021b      	lsls	r3, r3, #8
 80028f8:	493d      	ldr	r1, [pc, #244]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80028fa:	4313      	orrs	r3, r2
 80028fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002908:	2b00      	cmp	r3, #0
 800290a:	d022      	beq.n	8002952 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002910:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002914:	d11d      	bne.n	8002952 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002916:	4b36      	ldr	r3, [pc, #216]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002918:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800291c:	0e1b      	lsrs	r3, r3, #24
 800291e:	f003 030f 	and.w	r3, r3, #15
 8002922:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002924:	4b32      	ldr	r3, [pc, #200]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002926:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800292a:	0f1b      	lsrs	r3, r3, #28
 800292c:	f003 0307 	and.w	r3, r3, #7
 8002930:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	695b      	ldr	r3, [r3, #20]
 8002936:	019a      	lsls	r2, r3, #6
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6a1b      	ldr	r3, [r3, #32]
 800293c:	041b      	lsls	r3, r3, #16
 800293e:	431a      	orrs	r2, r3
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	061b      	lsls	r3, r3, #24
 8002944:	431a      	orrs	r2, r3
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	071b      	lsls	r3, r3, #28
 800294a:	4929      	ldr	r1, [pc, #164]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800294c:	4313      	orrs	r3, r2
 800294e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 0308 	and.w	r3, r3, #8
 800295a:	2b00      	cmp	r3, #0
 800295c:	d028      	beq.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800295e:	4b24      	ldr	r3, [pc, #144]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002960:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002964:	0e1b      	lsrs	r3, r3, #24
 8002966:	f003 030f 	and.w	r3, r3, #15
 800296a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800296c:	4b20      	ldr	r3, [pc, #128]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800296e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002972:	0c1b      	lsrs	r3, r3, #16
 8002974:	f003 0303 	and.w	r3, r3, #3
 8002978:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	695b      	ldr	r3, [r3, #20]
 800297e:	019a      	lsls	r2, r3, #6
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	041b      	lsls	r3, r3, #16
 8002984:	431a      	orrs	r2, r3
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	061b      	lsls	r3, r3, #24
 800298a:	431a      	orrs	r2, r3
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	69db      	ldr	r3, [r3, #28]
 8002990:	071b      	lsls	r3, r3, #28
 8002992:	4917      	ldr	r1, [pc, #92]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002994:	4313      	orrs	r3, r2
 8002996:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800299a:	4b15      	ldr	r3, [pc, #84]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800299c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029a0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029a8:	4911      	ldr	r1, [pc, #68]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80029aa:	4313      	orrs	r3, r2
 80029ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80029b0:	4b0f      	ldr	r3, [pc, #60]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a0e      	ldr	r2, [pc, #56]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80029b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029bc:	f7fe fc1c 	bl	80011f8 <HAL_GetTick>
 80029c0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80029c2:	e008      	b.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80029c4:	f7fe fc18 	bl	80011f8 <HAL_GetTick>
 80029c8:	4602      	mov	r2, r0
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	1ad3      	subs	r3, r2, r3
 80029ce:	2b64      	cmp	r3, #100	; 0x64
 80029d0:	d901      	bls.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80029d2:	2303      	movs	r3, #3
 80029d4:	e007      	b.n	80029e6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80029d6:	4b06      	ldr	r3, [pc, #24]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80029de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80029e2:	d1ef      	bne.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80029e4:	2300      	movs	r3, #0
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	3720      	adds	r7, #32
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	40023800 	.word	0x40023800

080029f4 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b082      	sub	sp, #8
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d101      	bne.n	8002a06 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e022      	b.n	8002a4c <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d105      	bne.n	8002a1e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2200      	movs	r2, #0
 8002a16:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8002a18:	6878      	ldr	r0, [r7, #4]
 8002a1a:	f7fe fa43 	bl	8000ea4 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2203      	movs	r2, #3
 8002a22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	f000 f814 	bl	8002a54 <HAL_SD_InitCard>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d001      	beq.n	8002a36 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e00a      	b.n	8002a4c <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2201      	movs	r2, #1
 8002a46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002a4a:	2300      	movs	r3, #0
}
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	3708      	adds	r7, #8
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}

08002a54 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8002a54:	b5b0      	push	{r4, r5, r7, lr}
 8002a56:	b08e      	sub	sp, #56	; 0x38
 8002a58:	af04      	add	r7, sp, #16
 8002a5a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8002a60:	2300      	movs	r3, #0
 8002a62:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8002a64:	2300      	movs	r3, #0
 8002a66:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8002a70:	2376      	movs	r3, #118	; 0x76
 8002a72:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681d      	ldr	r5, [r3, #0]
 8002a78:	466c      	mov	r4, sp
 8002a7a:	f107 0314 	add.w	r3, r7, #20
 8002a7e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002a82:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002a86:	f107 0308 	add.w	r3, r7, #8
 8002a8a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a8c:	4628      	mov	r0, r5
 8002a8e:	f002 f803 	bl	8004a98 <SDMMC_Init>
 8002a92:	4603      	mov	r3, r0
 8002a94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8002a98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d001      	beq.n	8002aa4 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	e056      	b.n	8002b52 <HAL_SD_InitCard+0xfe>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	685a      	ldr	r2, [r3, #4]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ab2:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f002 f837 	bl	8004b2c <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	685a      	ldr	r2, [r3, #4]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002acc:	605a      	str	r2, [r3, #4]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f000 fe66 	bl	80037a0 <SD_PowerON>
 8002ad4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002ad6:	6a3b      	ldr	r3, [r7, #32]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d00b      	beq.n	8002af4 <HAL_SD_InitCard+0xa0>
  {
    hsd->State = HAL_SD_STATE_READY;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2201      	movs	r2, #1
 8002ae0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ae8:	6a3b      	ldr	r3, [r7, #32]
 8002aea:	431a      	orrs	r2, r3
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002af0:	2301      	movs	r3, #1
 8002af2:	e02e      	b.n	8002b52 <HAL_SD_InitCard+0xfe>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8002af4:	6878      	ldr	r0, [r7, #4]
 8002af6:	f000 fd87 	bl	8003608 <SD_InitCard>
 8002afa:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002afc:	6a3b      	ldr	r3, [r7, #32]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d00b      	beq.n	8002b1a <HAL_SD_InitCard+0xc6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2201      	movs	r2, #1
 8002b06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b0e:	6a3b      	ldr	r3, [r7, #32]
 8002b10:	431a      	orrs	r2, r3
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	e01b      	b.n	8002b52 <HAL_SD_InitCard+0xfe>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002b22:	4618      	mov	r0, r3
 8002b24:	f002 f896 	bl	8004c54 <SDMMC_CmdBlockLength>
 8002b28:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002b2a:	6a3b      	ldr	r3, [r7, #32]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d00f      	beq.n	8002b50 <HAL_SD_InitCard+0xfc>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a09      	ldr	r2, [pc, #36]	; (8002b5c <HAL_SD_InitCard+0x108>)
 8002b36:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b3c:	6a3b      	ldr	r3, [r7, #32]
 8002b3e:	431a      	orrs	r2, r3
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2201      	movs	r2, #1
 8002b48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	e000      	b.n	8002b52 <HAL_SD_InitCard+0xfe>
  }

  return HAL_OK;
 8002b50:	2300      	movs	r3, #0
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	3728      	adds	r7, #40	; 0x28
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bdb0      	pop	{r4, r5, r7, pc}
 8002b5a:	bf00      	nop
 8002b5c:	004005ff 	.word	0x004005ff

08002b60 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b092      	sub	sp, #72	; 0x48
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	60f8      	str	r0, [r7, #12]
 8002b68:	60b9      	str	r1, [r7, #8]
 8002b6a:	607a      	str	r2, [r7, #4]
 8002b6c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8002b6e:	f7fe fb43 	bl	80011f8 <HAL_GetTick>
 8002b72:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d107      	bne.n	8002b92 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b86:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e1bd      	b.n	8002f0e <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002b98:	b2db      	uxtb	r3, r3
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	f040 81b0 	bne.w	8002f00 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002ba6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	441a      	add	r2, r3
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d907      	bls.n	8002bc4 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bb8:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	e1a4      	b.n	8002f0e <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2203      	movs	r2, #3
 8002bc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	d002      	beq.n	8002be2 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8002bdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bde:	025b      	lsls	r3, r3, #9
 8002be0:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002be2:	f04f 33ff 	mov.w	r3, #4294967295
 8002be6:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	025b      	lsls	r3, r3, #9
 8002bec:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8002bee:	2390      	movs	r3, #144	; 0x90
 8002bf0:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8002bf2:	2302      	movs	r3, #2
 8002bf4:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f107 0214 	add.w	r2, r7, #20
 8002c06:	4611      	mov	r1, r2
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f001 fff7 	bl	8004bfc <SDMMC_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d90a      	bls.n	8002c2a <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	2202      	movs	r2, #2
 8002c18:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002c20:	4618      	mov	r0, r3
 8002c22:	f002 f85b 	bl	8004cdc <SDMMC_CmdReadMultiBlock>
 8002c26:	6478      	str	r0, [r7, #68]	; 0x44
 8002c28:	e009      	b.n	8002c3e <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002c36:	4618      	mov	r0, r3
 8002c38:	f002 f82e 	bl	8004c98 <SDMMC_CmdReadSingleBlock>
 8002c3c:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8002c3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d012      	beq.n	8002c6a <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a7a      	ldr	r2, [pc, #488]	; (8002e34 <HAL_SD_ReadBlocks+0x2d4>)
 8002c4a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c52:	431a      	orrs	r2, r3
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	2200      	movs	r2, #0
 8002c64:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	e151      	b.n	8002f0e <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 8002c6a:	69bb      	ldr	r3, [r7, #24]
 8002c6c:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8002c6e:	e061      	b.n	8002d34 <HAL_SD_ReadBlocks+0x1d4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c76:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d03c      	beq.n	8002cf8 <HAL_SD_ReadBlocks+0x198>
 8002c7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d039      	beq.n	8002cf8 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8002c84:	2300      	movs	r3, #0
 8002c86:	643b      	str	r3, [r7, #64]	; 0x40
 8002c88:	e033      	b.n	8002cf2 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f001 ff2e 	bl	8004af0 <SDMMC_ReadFIFO>
 8002c94:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8002c96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c98:	b2da      	uxtb	r2, r3
 8002c9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c9c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8002c9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ca0:	3301      	adds	r3, #1
 8002ca2:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002ca4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ca6:	3b01      	subs	r3, #1
 8002ca8:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8002caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cac:	0a1b      	lsrs	r3, r3, #8
 8002cae:	b2da      	uxtb	r2, r3
 8002cb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cb2:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8002cb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cb6:	3301      	adds	r3, #1
 8002cb8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002cba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cbc:	3b01      	subs	r3, #1
 8002cbe:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8002cc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cc2:	0c1b      	lsrs	r3, r3, #16
 8002cc4:	b2da      	uxtb	r2, r3
 8002cc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cc8:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8002cca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ccc:	3301      	adds	r3, #1
 8002cce:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002cd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cd2:	3b01      	subs	r3, #1
 8002cd4:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8002cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cd8:	0e1b      	lsrs	r3, r3, #24
 8002cda:	b2da      	uxtb	r2, r3
 8002cdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cde:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8002ce0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ce2:	3301      	adds	r3, #1
 8002ce4:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002ce6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ce8:	3b01      	subs	r3, #1
 8002cea:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8002cec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002cee:	3301      	adds	r3, #1
 8002cf0:	643b      	str	r3, [r7, #64]	; 0x40
 8002cf2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002cf4:	2b07      	cmp	r3, #7
 8002cf6:	d9c8      	bls.n	8002c8a <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8002cf8:	f7fe fa7e 	bl	80011f8 <HAL_GetTick>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d00:	1ad3      	subs	r3, r2, r3
 8002d02:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002d04:	429a      	cmp	r2, r3
 8002d06:	d902      	bls.n	8002d0e <HAL_SD_ReadBlocks+0x1ae>
 8002d08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d112      	bne.n	8002d34 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a48      	ldr	r2, [pc, #288]	; (8002e34 <HAL_SD_ReadBlocks+0x2d4>)
 8002d14:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d1a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	2201      	movs	r2, #1
 8002d26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8002d30:	2303      	movs	r3, #3
 8002d32:	e0ec      	b.n	8002f0e <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d3a:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d096      	beq.n	8002c70 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d022      	beq.n	8002d96 <HAL_SD_ReadBlocks+0x236>
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d91f      	bls.n	8002d96 <HAL_SD_ReadBlocks+0x236>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d5a:	2b03      	cmp	r3, #3
 8002d5c:	d01b      	beq.n	8002d96 <HAL_SD_ReadBlocks+0x236>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4618      	mov	r0, r3
 8002d64:	f002 f820 	bl	8004da8 <SDMMC_CmdStopTransfer>
 8002d68:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8002d6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d012      	beq.n	8002d96 <HAL_SD_ReadBlocks+0x236>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a2f      	ldr	r2, [pc, #188]	; (8002e34 <HAL_SD_ReadBlocks+0x2d4>)
 8002d76:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d7e:	431a      	orrs	r2, r3
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2201      	movs	r2, #1
 8002d88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e0bb      	b.n	8002f0e <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d9c:	f003 0308 	and.w	r3, r3, #8
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d012      	beq.n	8002dca <HAL_SD_ReadBlocks+0x26a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a22      	ldr	r2, [pc, #136]	; (8002e34 <HAL_SD_ReadBlocks+0x2d4>)
 8002daa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002db0:	f043 0208 	orr.w	r2, r3, #8
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2201      	movs	r2, #1
 8002dbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e0a1      	b.n	8002f0e <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dd0:	f003 0302 	and.w	r3, r3, #2
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d012      	beq.n	8002dfe <HAL_SD_ReadBlocks+0x29e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a15      	ldr	r2, [pc, #84]	; (8002e34 <HAL_SD_ReadBlocks+0x2d4>)
 8002dde:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002de4:	f043 0202 	orr.w	r2, r3, #2
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2201      	movs	r2, #1
 8002df0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	2200      	movs	r2, #0
 8002df8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e087      	b.n	8002f0e <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e04:	f003 0320 	and.w	r3, r3, #32
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d064      	beq.n	8002ed6 <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a08      	ldr	r2, [pc, #32]	; (8002e34 <HAL_SD_ReadBlocks+0x2d4>)
 8002e12:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e18:	f043 0220 	orr.w	r2, r3, #32
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	2201      	movs	r2, #1
 8002e24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e06d      	b.n	8002f0e <HAL_SD_ReadBlocks+0x3ae>
 8002e32:	bf00      	nop
 8002e34:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f001 fe57 	bl	8004af0 <SDMMC_ReadFIFO>
 8002e42:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8002e44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e46:	b2da      	uxtb	r2, r3
 8002e48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e4a:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8002e4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e4e:	3301      	adds	r3, #1
 8002e50:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8002e52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e54:	3b01      	subs	r3, #1
 8002e56:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8002e58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e5a:	0a1b      	lsrs	r3, r3, #8
 8002e5c:	b2da      	uxtb	r2, r3
 8002e5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e60:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8002e62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e64:	3301      	adds	r3, #1
 8002e66:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8002e68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e6a:	3b01      	subs	r3, #1
 8002e6c:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8002e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e70:	0c1b      	lsrs	r3, r3, #16
 8002e72:	b2da      	uxtb	r2, r3
 8002e74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e76:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8002e78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e7a:	3301      	adds	r3, #1
 8002e7c:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8002e7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e80:	3b01      	subs	r3, #1
 8002e82:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8002e84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e86:	0e1b      	lsrs	r3, r3, #24
 8002e88:	b2da      	uxtb	r2, r3
 8002e8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e8c:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8002e8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e90:	3301      	adds	r3, #1
 8002e92:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8002e94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e96:	3b01      	subs	r3, #1
 8002e98:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8002e9a:	f7fe f9ad 	bl	80011f8 <HAL_GetTick>
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ea2:	1ad3      	subs	r3, r2, r3
 8002ea4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002ea6:	429a      	cmp	r2, r3
 8002ea8:	d902      	bls.n	8002eb0 <HAL_SD_ReadBlocks+0x350>
 8002eaa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d112      	bne.n	8002ed6 <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a18      	ldr	r2, [pc, #96]	; (8002f18 <HAL_SD_ReadBlocks+0x3b8>)
 8002eb6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ebc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e01b      	b.n	8002f0e <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002edc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d002      	beq.n	8002eea <HAL_SD_ReadBlocks+0x38a>
 8002ee4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d1a6      	bne.n	8002e38 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f240 523a 	movw	r2, #1338	; 0x53a
 8002ef2:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8002efc:	2300      	movs	r3, #0
 8002efe:	e006      	b.n	8002f0e <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f04:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002f0c:	2301      	movs	r3, #1
  }
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3748      	adds	r7, #72	; 0x48
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}
 8002f16:	bf00      	nop
 8002f18:	004005ff 	.word	0x004005ff

08002f1c <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b092      	sub	sp, #72	; 0x48
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	60f8      	str	r0, [r7, #12]
 8002f24:	60b9      	str	r1, [r7, #8]
 8002f26:	607a      	str	r2, [r7, #4]
 8002f28:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8002f2a:	f7fe f965 	bl	80011f8 <HAL_GetTick>
 8002f2e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d107      	bne.n	8002f4e <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f42:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e165      	b.n	800321a <HAL_SD_WriteBlocks+0x2fe>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	f040 8158 	bne.w	800320c <HAL_SD_WriteBlocks+0x2f0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002f62:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	441a      	add	r2, r3
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	d907      	bls.n	8002f80 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f74:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	e14c      	b.n	800321a <HAL_SD_WriteBlocks+0x2fe>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	2203      	movs	r2, #3
 8002f84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	d002      	beq.n	8002f9e <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8002f98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f9a:	025b      	lsls	r3, r3, #9
 8002f9c:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002f9e:	f04f 33ff 	mov.w	r3, #4294967295
 8002fa2:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	025b      	lsls	r3, r3, #9
 8002fa8:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8002faa:	2390      	movs	r3, #144	; 0x90
 8002fac:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f107 0218 	add.w	r2, r7, #24
 8002fc2:	4611      	mov	r1, r2
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f001 fe19 	bl	8004bfc <SDMMC_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	d90a      	bls.n	8002fe6 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2220      	movs	r2, #32
 8002fd4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f001 fec1 	bl	8004d64 <SDMMC_CmdWriteMultiBlock>
 8002fe2:	6478      	str	r0, [r7, #68]	; 0x44
 8002fe4:	e009      	b.n	8002ffa <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	2210      	movs	r2, #16
 8002fea:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f001 fe94 	bl	8004d20 <SDMMC_CmdWriteSingleBlock>
 8002ff8:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8002ffa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d012      	beq.n	8003026 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a87      	ldr	r2, [pc, #540]	; (8003224 <HAL_SD_WriteBlocks+0x308>)
 8003006:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800300c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800300e:	431a      	orrs	r2, r3
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2201      	movs	r2, #1
 8003018:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2200      	movs	r2, #0
 8003020:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	e0f9      	b.n	800321a <HAL_SD_WriteBlocks+0x2fe>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8003026:	69fb      	ldr	r3, [r7, #28]
 8003028:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800302a:	e065      	b.n	80030f8 <HAL_SD_WriteBlocks+0x1dc>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining > 0U))
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003032:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003036:	2b00      	cmp	r3, #0
 8003038:	d040      	beq.n	80030bc <HAL_SD_WriteBlocks+0x1a0>
 800303a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800303c:	2b00      	cmp	r3, #0
 800303e:	d03d      	beq.n	80030bc <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8003040:	2300      	movs	r3, #0
 8003042:	643b      	str	r3, [r7, #64]	; 0x40
 8003044:	e037      	b.n	80030b6 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8003046:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003048:	781b      	ldrb	r3, [r3, #0]
 800304a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800304c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800304e:	3301      	adds	r3, #1
 8003050:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003052:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003054:	3b01      	subs	r3, #1
 8003056:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8003058:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800305a:	781b      	ldrb	r3, [r3, #0]
 800305c:	021a      	lsls	r2, r3, #8
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	4313      	orrs	r3, r2
 8003062:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003064:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003066:	3301      	adds	r3, #1
 8003068:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800306a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800306c:	3b01      	subs	r3, #1
 800306e:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8003070:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003072:	781b      	ldrb	r3, [r3, #0]
 8003074:	041a      	lsls	r2, r3, #16
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	4313      	orrs	r3, r2
 800307a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800307c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800307e:	3301      	adds	r3, #1
 8003080:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003082:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003084:	3b01      	subs	r3, #1
 8003086:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8003088:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800308a:	781b      	ldrb	r3, [r3, #0]
 800308c:	061a      	lsls	r2, r3, #24
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	4313      	orrs	r3, r2
 8003092:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003094:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003096:	3301      	adds	r3, #1
 8003098:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800309a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800309c:	3b01      	subs	r3, #1
 800309e:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f107 0214 	add.w	r2, r7, #20
 80030a8:	4611      	mov	r1, r2
 80030aa:	4618      	mov	r0, r3
 80030ac:	f001 fd2d 	bl	8004b0a <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 80030b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030b2:	3301      	adds	r3, #1
 80030b4:	643b      	str	r3, [r7, #64]	; 0x40
 80030b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030b8:	2b07      	cmp	r3, #7
 80030ba:	d9c4      	bls.n	8003046 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80030bc:	f7fe f89c 	bl	80011f8 <HAL_GetTick>
 80030c0:	4602      	mov	r2, r0
 80030c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030c4:	1ad3      	subs	r3, r2, r3
 80030c6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80030c8:	429a      	cmp	r2, r3
 80030ca:	d902      	bls.n	80030d2 <HAL_SD_WriteBlocks+0x1b6>
 80030cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d112      	bne.n	80030f8 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a53      	ldr	r2, [pc, #332]	; (8003224 <HAL_SD_WriteBlocks+0x308>)
 80030d8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80030de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030e0:	431a      	orrs	r2, r3
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2201      	movs	r2, #1
 80030ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	2200      	movs	r2, #0
 80030f2:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 80030f4:	2303      	movs	r3, #3
 80030f6:	e090      	b.n	800321a <HAL_SD_WriteBlocks+0x2fe>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030fe:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 8003102:	2b00      	cmp	r3, #0
 8003104:	d092      	beq.n	800302c <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800310c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003110:	2b00      	cmp	r3, #0
 8003112:	d022      	beq.n	800315a <HAL_SD_WriteBlocks+0x23e>
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	2b01      	cmp	r3, #1
 8003118:	d91f      	bls.n	800315a <HAL_SD_WriteBlocks+0x23e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800311e:	2b03      	cmp	r3, #3
 8003120:	d01b      	beq.n	800315a <HAL_SD_WriteBlocks+0x23e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4618      	mov	r0, r3
 8003128:	f001 fe3e 	bl	8004da8 <SDMMC_CmdStopTransfer>
 800312c:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800312e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003130:	2b00      	cmp	r3, #0
 8003132:	d012      	beq.n	800315a <HAL_SD_WriteBlocks+0x23e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a3a      	ldr	r2, [pc, #232]	; (8003224 <HAL_SD_WriteBlocks+0x308>)
 800313a:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003140:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003142:	431a      	orrs	r2, r3
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	2201      	movs	r2, #1
 800314c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2200      	movs	r2, #0
 8003154:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	e05f      	b.n	800321a <HAL_SD_WriteBlocks+0x2fe>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003160:	f003 0308 	and.w	r3, r3, #8
 8003164:	2b00      	cmp	r3, #0
 8003166:	d012      	beq.n	800318e <HAL_SD_WriteBlocks+0x272>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a2d      	ldr	r2, [pc, #180]	; (8003224 <HAL_SD_WriteBlocks+0x308>)
 800316e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003174:	f043 0208 	orr.w	r2, r3, #8
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2201      	movs	r2, #1
 8003180:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	2200      	movs	r2, #0
 8003188:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	e045      	b.n	800321a <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003194:	f003 0302 	and.w	r3, r3, #2
 8003198:	2b00      	cmp	r3, #0
 800319a:	d012      	beq.n	80031c2 <HAL_SD_WriteBlocks+0x2a6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a20      	ldr	r2, [pc, #128]	; (8003224 <HAL_SD_WriteBlocks+0x308>)
 80031a2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031a8:	f043 0202 	orr.w	r2, r3, #2
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2201      	movs	r2, #1
 80031b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2200      	movs	r2, #0
 80031bc:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	e02b      	b.n	800321a <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031c8:	f003 0310 	and.w	r3, r3, #16
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d012      	beq.n	80031f6 <HAL_SD_WriteBlocks+0x2da>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a13      	ldr	r2, [pc, #76]	; (8003224 <HAL_SD_WriteBlocks+0x308>)
 80031d6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031dc:	f043 0210 	orr.w	r2, r3, #16
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2201      	movs	r2, #1
 80031e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2200      	movs	r2, #0
 80031f0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e011      	b.n	800321a <HAL_SD_WriteBlocks+0x2fe>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f240 523a 	movw	r2, #1338	; 0x53a
 80031fe:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2201      	movs	r2, #1
 8003204:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8003208:	2300      	movs	r3, #0
 800320a:	e006      	b.n	800321a <HAL_SD_WriteBlocks+0x2fe>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003210:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003218:	2301      	movs	r3, #1
  }
}
 800321a:	4618      	mov	r0, r3
 800321c:	3748      	adds	r7, #72	; 0x48
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}
 8003222:	bf00      	nop
 8003224:	004005ff 	.word	0x004005ff

08003228 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8003228:	b480      	push	{r7}
 800322a:	b083      	sub	sp, #12
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
 8003230:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003236:	0f9b      	lsrs	r3, r3, #30
 8003238:	b2da      	uxtb	r2, r3
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003242:	0e9b      	lsrs	r3, r3, #26
 8003244:	b2db      	uxtb	r3, r3
 8003246:	f003 030f 	and.w	r3, r3, #15
 800324a:	b2da      	uxtb	r2, r3
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003254:	0e1b      	lsrs	r3, r3, #24
 8003256:	b2db      	uxtb	r3, r3
 8003258:	f003 0303 	and.w	r3, r3, #3
 800325c:	b2da      	uxtb	r2, r3
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003266:	0c1b      	lsrs	r3, r3, #16
 8003268:	b2da      	uxtb	r2, r3
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003272:	0a1b      	lsrs	r3, r3, #8
 8003274:	b2da      	uxtb	r2, r3
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800327e:	b2da      	uxtb	r2, r3
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003288:	0d1b      	lsrs	r3, r3, #20
 800328a:	b29a      	uxth	r2, r3
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003294:	0c1b      	lsrs	r3, r3, #16
 8003296:	b2db      	uxtb	r3, r3
 8003298:	f003 030f 	and.w	r3, r3, #15
 800329c:	b2da      	uxtb	r2, r3
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80032a6:	0bdb      	lsrs	r3, r3, #15
 80032a8:	b2db      	uxtb	r3, r3
 80032aa:	f003 0301 	and.w	r3, r3, #1
 80032ae:	b2da      	uxtb	r2, r3
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80032b8:	0b9b      	lsrs	r3, r3, #14
 80032ba:	b2db      	uxtb	r3, r3
 80032bc:	f003 0301 	and.w	r3, r3, #1
 80032c0:	b2da      	uxtb	r2, r3
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80032ca:	0b5b      	lsrs	r3, r3, #13
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	f003 0301 	and.w	r3, r3, #1
 80032d2:	b2da      	uxtb	r2, r3
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80032dc:	0b1b      	lsrs	r3, r3, #12
 80032de:	b2db      	uxtb	r3, r3
 80032e0:	f003 0301 	and.w	r3, r3, #1
 80032e4:	b2da      	uxtb	r2, r3
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	2200      	movs	r2, #0
 80032ee:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d163      	bne.n	80033c0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80032fc:	009a      	lsls	r2, r3, #2
 80032fe:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003302:	4013      	ands	r3, r2
 8003304:	687a      	ldr	r2, [r7, #4]
 8003306:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8003308:	0f92      	lsrs	r2, r2, #30
 800330a:	431a      	orrs	r2, r3
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003314:	0edb      	lsrs	r3, r3, #27
 8003316:	b2db      	uxtb	r3, r3
 8003318:	f003 0307 	and.w	r3, r3, #7
 800331c:	b2da      	uxtb	r2, r3
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003326:	0e1b      	lsrs	r3, r3, #24
 8003328:	b2db      	uxtb	r3, r3
 800332a:	f003 0307 	and.w	r3, r3, #7
 800332e:	b2da      	uxtb	r2, r3
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003338:	0d5b      	lsrs	r3, r3, #21
 800333a:	b2db      	uxtb	r3, r3
 800333c:	f003 0307 	and.w	r3, r3, #7
 8003340:	b2da      	uxtb	r2, r3
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800334a:	0c9b      	lsrs	r3, r3, #18
 800334c:	b2db      	uxtb	r3, r3
 800334e:	f003 0307 	and.w	r3, r3, #7
 8003352:	b2da      	uxtb	r2, r3
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800335c:	0bdb      	lsrs	r3, r3, #15
 800335e:	b2db      	uxtb	r3, r3
 8003360:	f003 0307 	and.w	r3, r3, #7
 8003364:	b2da      	uxtb	r2, r3
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	691b      	ldr	r3, [r3, #16]
 800336e:	1c5a      	adds	r2, r3, #1
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	7e1b      	ldrb	r3, [r3, #24]
 8003378:	b2db      	uxtb	r3, r3
 800337a:	f003 0307 	and.w	r3, r3, #7
 800337e:	3302      	adds	r3, #2
 8003380:	2201      	movs	r2, #1
 8003382:	fa02 f303 	lsl.w	r3, r2, r3
 8003386:	687a      	ldr	r2, [r7, #4]
 8003388:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800338a:	fb02 f203 	mul.w	r2, r2, r3
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	7a1b      	ldrb	r3, [r3, #8]
 8003396:	b2db      	uxtb	r3, r3
 8003398:	f003 030f 	and.w	r3, r3, #15
 800339c:	2201      	movs	r2, #1
 800339e:	409a      	lsls	r2, r3
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033a8:	687a      	ldr	r2, [r7, #4]
 80033aa:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80033ac:	0a52      	lsrs	r2, r2, #9
 80033ae:	fb02 f203 	mul.w	r2, r2, r3
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033bc:	661a      	str	r2, [r3, #96]	; 0x60
 80033be:	e031      	b.n	8003424 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d11d      	bne.n	8003404 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80033cc:	041b      	lsls	r3, r3, #16
 80033ce:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033d6:	0c1b      	lsrs	r3, r3, #16
 80033d8:	431a      	orrs	r2, r3
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	691b      	ldr	r3, [r3, #16]
 80033e2:	3301      	adds	r3, #1
 80033e4:	029a      	lsls	r2, r3, #10
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033f8:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	661a      	str	r2, [r3, #96]	; 0x60
 8003402:	e00f      	b.n	8003424 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a58      	ldr	r2, [pc, #352]	; (800356c <HAL_SD_GetCardCSD+0x344>)
 800340a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003410:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2201      	movs	r2, #1
 800341c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	e09d      	b.n	8003560 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003428:	0b9b      	lsrs	r3, r3, #14
 800342a:	b2db      	uxtb	r3, r3
 800342c:	f003 0301 	and.w	r3, r3, #1
 8003430:	b2da      	uxtb	r2, r3
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800343a:	09db      	lsrs	r3, r3, #7
 800343c:	b2db      	uxtb	r3, r3
 800343e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003442:	b2da      	uxtb	r2, r3
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800344c:	b2db      	uxtb	r3, r3
 800344e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003452:	b2da      	uxtb	r2, r3
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800345c:	0fdb      	lsrs	r3, r3, #31
 800345e:	b2da      	uxtb	r2, r3
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003468:	0f5b      	lsrs	r3, r3, #29
 800346a:	b2db      	uxtb	r3, r3
 800346c:	f003 0303 	and.w	r3, r3, #3
 8003470:	b2da      	uxtb	r2, r3
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800347a:	0e9b      	lsrs	r3, r3, #26
 800347c:	b2db      	uxtb	r3, r3
 800347e:	f003 0307 	and.w	r3, r3, #7
 8003482:	b2da      	uxtb	r2, r3
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800348c:	0d9b      	lsrs	r3, r3, #22
 800348e:	b2db      	uxtb	r3, r3
 8003490:	f003 030f 	and.w	r3, r3, #15
 8003494:	b2da      	uxtb	r2, r3
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800349e:	0d5b      	lsrs	r3, r3, #21
 80034a0:	b2db      	uxtb	r3, r3
 80034a2:	f003 0301 	and.w	r3, r3, #1
 80034a6:	b2da      	uxtb	r2, r3
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	2200      	movs	r2, #0
 80034b2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034ba:	0c1b      	lsrs	r3, r3, #16
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	f003 0301 	and.w	r3, r3, #1
 80034c2:	b2da      	uxtb	r2, r3
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034ce:	0bdb      	lsrs	r3, r3, #15
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	f003 0301 	and.w	r3, r3, #1
 80034d6:	b2da      	uxtb	r2, r3
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034e2:	0b9b      	lsrs	r3, r3, #14
 80034e4:	b2db      	uxtb	r3, r3
 80034e6:	f003 0301 	and.w	r3, r3, #1
 80034ea:	b2da      	uxtb	r2, r3
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034f6:	0b5b      	lsrs	r3, r3, #13
 80034f8:	b2db      	uxtb	r3, r3
 80034fa:	f003 0301 	and.w	r3, r3, #1
 80034fe:	b2da      	uxtb	r2, r3
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800350a:	0b1b      	lsrs	r3, r3, #12
 800350c:	b2db      	uxtb	r3, r3
 800350e:	f003 0301 	and.w	r3, r3, #1
 8003512:	b2da      	uxtb	r2, r3
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800351e:	0a9b      	lsrs	r3, r3, #10
 8003520:	b2db      	uxtb	r3, r3
 8003522:	f003 0303 	and.w	r3, r3, #3
 8003526:	b2da      	uxtb	r2, r3
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003532:	0a1b      	lsrs	r3, r3, #8
 8003534:	b2db      	uxtb	r3, r3
 8003536:	f003 0303 	and.w	r3, r3, #3
 800353a:	b2da      	uxtb	r2, r3
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003546:	085b      	lsrs	r3, r3, #1
 8003548:	b2db      	uxtb	r3, r3
 800354a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800354e:	b2da      	uxtb	r2, r3
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	2201      	movs	r2, #1
 800355a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800355e:	2300      	movs	r3, #0
}
 8003560:	4618      	mov	r0, r3
 8003562:	370c      	adds	r7, #12
 8003564:	46bd      	mov	sp, r7
 8003566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356a:	4770      	bx	lr
 800356c:	004005ff 	.word	0x004005ff

08003570 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8003570:	b480      	push	{r7}
 8003572:	b083      	sub	sp, #12
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
 8003578:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80035ba:	2300      	movs	r3, #0
}
 80035bc:	4618      	mov	r0, r3
 80035be:	370c      	adds	r7, #12
 80035c0:	46bd      	mov	sp, r7
 80035c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c6:	4770      	bx	lr

080035c8 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b086      	sub	sp, #24
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80035d0:	2300      	movs	r3, #0
 80035d2:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80035d4:	f107 030c 	add.w	r3, r7, #12
 80035d8:	4619      	mov	r1, r3
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f000 f96e 	bl	80038bc <SD_SendStatus>
 80035e0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d005      	beq.n	80035f4 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	431a      	orrs	r2, r3
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	0a5b      	lsrs	r3, r3, #9
 80035f8:	f003 030f 	and.w	r3, r3, #15
 80035fc:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80035fe:	693b      	ldr	r3, [r7, #16]
}
 8003600:	4618      	mov	r0, r3
 8003602:	3718      	adds	r7, #24
 8003604:	46bd      	mov	sp, r7
 8003606:	bd80      	pop	{r7, pc}

08003608 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003608:	b5b0      	push	{r4, r5, r7, lr}
 800360a:	b094      	sub	sp, #80	; 0x50
 800360c:	af04      	add	r7, sp, #16
 800360e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8003610:	2301      	movs	r3, #1
 8003612:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4618      	mov	r0, r3
 800361a:	f001 fa96 	bl	8004b4a <SDMMC_GetPowerState>
 800361e:	4603      	mov	r3, r0
 8003620:	2b00      	cmp	r3, #0
 8003622:	d102      	bne.n	800362a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003624:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003628:	e0b6      	b.n	8003798 <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800362e:	2b03      	cmp	r3, #3
 8003630:	d02f      	beq.n	8003692 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4618      	mov	r0, r3
 8003638:	f001 fc7e 	bl	8004f38 <SDMMC_CmdSendCID>
 800363c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800363e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003640:	2b00      	cmp	r3, #0
 8003642:	d001      	beq.n	8003648 <SD_InitCard+0x40>
    {
      return errorstate;
 8003644:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003646:	e0a7      	b.n	8003798 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	2100      	movs	r1, #0
 800364e:	4618      	mov	r0, r3
 8003650:	f001 fac1 	bl	8004bd6 <SDMMC_GetResponse>
 8003654:	4602      	mov	r2, r0
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	2104      	movs	r1, #4
 8003660:	4618      	mov	r0, r3
 8003662:	f001 fab8 	bl	8004bd6 <SDMMC_GetResponse>
 8003666:	4602      	mov	r2, r0
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	2108      	movs	r1, #8
 8003672:	4618      	mov	r0, r3
 8003674:	f001 faaf 	bl	8004bd6 <SDMMC_GetResponse>
 8003678:	4602      	mov	r2, r0
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	210c      	movs	r1, #12
 8003684:	4618      	mov	r0, r3
 8003686:	f001 faa6 	bl	8004bd6 <SDMMC_GetResponse>
 800368a:	4602      	mov	r2, r0
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003696:	2b03      	cmp	r3, #3
 8003698:	d00d      	beq.n	80036b6 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f107 020e 	add.w	r2, r7, #14
 80036a2:	4611      	mov	r1, r2
 80036a4:	4618      	mov	r0, r3
 80036a6:	f001 fc84 	bl	8004fb2 <SDMMC_CmdSetRelAdd>
 80036aa:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80036ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d001      	beq.n	80036b6 <SD_InitCard+0xae>
    {
      return errorstate;
 80036b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036b4:	e070      	b.n	8003798 <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ba:	2b03      	cmp	r3, #3
 80036bc:	d036      	beq.n	800372c <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80036be:	89fb      	ldrh	r3, [r7, #14]
 80036c0:	461a      	mov	r2, r3
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036ce:	041b      	lsls	r3, r3, #16
 80036d0:	4619      	mov	r1, r3
 80036d2:	4610      	mov	r0, r2
 80036d4:	f001 fc4e 	bl	8004f74 <SDMMC_CmdSendCSD>
 80036d8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80036da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d001      	beq.n	80036e4 <SD_InitCard+0xdc>
    {
      return errorstate;
 80036e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036e2:	e059      	b.n	8003798 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	2100      	movs	r1, #0
 80036ea:	4618      	mov	r0, r3
 80036ec:	f001 fa73 	bl	8004bd6 <SDMMC_GetResponse>
 80036f0:	4602      	mov	r2, r0
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	2104      	movs	r1, #4
 80036fc:	4618      	mov	r0, r3
 80036fe:	f001 fa6a 	bl	8004bd6 <SDMMC_GetResponse>
 8003702:	4602      	mov	r2, r0
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	2108      	movs	r1, #8
 800370e:	4618      	mov	r0, r3
 8003710:	f001 fa61 	bl	8004bd6 <SDMMC_GetResponse>
 8003714:	4602      	mov	r2, r0
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	210c      	movs	r1, #12
 8003720:	4618      	mov	r0, r3
 8003722:	f001 fa58 	bl	8004bd6 <SDMMC_GetResponse>
 8003726:	4602      	mov	r2, r0
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	2104      	movs	r1, #4
 8003732:	4618      	mov	r0, r3
 8003734:	f001 fa4f 	bl	8004bd6 <SDMMC_GetResponse>
 8003738:	4603      	mov	r3, r0
 800373a:	0d1a      	lsrs	r2, r3, #20
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8003740:	f107 0310 	add.w	r3, r7, #16
 8003744:	4619      	mov	r1, r3
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f7ff fd6e 	bl	8003228 <HAL_SD_GetCardCSD>
 800374c:	4603      	mov	r3, r0
 800374e:	2b00      	cmp	r3, #0
 8003750:	d002      	beq.n	8003758 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003752:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003756:	e01f      	b.n	8003798 <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6819      	ldr	r1, [r3, #0]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003760:	041b      	lsls	r3, r3, #16
 8003762:	461a      	mov	r2, r3
 8003764:	f04f 0300 	mov.w	r3, #0
 8003768:	4608      	mov	r0, r1
 800376a:	f001 fb3f 	bl	8004dec <SDMMC_CmdSelDesel>
 800376e:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8003770:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003772:	2b00      	cmp	r3, #0
 8003774:	d001      	beq.n	800377a <SD_InitCard+0x172>
  {
    return errorstate;
 8003776:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003778:	e00e      	b.n	8003798 <SD_InitCard+0x190>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681d      	ldr	r5, [r3, #0]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	466c      	mov	r4, sp
 8003782:	f103 0210 	add.w	r2, r3, #16
 8003786:	ca07      	ldmia	r2, {r0, r1, r2}
 8003788:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800378c:	3304      	adds	r3, #4
 800378e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003790:	4628      	mov	r0, r5
 8003792:	f001 f981 	bl	8004a98 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8003796:	2300      	movs	r3, #0
}
 8003798:	4618      	mov	r0, r3
 800379a:	3740      	adds	r7, #64	; 0x40
 800379c:	46bd      	mov	sp, r7
 800379e:	bdb0      	pop	{r4, r5, r7, pc}

080037a0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b086      	sub	sp, #24
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80037a8:	2300      	movs	r3, #0
 80037aa:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80037ac:	2300      	movs	r3, #0
 80037ae:	617b      	str	r3, [r7, #20]
 80037b0:	2300      	movs	r3, #0
 80037b2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4618      	mov	r0, r3
 80037ba:	f001 fb3a 	bl	8004e32 <SDMMC_CmdGoIdleState>
 80037be:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d001      	beq.n	80037ca <SD_PowerON+0x2a>
  {
    return errorstate;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	e072      	b.n	80038b0 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4618      	mov	r0, r3
 80037d0:	f001 fb4d 	bl	8004e6e <SDMMC_CmdOperCond>
 80037d4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d00d      	beq.n	80037f8 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2200      	movs	r2, #0
 80037e0:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4618      	mov	r0, r3
 80037e8:	f001 fb23 	bl	8004e32 <SDMMC_CmdGoIdleState>
 80037ec:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d004      	beq.n	80037fe <SD_PowerON+0x5e>
    {
      return errorstate;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	e05b      	b.n	80038b0 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2201      	movs	r2, #1
 80037fc:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003802:	2b01      	cmp	r3, #1
 8003804:	d137      	bne.n	8003876 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	2100      	movs	r1, #0
 800380c:	4618      	mov	r0, r3
 800380e:	f001 fb4d 	bl	8004eac <SDMMC_CmdAppCommand>
 8003812:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d02d      	beq.n	8003876 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800381a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800381e:	e047      	b.n	80038b0 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	2100      	movs	r1, #0
 8003826:	4618      	mov	r0, r3
 8003828:	f001 fb40 	bl	8004eac <SDMMC_CmdAppCommand>
 800382c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d001      	beq.n	8003838 <SD_PowerON+0x98>
    {
      return errorstate;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	e03b      	b.n	80038b0 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	491e      	ldr	r1, [pc, #120]	; (80038b8 <SD_PowerON+0x118>)
 800383e:	4618      	mov	r0, r3
 8003840:	f001 fb56 	bl	8004ef0 <SDMMC_CmdAppOperCommand>
 8003844:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d002      	beq.n	8003852 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800384c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003850:	e02e      	b.n	80038b0 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	2100      	movs	r1, #0
 8003858:	4618      	mov	r0, r3
 800385a:	f001 f9bc 	bl	8004bd6 <SDMMC_GetResponse>
 800385e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	0fdb      	lsrs	r3, r3, #31
 8003864:	2b01      	cmp	r3, #1
 8003866:	d101      	bne.n	800386c <SD_PowerON+0xcc>
 8003868:	2301      	movs	r3, #1
 800386a:	e000      	b.n	800386e <SD_PowerON+0xce>
 800386c:	2300      	movs	r3, #0
 800386e:	613b      	str	r3, [r7, #16]

    count++;
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	3301      	adds	r3, #1
 8003874:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800387c:	4293      	cmp	r3, r2
 800387e:	d802      	bhi.n	8003886 <SD_PowerON+0xe6>
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d0cc      	beq.n	8003820 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800388c:	4293      	cmp	r3, r2
 800388e:	d902      	bls.n	8003896 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8003890:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003894:	e00c      	b.n	80038b0 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800389c:	2b00      	cmp	r3, #0
 800389e:	d003      	beq.n	80038a8 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2201      	movs	r2, #1
 80038a4:	645a      	str	r2, [r3, #68]	; 0x44
 80038a6:	e002      	b.n	80038ae <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2200      	movs	r2, #0
 80038ac:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 80038ae:	2300      	movs	r3, #0
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	3718      	adds	r7, #24
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}
 80038b8:	c1100000 	.word	0xc1100000

080038bc <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b084      	sub	sp, #16
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
 80038c4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d102      	bne.n	80038d2 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80038cc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80038d0:	e018      	b.n	8003904 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681a      	ldr	r2, [r3, #0]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038da:	041b      	lsls	r3, r3, #16
 80038dc:	4619      	mov	r1, r3
 80038de:	4610      	mov	r0, r2
 80038e0:	f001 fb88 	bl	8004ff4 <SDMMC_CmdSendStatus>
 80038e4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d001      	beq.n	80038f0 <SD_SendStatus+0x34>
  {
    return errorstate;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	e009      	b.n	8003904 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	2100      	movs	r1, #0
 80038f6:	4618      	mov	r0, r3
 80038f8:	f001 f96d 	bl	8004bd6 <SDMMC_GetResponse>
 80038fc:	4602      	mov	r2, r0
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8003902:	2300      	movs	r3, #0
}
 8003904:	4618      	mov	r0, r3
 8003906:	3710      	adds	r7, #16
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}

0800390c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b082      	sub	sp, #8
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d101      	bne.n	800391e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	e049      	b.n	80039b2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003924:	b2db      	uxtb	r3, r3
 8003926:	2b00      	cmp	r3, #0
 8003928:	d106      	bne.n	8003938 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2200      	movs	r2, #0
 800392e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003932:	6878      	ldr	r0, [r7, #4]
 8003934:	f7fd fb18 	bl	8000f68 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2202      	movs	r2, #2
 800393c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681a      	ldr	r2, [r3, #0]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	3304      	adds	r3, #4
 8003948:	4619      	mov	r1, r3
 800394a:	4610      	mov	r0, r2
 800394c:	f000 fabc 	bl	8003ec8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2201      	movs	r2, #1
 8003954:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2201      	movs	r2, #1
 800395c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2201      	movs	r2, #1
 8003964:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2201      	movs	r2, #1
 800396c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2201      	movs	r2, #1
 8003974:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2201      	movs	r2, #1
 800397c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2201      	movs	r2, #1
 8003984:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2201      	movs	r2, #1
 800398c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2201      	movs	r2, #1
 8003994:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2201      	movs	r2, #1
 800399c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2201      	movs	r2, #1
 80039a4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2201      	movs	r2, #1
 80039ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80039b0:	2300      	movs	r3, #0
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	3708      	adds	r7, #8
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}
	...

080039bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80039bc:	b480      	push	{r7}
 80039be:	b085      	sub	sp, #20
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039ca:	b2db      	uxtb	r3, r3
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	d001      	beq.n	80039d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80039d0:	2301      	movs	r3, #1
 80039d2:	e054      	b.n	8003a7e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2202      	movs	r2, #2
 80039d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	68da      	ldr	r2, [r3, #12]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f042 0201 	orr.w	r2, r2, #1
 80039ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a26      	ldr	r2, [pc, #152]	; (8003a8c <HAL_TIM_Base_Start_IT+0xd0>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d022      	beq.n	8003a3c <HAL_TIM_Base_Start_IT+0x80>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039fe:	d01d      	beq.n	8003a3c <HAL_TIM_Base_Start_IT+0x80>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a22      	ldr	r2, [pc, #136]	; (8003a90 <HAL_TIM_Base_Start_IT+0xd4>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d018      	beq.n	8003a3c <HAL_TIM_Base_Start_IT+0x80>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a21      	ldr	r2, [pc, #132]	; (8003a94 <HAL_TIM_Base_Start_IT+0xd8>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d013      	beq.n	8003a3c <HAL_TIM_Base_Start_IT+0x80>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a1f      	ldr	r2, [pc, #124]	; (8003a98 <HAL_TIM_Base_Start_IT+0xdc>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d00e      	beq.n	8003a3c <HAL_TIM_Base_Start_IT+0x80>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a1e      	ldr	r2, [pc, #120]	; (8003a9c <HAL_TIM_Base_Start_IT+0xe0>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d009      	beq.n	8003a3c <HAL_TIM_Base_Start_IT+0x80>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a1c      	ldr	r2, [pc, #112]	; (8003aa0 <HAL_TIM_Base_Start_IT+0xe4>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d004      	beq.n	8003a3c <HAL_TIM_Base_Start_IT+0x80>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a1b      	ldr	r2, [pc, #108]	; (8003aa4 <HAL_TIM_Base_Start_IT+0xe8>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d115      	bne.n	8003a68 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	689a      	ldr	r2, [r3, #8]
 8003a42:	4b19      	ldr	r3, [pc, #100]	; (8003aa8 <HAL_TIM_Base_Start_IT+0xec>)
 8003a44:	4013      	ands	r3, r2
 8003a46:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2b06      	cmp	r3, #6
 8003a4c:	d015      	beq.n	8003a7a <HAL_TIM_Base_Start_IT+0xbe>
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a54:	d011      	beq.n	8003a7a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f042 0201 	orr.w	r2, r2, #1
 8003a64:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a66:	e008      	b.n	8003a7a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f042 0201 	orr.w	r2, r2, #1
 8003a76:	601a      	str	r2, [r3, #0]
 8003a78:	e000      	b.n	8003a7c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a7a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003a7c:	2300      	movs	r3, #0
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	3714      	adds	r7, #20
 8003a82:	46bd      	mov	sp, r7
 8003a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a88:	4770      	bx	lr
 8003a8a:	bf00      	nop
 8003a8c:	40010000 	.word	0x40010000
 8003a90:	40000400 	.word	0x40000400
 8003a94:	40000800 	.word	0x40000800
 8003a98:	40000c00 	.word	0x40000c00
 8003a9c:	40010400 	.word	0x40010400
 8003aa0:	40014000 	.word	0x40014000
 8003aa4:	40001800 	.word	0x40001800
 8003aa8:	00010007 	.word	0x00010007

08003aac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b082      	sub	sp, #8
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	691b      	ldr	r3, [r3, #16]
 8003aba:	f003 0302 	and.w	r3, r3, #2
 8003abe:	2b02      	cmp	r3, #2
 8003ac0:	d122      	bne.n	8003b08 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	68db      	ldr	r3, [r3, #12]
 8003ac8:	f003 0302 	and.w	r3, r3, #2
 8003acc:	2b02      	cmp	r3, #2
 8003ace:	d11b      	bne.n	8003b08 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f06f 0202 	mvn.w	r2, #2
 8003ad8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2201      	movs	r2, #1
 8003ade:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	699b      	ldr	r3, [r3, #24]
 8003ae6:	f003 0303 	and.w	r3, r3, #3
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d003      	beq.n	8003af6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	f000 f9cc 	bl	8003e8c <HAL_TIM_IC_CaptureCallback>
 8003af4:	e005      	b.n	8003b02 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	f000 f9be 	bl	8003e78 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003afc:	6878      	ldr	r0, [r7, #4]
 8003afe:	f000 f9cf 	bl	8003ea0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2200      	movs	r2, #0
 8003b06:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	691b      	ldr	r3, [r3, #16]
 8003b0e:	f003 0304 	and.w	r3, r3, #4
 8003b12:	2b04      	cmp	r3, #4
 8003b14:	d122      	bne.n	8003b5c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	68db      	ldr	r3, [r3, #12]
 8003b1c:	f003 0304 	and.w	r3, r3, #4
 8003b20:	2b04      	cmp	r3, #4
 8003b22:	d11b      	bne.n	8003b5c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f06f 0204 	mvn.w	r2, #4
 8003b2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2202      	movs	r2, #2
 8003b32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	699b      	ldr	r3, [r3, #24]
 8003b3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d003      	beq.n	8003b4a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f000 f9a2 	bl	8003e8c <HAL_TIM_IC_CaptureCallback>
 8003b48:	e005      	b.n	8003b56 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b4a:	6878      	ldr	r0, [r7, #4]
 8003b4c:	f000 f994 	bl	8003e78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b50:	6878      	ldr	r0, [r7, #4]
 8003b52:	f000 f9a5 	bl	8003ea0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	691b      	ldr	r3, [r3, #16]
 8003b62:	f003 0308 	and.w	r3, r3, #8
 8003b66:	2b08      	cmp	r3, #8
 8003b68:	d122      	bne.n	8003bb0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	68db      	ldr	r3, [r3, #12]
 8003b70:	f003 0308 	and.w	r3, r3, #8
 8003b74:	2b08      	cmp	r3, #8
 8003b76:	d11b      	bne.n	8003bb0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f06f 0208 	mvn.w	r2, #8
 8003b80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2204      	movs	r2, #4
 8003b86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	69db      	ldr	r3, [r3, #28]
 8003b8e:	f003 0303 	and.w	r3, r3, #3
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d003      	beq.n	8003b9e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b96:	6878      	ldr	r0, [r7, #4]
 8003b98:	f000 f978 	bl	8003e8c <HAL_TIM_IC_CaptureCallback>
 8003b9c:	e005      	b.n	8003baa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	f000 f96a 	bl	8003e78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ba4:	6878      	ldr	r0, [r7, #4]
 8003ba6:	f000 f97b 	bl	8003ea0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2200      	movs	r2, #0
 8003bae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	691b      	ldr	r3, [r3, #16]
 8003bb6:	f003 0310 	and.w	r3, r3, #16
 8003bba:	2b10      	cmp	r3, #16
 8003bbc:	d122      	bne.n	8003c04 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	68db      	ldr	r3, [r3, #12]
 8003bc4:	f003 0310 	and.w	r3, r3, #16
 8003bc8:	2b10      	cmp	r3, #16
 8003bca:	d11b      	bne.n	8003c04 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f06f 0210 	mvn.w	r2, #16
 8003bd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2208      	movs	r2, #8
 8003bda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	69db      	ldr	r3, [r3, #28]
 8003be2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d003      	beq.n	8003bf2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f000 f94e 	bl	8003e8c <HAL_TIM_IC_CaptureCallback>
 8003bf0:	e005      	b.n	8003bfe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	f000 f940 	bl	8003e78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bf8:	6878      	ldr	r0, [r7, #4]
 8003bfa:	f000 f951 	bl	8003ea0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2200      	movs	r2, #0
 8003c02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	691b      	ldr	r3, [r3, #16]
 8003c0a:	f003 0301 	and.w	r3, r3, #1
 8003c0e:	2b01      	cmp	r3, #1
 8003c10:	d10e      	bne.n	8003c30 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	68db      	ldr	r3, [r3, #12]
 8003c18:	f003 0301 	and.w	r3, r3, #1
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d107      	bne.n	8003c30 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f06f 0201 	mvn.w	r2, #1
 8003c28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f7fc fe56 	bl	80008dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	691b      	ldr	r3, [r3, #16]
 8003c36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c3a:	2b80      	cmp	r3, #128	; 0x80
 8003c3c:	d10e      	bne.n	8003c5c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	68db      	ldr	r3, [r3, #12]
 8003c44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c48:	2b80      	cmp	r3, #128	; 0x80
 8003c4a:	d107      	bne.n	8003c5c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003c54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	f000 fb08 	bl	800426c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	691b      	ldr	r3, [r3, #16]
 8003c62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c6a:	d10e      	bne.n	8003c8a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	68db      	ldr	r3, [r3, #12]
 8003c72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c76:	2b80      	cmp	r3, #128	; 0x80
 8003c78:	d107      	bne.n	8003c8a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003c82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003c84:	6878      	ldr	r0, [r7, #4]
 8003c86:	f000 fafb 	bl	8004280 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	691b      	ldr	r3, [r3, #16]
 8003c90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c94:	2b40      	cmp	r3, #64	; 0x40
 8003c96:	d10e      	bne.n	8003cb6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	68db      	ldr	r3, [r3, #12]
 8003c9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ca2:	2b40      	cmp	r3, #64	; 0x40
 8003ca4:	d107      	bne.n	8003cb6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003cae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003cb0:	6878      	ldr	r0, [r7, #4]
 8003cb2:	f000 f8ff 	bl	8003eb4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	691b      	ldr	r3, [r3, #16]
 8003cbc:	f003 0320 	and.w	r3, r3, #32
 8003cc0:	2b20      	cmp	r3, #32
 8003cc2:	d10e      	bne.n	8003ce2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	68db      	ldr	r3, [r3, #12]
 8003cca:	f003 0320 	and.w	r3, r3, #32
 8003cce:	2b20      	cmp	r3, #32
 8003cd0:	d107      	bne.n	8003ce2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f06f 0220 	mvn.w	r2, #32
 8003cda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003cdc:	6878      	ldr	r0, [r7, #4]
 8003cde:	f000 fabb 	bl	8004258 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ce2:	bf00      	nop
 8003ce4:	3708      	adds	r7, #8
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}
	...

08003cec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b084      	sub	sp, #16
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
 8003cf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cfc:	2b01      	cmp	r3, #1
 8003cfe:	d101      	bne.n	8003d04 <HAL_TIM_ConfigClockSource+0x18>
 8003d00:	2302      	movs	r3, #2
 8003d02:	e0b3      	b.n	8003e6c <HAL_TIM_ConfigClockSource+0x180>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2201      	movs	r2, #1
 8003d08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2202      	movs	r2, #2
 8003d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003d1c:	68fa      	ldr	r2, [r7, #12]
 8003d1e:	4b55      	ldr	r3, [pc, #340]	; (8003e74 <HAL_TIM_ConfigClockSource+0x188>)
 8003d20:	4013      	ands	r3, r2
 8003d22:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d2a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	68fa      	ldr	r2, [r7, #12]
 8003d32:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d3c:	d03e      	beq.n	8003dbc <HAL_TIM_ConfigClockSource+0xd0>
 8003d3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d42:	f200 8087 	bhi.w	8003e54 <HAL_TIM_ConfigClockSource+0x168>
 8003d46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d4a:	f000 8085 	beq.w	8003e58 <HAL_TIM_ConfigClockSource+0x16c>
 8003d4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d52:	d87f      	bhi.n	8003e54 <HAL_TIM_ConfigClockSource+0x168>
 8003d54:	2b70      	cmp	r3, #112	; 0x70
 8003d56:	d01a      	beq.n	8003d8e <HAL_TIM_ConfigClockSource+0xa2>
 8003d58:	2b70      	cmp	r3, #112	; 0x70
 8003d5a:	d87b      	bhi.n	8003e54 <HAL_TIM_ConfigClockSource+0x168>
 8003d5c:	2b60      	cmp	r3, #96	; 0x60
 8003d5e:	d050      	beq.n	8003e02 <HAL_TIM_ConfigClockSource+0x116>
 8003d60:	2b60      	cmp	r3, #96	; 0x60
 8003d62:	d877      	bhi.n	8003e54 <HAL_TIM_ConfigClockSource+0x168>
 8003d64:	2b50      	cmp	r3, #80	; 0x50
 8003d66:	d03c      	beq.n	8003de2 <HAL_TIM_ConfigClockSource+0xf6>
 8003d68:	2b50      	cmp	r3, #80	; 0x50
 8003d6a:	d873      	bhi.n	8003e54 <HAL_TIM_ConfigClockSource+0x168>
 8003d6c:	2b40      	cmp	r3, #64	; 0x40
 8003d6e:	d058      	beq.n	8003e22 <HAL_TIM_ConfigClockSource+0x136>
 8003d70:	2b40      	cmp	r3, #64	; 0x40
 8003d72:	d86f      	bhi.n	8003e54 <HAL_TIM_ConfigClockSource+0x168>
 8003d74:	2b30      	cmp	r3, #48	; 0x30
 8003d76:	d064      	beq.n	8003e42 <HAL_TIM_ConfigClockSource+0x156>
 8003d78:	2b30      	cmp	r3, #48	; 0x30
 8003d7a:	d86b      	bhi.n	8003e54 <HAL_TIM_ConfigClockSource+0x168>
 8003d7c:	2b20      	cmp	r3, #32
 8003d7e:	d060      	beq.n	8003e42 <HAL_TIM_ConfigClockSource+0x156>
 8003d80:	2b20      	cmp	r3, #32
 8003d82:	d867      	bhi.n	8003e54 <HAL_TIM_ConfigClockSource+0x168>
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d05c      	beq.n	8003e42 <HAL_TIM_ConfigClockSource+0x156>
 8003d88:	2b10      	cmp	r3, #16
 8003d8a:	d05a      	beq.n	8003e42 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003d8c:	e062      	b.n	8003e54 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6818      	ldr	r0, [r3, #0]
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	6899      	ldr	r1, [r3, #8]
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	685a      	ldr	r2, [r3, #4]
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	68db      	ldr	r3, [r3, #12]
 8003d9e:	f000 f9ad 	bl	80040fc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003db0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	68fa      	ldr	r2, [r7, #12]
 8003db8:	609a      	str	r2, [r3, #8]
      break;
 8003dba:	e04e      	b.n	8003e5a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6818      	ldr	r0, [r3, #0]
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	6899      	ldr	r1, [r3, #8]
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	685a      	ldr	r2, [r3, #4]
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	68db      	ldr	r3, [r3, #12]
 8003dcc:	f000 f996 	bl	80040fc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	689a      	ldr	r2, [r3, #8]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003dde:	609a      	str	r2, [r3, #8]
      break;
 8003de0:	e03b      	b.n	8003e5a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6818      	ldr	r0, [r3, #0]
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	6859      	ldr	r1, [r3, #4]
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	68db      	ldr	r3, [r3, #12]
 8003dee:	461a      	mov	r2, r3
 8003df0:	f000 f90a 	bl	8004008 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	2150      	movs	r1, #80	; 0x50
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f000 f963 	bl	80040c6 <TIM_ITRx_SetConfig>
      break;
 8003e00:	e02b      	b.n	8003e5a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6818      	ldr	r0, [r3, #0]
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	6859      	ldr	r1, [r3, #4]
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	68db      	ldr	r3, [r3, #12]
 8003e0e:	461a      	mov	r2, r3
 8003e10:	f000 f929 	bl	8004066 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	2160      	movs	r1, #96	; 0x60
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f000 f953 	bl	80040c6 <TIM_ITRx_SetConfig>
      break;
 8003e20:	e01b      	b.n	8003e5a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6818      	ldr	r0, [r3, #0]
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	6859      	ldr	r1, [r3, #4]
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	68db      	ldr	r3, [r3, #12]
 8003e2e:	461a      	mov	r2, r3
 8003e30:	f000 f8ea 	bl	8004008 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	2140      	movs	r1, #64	; 0x40
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f000 f943 	bl	80040c6 <TIM_ITRx_SetConfig>
      break;
 8003e40:	e00b      	b.n	8003e5a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681a      	ldr	r2, [r3, #0]
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4619      	mov	r1, r3
 8003e4c:	4610      	mov	r0, r2
 8003e4e:	f000 f93a 	bl	80040c6 <TIM_ITRx_SetConfig>
        break;
 8003e52:	e002      	b.n	8003e5a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003e54:	bf00      	nop
 8003e56:	e000      	b.n	8003e5a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003e58:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2201      	movs	r2, #1
 8003e5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2200      	movs	r2, #0
 8003e66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e6a:	2300      	movs	r3, #0
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	3710      	adds	r7, #16
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}
 8003e74:	fffeff88 	.word	0xfffeff88

08003e78 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b083      	sub	sp, #12
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003e80:	bf00      	nop
 8003e82:	370c      	adds	r7, #12
 8003e84:	46bd      	mov	sp, r7
 8003e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8a:	4770      	bx	lr

08003e8c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b083      	sub	sp, #12
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003e94:	bf00      	nop
 8003e96:	370c      	adds	r7, #12
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9e:	4770      	bx	lr

08003ea0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b083      	sub	sp, #12
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003ea8:	bf00      	nop
 8003eaa:	370c      	adds	r7, #12
 8003eac:	46bd      	mov	sp, r7
 8003eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb2:	4770      	bx	lr

08003eb4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b083      	sub	sp, #12
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003ebc:	bf00      	nop
 8003ebe:	370c      	adds	r7, #12
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec6:	4770      	bx	lr

08003ec8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b085      	sub	sp, #20
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
 8003ed0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	4a40      	ldr	r2, [pc, #256]	; (8003fdc <TIM_Base_SetConfig+0x114>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d013      	beq.n	8003f08 <TIM_Base_SetConfig+0x40>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ee6:	d00f      	beq.n	8003f08 <TIM_Base_SetConfig+0x40>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	4a3d      	ldr	r2, [pc, #244]	; (8003fe0 <TIM_Base_SetConfig+0x118>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d00b      	beq.n	8003f08 <TIM_Base_SetConfig+0x40>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	4a3c      	ldr	r2, [pc, #240]	; (8003fe4 <TIM_Base_SetConfig+0x11c>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d007      	beq.n	8003f08 <TIM_Base_SetConfig+0x40>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	4a3b      	ldr	r2, [pc, #236]	; (8003fe8 <TIM_Base_SetConfig+0x120>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d003      	beq.n	8003f08 <TIM_Base_SetConfig+0x40>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	4a3a      	ldr	r2, [pc, #232]	; (8003fec <TIM_Base_SetConfig+0x124>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d108      	bne.n	8003f1a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	68fa      	ldr	r2, [r7, #12]
 8003f16:	4313      	orrs	r3, r2
 8003f18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	4a2f      	ldr	r2, [pc, #188]	; (8003fdc <TIM_Base_SetConfig+0x114>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d02b      	beq.n	8003f7a <TIM_Base_SetConfig+0xb2>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f28:	d027      	beq.n	8003f7a <TIM_Base_SetConfig+0xb2>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	4a2c      	ldr	r2, [pc, #176]	; (8003fe0 <TIM_Base_SetConfig+0x118>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d023      	beq.n	8003f7a <TIM_Base_SetConfig+0xb2>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	4a2b      	ldr	r2, [pc, #172]	; (8003fe4 <TIM_Base_SetConfig+0x11c>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d01f      	beq.n	8003f7a <TIM_Base_SetConfig+0xb2>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	4a2a      	ldr	r2, [pc, #168]	; (8003fe8 <TIM_Base_SetConfig+0x120>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d01b      	beq.n	8003f7a <TIM_Base_SetConfig+0xb2>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	4a29      	ldr	r2, [pc, #164]	; (8003fec <TIM_Base_SetConfig+0x124>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d017      	beq.n	8003f7a <TIM_Base_SetConfig+0xb2>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	4a28      	ldr	r2, [pc, #160]	; (8003ff0 <TIM_Base_SetConfig+0x128>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d013      	beq.n	8003f7a <TIM_Base_SetConfig+0xb2>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	4a27      	ldr	r2, [pc, #156]	; (8003ff4 <TIM_Base_SetConfig+0x12c>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d00f      	beq.n	8003f7a <TIM_Base_SetConfig+0xb2>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	4a26      	ldr	r2, [pc, #152]	; (8003ff8 <TIM_Base_SetConfig+0x130>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d00b      	beq.n	8003f7a <TIM_Base_SetConfig+0xb2>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	4a25      	ldr	r2, [pc, #148]	; (8003ffc <TIM_Base_SetConfig+0x134>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d007      	beq.n	8003f7a <TIM_Base_SetConfig+0xb2>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	4a24      	ldr	r2, [pc, #144]	; (8004000 <TIM_Base_SetConfig+0x138>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d003      	beq.n	8003f7a <TIM_Base_SetConfig+0xb2>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	4a23      	ldr	r2, [pc, #140]	; (8004004 <TIM_Base_SetConfig+0x13c>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d108      	bne.n	8003f8c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	68db      	ldr	r3, [r3, #12]
 8003f86:	68fa      	ldr	r2, [r7, #12]
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	695b      	ldr	r3, [r3, #20]
 8003f96:	4313      	orrs	r3, r2
 8003f98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	68fa      	ldr	r2, [r7, #12]
 8003f9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	689a      	ldr	r2, [r3, #8]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	681a      	ldr	r2, [r3, #0]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	4a0a      	ldr	r2, [pc, #40]	; (8003fdc <TIM_Base_SetConfig+0x114>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d003      	beq.n	8003fc0 <TIM_Base_SetConfig+0xf8>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	4a0c      	ldr	r2, [pc, #48]	; (8003fec <TIM_Base_SetConfig+0x124>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d103      	bne.n	8003fc8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	691a      	ldr	r2, [r3, #16]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2201      	movs	r2, #1
 8003fcc:	615a      	str	r2, [r3, #20]
}
 8003fce:	bf00      	nop
 8003fd0:	3714      	adds	r7, #20
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd8:	4770      	bx	lr
 8003fda:	bf00      	nop
 8003fdc:	40010000 	.word	0x40010000
 8003fe0:	40000400 	.word	0x40000400
 8003fe4:	40000800 	.word	0x40000800
 8003fe8:	40000c00 	.word	0x40000c00
 8003fec:	40010400 	.word	0x40010400
 8003ff0:	40014000 	.word	0x40014000
 8003ff4:	40014400 	.word	0x40014400
 8003ff8:	40014800 	.word	0x40014800
 8003ffc:	40001800 	.word	0x40001800
 8004000:	40001c00 	.word	0x40001c00
 8004004:	40002000 	.word	0x40002000

08004008 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004008:	b480      	push	{r7}
 800400a:	b087      	sub	sp, #28
 800400c:	af00      	add	r7, sp, #0
 800400e:	60f8      	str	r0, [r7, #12]
 8004010:	60b9      	str	r1, [r7, #8]
 8004012:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	6a1b      	ldr	r3, [r3, #32]
 8004018:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	6a1b      	ldr	r3, [r3, #32]
 800401e:	f023 0201 	bic.w	r2, r3, #1
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	699b      	ldr	r3, [r3, #24]
 800402a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004032:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	011b      	lsls	r3, r3, #4
 8004038:	693a      	ldr	r2, [r7, #16]
 800403a:	4313      	orrs	r3, r2
 800403c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800403e:	697b      	ldr	r3, [r7, #20]
 8004040:	f023 030a 	bic.w	r3, r3, #10
 8004044:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004046:	697a      	ldr	r2, [r7, #20]
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	4313      	orrs	r3, r2
 800404c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	693a      	ldr	r2, [r7, #16]
 8004052:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	697a      	ldr	r2, [r7, #20]
 8004058:	621a      	str	r2, [r3, #32]
}
 800405a:	bf00      	nop
 800405c:	371c      	adds	r7, #28
 800405e:	46bd      	mov	sp, r7
 8004060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004064:	4770      	bx	lr

08004066 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004066:	b480      	push	{r7}
 8004068:	b087      	sub	sp, #28
 800406a:	af00      	add	r7, sp, #0
 800406c:	60f8      	str	r0, [r7, #12]
 800406e:	60b9      	str	r1, [r7, #8]
 8004070:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	6a1b      	ldr	r3, [r3, #32]
 8004076:	f023 0210 	bic.w	r2, r3, #16
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	699b      	ldr	r3, [r3, #24]
 8004082:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	6a1b      	ldr	r3, [r3, #32]
 8004088:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004090:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	031b      	lsls	r3, r3, #12
 8004096:	697a      	ldr	r2, [r7, #20]
 8004098:	4313      	orrs	r3, r2
 800409a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80040a2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	011b      	lsls	r3, r3, #4
 80040a8:	693a      	ldr	r2, [r7, #16]
 80040aa:	4313      	orrs	r3, r2
 80040ac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	697a      	ldr	r2, [r7, #20]
 80040b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	693a      	ldr	r2, [r7, #16]
 80040b8:	621a      	str	r2, [r3, #32]
}
 80040ba:	bf00      	nop
 80040bc:	371c      	adds	r7, #28
 80040be:	46bd      	mov	sp, r7
 80040c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c4:	4770      	bx	lr

080040c6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80040c6:	b480      	push	{r7}
 80040c8:	b085      	sub	sp, #20
 80040ca:	af00      	add	r7, sp, #0
 80040cc:	6078      	str	r0, [r7, #4]
 80040ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	689b      	ldr	r3, [r3, #8]
 80040d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80040de:	683a      	ldr	r2, [r7, #0]
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	4313      	orrs	r3, r2
 80040e4:	f043 0307 	orr.w	r3, r3, #7
 80040e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	68fa      	ldr	r2, [r7, #12]
 80040ee:	609a      	str	r2, [r3, #8]
}
 80040f0:	bf00      	nop
 80040f2:	3714      	adds	r7, #20
 80040f4:	46bd      	mov	sp, r7
 80040f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fa:	4770      	bx	lr

080040fc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b087      	sub	sp, #28
 8004100:	af00      	add	r7, sp, #0
 8004102:	60f8      	str	r0, [r7, #12]
 8004104:	60b9      	str	r1, [r7, #8]
 8004106:	607a      	str	r2, [r7, #4]
 8004108:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	689b      	ldr	r3, [r3, #8]
 800410e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004116:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	021a      	lsls	r2, r3, #8
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	431a      	orrs	r2, r3
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	4313      	orrs	r3, r2
 8004124:	697a      	ldr	r2, [r7, #20]
 8004126:	4313      	orrs	r3, r2
 8004128:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	697a      	ldr	r2, [r7, #20]
 800412e:	609a      	str	r2, [r3, #8]
}
 8004130:	bf00      	nop
 8004132:	371c      	adds	r7, #28
 8004134:	46bd      	mov	sp, r7
 8004136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413a:	4770      	bx	lr

0800413c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800413c:	b480      	push	{r7}
 800413e:	b085      	sub	sp, #20
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
 8004144:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800414c:	2b01      	cmp	r3, #1
 800414e:	d101      	bne.n	8004154 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004150:	2302      	movs	r3, #2
 8004152:	e06d      	b.n	8004230 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2201      	movs	r2, #1
 8004158:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2202      	movs	r2, #2
 8004160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a30      	ldr	r2, [pc, #192]	; (800423c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d004      	beq.n	8004188 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a2f      	ldr	r2, [pc, #188]	; (8004240 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d108      	bne.n	800419a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800418e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	68fa      	ldr	r2, [r7, #12]
 8004196:	4313      	orrs	r3, r2
 8004198:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041a0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	68fa      	ldr	r2, [r7, #12]
 80041a8:	4313      	orrs	r3, r2
 80041aa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	68fa      	ldr	r2, [r7, #12]
 80041b2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a20      	ldr	r2, [pc, #128]	; (800423c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d022      	beq.n	8004204 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041c6:	d01d      	beq.n	8004204 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a1d      	ldr	r2, [pc, #116]	; (8004244 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d018      	beq.n	8004204 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a1c      	ldr	r2, [pc, #112]	; (8004248 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d013      	beq.n	8004204 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a1a      	ldr	r2, [pc, #104]	; (800424c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d00e      	beq.n	8004204 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a15      	ldr	r2, [pc, #84]	; (8004240 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d009      	beq.n	8004204 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a16      	ldr	r2, [pc, #88]	; (8004250 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d004      	beq.n	8004204 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a15      	ldr	r2, [pc, #84]	; (8004254 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d10c      	bne.n	800421e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800420a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	689b      	ldr	r3, [r3, #8]
 8004210:	68ba      	ldr	r2, [r7, #8]
 8004212:	4313      	orrs	r3, r2
 8004214:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	68ba      	ldr	r2, [r7, #8]
 800421c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2201      	movs	r2, #1
 8004222:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2200      	movs	r2, #0
 800422a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800422e:	2300      	movs	r3, #0
}
 8004230:	4618      	mov	r0, r3
 8004232:	3714      	adds	r7, #20
 8004234:	46bd      	mov	sp, r7
 8004236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423a:	4770      	bx	lr
 800423c:	40010000 	.word	0x40010000
 8004240:	40010400 	.word	0x40010400
 8004244:	40000400 	.word	0x40000400
 8004248:	40000800 	.word	0x40000800
 800424c:	40000c00 	.word	0x40000c00
 8004250:	40014000 	.word	0x40014000
 8004254:	40001800 	.word	0x40001800

08004258 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004258:	b480      	push	{r7}
 800425a:	b083      	sub	sp, #12
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004260:	bf00      	nop
 8004262:	370c      	adds	r7, #12
 8004264:	46bd      	mov	sp, r7
 8004266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426a:	4770      	bx	lr

0800426c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800426c:	b480      	push	{r7}
 800426e:	b083      	sub	sp, #12
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004274:	bf00      	nop
 8004276:	370c      	adds	r7, #12
 8004278:	46bd      	mov	sp, r7
 800427a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427e:	4770      	bx	lr

08004280 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004280:	b480      	push	{r7}
 8004282:	b083      	sub	sp, #12
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004288:	bf00      	nop
 800428a:	370c      	adds	r7, #12
 800428c:	46bd      	mov	sp, r7
 800428e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004292:	4770      	bx	lr

08004294 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b082      	sub	sp, #8
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d101      	bne.n	80042a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	e040      	b.n	8004328 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d106      	bne.n	80042bc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2200      	movs	r2, #0
 80042b2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	f7fc fe7a 	bl	8000fb0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2224      	movs	r2, #36	; 0x24
 80042c0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	681a      	ldr	r2, [r3, #0]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f022 0201 	bic.w	r2, r2, #1
 80042d0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80042d2:	6878      	ldr	r0, [r7, #4]
 80042d4:	f000 f82c 	bl	8004330 <UART_SetConfig>
 80042d8:	4603      	mov	r3, r0
 80042da:	2b01      	cmp	r3, #1
 80042dc:	d101      	bne.n	80042e2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80042de:	2301      	movs	r3, #1
 80042e0:	e022      	b.n	8004328 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d002      	beq.n	80042f0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80042ea:	6878      	ldr	r0, [r7, #4]
 80042ec:	f000 fa82 	bl	80047f4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	685a      	ldr	r2, [r3, #4]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80042fe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	689a      	ldr	r2, [r3, #8]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800430e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	681a      	ldr	r2, [r3, #0]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f042 0201 	orr.w	r2, r2, #1
 800431e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004320:	6878      	ldr	r0, [r7, #4]
 8004322:	f000 fb09 	bl	8004938 <UART_CheckIdleState>
 8004326:	4603      	mov	r3, r0
}
 8004328:	4618      	mov	r0, r3
 800432a:	3708      	adds	r7, #8
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}

08004330 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b088      	sub	sp, #32
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004338:	2300      	movs	r3, #0
 800433a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	689a      	ldr	r2, [r3, #8]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	691b      	ldr	r3, [r3, #16]
 8004344:	431a      	orrs	r2, r3
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	695b      	ldr	r3, [r3, #20]
 800434a:	431a      	orrs	r2, r3
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	69db      	ldr	r3, [r3, #28]
 8004350:	4313      	orrs	r3, r2
 8004352:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	681a      	ldr	r2, [r3, #0]
 800435a:	4ba7      	ldr	r3, [pc, #668]	; (80045f8 <UART_SetConfig+0x2c8>)
 800435c:	4013      	ands	r3, r2
 800435e:	687a      	ldr	r2, [r7, #4]
 8004360:	6812      	ldr	r2, [r2, #0]
 8004362:	6979      	ldr	r1, [r7, #20]
 8004364:	430b      	orrs	r3, r1
 8004366:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	68da      	ldr	r2, [r3, #12]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	430a      	orrs	r2, r1
 800437c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	699b      	ldr	r3, [r3, #24]
 8004382:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6a1b      	ldr	r3, [r3, #32]
 8004388:	697a      	ldr	r2, [r7, #20]
 800438a:	4313      	orrs	r3, r2
 800438c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	689b      	ldr	r3, [r3, #8]
 8004394:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	697a      	ldr	r2, [r7, #20]
 800439e:	430a      	orrs	r2, r1
 80043a0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a95      	ldr	r2, [pc, #596]	; (80045fc <UART_SetConfig+0x2cc>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d120      	bne.n	80043ee <UART_SetConfig+0xbe>
 80043ac:	4b94      	ldr	r3, [pc, #592]	; (8004600 <UART_SetConfig+0x2d0>)
 80043ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043b2:	f003 0303 	and.w	r3, r3, #3
 80043b6:	2b03      	cmp	r3, #3
 80043b8:	d816      	bhi.n	80043e8 <UART_SetConfig+0xb8>
 80043ba:	a201      	add	r2, pc, #4	; (adr r2, 80043c0 <UART_SetConfig+0x90>)
 80043bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043c0:	080043d1 	.word	0x080043d1
 80043c4:	080043dd 	.word	0x080043dd
 80043c8:	080043d7 	.word	0x080043d7
 80043cc:	080043e3 	.word	0x080043e3
 80043d0:	2301      	movs	r3, #1
 80043d2:	77fb      	strb	r3, [r7, #31]
 80043d4:	e14f      	b.n	8004676 <UART_SetConfig+0x346>
 80043d6:	2302      	movs	r3, #2
 80043d8:	77fb      	strb	r3, [r7, #31]
 80043da:	e14c      	b.n	8004676 <UART_SetConfig+0x346>
 80043dc:	2304      	movs	r3, #4
 80043de:	77fb      	strb	r3, [r7, #31]
 80043e0:	e149      	b.n	8004676 <UART_SetConfig+0x346>
 80043e2:	2308      	movs	r3, #8
 80043e4:	77fb      	strb	r3, [r7, #31]
 80043e6:	e146      	b.n	8004676 <UART_SetConfig+0x346>
 80043e8:	2310      	movs	r3, #16
 80043ea:	77fb      	strb	r3, [r7, #31]
 80043ec:	e143      	b.n	8004676 <UART_SetConfig+0x346>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a84      	ldr	r2, [pc, #528]	; (8004604 <UART_SetConfig+0x2d4>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d132      	bne.n	800445e <UART_SetConfig+0x12e>
 80043f8:	4b81      	ldr	r3, [pc, #516]	; (8004600 <UART_SetConfig+0x2d0>)
 80043fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043fe:	f003 030c 	and.w	r3, r3, #12
 8004402:	2b0c      	cmp	r3, #12
 8004404:	d828      	bhi.n	8004458 <UART_SetConfig+0x128>
 8004406:	a201      	add	r2, pc, #4	; (adr r2, 800440c <UART_SetConfig+0xdc>)
 8004408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800440c:	08004441 	.word	0x08004441
 8004410:	08004459 	.word	0x08004459
 8004414:	08004459 	.word	0x08004459
 8004418:	08004459 	.word	0x08004459
 800441c:	0800444d 	.word	0x0800444d
 8004420:	08004459 	.word	0x08004459
 8004424:	08004459 	.word	0x08004459
 8004428:	08004459 	.word	0x08004459
 800442c:	08004447 	.word	0x08004447
 8004430:	08004459 	.word	0x08004459
 8004434:	08004459 	.word	0x08004459
 8004438:	08004459 	.word	0x08004459
 800443c:	08004453 	.word	0x08004453
 8004440:	2300      	movs	r3, #0
 8004442:	77fb      	strb	r3, [r7, #31]
 8004444:	e117      	b.n	8004676 <UART_SetConfig+0x346>
 8004446:	2302      	movs	r3, #2
 8004448:	77fb      	strb	r3, [r7, #31]
 800444a:	e114      	b.n	8004676 <UART_SetConfig+0x346>
 800444c:	2304      	movs	r3, #4
 800444e:	77fb      	strb	r3, [r7, #31]
 8004450:	e111      	b.n	8004676 <UART_SetConfig+0x346>
 8004452:	2308      	movs	r3, #8
 8004454:	77fb      	strb	r3, [r7, #31]
 8004456:	e10e      	b.n	8004676 <UART_SetConfig+0x346>
 8004458:	2310      	movs	r3, #16
 800445a:	77fb      	strb	r3, [r7, #31]
 800445c:	e10b      	b.n	8004676 <UART_SetConfig+0x346>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a69      	ldr	r2, [pc, #420]	; (8004608 <UART_SetConfig+0x2d8>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d120      	bne.n	80044aa <UART_SetConfig+0x17a>
 8004468:	4b65      	ldr	r3, [pc, #404]	; (8004600 <UART_SetConfig+0x2d0>)
 800446a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800446e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004472:	2b30      	cmp	r3, #48	; 0x30
 8004474:	d013      	beq.n	800449e <UART_SetConfig+0x16e>
 8004476:	2b30      	cmp	r3, #48	; 0x30
 8004478:	d814      	bhi.n	80044a4 <UART_SetConfig+0x174>
 800447a:	2b20      	cmp	r3, #32
 800447c:	d009      	beq.n	8004492 <UART_SetConfig+0x162>
 800447e:	2b20      	cmp	r3, #32
 8004480:	d810      	bhi.n	80044a4 <UART_SetConfig+0x174>
 8004482:	2b00      	cmp	r3, #0
 8004484:	d002      	beq.n	800448c <UART_SetConfig+0x15c>
 8004486:	2b10      	cmp	r3, #16
 8004488:	d006      	beq.n	8004498 <UART_SetConfig+0x168>
 800448a:	e00b      	b.n	80044a4 <UART_SetConfig+0x174>
 800448c:	2300      	movs	r3, #0
 800448e:	77fb      	strb	r3, [r7, #31]
 8004490:	e0f1      	b.n	8004676 <UART_SetConfig+0x346>
 8004492:	2302      	movs	r3, #2
 8004494:	77fb      	strb	r3, [r7, #31]
 8004496:	e0ee      	b.n	8004676 <UART_SetConfig+0x346>
 8004498:	2304      	movs	r3, #4
 800449a:	77fb      	strb	r3, [r7, #31]
 800449c:	e0eb      	b.n	8004676 <UART_SetConfig+0x346>
 800449e:	2308      	movs	r3, #8
 80044a0:	77fb      	strb	r3, [r7, #31]
 80044a2:	e0e8      	b.n	8004676 <UART_SetConfig+0x346>
 80044a4:	2310      	movs	r3, #16
 80044a6:	77fb      	strb	r3, [r7, #31]
 80044a8:	e0e5      	b.n	8004676 <UART_SetConfig+0x346>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a57      	ldr	r2, [pc, #348]	; (800460c <UART_SetConfig+0x2dc>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d120      	bne.n	80044f6 <UART_SetConfig+0x1c6>
 80044b4:	4b52      	ldr	r3, [pc, #328]	; (8004600 <UART_SetConfig+0x2d0>)
 80044b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044ba:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80044be:	2bc0      	cmp	r3, #192	; 0xc0
 80044c0:	d013      	beq.n	80044ea <UART_SetConfig+0x1ba>
 80044c2:	2bc0      	cmp	r3, #192	; 0xc0
 80044c4:	d814      	bhi.n	80044f0 <UART_SetConfig+0x1c0>
 80044c6:	2b80      	cmp	r3, #128	; 0x80
 80044c8:	d009      	beq.n	80044de <UART_SetConfig+0x1ae>
 80044ca:	2b80      	cmp	r3, #128	; 0x80
 80044cc:	d810      	bhi.n	80044f0 <UART_SetConfig+0x1c0>
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d002      	beq.n	80044d8 <UART_SetConfig+0x1a8>
 80044d2:	2b40      	cmp	r3, #64	; 0x40
 80044d4:	d006      	beq.n	80044e4 <UART_SetConfig+0x1b4>
 80044d6:	e00b      	b.n	80044f0 <UART_SetConfig+0x1c0>
 80044d8:	2300      	movs	r3, #0
 80044da:	77fb      	strb	r3, [r7, #31]
 80044dc:	e0cb      	b.n	8004676 <UART_SetConfig+0x346>
 80044de:	2302      	movs	r3, #2
 80044e0:	77fb      	strb	r3, [r7, #31]
 80044e2:	e0c8      	b.n	8004676 <UART_SetConfig+0x346>
 80044e4:	2304      	movs	r3, #4
 80044e6:	77fb      	strb	r3, [r7, #31]
 80044e8:	e0c5      	b.n	8004676 <UART_SetConfig+0x346>
 80044ea:	2308      	movs	r3, #8
 80044ec:	77fb      	strb	r3, [r7, #31]
 80044ee:	e0c2      	b.n	8004676 <UART_SetConfig+0x346>
 80044f0:	2310      	movs	r3, #16
 80044f2:	77fb      	strb	r3, [r7, #31]
 80044f4:	e0bf      	b.n	8004676 <UART_SetConfig+0x346>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a45      	ldr	r2, [pc, #276]	; (8004610 <UART_SetConfig+0x2e0>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d125      	bne.n	800454c <UART_SetConfig+0x21c>
 8004500:	4b3f      	ldr	r3, [pc, #252]	; (8004600 <UART_SetConfig+0x2d0>)
 8004502:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004506:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800450a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800450e:	d017      	beq.n	8004540 <UART_SetConfig+0x210>
 8004510:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004514:	d817      	bhi.n	8004546 <UART_SetConfig+0x216>
 8004516:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800451a:	d00b      	beq.n	8004534 <UART_SetConfig+0x204>
 800451c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004520:	d811      	bhi.n	8004546 <UART_SetConfig+0x216>
 8004522:	2b00      	cmp	r3, #0
 8004524:	d003      	beq.n	800452e <UART_SetConfig+0x1fe>
 8004526:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800452a:	d006      	beq.n	800453a <UART_SetConfig+0x20a>
 800452c:	e00b      	b.n	8004546 <UART_SetConfig+0x216>
 800452e:	2300      	movs	r3, #0
 8004530:	77fb      	strb	r3, [r7, #31]
 8004532:	e0a0      	b.n	8004676 <UART_SetConfig+0x346>
 8004534:	2302      	movs	r3, #2
 8004536:	77fb      	strb	r3, [r7, #31]
 8004538:	e09d      	b.n	8004676 <UART_SetConfig+0x346>
 800453a:	2304      	movs	r3, #4
 800453c:	77fb      	strb	r3, [r7, #31]
 800453e:	e09a      	b.n	8004676 <UART_SetConfig+0x346>
 8004540:	2308      	movs	r3, #8
 8004542:	77fb      	strb	r3, [r7, #31]
 8004544:	e097      	b.n	8004676 <UART_SetConfig+0x346>
 8004546:	2310      	movs	r3, #16
 8004548:	77fb      	strb	r3, [r7, #31]
 800454a:	e094      	b.n	8004676 <UART_SetConfig+0x346>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a30      	ldr	r2, [pc, #192]	; (8004614 <UART_SetConfig+0x2e4>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d125      	bne.n	80045a2 <UART_SetConfig+0x272>
 8004556:	4b2a      	ldr	r3, [pc, #168]	; (8004600 <UART_SetConfig+0x2d0>)
 8004558:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800455c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004560:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004564:	d017      	beq.n	8004596 <UART_SetConfig+0x266>
 8004566:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800456a:	d817      	bhi.n	800459c <UART_SetConfig+0x26c>
 800456c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004570:	d00b      	beq.n	800458a <UART_SetConfig+0x25a>
 8004572:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004576:	d811      	bhi.n	800459c <UART_SetConfig+0x26c>
 8004578:	2b00      	cmp	r3, #0
 800457a:	d003      	beq.n	8004584 <UART_SetConfig+0x254>
 800457c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004580:	d006      	beq.n	8004590 <UART_SetConfig+0x260>
 8004582:	e00b      	b.n	800459c <UART_SetConfig+0x26c>
 8004584:	2301      	movs	r3, #1
 8004586:	77fb      	strb	r3, [r7, #31]
 8004588:	e075      	b.n	8004676 <UART_SetConfig+0x346>
 800458a:	2302      	movs	r3, #2
 800458c:	77fb      	strb	r3, [r7, #31]
 800458e:	e072      	b.n	8004676 <UART_SetConfig+0x346>
 8004590:	2304      	movs	r3, #4
 8004592:	77fb      	strb	r3, [r7, #31]
 8004594:	e06f      	b.n	8004676 <UART_SetConfig+0x346>
 8004596:	2308      	movs	r3, #8
 8004598:	77fb      	strb	r3, [r7, #31]
 800459a:	e06c      	b.n	8004676 <UART_SetConfig+0x346>
 800459c:	2310      	movs	r3, #16
 800459e:	77fb      	strb	r3, [r7, #31]
 80045a0:	e069      	b.n	8004676 <UART_SetConfig+0x346>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a1c      	ldr	r2, [pc, #112]	; (8004618 <UART_SetConfig+0x2e8>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d137      	bne.n	800461c <UART_SetConfig+0x2ec>
 80045ac:	4b14      	ldr	r3, [pc, #80]	; (8004600 <UART_SetConfig+0x2d0>)
 80045ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045b2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80045b6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80045ba:	d017      	beq.n	80045ec <UART_SetConfig+0x2bc>
 80045bc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80045c0:	d817      	bhi.n	80045f2 <UART_SetConfig+0x2c2>
 80045c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045c6:	d00b      	beq.n	80045e0 <UART_SetConfig+0x2b0>
 80045c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045cc:	d811      	bhi.n	80045f2 <UART_SetConfig+0x2c2>
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d003      	beq.n	80045da <UART_SetConfig+0x2aa>
 80045d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045d6:	d006      	beq.n	80045e6 <UART_SetConfig+0x2b6>
 80045d8:	e00b      	b.n	80045f2 <UART_SetConfig+0x2c2>
 80045da:	2300      	movs	r3, #0
 80045dc:	77fb      	strb	r3, [r7, #31]
 80045de:	e04a      	b.n	8004676 <UART_SetConfig+0x346>
 80045e0:	2302      	movs	r3, #2
 80045e2:	77fb      	strb	r3, [r7, #31]
 80045e4:	e047      	b.n	8004676 <UART_SetConfig+0x346>
 80045e6:	2304      	movs	r3, #4
 80045e8:	77fb      	strb	r3, [r7, #31]
 80045ea:	e044      	b.n	8004676 <UART_SetConfig+0x346>
 80045ec:	2308      	movs	r3, #8
 80045ee:	77fb      	strb	r3, [r7, #31]
 80045f0:	e041      	b.n	8004676 <UART_SetConfig+0x346>
 80045f2:	2310      	movs	r3, #16
 80045f4:	77fb      	strb	r3, [r7, #31]
 80045f6:	e03e      	b.n	8004676 <UART_SetConfig+0x346>
 80045f8:	efff69f3 	.word	0xefff69f3
 80045fc:	40011000 	.word	0x40011000
 8004600:	40023800 	.word	0x40023800
 8004604:	40004400 	.word	0x40004400
 8004608:	40004800 	.word	0x40004800
 800460c:	40004c00 	.word	0x40004c00
 8004610:	40005000 	.word	0x40005000
 8004614:	40011400 	.word	0x40011400
 8004618:	40007800 	.word	0x40007800
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a71      	ldr	r2, [pc, #452]	; (80047e8 <UART_SetConfig+0x4b8>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d125      	bne.n	8004672 <UART_SetConfig+0x342>
 8004626:	4b71      	ldr	r3, [pc, #452]	; (80047ec <UART_SetConfig+0x4bc>)
 8004628:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800462c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004630:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004634:	d017      	beq.n	8004666 <UART_SetConfig+0x336>
 8004636:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800463a:	d817      	bhi.n	800466c <UART_SetConfig+0x33c>
 800463c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004640:	d00b      	beq.n	800465a <UART_SetConfig+0x32a>
 8004642:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004646:	d811      	bhi.n	800466c <UART_SetConfig+0x33c>
 8004648:	2b00      	cmp	r3, #0
 800464a:	d003      	beq.n	8004654 <UART_SetConfig+0x324>
 800464c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004650:	d006      	beq.n	8004660 <UART_SetConfig+0x330>
 8004652:	e00b      	b.n	800466c <UART_SetConfig+0x33c>
 8004654:	2300      	movs	r3, #0
 8004656:	77fb      	strb	r3, [r7, #31]
 8004658:	e00d      	b.n	8004676 <UART_SetConfig+0x346>
 800465a:	2302      	movs	r3, #2
 800465c:	77fb      	strb	r3, [r7, #31]
 800465e:	e00a      	b.n	8004676 <UART_SetConfig+0x346>
 8004660:	2304      	movs	r3, #4
 8004662:	77fb      	strb	r3, [r7, #31]
 8004664:	e007      	b.n	8004676 <UART_SetConfig+0x346>
 8004666:	2308      	movs	r3, #8
 8004668:	77fb      	strb	r3, [r7, #31]
 800466a:	e004      	b.n	8004676 <UART_SetConfig+0x346>
 800466c:	2310      	movs	r3, #16
 800466e:	77fb      	strb	r3, [r7, #31]
 8004670:	e001      	b.n	8004676 <UART_SetConfig+0x346>
 8004672:	2310      	movs	r3, #16
 8004674:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	69db      	ldr	r3, [r3, #28]
 800467a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800467e:	d15b      	bne.n	8004738 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8004680:	7ffb      	ldrb	r3, [r7, #31]
 8004682:	2b08      	cmp	r3, #8
 8004684:	d827      	bhi.n	80046d6 <UART_SetConfig+0x3a6>
 8004686:	a201      	add	r2, pc, #4	; (adr r2, 800468c <UART_SetConfig+0x35c>)
 8004688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800468c:	080046b1 	.word	0x080046b1
 8004690:	080046b9 	.word	0x080046b9
 8004694:	080046c1 	.word	0x080046c1
 8004698:	080046d7 	.word	0x080046d7
 800469c:	080046c7 	.word	0x080046c7
 80046a0:	080046d7 	.word	0x080046d7
 80046a4:	080046d7 	.word	0x080046d7
 80046a8:	080046d7 	.word	0x080046d7
 80046ac:	080046cf 	.word	0x080046cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80046b0:	f7fd fd88 	bl	80021c4 <HAL_RCC_GetPCLK1Freq>
 80046b4:	61b8      	str	r0, [r7, #24]
        break;
 80046b6:	e013      	b.n	80046e0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80046b8:	f7fd fd98 	bl	80021ec <HAL_RCC_GetPCLK2Freq>
 80046bc:	61b8      	str	r0, [r7, #24]
        break;
 80046be:	e00f      	b.n	80046e0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80046c0:	4b4b      	ldr	r3, [pc, #300]	; (80047f0 <UART_SetConfig+0x4c0>)
 80046c2:	61bb      	str	r3, [r7, #24]
        break;
 80046c4:	e00c      	b.n	80046e0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80046c6:	f7fd fcbb 	bl	8002040 <HAL_RCC_GetSysClockFreq>
 80046ca:	61b8      	str	r0, [r7, #24]
        break;
 80046cc:	e008      	b.n	80046e0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80046ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80046d2:	61bb      	str	r3, [r7, #24]
        break;
 80046d4:	e004      	b.n	80046e0 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 80046d6:	2300      	movs	r3, #0
 80046d8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80046da:	2301      	movs	r3, #1
 80046dc:	77bb      	strb	r3, [r7, #30]
        break;
 80046de:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80046e0:	69bb      	ldr	r3, [r7, #24]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d074      	beq.n	80047d0 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80046e6:	69bb      	ldr	r3, [r7, #24]
 80046e8:	005a      	lsls	r2, r3, #1
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	085b      	lsrs	r3, r3, #1
 80046f0:	441a      	add	r2, r3
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80046fa:	b29b      	uxth	r3, r3
 80046fc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	2b0f      	cmp	r3, #15
 8004702:	d916      	bls.n	8004732 <UART_SetConfig+0x402>
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800470a:	d212      	bcs.n	8004732 <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800470c:	693b      	ldr	r3, [r7, #16]
 800470e:	b29b      	uxth	r3, r3
 8004710:	f023 030f 	bic.w	r3, r3, #15
 8004714:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	085b      	lsrs	r3, r3, #1
 800471a:	b29b      	uxth	r3, r3
 800471c:	f003 0307 	and.w	r3, r3, #7
 8004720:	b29a      	uxth	r2, r3
 8004722:	89fb      	ldrh	r3, [r7, #14]
 8004724:	4313      	orrs	r3, r2
 8004726:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	89fa      	ldrh	r2, [r7, #14]
 800472e:	60da      	str	r2, [r3, #12]
 8004730:	e04e      	b.n	80047d0 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8004732:	2301      	movs	r3, #1
 8004734:	77bb      	strb	r3, [r7, #30]
 8004736:	e04b      	b.n	80047d0 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004738:	7ffb      	ldrb	r3, [r7, #31]
 800473a:	2b08      	cmp	r3, #8
 800473c:	d827      	bhi.n	800478e <UART_SetConfig+0x45e>
 800473e:	a201      	add	r2, pc, #4	; (adr r2, 8004744 <UART_SetConfig+0x414>)
 8004740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004744:	08004769 	.word	0x08004769
 8004748:	08004771 	.word	0x08004771
 800474c:	08004779 	.word	0x08004779
 8004750:	0800478f 	.word	0x0800478f
 8004754:	0800477f 	.word	0x0800477f
 8004758:	0800478f 	.word	0x0800478f
 800475c:	0800478f 	.word	0x0800478f
 8004760:	0800478f 	.word	0x0800478f
 8004764:	08004787 	.word	0x08004787
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004768:	f7fd fd2c 	bl	80021c4 <HAL_RCC_GetPCLK1Freq>
 800476c:	61b8      	str	r0, [r7, #24]
        break;
 800476e:	e013      	b.n	8004798 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004770:	f7fd fd3c 	bl	80021ec <HAL_RCC_GetPCLK2Freq>
 8004774:	61b8      	str	r0, [r7, #24]
        break;
 8004776:	e00f      	b.n	8004798 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004778:	4b1d      	ldr	r3, [pc, #116]	; (80047f0 <UART_SetConfig+0x4c0>)
 800477a:	61bb      	str	r3, [r7, #24]
        break;
 800477c:	e00c      	b.n	8004798 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800477e:	f7fd fc5f 	bl	8002040 <HAL_RCC_GetSysClockFreq>
 8004782:	61b8      	str	r0, [r7, #24]
        break;
 8004784:	e008      	b.n	8004798 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004786:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800478a:	61bb      	str	r3, [r7, #24]
        break;
 800478c:	e004      	b.n	8004798 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 800478e:	2300      	movs	r3, #0
 8004790:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	77bb      	strb	r3, [r7, #30]
        break;
 8004796:	bf00      	nop
    }

    if (pclk != 0U)
 8004798:	69bb      	ldr	r3, [r7, #24]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d018      	beq.n	80047d0 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	085a      	lsrs	r2, r3, #1
 80047a4:	69bb      	ldr	r3, [r7, #24]
 80047a6:	441a      	add	r2, r3
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80047b0:	b29b      	uxth	r3, r3
 80047b2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80047b4:	693b      	ldr	r3, [r7, #16]
 80047b6:	2b0f      	cmp	r3, #15
 80047b8:	d908      	bls.n	80047cc <UART_SetConfig+0x49c>
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047c0:	d204      	bcs.n	80047cc <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	693a      	ldr	r2, [r7, #16]
 80047c8:	60da      	str	r2, [r3, #12]
 80047ca:	e001      	b.n	80047d0 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80047cc:	2301      	movs	r3, #1
 80047ce:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2200      	movs	r2, #0
 80047d4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2200      	movs	r2, #0
 80047da:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80047dc:	7fbb      	ldrb	r3, [r7, #30]
}
 80047de:	4618      	mov	r0, r3
 80047e0:	3720      	adds	r7, #32
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}
 80047e6:	bf00      	nop
 80047e8:	40007c00 	.word	0x40007c00
 80047ec:	40023800 	.word	0x40023800
 80047f0:	00f42400 	.word	0x00f42400

080047f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80047f4:	b480      	push	{r7}
 80047f6:	b083      	sub	sp, #12
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004800:	f003 0301 	and.w	r3, r3, #1
 8004804:	2b00      	cmp	r3, #0
 8004806:	d00a      	beq.n	800481e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	430a      	orrs	r2, r1
 800481c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004822:	f003 0302 	and.w	r3, r3, #2
 8004826:	2b00      	cmp	r3, #0
 8004828:	d00a      	beq.n	8004840 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	430a      	orrs	r2, r1
 800483e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004844:	f003 0304 	and.w	r3, r3, #4
 8004848:	2b00      	cmp	r3, #0
 800484a:	d00a      	beq.n	8004862 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	430a      	orrs	r2, r1
 8004860:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004866:	f003 0308 	and.w	r3, r3, #8
 800486a:	2b00      	cmp	r3, #0
 800486c:	d00a      	beq.n	8004884 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	430a      	orrs	r2, r1
 8004882:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004888:	f003 0310 	and.w	r3, r3, #16
 800488c:	2b00      	cmp	r3, #0
 800488e:	d00a      	beq.n	80048a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	689b      	ldr	r3, [r3, #8]
 8004896:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	430a      	orrs	r2, r1
 80048a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048aa:	f003 0320 	and.w	r3, r3, #32
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d00a      	beq.n	80048c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	689b      	ldr	r3, [r3, #8]
 80048b8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	430a      	orrs	r2, r1
 80048c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d01a      	beq.n	800490a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	430a      	orrs	r2, r1
 80048e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80048f2:	d10a      	bne.n	800490a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	430a      	orrs	r2, r1
 8004908:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800490e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004912:	2b00      	cmp	r3, #0
 8004914:	d00a      	beq.n	800492c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	430a      	orrs	r2, r1
 800492a:	605a      	str	r2, [r3, #4]
  }
}
 800492c:	bf00      	nop
 800492e:	370c      	adds	r7, #12
 8004930:	46bd      	mov	sp, r7
 8004932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004936:	4770      	bx	lr

08004938 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b086      	sub	sp, #24
 800493c:	af02      	add	r7, sp, #8
 800493e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2200      	movs	r2, #0
 8004944:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004948:	f7fc fc56 	bl	80011f8 <HAL_GetTick>
 800494c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f003 0308 	and.w	r3, r3, #8
 8004958:	2b08      	cmp	r3, #8
 800495a:	d10e      	bne.n	800497a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800495c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004960:	9300      	str	r3, [sp, #0]
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	2200      	movs	r2, #0
 8004966:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	f000 f817 	bl	800499e <UART_WaitOnFlagUntilTimeout>
 8004970:	4603      	mov	r3, r0
 8004972:	2b00      	cmp	r3, #0
 8004974:	d001      	beq.n	800497a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004976:	2303      	movs	r3, #3
 8004978:	e00d      	b.n	8004996 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2220      	movs	r2, #32
 800497e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2220      	movs	r2, #32
 8004984:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2200      	movs	r2, #0
 800498a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2200      	movs	r2, #0
 8004990:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004994:	2300      	movs	r3, #0
}
 8004996:	4618      	mov	r0, r3
 8004998:	3710      	adds	r7, #16
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}

0800499e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800499e:	b580      	push	{r7, lr}
 80049a0:	b084      	sub	sp, #16
 80049a2:	af00      	add	r7, sp, #0
 80049a4:	60f8      	str	r0, [r7, #12]
 80049a6:	60b9      	str	r1, [r7, #8]
 80049a8:	603b      	str	r3, [r7, #0]
 80049aa:	4613      	mov	r3, r2
 80049ac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049ae:	e05e      	b.n	8004a6e <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049b0:	69bb      	ldr	r3, [r7, #24]
 80049b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049b6:	d05a      	beq.n	8004a6e <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049b8:	f7fc fc1e 	bl	80011f8 <HAL_GetTick>
 80049bc:	4602      	mov	r2, r0
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	1ad3      	subs	r3, r2, r3
 80049c2:	69ba      	ldr	r2, [r7, #24]
 80049c4:	429a      	cmp	r2, r3
 80049c6:	d302      	bcc.n	80049ce <UART_WaitOnFlagUntilTimeout+0x30>
 80049c8:	69bb      	ldr	r3, [r7, #24]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d11b      	bne.n	8004a06 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	681a      	ldr	r2, [r3, #0]
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80049dc:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	689a      	ldr	r2, [r3, #8]
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f022 0201 	bic.w	r2, r2, #1
 80049ec:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	2220      	movs	r2, #32
 80049f2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	2220      	movs	r2, #32
 80049f8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2200      	movs	r2, #0
 80049fe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004a02:	2303      	movs	r3, #3
 8004a04:	e043      	b.n	8004a8e <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f003 0304 	and.w	r3, r3, #4
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d02c      	beq.n	8004a6e <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	69db      	ldr	r3, [r3, #28]
 8004a1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a22:	d124      	bne.n	8004a6e <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004a2c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	681a      	ldr	r2, [r3, #0]
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004a3c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	689a      	ldr	r2, [r3, #8]
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f022 0201 	bic.w	r2, r2, #1
 8004a4c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	2220      	movs	r2, #32
 8004a52:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	2220      	movs	r2, #32
 8004a58:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2220      	movs	r2, #32
 8004a5e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	2200      	movs	r2, #0
 8004a66:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004a6a:	2303      	movs	r3, #3
 8004a6c:	e00f      	b.n	8004a8e <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	69da      	ldr	r2, [r3, #28]
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	4013      	ands	r3, r2
 8004a78:	68ba      	ldr	r2, [r7, #8]
 8004a7a:	429a      	cmp	r2, r3
 8004a7c:	bf0c      	ite	eq
 8004a7e:	2301      	moveq	r3, #1
 8004a80:	2300      	movne	r3, #0
 8004a82:	b2db      	uxtb	r3, r3
 8004a84:	461a      	mov	r2, r3
 8004a86:	79fb      	ldrb	r3, [r7, #7]
 8004a88:	429a      	cmp	r2, r3
 8004a8a:	d091      	beq.n	80049b0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a8c:	2300      	movs	r3, #0
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	3710      	adds	r7, #16
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bd80      	pop	{r7, pc}
	...

08004a98 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8004a98:	b084      	sub	sp, #16
 8004a9a:	b480      	push	{r7}
 8004a9c:	b085      	sub	sp, #20
 8004a9e:	af00      	add	r7, sp, #0
 8004aa0:	6078      	str	r0, [r7, #4]
 8004aa2:	f107 001c 	add.w	r0, r7, #28
 8004aa6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8004aaa:	2300      	movs	r3, #0
 8004aac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8004aae:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8004ab0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8004ab2:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8004ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8004ab6:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8004ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8004aba:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8004abc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8004abe:	431a      	orrs	r2, r3
             Init.ClockDiv
 8004ac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8004ac2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8004ac4:	68fa      	ldr	r2, [r7, #12]
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	685a      	ldr	r2, [r3, #4]
 8004ace:	4b07      	ldr	r3, [pc, #28]	; (8004aec <SDMMC_Init+0x54>)
 8004ad0:	4013      	ands	r3, r2
 8004ad2:	68fa      	ldr	r2, [r7, #12]
 8004ad4:	431a      	orrs	r2, r3
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8004ada:	2300      	movs	r3, #0
}
 8004adc:	4618      	mov	r0, r3
 8004ade:	3714      	adds	r7, #20
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae6:	b004      	add	sp, #16
 8004ae8:	4770      	bx	lr
 8004aea:	bf00      	nop
 8004aec:	ffff8100 	.word	0xffff8100

08004af0 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b083      	sub	sp, #12
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8004afe:	4618      	mov	r0, r3
 8004b00:	370c      	adds	r7, #12
 8004b02:	46bd      	mov	sp, r7
 8004b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b08:	4770      	bx	lr

08004b0a <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 8004b0a:	b480      	push	{r7}
 8004b0c:	b083      	sub	sp, #12
 8004b0e:	af00      	add	r7, sp, #0
 8004b10:	6078      	str	r0, [r7, #4]
 8004b12:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	681a      	ldr	r2, [r3, #0]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004b1e:	2300      	movs	r3, #0
}
 8004b20:	4618      	mov	r0, r3
 8004b22:	370c      	adds	r7, #12
 8004b24:	46bd      	mov	sp, r7
 8004b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2a:	4770      	bx	lr

08004b2c <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b082      	sub	sp, #8
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2203      	movs	r2, #3
 8004b38:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8004b3a:	2002      	movs	r0, #2
 8004b3c:	f7fc fb68 	bl	8001210 <HAL_Delay>
  
  return HAL_OK;
 8004b40:	2300      	movs	r3, #0
}
 8004b42:	4618      	mov	r0, r3
 8004b44:	3708      	adds	r7, #8
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bd80      	pop	{r7, pc}

08004b4a <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 8004b4a:	b480      	push	{r7}
 8004b4c:	b083      	sub	sp, #12
 8004b4e:	af00      	add	r7, sp, #0
 8004b50:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f003 0303 	and.w	r3, r3, #3
}
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	370c      	adds	r7, #12
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b64:	4770      	bx	lr
	...

08004b68 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b085      	sub	sp, #20
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
 8004b70:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004b72:	2300      	movs	r3, #0
 8004b74:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	681a      	ldr	r2, [r3, #0]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004b86:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8004b8c:	431a      	orrs	r2, r3
                       Command->CPSM);
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8004b92:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004b94:	68fa      	ldr	r2, [r7, #12]
 8004b96:	4313      	orrs	r3, r2
 8004b98:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	68da      	ldr	r2, [r3, #12]
 8004b9e:	4b06      	ldr	r3, [pc, #24]	; (8004bb8 <SDMMC_SendCommand+0x50>)
 8004ba0:	4013      	ands	r3, r2
 8004ba2:	68fa      	ldr	r2, [r7, #12]
 8004ba4:	431a      	orrs	r2, r3
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8004baa:	2300      	movs	r3, #0
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	3714      	adds	r7, #20
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb6:	4770      	bx	lr
 8004bb8:	fffff000 	.word	0xfffff000

08004bbc <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b083      	sub	sp, #12
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	691b      	ldr	r3, [r3, #16]
 8004bc8:	b2db      	uxtb	r3, r3
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	370c      	adds	r7, #12
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd4:	4770      	bx	lr

08004bd6 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8004bd6:	b480      	push	{r7}
 8004bd8:	b085      	sub	sp, #20
 8004bda:	af00      	add	r7, sp, #0
 8004bdc:	6078      	str	r0, [r7, #4]
 8004bde:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	3314      	adds	r3, #20
 8004be4:	461a      	mov	r2, r3
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	4413      	add	r3, r2
 8004bea:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
}  
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	3714      	adds	r7, #20
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfa:	4770      	bx	lr

08004bfc <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b085      	sub	sp, #20
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
 8004c04:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004c06:	2300      	movs	r3, #0
 8004c08:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	681a      	ldr	r2, [r3, #0]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	685a      	ldr	r2, [r3, #4]
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004c22:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8004c28:	431a      	orrs	r2, r3
                       Data->DPSM);
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8004c2e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004c30:	68fa      	ldr	r2, [r7, #12]
 8004c32:	4313      	orrs	r3, r2
 8004c34:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c3a:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	431a      	orrs	r2, r3
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8004c46:	2300      	movs	r3, #0

}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	3714      	adds	r7, #20
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c52:	4770      	bx	lr

08004c54 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b088      	sub	sp, #32
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
 8004c5c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8004c62:	2310      	movs	r3, #16
 8004c64:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004c66:	2340      	movs	r3, #64	; 0x40
 8004c68:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004c6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c72:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004c74:	f107 0308 	add.w	r3, r7, #8
 8004c78:	4619      	mov	r1, r3
 8004c7a:	6878      	ldr	r0, [r7, #4]
 8004c7c:	f7ff ff74 	bl	8004b68 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8004c80:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c84:	2110      	movs	r1, #16
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	f000 fa02 	bl	8005090 <SDMMC_GetCmdResp1>
 8004c8c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004c8e:	69fb      	ldr	r3, [r7, #28]
}
 8004c90:	4618      	mov	r0, r3
 8004c92:	3720      	adds	r7, #32
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bd80      	pop	{r7, pc}

08004c98 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b088      	sub	sp, #32
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
 8004ca0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8004ca6:	2311      	movs	r3, #17
 8004ca8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004caa:	2340      	movs	r3, #64	; 0x40
 8004cac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004cae:	2300      	movs	r3, #0
 8004cb0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004cb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004cb6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004cb8:	f107 0308 	add.w	r3, r7, #8
 8004cbc:	4619      	mov	r1, r3
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	f7ff ff52 	bl	8004b68 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8004cc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cc8:	2111      	movs	r1, #17
 8004cca:	6878      	ldr	r0, [r7, #4]
 8004ccc:	f000 f9e0 	bl	8005090 <SDMMC_GetCmdResp1>
 8004cd0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004cd2:	69fb      	ldr	r3, [r7, #28]
}
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	3720      	adds	r7, #32
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bd80      	pop	{r7, pc}

08004cdc <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b088      	sub	sp, #32
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
 8004ce4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8004cea:	2312      	movs	r3, #18
 8004cec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004cee:	2340      	movs	r3, #64	; 0x40
 8004cf0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004cf6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004cfa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004cfc:	f107 0308 	add.w	r3, r7, #8
 8004d00:	4619      	mov	r1, r3
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	f7ff ff30 	bl	8004b68 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8004d08:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d0c:	2112      	movs	r1, #18
 8004d0e:	6878      	ldr	r0, [r7, #4]
 8004d10:	f000 f9be 	bl	8005090 <SDMMC_GetCmdResp1>
 8004d14:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004d16:	69fb      	ldr	r3, [r7, #28]
}
 8004d18:	4618      	mov	r0, r3
 8004d1a:	3720      	adds	r7, #32
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	bd80      	pop	{r7, pc}

08004d20 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b088      	sub	sp, #32
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
 8004d28:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8004d2e:	2318      	movs	r3, #24
 8004d30:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004d32:	2340      	movs	r3, #64	; 0x40
 8004d34:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004d36:	2300      	movs	r3, #0
 8004d38:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004d3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d3e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004d40:	f107 0308 	add.w	r3, r7, #8
 8004d44:	4619      	mov	r1, r3
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	f7ff ff0e 	bl	8004b68 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8004d4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d50:	2118      	movs	r1, #24
 8004d52:	6878      	ldr	r0, [r7, #4]
 8004d54:	f000 f99c 	bl	8005090 <SDMMC_GetCmdResp1>
 8004d58:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004d5a:	69fb      	ldr	r3, [r7, #28]
}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	3720      	adds	r7, #32
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bd80      	pop	{r7, pc}

08004d64 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b088      	sub	sp, #32
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
 8004d6c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8004d72:	2319      	movs	r3, #25
 8004d74:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004d76:	2340      	movs	r3, #64	; 0x40
 8004d78:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004d7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d82:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004d84:	f107 0308 	add.w	r3, r7, #8
 8004d88:	4619      	mov	r1, r3
 8004d8a:	6878      	ldr	r0, [r7, #4]
 8004d8c:	f7ff feec 	bl	8004b68 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8004d90:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d94:	2119      	movs	r1, #25
 8004d96:	6878      	ldr	r0, [r7, #4]
 8004d98:	f000 f97a 	bl	8005090 <SDMMC_GetCmdResp1>
 8004d9c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004d9e:	69fb      	ldr	r3, [r7, #28]
}
 8004da0:	4618      	mov	r0, r3
 8004da2:	3720      	adds	r7, #32
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bd80      	pop	{r7, pc}

08004da8 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b088      	sub	sp, #32
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8004db0:	2300      	movs	r3, #0
 8004db2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8004db4:	230c      	movs	r3, #12
 8004db6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004db8:	2340      	movs	r3, #64	; 0x40
 8004dba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004dc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004dc4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004dc6:	f107 0308 	add.w	r3, r7, #8
 8004dca:	4619      	mov	r1, r3
 8004dcc:	6878      	ldr	r0, [r7, #4]
 8004dce:	f7ff fecb 	bl	8004b68 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8004dd2:	4a05      	ldr	r2, [pc, #20]	; (8004de8 <SDMMC_CmdStopTransfer+0x40>)
 8004dd4:	210c      	movs	r1, #12
 8004dd6:	6878      	ldr	r0, [r7, #4]
 8004dd8:	f000 f95a 	bl	8005090 <SDMMC_GetCmdResp1>
 8004ddc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004dde:	69fb      	ldr	r3, [r7, #28]
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	3720      	adds	r7, #32
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd80      	pop	{r7, pc}
 8004de8:	05f5e100 	.word	0x05f5e100

08004dec <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b08a      	sub	sp, #40	; 0x28
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	60f8      	str	r0, [r7, #12]
 8004df4:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8004dfc:	2307      	movs	r3, #7
 8004dfe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004e00:	2340      	movs	r3, #64	; 0x40
 8004e02:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004e04:	2300      	movs	r3, #0
 8004e06:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004e08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e0c:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004e0e:	f107 0310 	add.w	r3, r7, #16
 8004e12:	4619      	mov	r1, r3
 8004e14:	68f8      	ldr	r0, [r7, #12]
 8004e16:	f7ff fea7 	bl	8004b68 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8004e1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e1e:	2107      	movs	r1, #7
 8004e20:	68f8      	ldr	r0, [r7, #12]
 8004e22:	f000 f935 	bl	8005090 <SDMMC_GetCmdResp1>
 8004e26:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8004e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	3728      	adds	r7, #40	; 0x28
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bd80      	pop	{r7, pc}

08004e32 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8004e32:	b580      	push	{r7, lr}
 8004e34:	b088      	sub	sp, #32
 8004e36:	af00      	add	r7, sp, #0
 8004e38:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8004e3e:	2300      	movs	r3, #0
 8004e40:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8004e42:	2300      	movs	r3, #0
 8004e44:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004e46:	2300      	movs	r3, #0
 8004e48:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004e4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e4e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004e50:	f107 0308 	add.w	r3, r7, #8
 8004e54:	4619      	mov	r1, r3
 8004e56:	6878      	ldr	r0, [r7, #4]
 8004e58:	f7ff fe86 	bl	8004b68 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8004e5c:	6878      	ldr	r0, [r7, #4]
 8004e5e:	f000 f8eb 	bl	8005038 <SDMMC_GetCmdError>
 8004e62:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004e64:	69fb      	ldr	r3, [r7, #28]
}
 8004e66:	4618      	mov	r0, r3
 8004e68:	3720      	adds	r7, #32
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd80      	pop	{r7, pc}

08004e6e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8004e6e:	b580      	push	{r7, lr}
 8004e70:	b088      	sub	sp, #32
 8004e72:	af00      	add	r7, sp, #0
 8004e74:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8004e76:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8004e7a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8004e7c:	2308      	movs	r3, #8
 8004e7e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004e80:	2340      	movs	r3, #64	; 0x40
 8004e82:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004e84:	2300      	movs	r3, #0
 8004e86:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004e88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e8c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004e8e:	f107 0308 	add.w	r3, r7, #8
 8004e92:	4619      	mov	r1, r3
 8004e94:	6878      	ldr	r0, [r7, #4]
 8004e96:	f7ff fe67 	bl	8004b68 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	f000 fae2 	bl	8005464 <SDMMC_GetCmdResp7>
 8004ea0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004ea2:	69fb      	ldr	r3, [r7, #28]
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	3720      	adds	r7, #32
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd80      	pop	{r7, pc}

08004eac <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b088      	sub	sp, #32
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
 8004eb4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8004eba:	2337      	movs	r3, #55	; 0x37
 8004ebc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004ebe:	2340      	movs	r3, #64	; 0x40
 8004ec0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004ec6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004eca:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004ecc:	f107 0308 	add.w	r3, r7, #8
 8004ed0:	4619      	mov	r1, r3
 8004ed2:	6878      	ldr	r0, [r7, #4]
 8004ed4:	f7ff fe48 	bl	8004b68 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8004ed8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004edc:	2137      	movs	r1, #55	; 0x37
 8004ede:	6878      	ldr	r0, [r7, #4]
 8004ee0:	f000 f8d6 	bl	8005090 <SDMMC_GetCmdResp1>
 8004ee4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004ee6:	69fb      	ldr	r3, [r7, #28]
}
 8004ee8:	4618      	mov	r0, r3
 8004eea:	3720      	adds	r7, #32
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bd80      	pop	{r7, pc}

08004ef0 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b088      	sub	sp, #32
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
 8004ef8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8004efa:	683a      	ldr	r2, [r7, #0]
 8004efc:	4b0d      	ldr	r3, [pc, #52]	; (8004f34 <SDMMC_CmdAppOperCommand+0x44>)
 8004efe:	4313      	orrs	r3, r2
 8004f00:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8004f02:	2329      	movs	r3, #41	; 0x29
 8004f04:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004f06:	2340      	movs	r3, #64	; 0x40
 8004f08:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004f0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f12:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004f14:	f107 0308 	add.w	r3, r7, #8
 8004f18:	4619      	mov	r1, r3
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	f7ff fe24 	bl	8004b68 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8004f20:	6878      	ldr	r0, [r7, #4]
 8004f22:	f000 f9eb 	bl	80052fc <SDMMC_GetCmdResp3>
 8004f26:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004f28:	69fb      	ldr	r3, [r7, #28]
}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	3720      	adds	r7, #32
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bd80      	pop	{r7, pc}
 8004f32:	bf00      	nop
 8004f34:	80100000 	.word	0x80100000

08004f38 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b088      	sub	sp, #32
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8004f40:	2300      	movs	r3, #0
 8004f42:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8004f44:	2302      	movs	r3, #2
 8004f46:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8004f48:	23c0      	movs	r3, #192	; 0xc0
 8004f4a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004f50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f54:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004f56:	f107 0308 	add.w	r3, r7, #8
 8004f5a:	4619      	mov	r1, r3
 8004f5c:	6878      	ldr	r0, [r7, #4]
 8004f5e:	f7ff fe03 	bl	8004b68 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8004f62:	6878      	ldr	r0, [r7, #4]
 8004f64:	f000 f982 	bl	800526c <SDMMC_GetCmdResp2>
 8004f68:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004f6a:	69fb      	ldr	r3, [r7, #28]
}
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	3720      	adds	r7, #32
 8004f70:	46bd      	mov	sp, r7
 8004f72:	bd80      	pop	{r7, pc}

08004f74 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b088      	sub	sp, #32
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
 8004f7c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8004f82:	2309      	movs	r3, #9
 8004f84:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8004f86:	23c0      	movs	r3, #192	; 0xc0
 8004f88:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004f8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f92:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004f94:	f107 0308 	add.w	r3, r7, #8
 8004f98:	4619      	mov	r1, r3
 8004f9a:	6878      	ldr	r0, [r7, #4]
 8004f9c:	f7ff fde4 	bl	8004b68 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8004fa0:	6878      	ldr	r0, [r7, #4]
 8004fa2:	f000 f963 	bl	800526c <SDMMC_GetCmdResp2>
 8004fa6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004fa8:	69fb      	ldr	r3, [r7, #28]
}
 8004faa:	4618      	mov	r0, r3
 8004fac:	3720      	adds	r7, #32
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bd80      	pop	{r7, pc}

08004fb2 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8004fb2:	b580      	push	{r7, lr}
 8004fb4:	b088      	sub	sp, #32
 8004fb6:	af00      	add	r7, sp, #0
 8004fb8:	6078      	str	r0, [r7, #4]
 8004fba:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8004fc0:	2303      	movs	r3, #3
 8004fc2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004fc4:	2340      	movs	r3, #64	; 0x40
 8004fc6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004fc8:	2300      	movs	r3, #0
 8004fca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004fcc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004fd0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004fd2:	f107 0308 	add.w	r3, r7, #8
 8004fd6:	4619      	mov	r1, r3
 8004fd8:	6878      	ldr	r0, [r7, #4]
 8004fda:	f7ff fdc5 	bl	8004b68 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8004fde:	683a      	ldr	r2, [r7, #0]
 8004fe0:	2103      	movs	r1, #3
 8004fe2:	6878      	ldr	r0, [r7, #4]
 8004fe4:	f000 f9c8 	bl	8005378 <SDMMC_GetCmdResp6>
 8004fe8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004fea:	69fb      	ldr	r3, [r7, #28]
}
 8004fec:	4618      	mov	r0, r3
 8004fee:	3720      	adds	r7, #32
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	bd80      	pop	{r7, pc}

08004ff4 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b088      	sub	sp, #32
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
 8004ffc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8005002:	230d      	movs	r3, #13
 8005004:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005006:	2340      	movs	r3, #64	; 0x40
 8005008:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800500a:	2300      	movs	r3, #0
 800500c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800500e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005012:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005014:	f107 0308 	add.w	r3, r7, #8
 8005018:	4619      	mov	r1, r3
 800501a:	6878      	ldr	r0, [r7, #4]
 800501c:	f7ff fda4 	bl	8004b68 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8005020:	f241 3288 	movw	r2, #5000	; 0x1388
 8005024:	210d      	movs	r1, #13
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	f000 f832 	bl	8005090 <SDMMC_GetCmdResp1>
 800502c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800502e:	69fb      	ldr	r3, [r7, #28]
}
 8005030:	4618      	mov	r0, r3
 8005032:	3720      	adds	r7, #32
 8005034:	46bd      	mov	sp, r7
 8005036:	bd80      	pop	{r7, pc}

08005038 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8005038:	b480      	push	{r7}
 800503a:	b085      	sub	sp, #20
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005040:	4b11      	ldr	r3, [pc, #68]	; (8005088 <SDMMC_GetCmdError+0x50>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a11      	ldr	r2, [pc, #68]	; (800508c <SDMMC_GetCmdError+0x54>)
 8005046:	fba2 2303 	umull	r2, r3, r2, r3
 800504a:	0a5b      	lsrs	r3, r3, #9
 800504c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005050:	fb02 f303 	mul.w	r3, r2, r3
 8005054:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	1e5a      	subs	r2, r3, #1
 800505a:	60fa      	str	r2, [r7, #12]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d102      	bne.n	8005066 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005060:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005064:	e009      	b.n	800507a <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800506a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800506e:	2b00      	cmp	r3, #0
 8005070:	d0f1      	beq.n	8005056 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	22c5      	movs	r2, #197	; 0xc5
 8005076:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8005078:	2300      	movs	r3, #0
}
 800507a:	4618      	mov	r0, r3
 800507c:	3714      	adds	r7, #20
 800507e:	46bd      	mov	sp, r7
 8005080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005084:	4770      	bx	lr
 8005086:	bf00      	nop
 8005088:	20000120 	.word	0x20000120
 800508c:	10624dd3 	.word	0x10624dd3

08005090 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b088      	sub	sp, #32
 8005094:	af00      	add	r7, sp, #0
 8005096:	60f8      	str	r0, [r7, #12]
 8005098:	460b      	mov	r3, r1
 800509a:	607a      	str	r2, [r7, #4]
 800509c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800509e:	4b70      	ldr	r3, [pc, #448]	; (8005260 <SDMMC_GetCmdResp1+0x1d0>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a70      	ldr	r2, [pc, #448]	; (8005264 <SDMMC_GetCmdResp1+0x1d4>)
 80050a4:	fba2 2303 	umull	r2, r3, r2, r3
 80050a8:	0a5a      	lsrs	r2, r3, #9
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	fb02 f303 	mul.w	r3, r2, r3
 80050b0:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80050b2:	69fb      	ldr	r3, [r7, #28]
 80050b4:	1e5a      	subs	r2, r3, #1
 80050b6:	61fa      	str	r2, [r7, #28]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d102      	bne.n	80050c2 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80050bc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80050c0:	e0c9      	b.n	8005256 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050c6:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80050c8:	69bb      	ldr	r3, [r7, #24]
 80050ca:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d0ef      	beq.n	80050b2 <SDMMC_GetCmdResp1+0x22>
 80050d2:	69bb      	ldr	r3, [r7, #24]
 80050d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d1ea      	bne.n	80050b2 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050e0:	f003 0304 	and.w	r3, r3, #4
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d004      	beq.n	80050f2 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	2204      	movs	r2, #4
 80050ec:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80050ee:	2304      	movs	r3, #4
 80050f0:	e0b1      	b.n	8005256 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050f6:	f003 0301 	and.w	r3, r3, #1
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d004      	beq.n	8005108 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	2201      	movs	r2, #1
 8005102:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005104:	2301      	movs	r3, #1
 8005106:	e0a6      	b.n	8005256 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	22c5      	movs	r2, #197	; 0xc5
 800510c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800510e:	68f8      	ldr	r0, [r7, #12]
 8005110:	f7ff fd54 	bl	8004bbc <SDMMC_GetCommandResponse>
 8005114:	4603      	mov	r3, r0
 8005116:	461a      	mov	r2, r3
 8005118:	7afb      	ldrb	r3, [r7, #11]
 800511a:	4293      	cmp	r3, r2
 800511c:	d001      	beq.n	8005122 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800511e:	2301      	movs	r3, #1
 8005120:	e099      	b.n	8005256 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8005122:	2100      	movs	r1, #0
 8005124:	68f8      	ldr	r0, [r7, #12]
 8005126:	f7ff fd56 	bl	8004bd6 <SDMMC_GetResponse>
 800512a:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800512c:	697a      	ldr	r2, [r7, #20]
 800512e:	4b4e      	ldr	r3, [pc, #312]	; (8005268 <SDMMC_GetCmdResp1+0x1d8>)
 8005130:	4013      	ands	r3, r2
 8005132:	2b00      	cmp	r3, #0
 8005134:	d101      	bne.n	800513a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8005136:	2300      	movs	r3, #0
 8005138:	e08d      	b.n	8005256 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800513a:	697b      	ldr	r3, [r7, #20]
 800513c:	2b00      	cmp	r3, #0
 800513e:	da02      	bge.n	8005146 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8005140:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005144:	e087      	b.n	8005256 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800514c:	2b00      	cmp	r3, #0
 800514e:	d001      	beq.n	8005154 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8005150:	2340      	movs	r3, #64	; 0x40
 8005152:	e080      	b.n	8005256 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800515a:	2b00      	cmp	r3, #0
 800515c:	d001      	beq.n	8005162 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800515e:	2380      	movs	r3, #128	; 0x80
 8005160:	e079      	b.n	8005256 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005168:	2b00      	cmp	r3, #0
 800516a:	d002      	beq.n	8005172 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800516c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005170:	e071      	b.n	8005256 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8005172:	697b      	ldr	r3, [r7, #20]
 8005174:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005178:	2b00      	cmp	r3, #0
 800517a:	d002      	beq.n	8005182 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800517c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005180:	e069      	b.n	8005256 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005188:	2b00      	cmp	r3, #0
 800518a:	d002      	beq.n	8005192 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800518c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005190:	e061      	b.n	8005256 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8005192:	697b      	ldr	r3, [r7, #20]
 8005194:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005198:	2b00      	cmp	r3, #0
 800519a:	d002      	beq.n	80051a2 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800519c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80051a0:	e059      	b.n	8005256 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d002      	beq.n	80051b2 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80051ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80051b0:	e051      	b.n	8005256 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d002      	beq.n	80051c2 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80051bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80051c0:	e049      	b.n	8005256 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d002      	beq.n	80051d2 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80051cc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80051d0:	e041      	b.n	8005256 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d002      	beq.n	80051e2 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80051dc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051e0:	e039      	b.n	8005256 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d002      	beq.n	80051f2 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80051ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80051f0:	e031      	b.n	8005256 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d002      	beq.n	8005202 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80051fc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005200:	e029      	b.n	8005256 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8005202:	697b      	ldr	r3, [r7, #20]
 8005204:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005208:	2b00      	cmp	r3, #0
 800520a:	d002      	beq.n	8005212 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800520c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005210:	e021      	b.n	8005256 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8005212:	697b      	ldr	r3, [r7, #20]
 8005214:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005218:	2b00      	cmp	r3, #0
 800521a:	d002      	beq.n	8005222 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800521c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005220:	e019      	b.n	8005256 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005228:	2b00      	cmp	r3, #0
 800522a:	d002      	beq.n	8005232 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800522c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005230:	e011      	b.n	8005256 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8005232:	697b      	ldr	r3, [r7, #20]
 8005234:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005238:	2b00      	cmp	r3, #0
 800523a:	d002      	beq.n	8005242 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800523c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005240:	e009      	b.n	8005256 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	f003 0308 	and.w	r3, r3, #8
 8005248:	2b00      	cmp	r3, #0
 800524a:	d002      	beq.n	8005252 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800524c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8005250:	e001      	b.n	8005256 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005252:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8005256:	4618      	mov	r0, r3
 8005258:	3720      	adds	r7, #32
 800525a:	46bd      	mov	sp, r7
 800525c:	bd80      	pop	{r7, pc}
 800525e:	bf00      	nop
 8005260:	20000120 	.word	0x20000120
 8005264:	10624dd3 	.word	0x10624dd3
 8005268:	fdffe008 	.word	0xfdffe008

0800526c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800526c:	b480      	push	{r7}
 800526e:	b085      	sub	sp, #20
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005274:	4b1f      	ldr	r3, [pc, #124]	; (80052f4 <SDMMC_GetCmdResp2+0x88>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a1f      	ldr	r2, [pc, #124]	; (80052f8 <SDMMC_GetCmdResp2+0x8c>)
 800527a:	fba2 2303 	umull	r2, r3, r2, r3
 800527e:	0a5b      	lsrs	r3, r3, #9
 8005280:	f241 3288 	movw	r2, #5000	; 0x1388
 8005284:	fb02 f303 	mul.w	r3, r2, r3
 8005288:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	1e5a      	subs	r2, r3, #1
 800528e:	60fa      	str	r2, [r7, #12]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d102      	bne.n	800529a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005294:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005298:	e026      	b.n	80052e8 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800529e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d0ef      	beq.n	800528a <SDMMC_GetCmdResp2+0x1e>
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d1ea      	bne.n	800528a <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052b8:	f003 0304 	and.w	r3, r3, #4
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d004      	beq.n	80052ca <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2204      	movs	r2, #4
 80052c4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80052c6:	2304      	movs	r3, #4
 80052c8:	e00e      	b.n	80052e8 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052ce:	f003 0301 	and.w	r3, r3, #1
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d004      	beq.n	80052e0 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2201      	movs	r2, #1
 80052da:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80052dc:	2301      	movs	r3, #1
 80052de:	e003      	b.n	80052e8 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	22c5      	movs	r2, #197	; 0xc5
 80052e4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80052e6:	2300      	movs	r3, #0
}
 80052e8:	4618      	mov	r0, r3
 80052ea:	3714      	adds	r7, #20
 80052ec:	46bd      	mov	sp, r7
 80052ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f2:	4770      	bx	lr
 80052f4:	20000120 	.word	0x20000120
 80052f8:	10624dd3 	.word	0x10624dd3

080052fc <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 80052fc:	b480      	push	{r7}
 80052fe:	b085      	sub	sp, #20
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005304:	4b1a      	ldr	r3, [pc, #104]	; (8005370 <SDMMC_GetCmdResp3+0x74>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4a1a      	ldr	r2, [pc, #104]	; (8005374 <SDMMC_GetCmdResp3+0x78>)
 800530a:	fba2 2303 	umull	r2, r3, r2, r3
 800530e:	0a5b      	lsrs	r3, r3, #9
 8005310:	f241 3288 	movw	r2, #5000	; 0x1388
 8005314:	fb02 f303 	mul.w	r3, r2, r3
 8005318:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	1e5a      	subs	r2, r3, #1
 800531e:	60fa      	str	r2, [r7, #12]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d102      	bne.n	800532a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005324:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005328:	e01b      	b.n	8005362 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800532e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8005336:	2b00      	cmp	r3, #0
 8005338:	d0ef      	beq.n	800531a <SDMMC_GetCmdResp3+0x1e>
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005340:	2b00      	cmp	r3, #0
 8005342:	d1ea      	bne.n	800531a <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005348:	f003 0304 	and.w	r3, r3, #4
 800534c:	2b00      	cmp	r3, #0
 800534e:	d004      	beq.n	800535a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2204      	movs	r2, #4
 8005354:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005356:	2304      	movs	r3, #4
 8005358:	e003      	b.n	8005362 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	22c5      	movs	r2, #197	; 0xc5
 800535e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005360:	2300      	movs	r3, #0
}
 8005362:	4618      	mov	r0, r3
 8005364:	3714      	adds	r7, #20
 8005366:	46bd      	mov	sp, r7
 8005368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536c:	4770      	bx	lr
 800536e:	bf00      	nop
 8005370:	20000120 	.word	0x20000120
 8005374:	10624dd3 	.word	0x10624dd3

08005378 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b088      	sub	sp, #32
 800537c:	af00      	add	r7, sp, #0
 800537e:	60f8      	str	r0, [r7, #12]
 8005380:	460b      	mov	r3, r1
 8005382:	607a      	str	r2, [r7, #4]
 8005384:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005386:	4b35      	ldr	r3, [pc, #212]	; (800545c <SDMMC_GetCmdResp6+0xe4>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4a35      	ldr	r2, [pc, #212]	; (8005460 <SDMMC_GetCmdResp6+0xe8>)
 800538c:	fba2 2303 	umull	r2, r3, r2, r3
 8005390:	0a5b      	lsrs	r3, r3, #9
 8005392:	f241 3288 	movw	r2, #5000	; 0x1388
 8005396:	fb02 f303 	mul.w	r3, r2, r3
 800539a:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800539c:	69fb      	ldr	r3, [r7, #28]
 800539e:	1e5a      	subs	r2, r3, #1
 80053a0:	61fa      	str	r2, [r7, #28]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d102      	bne.n	80053ac <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80053a6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80053aa:	e052      	b.n	8005452 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053b0:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80053b2:	69bb      	ldr	r3, [r7, #24]
 80053b4:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d0ef      	beq.n	800539c <SDMMC_GetCmdResp6+0x24>
 80053bc:	69bb      	ldr	r3, [r7, #24]
 80053be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d1ea      	bne.n	800539c <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053ca:	f003 0304 	and.w	r3, r3, #4
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d004      	beq.n	80053dc <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	2204      	movs	r2, #4
 80053d6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80053d8:	2304      	movs	r3, #4
 80053da:	e03a      	b.n	8005452 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053e0:	f003 0301 	and.w	r3, r3, #1
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d004      	beq.n	80053f2 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	2201      	movs	r2, #1
 80053ec:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80053ee:	2301      	movs	r3, #1
 80053f0:	e02f      	b.n	8005452 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80053f2:	68f8      	ldr	r0, [r7, #12]
 80053f4:	f7ff fbe2 	bl	8004bbc <SDMMC_GetCommandResponse>
 80053f8:	4603      	mov	r3, r0
 80053fa:	461a      	mov	r2, r3
 80053fc:	7afb      	ldrb	r3, [r7, #11]
 80053fe:	4293      	cmp	r3, r2
 8005400:	d001      	beq.n	8005406 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005402:	2301      	movs	r3, #1
 8005404:	e025      	b.n	8005452 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	22c5      	movs	r2, #197	; 0xc5
 800540a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800540c:	2100      	movs	r1, #0
 800540e:	68f8      	ldr	r0, [r7, #12]
 8005410:	f7ff fbe1 	bl	8004bd6 <SDMMC_GetResponse>
 8005414:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8005416:	697b      	ldr	r3, [r7, #20]
 8005418:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800541c:	2b00      	cmp	r3, #0
 800541e:	d106      	bne.n	800542e <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8005420:	697b      	ldr	r3, [r7, #20]
 8005422:	0c1b      	lsrs	r3, r3, #16
 8005424:	b29a      	uxth	r2, r3
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800542a:	2300      	movs	r3, #0
 800542c:	e011      	b.n	8005452 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005434:	2b00      	cmp	r3, #0
 8005436:	d002      	beq.n	800543e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005438:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800543c:	e009      	b.n	8005452 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800543e:	697b      	ldr	r3, [r7, #20]
 8005440:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005444:	2b00      	cmp	r3, #0
 8005446:	d002      	beq.n	800544e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005448:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800544c:	e001      	b.n	8005452 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800544e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8005452:	4618      	mov	r0, r3
 8005454:	3720      	adds	r7, #32
 8005456:	46bd      	mov	sp, r7
 8005458:	bd80      	pop	{r7, pc}
 800545a:	bf00      	nop
 800545c:	20000120 	.word	0x20000120
 8005460:	10624dd3 	.word	0x10624dd3

08005464 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8005464:	b480      	push	{r7}
 8005466:	b085      	sub	sp, #20
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800546c:	4b22      	ldr	r3, [pc, #136]	; (80054f8 <SDMMC_GetCmdResp7+0x94>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a22      	ldr	r2, [pc, #136]	; (80054fc <SDMMC_GetCmdResp7+0x98>)
 8005472:	fba2 2303 	umull	r2, r3, r2, r3
 8005476:	0a5b      	lsrs	r3, r3, #9
 8005478:	f241 3288 	movw	r2, #5000	; 0x1388
 800547c:	fb02 f303 	mul.w	r3, r2, r3
 8005480:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	1e5a      	subs	r2, r3, #1
 8005486:	60fa      	str	r2, [r7, #12]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d102      	bne.n	8005492 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800548c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005490:	e02c      	b.n	80054ec <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005496:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d0ef      	beq.n	8005482 <SDMMC_GetCmdResp7+0x1e>
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d1ea      	bne.n	8005482 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054b0:	f003 0304 	and.w	r3, r3, #4
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d004      	beq.n	80054c2 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2204      	movs	r2, #4
 80054bc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80054be:	2304      	movs	r3, #4
 80054c0:	e014      	b.n	80054ec <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054c6:	f003 0301 	and.w	r3, r3, #1
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d004      	beq.n	80054d8 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2201      	movs	r2, #1
 80054d2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80054d4:	2301      	movs	r3, #1
 80054d6:	e009      	b.n	80054ec <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d002      	beq.n	80054ea <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2240      	movs	r2, #64	; 0x40
 80054e8:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80054ea:	2300      	movs	r3, #0
  
}
 80054ec:	4618      	mov	r0, r3
 80054ee:	3714      	adds	r7, #20
 80054f0:	46bd      	mov	sp, r7
 80054f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f6:	4770      	bx	lr
 80054f8:	20000120 	.word	0x20000120
 80054fc:	10624dd3 	.word	0x10624dd3

08005500 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8005504:	4904      	ldr	r1, [pc, #16]	; (8005518 <MX_FATFS_Init+0x18>)
 8005506:	4805      	ldr	r0, [pc, #20]	; (800551c <MX_FATFS_Init+0x1c>)
 8005508:	f002 ff58 	bl	80083bc <FATFS_LinkDriver>
 800550c:	4603      	mov	r3, r0
 800550e:	461a      	mov	r2, r3
 8005510:	4b03      	ldr	r3, [pc, #12]	; (8005520 <MX_FATFS_Init+0x20>)
 8005512:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005514:	bf00      	nop
 8005516:	bd80      	pop	{r7, pc}
 8005518:	2001fb5c 	.word	0x2001fb5c
 800551c:	0800863c 	.word	0x0800863c
 8005520:	2001fb58 	.word	0x2001fb58

08005524 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8005524:	b480      	push	{r7}
 8005526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8005528:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800552a:	4618      	mov	r0, r3
 800552c:	46bd      	mov	sp, r7
 800552e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005532:	4770      	bx	lr

08005534 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b082      	sub	sp, #8
 8005538:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800553a:	2300      	movs	r3, #0
 800553c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800553e:	f000 f86b 	bl	8005618 <BSP_SD_IsDetected>
 8005542:	4603      	mov	r3, r0
 8005544:	2b01      	cmp	r3, #1
 8005546:	d001      	beq.n	800554c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8005548:	2302      	movs	r3, #2
 800554a:	e005      	b.n	8005558 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800554c:	4804      	ldr	r0, [pc, #16]	; (8005560 <BSP_SD_Init+0x2c>)
 800554e:	f7fd fa51 	bl	80029f4 <HAL_SD_Init>
 8005552:	4603      	mov	r3, r0
 8005554:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 8005556:	79fb      	ldrb	r3, [r7, #7]
}
 8005558:	4618      	mov	r0, r3
 800555a:	3708      	adds	r7, #8
 800555c:	46bd      	mov	sp, r7
 800555e:	bd80      	pop	{r7, pc}
 8005560:	200003b0 	.word	0x200003b0

08005564 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b088      	sub	sp, #32
 8005568:	af02      	add	r7, sp, #8
 800556a:	60f8      	str	r0, [r7, #12]
 800556c:	60b9      	str	r1, [r7, #8]
 800556e:	607a      	str	r2, [r7, #4]
 8005570:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8005572:	2300      	movs	r3, #0
 8005574:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	9300      	str	r3, [sp, #0]
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	68ba      	ldr	r2, [r7, #8]
 800557e:	68f9      	ldr	r1, [r7, #12]
 8005580:	4806      	ldr	r0, [pc, #24]	; (800559c <BSP_SD_ReadBlocks+0x38>)
 8005582:	f7fd faed 	bl	8002b60 <HAL_SD_ReadBlocks>
 8005586:	4603      	mov	r3, r0
 8005588:	2b00      	cmp	r3, #0
 800558a:	d001      	beq.n	8005590 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800558c:	2301      	movs	r3, #1
 800558e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8005590:	7dfb      	ldrb	r3, [r7, #23]
}
 8005592:	4618      	mov	r0, r3
 8005594:	3718      	adds	r7, #24
 8005596:	46bd      	mov	sp, r7
 8005598:	bd80      	pop	{r7, pc}
 800559a:	bf00      	nop
 800559c:	200003b0 	.word	0x200003b0

080055a0 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b088      	sub	sp, #32
 80055a4:	af02      	add	r7, sp, #8
 80055a6:	60f8      	str	r0, [r7, #12]
 80055a8:	60b9      	str	r1, [r7, #8]
 80055aa:	607a      	str	r2, [r7, #4]
 80055ac:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 80055ae:	2300      	movs	r3, #0
 80055b0:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	9300      	str	r3, [sp, #0]
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	68ba      	ldr	r2, [r7, #8]
 80055ba:	68f9      	ldr	r1, [r7, #12]
 80055bc:	4806      	ldr	r0, [pc, #24]	; (80055d8 <BSP_SD_WriteBlocks+0x38>)
 80055be:	f7fd fcad 	bl	8002f1c <HAL_SD_WriteBlocks>
 80055c2:	4603      	mov	r3, r0
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d001      	beq.n	80055cc <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 80055c8:	2301      	movs	r3, #1
 80055ca:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80055cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	3718      	adds	r7, #24
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bd80      	pop	{r7, pc}
 80055d6:	bf00      	nop
 80055d8:	200003b0 	.word	0x200003b0

080055dc <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80055e0:	4805      	ldr	r0, [pc, #20]	; (80055f8 <BSP_SD_GetCardState+0x1c>)
 80055e2:	f7fd fff1 	bl	80035c8 <HAL_SD_GetCardState>
 80055e6:	4603      	mov	r3, r0
 80055e8:	2b04      	cmp	r3, #4
 80055ea:	bf14      	ite	ne
 80055ec:	2301      	movne	r3, #1
 80055ee:	2300      	moveq	r3, #0
 80055f0:	b2db      	uxtb	r3, r3
}
 80055f2:	4618      	mov	r0, r3
 80055f4:	bd80      	pop	{r7, pc}
 80055f6:	bf00      	nop
 80055f8:	200003b0 	.word	0x200003b0

080055fc <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b082      	sub	sp, #8
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8005604:	6879      	ldr	r1, [r7, #4]
 8005606:	4803      	ldr	r0, [pc, #12]	; (8005614 <BSP_SD_GetCardInfo+0x18>)
 8005608:	f7fd ffb2 	bl	8003570 <HAL_SD_GetCardInfo>
}
 800560c:	bf00      	nop
 800560e:	3708      	adds	r7, #8
 8005610:	46bd      	mov	sp, r7
 8005612:	bd80      	pop	{r7, pc}
 8005614:	200003b0 	.word	0x200003b0

08005618 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8005618:	b480      	push	{r7}
 800561a:	b083      	sub	sp, #12
 800561c:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800561e:	2301      	movs	r3, #1
 8005620:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 8005622:	79fb      	ldrb	r3, [r7, #7]
 8005624:	b2db      	uxtb	r3, r3
}
 8005626:	4618      	mov	r0, r3
 8005628:	370c      	adds	r7, #12
 800562a:	46bd      	mov	sp, r7
 800562c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005630:	4770      	bx	lr
	...

08005634 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b082      	sub	sp, #8
 8005638:	af00      	add	r7, sp, #0
 800563a:	4603      	mov	r3, r0
 800563c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800563e:	4b0b      	ldr	r3, [pc, #44]	; (800566c <SD_CheckStatus+0x38>)
 8005640:	2201      	movs	r2, #1
 8005642:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8005644:	f7ff ffca 	bl	80055dc <BSP_SD_GetCardState>
 8005648:	4603      	mov	r3, r0
 800564a:	2b00      	cmp	r3, #0
 800564c:	d107      	bne.n	800565e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800564e:	4b07      	ldr	r3, [pc, #28]	; (800566c <SD_CheckStatus+0x38>)
 8005650:	781b      	ldrb	r3, [r3, #0]
 8005652:	b2db      	uxtb	r3, r3
 8005654:	f023 0301 	bic.w	r3, r3, #1
 8005658:	b2da      	uxtb	r2, r3
 800565a:	4b04      	ldr	r3, [pc, #16]	; (800566c <SD_CheckStatus+0x38>)
 800565c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800565e:	4b03      	ldr	r3, [pc, #12]	; (800566c <SD_CheckStatus+0x38>)
 8005660:	781b      	ldrb	r3, [r3, #0]
 8005662:	b2db      	uxtb	r3, r3
}
 8005664:	4618      	mov	r0, r3
 8005666:	3708      	adds	r7, #8
 8005668:	46bd      	mov	sp, r7
 800566a:	bd80      	pop	{r7, pc}
 800566c:	20000129 	.word	0x20000129

08005670 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b082      	sub	sp, #8
 8005674:	af00      	add	r7, sp, #0
 8005676:	4603      	mov	r3, r0
 8005678:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800567a:	4b0b      	ldr	r3, [pc, #44]	; (80056a8 <SD_initialize+0x38>)
 800567c:	2201      	movs	r2, #1
 800567e:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8005680:	f7ff ff58 	bl	8005534 <BSP_SD_Init>
 8005684:	4603      	mov	r3, r0
 8005686:	2b00      	cmp	r3, #0
 8005688:	d107      	bne.n	800569a <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800568a:	79fb      	ldrb	r3, [r7, #7]
 800568c:	4618      	mov	r0, r3
 800568e:	f7ff ffd1 	bl	8005634 <SD_CheckStatus>
 8005692:	4603      	mov	r3, r0
 8005694:	461a      	mov	r2, r3
 8005696:	4b04      	ldr	r3, [pc, #16]	; (80056a8 <SD_initialize+0x38>)
 8005698:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800569a:	4b03      	ldr	r3, [pc, #12]	; (80056a8 <SD_initialize+0x38>)
 800569c:	781b      	ldrb	r3, [r3, #0]
 800569e:	b2db      	uxtb	r3, r3
}
 80056a0:	4618      	mov	r0, r3
 80056a2:	3708      	adds	r7, #8
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bd80      	pop	{r7, pc}
 80056a8:	20000129 	.word	0x20000129

080056ac <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b082      	sub	sp, #8
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	4603      	mov	r3, r0
 80056b4:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80056b6:	79fb      	ldrb	r3, [r7, #7]
 80056b8:	4618      	mov	r0, r3
 80056ba:	f7ff ffbb 	bl	8005634 <SD_CheckStatus>
 80056be:	4603      	mov	r3, r0
}
 80056c0:	4618      	mov	r0, r3
 80056c2:	3708      	adds	r7, #8
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bd80      	pop	{r7, pc}

080056c8 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b086      	sub	sp, #24
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	60b9      	str	r1, [r7, #8]
 80056d0:	607a      	str	r2, [r7, #4]
 80056d2:	603b      	str	r3, [r7, #0]
 80056d4:	4603      	mov	r3, r0
 80056d6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80056d8:	2301      	movs	r3, #1
 80056da:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 80056dc:	f04f 33ff 	mov.w	r3, #4294967295
 80056e0:	683a      	ldr	r2, [r7, #0]
 80056e2:	6879      	ldr	r1, [r7, #4]
 80056e4:	68b8      	ldr	r0, [r7, #8]
 80056e6:	f7ff ff3d 	bl	8005564 <BSP_SD_ReadBlocks>
 80056ea:	4603      	mov	r3, r0
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d107      	bne.n	8005700 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 80056f0:	bf00      	nop
 80056f2:	f7ff ff73 	bl	80055dc <BSP_SD_GetCardState>
 80056f6:	4603      	mov	r3, r0
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d1fa      	bne.n	80056f2 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 80056fc:	2300      	movs	r3, #0
 80056fe:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8005700:	7dfb      	ldrb	r3, [r7, #23]
}
 8005702:	4618      	mov	r0, r3
 8005704:	3718      	adds	r7, #24
 8005706:	46bd      	mov	sp, r7
 8005708:	bd80      	pop	{r7, pc}

0800570a <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800570a:	b580      	push	{r7, lr}
 800570c:	b086      	sub	sp, #24
 800570e:	af00      	add	r7, sp, #0
 8005710:	60b9      	str	r1, [r7, #8]
 8005712:	607a      	str	r2, [r7, #4]
 8005714:	603b      	str	r3, [r7, #0]
 8005716:	4603      	mov	r3, r0
 8005718:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800571a:	2301      	movs	r3, #1
 800571c:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800571e:	f04f 33ff 	mov.w	r3, #4294967295
 8005722:	683a      	ldr	r2, [r7, #0]
 8005724:	6879      	ldr	r1, [r7, #4]
 8005726:	68b8      	ldr	r0, [r7, #8]
 8005728:	f7ff ff3a 	bl	80055a0 <BSP_SD_WriteBlocks>
 800572c:	4603      	mov	r3, r0
 800572e:	2b00      	cmp	r3, #0
 8005730:	d107      	bne.n	8005742 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8005732:	bf00      	nop
 8005734:	f7ff ff52 	bl	80055dc <BSP_SD_GetCardState>
 8005738:	4603      	mov	r3, r0
 800573a:	2b00      	cmp	r3, #0
 800573c:	d1fa      	bne.n	8005734 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800573e:	2300      	movs	r3, #0
 8005740:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8005742:	7dfb      	ldrb	r3, [r7, #23]
}
 8005744:	4618      	mov	r0, r3
 8005746:	3718      	adds	r7, #24
 8005748:	46bd      	mov	sp, r7
 800574a:	bd80      	pop	{r7, pc}

0800574c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b08c      	sub	sp, #48	; 0x30
 8005750:	af00      	add	r7, sp, #0
 8005752:	4603      	mov	r3, r0
 8005754:	603a      	str	r2, [r7, #0]
 8005756:	71fb      	strb	r3, [r7, #7]
 8005758:	460b      	mov	r3, r1
 800575a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800575c:	2301      	movs	r3, #1
 800575e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8005762:	4b25      	ldr	r3, [pc, #148]	; (80057f8 <SD_ioctl+0xac>)
 8005764:	781b      	ldrb	r3, [r3, #0]
 8005766:	b2db      	uxtb	r3, r3
 8005768:	f003 0301 	and.w	r3, r3, #1
 800576c:	2b00      	cmp	r3, #0
 800576e:	d001      	beq.n	8005774 <SD_ioctl+0x28>
 8005770:	2303      	movs	r3, #3
 8005772:	e03c      	b.n	80057ee <SD_ioctl+0xa2>

  switch (cmd)
 8005774:	79bb      	ldrb	r3, [r7, #6]
 8005776:	2b03      	cmp	r3, #3
 8005778:	d834      	bhi.n	80057e4 <SD_ioctl+0x98>
 800577a:	a201      	add	r2, pc, #4	; (adr r2, 8005780 <SD_ioctl+0x34>)
 800577c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005780:	08005791 	.word	0x08005791
 8005784:	08005799 	.word	0x08005799
 8005788:	080057b1 	.word	0x080057b1
 800578c:	080057cb 	.word	0x080057cb
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8005790:	2300      	movs	r3, #0
 8005792:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005796:	e028      	b.n	80057ea <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8005798:	f107 030c 	add.w	r3, r7, #12
 800579c:	4618      	mov	r0, r3
 800579e:	f7ff ff2d 	bl	80055fc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80057a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80057a8:	2300      	movs	r3, #0
 80057aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80057ae:	e01c      	b.n	80057ea <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80057b0:	f107 030c 	add.w	r3, r7, #12
 80057b4:	4618      	mov	r0, r3
 80057b6:	f7ff ff21 	bl	80055fc <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80057ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057bc:	b29a      	uxth	r2, r3
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80057c2:	2300      	movs	r3, #0
 80057c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80057c8:	e00f      	b.n	80057ea <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80057ca:	f107 030c 	add.w	r3, r7, #12
 80057ce:	4618      	mov	r0, r3
 80057d0:	f7ff ff14 	bl	80055fc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80057d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057d6:	0a5a      	lsrs	r2, r3, #9
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80057dc:	2300      	movs	r3, #0
 80057de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80057e2:	e002      	b.n	80057ea <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80057e4:	2304      	movs	r3, #4
 80057e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80057ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	3730      	adds	r7, #48	; 0x30
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}
 80057f6:	bf00      	nop
 80057f8:	20000129 	.word	0x20000129

080057fc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b084      	sub	sp, #16
 8005800:	af00      	add	r7, sp, #0
 8005802:	4603      	mov	r3, r0
 8005804:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8005806:	79fb      	ldrb	r3, [r7, #7]
 8005808:	4a08      	ldr	r2, [pc, #32]	; (800582c <disk_status+0x30>)
 800580a:	009b      	lsls	r3, r3, #2
 800580c:	4413      	add	r3, r2
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	685b      	ldr	r3, [r3, #4]
 8005812:	79fa      	ldrb	r2, [r7, #7]
 8005814:	4905      	ldr	r1, [pc, #20]	; (800582c <disk_status+0x30>)
 8005816:	440a      	add	r2, r1
 8005818:	7a12      	ldrb	r2, [r2, #8]
 800581a:	4610      	mov	r0, r2
 800581c:	4798      	blx	r3
 800581e:	4603      	mov	r3, r0
 8005820:	73fb      	strb	r3, [r7, #15]
  return stat;
 8005822:	7bfb      	ldrb	r3, [r7, #15]
}
 8005824:	4618      	mov	r0, r3
 8005826:	3710      	adds	r7, #16
 8005828:	46bd      	mov	sp, r7
 800582a:	bd80      	pop	{r7, pc}
 800582c:	20000170 	.word	0x20000170

08005830 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b084      	sub	sp, #16
 8005834:	af00      	add	r7, sp, #0
 8005836:	4603      	mov	r3, r0
 8005838:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800583a:	2300      	movs	r3, #0
 800583c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800583e:	79fb      	ldrb	r3, [r7, #7]
 8005840:	4a0d      	ldr	r2, [pc, #52]	; (8005878 <disk_initialize+0x48>)
 8005842:	5cd3      	ldrb	r3, [r2, r3]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d111      	bne.n	800586c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8005848:	79fb      	ldrb	r3, [r7, #7]
 800584a:	4a0b      	ldr	r2, [pc, #44]	; (8005878 <disk_initialize+0x48>)
 800584c:	2101      	movs	r1, #1
 800584e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8005850:	79fb      	ldrb	r3, [r7, #7]
 8005852:	4a09      	ldr	r2, [pc, #36]	; (8005878 <disk_initialize+0x48>)
 8005854:	009b      	lsls	r3, r3, #2
 8005856:	4413      	add	r3, r2
 8005858:	685b      	ldr	r3, [r3, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	79fa      	ldrb	r2, [r7, #7]
 800585e:	4906      	ldr	r1, [pc, #24]	; (8005878 <disk_initialize+0x48>)
 8005860:	440a      	add	r2, r1
 8005862:	7a12      	ldrb	r2, [r2, #8]
 8005864:	4610      	mov	r0, r2
 8005866:	4798      	blx	r3
 8005868:	4603      	mov	r3, r0
 800586a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800586c:	7bfb      	ldrb	r3, [r7, #15]
}
 800586e:	4618      	mov	r0, r3
 8005870:	3710      	adds	r7, #16
 8005872:	46bd      	mov	sp, r7
 8005874:	bd80      	pop	{r7, pc}
 8005876:	bf00      	nop
 8005878:	20000170 	.word	0x20000170

0800587c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800587c:	b590      	push	{r4, r7, lr}
 800587e:	b087      	sub	sp, #28
 8005880:	af00      	add	r7, sp, #0
 8005882:	60b9      	str	r1, [r7, #8]
 8005884:	607a      	str	r2, [r7, #4]
 8005886:	603b      	str	r3, [r7, #0]
 8005888:	4603      	mov	r3, r0
 800588a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800588c:	7bfb      	ldrb	r3, [r7, #15]
 800588e:	4a0a      	ldr	r2, [pc, #40]	; (80058b8 <disk_read+0x3c>)
 8005890:	009b      	lsls	r3, r3, #2
 8005892:	4413      	add	r3, r2
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	689c      	ldr	r4, [r3, #8]
 8005898:	7bfb      	ldrb	r3, [r7, #15]
 800589a:	4a07      	ldr	r2, [pc, #28]	; (80058b8 <disk_read+0x3c>)
 800589c:	4413      	add	r3, r2
 800589e:	7a18      	ldrb	r0, [r3, #8]
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	687a      	ldr	r2, [r7, #4]
 80058a4:	68b9      	ldr	r1, [r7, #8]
 80058a6:	47a0      	blx	r4
 80058a8:	4603      	mov	r3, r0
 80058aa:	75fb      	strb	r3, [r7, #23]
  return res;
 80058ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80058ae:	4618      	mov	r0, r3
 80058b0:	371c      	adds	r7, #28
 80058b2:	46bd      	mov	sp, r7
 80058b4:	bd90      	pop	{r4, r7, pc}
 80058b6:	bf00      	nop
 80058b8:	20000170 	.word	0x20000170

080058bc <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80058bc:	b590      	push	{r4, r7, lr}
 80058be:	b087      	sub	sp, #28
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	60b9      	str	r1, [r7, #8]
 80058c4:	607a      	str	r2, [r7, #4]
 80058c6:	603b      	str	r3, [r7, #0]
 80058c8:	4603      	mov	r3, r0
 80058ca:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80058cc:	7bfb      	ldrb	r3, [r7, #15]
 80058ce:	4a0a      	ldr	r2, [pc, #40]	; (80058f8 <disk_write+0x3c>)
 80058d0:	009b      	lsls	r3, r3, #2
 80058d2:	4413      	add	r3, r2
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	68dc      	ldr	r4, [r3, #12]
 80058d8:	7bfb      	ldrb	r3, [r7, #15]
 80058da:	4a07      	ldr	r2, [pc, #28]	; (80058f8 <disk_write+0x3c>)
 80058dc:	4413      	add	r3, r2
 80058de:	7a18      	ldrb	r0, [r3, #8]
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	687a      	ldr	r2, [r7, #4]
 80058e4:	68b9      	ldr	r1, [r7, #8]
 80058e6:	47a0      	blx	r4
 80058e8:	4603      	mov	r3, r0
 80058ea:	75fb      	strb	r3, [r7, #23]
  return res;
 80058ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80058ee:	4618      	mov	r0, r3
 80058f0:	371c      	adds	r7, #28
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bd90      	pop	{r4, r7, pc}
 80058f6:	bf00      	nop
 80058f8:	20000170 	.word	0x20000170

080058fc <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b084      	sub	sp, #16
 8005900:	af00      	add	r7, sp, #0
 8005902:	4603      	mov	r3, r0
 8005904:	603a      	str	r2, [r7, #0]
 8005906:	71fb      	strb	r3, [r7, #7]
 8005908:	460b      	mov	r3, r1
 800590a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800590c:	79fb      	ldrb	r3, [r7, #7]
 800590e:	4a09      	ldr	r2, [pc, #36]	; (8005934 <disk_ioctl+0x38>)
 8005910:	009b      	lsls	r3, r3, #2
 8005912:	4413      	add	r3, r2
 8005914:	685b      	ldr	r3, [r3, #4]
 8005916:	691b      	ldr	r3, [r3, #16]
 8005918:	79fa      	ldrb	r2, [r7, #7]
 800591a:	4906      	ldr	r1, [pc, #24]	; (8005934 <disk_ioctl+0x38>)
 800591c:	440a      	add	r2, r1
 800591e:	7a10      	ldrb	r0, [r2, #8]
 8005920:	79b9      	ldrb	r1, [r7, #6]
 8005922:	683a      	ldr	r2, [r7, #0]
 8005924:	4798      	blx	r3
 8005926:	4603      	mov	r3, r0
 8005928:	73fb      	strb	r3, [r7, #15]
  return res;
 800592a:	7bfb      	ldrb	r3, [r7, #15]
}
 800592c:	4618      	mov	r0, r3
 800592e:	3710      	adds	r7, #16
 8005930:	46bd      	mov	sp, r7
 8005932:	bd80      	pop	{r7, pc}
 8005934:	20000170 	.word	0x20000170

08005938 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8005938:	b480      	push	{r7}
 800593a:	b085      	sub	sp, #20
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	3301      	adds	r3, #1
 8005944:	781b      	ldrb	r3, [r3, #0]
 8005946:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8005948:	89fb      	ldrh	r3, [r7, #14]
 800594a:	021b      	lsls	r3, r3, #8
 800594c:	b21a      	sxth	r2, r3
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	781b      	ldrb	r3, [r3, #0]
 8005952:	b21b      	sxth	r3, r3
 8005954:	4313      	orrs	r3, r2
 8005956:	b21b      	sxth	r3, r3
 8005958:	81fb      	strh	r3, [r7, #14]
	return rv;
 800595a:	89fb      	ldrh	r3, [r7, #14]
}
 800595c:	4618      	mov	r0, r3
 800595e:	3714      	adds	r7, #20
 8005960:	46bd      	mov	sp, r7
 8005962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005966:	4770      	bx	lr

08005968 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8005968:	b480      	push	{r7}
 800596a:	b085      	sub	sp, #20
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	3303      	adds	r3, #3
 8005974:	781b      	ldrb	r3, [r3, #0]
 8005976:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	021b      	lsls	r3, r3, #8
 800597c:	687a      	ldr	r2, [r7, #4]
 800597e:	3202      	adds	r2, #2
 8005980:	7812      	ldrb	r2, [r2, #0]
 8005982:	4313      	orrs	r3, r2
 8005984:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	021b      	lsls	r3, r3, #8
 800598a:	687a      	ldr	r2, [r7, #4]
 800598c:	3201      	adds	r2, #1
 800598e:	7812      	ldrb	r2, [r2, #0]
 8005990:	4313      	orrs	r3, r2
 8005992:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	021b      	lsls	r3, r3, #8
 8005998:	687a      	ldr	r2, [r7, #4]
 800599a:	7812      	ldrb	r2, [r2, #0]
 800599c:	4313      	orrs	r3, r2
 800599e:	60fb      	str	r3, [r7, #12]
	return rv;
 80059a0:	68fb      	ldr	r3, [r7, #12]
}
 80059a2:	4618      	mov	r0, r3
 80059a4:	3714      	adds	r7, #20
 80059a6:	46bd      	mov	sp, r7
 80059a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ac:	4770      	bx	lr

080059ae <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80059ae:	b480      	push	{r7}
 80059b0:	b083      	sub	sp, #12
 80059b2:	af00      	add	r7, sp, #0
 80059b4:	6078      	str	r0, [r7, #4]
 80059b6:	460b      	mov	r3, r1
 80059b8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	1c5a      	adds	r2, r3, #1
 80059be:	607a      	str	r2, [r7, #4]
 80059c0:	887a      	ldrh	r2, [r7, #2]
 80059c2:	b2d2      	uxtb	r2, r2
 80059c4:	701a      	strb	r2, [r3, #0]
 80059c6:	887b      	ldrh	r3, [r7, #2]
 80059c8:	0a1b      	lsrs	r3, r3, #8
 80059ca:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	1c5a      	adds	r2, r3, #1
 80059d0:	607a      	str	r2, [r7, #4]
 80059d2:	887a      	ldrh	r2, [r7, #2]
 80059d4:	b2d2      	uxtb	r2, r2
 80059d6:	701a      	strb	r2, [r3, #0]
}
 80059d8:	bf00      	nop
 80059da:	370c      	adds	r7, #12
 80059dc:	46bd      	mov	sp, r7
 80059de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e2:	4770      	bx	lr

080059e4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80059e4:	b480      	push	{r7}
 80059e6:	b083      	sub	sp, #12
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
 80059ec:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	1c5a      	adds	r2, r3, #1
 80059f2:	607a      	str	r2, [r7, #4]
 80059f4:	683a      	ldr	r2, [r7, #0]
 80059f6:	b2d2      	uxtb	r2, r2
 80059f8:	701a      	strb	r2, [r3, #0]
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	0a1b      	lsrs	r3, r3, #8
 80059fe:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	1c5a      	adds	r2, r3, #1
 8005a04:	607a      	str	r2, [r7, #4]
 8005a06:	683a      	ldr	r2, [r7, #0]
 8005a08:	b2d2      	uxtb	r2, r2
 8005a0a:	701a      	strb	r2, [r3, #0]
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	0a1b      	lsrs	r3, r3, #8
 8005a10:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	1c5a      	adds	r2, r3, #1
 8005a16:	607a      	str	r2, [r7, #4]
 8005a18:	683a      	ldr	r2, [r7, #0]
 8005a1a:	b2d2      	uxtb	r2, r2
 8005a1c:	701a      	strb	r2, [r3, #0]
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	0a1b      	lsrs	r3, r3, #8
 8005a22:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	1c5a      	adds	r2, r3, #1
 8005a28:	607a      	str	r2, [r7, #4]
 8005a2a:	683a      	ldr	r2, [r7, #0]
 8005a2c:	b2d2      	uxtb	r2, r2
 8005a2e:	701a      	strb	r2, [r3, #0]
}
 8005a30:	bf00      	nop
 8005a32:	370c      	adds	r7, #12
 8005a34:	46bd      	mov	sp, r7
 8005a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3a:	4770      	bx	lr

08005a3c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8005a3c:	b480      	push	{r7}
 8005a3e:	b087      	sub	sp, #28
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	60f8      	str	r0, [r7, #12]
 8005a44:	60b9      	str	r1, [r7, #8]
 8005a46:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d00d      	beq.n	8005a72 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8005a56:	693a      	ldr	r2, [r7, #16]
 8005a58:	1c53      	adds	r3, r2, #1
 8005a5a:	613b      	str	r3, [r7, #16]
 8005a5c:	697b      	ldr	r3, [r7, #20]
 8005a5e:	1c59      	adds	r1, r3, #1
 8005a60:	6179      	str	r1, [r7, #20]
 8005a62:	7812      	ldrb	r2, [r2, #0]
 8005a64:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	3b01      	subs	r3, #1
 8005a6a:	607b      	str	r3, [r7, #4]
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d1f1      	bne.n	8005a56 <mem_cpy+0x1a>
	}
}
 8005a72:	bf00      	nop
 8005a74:	371c      	adds	r7, #28
 8005a76:	46bd      	mov	sp, r7
 8005a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7c:	4770      	bx	lr

08005a7e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8005a7e:	b480      	push	{r7}
 8005a80:	b087      	sub	sp, #28
 8005a82:	af00      	add	r7, sp, #0
 8005a84:	60f8      	str	r0, [r7, #12]
 8005a86:	60b9      	str	r1, [r7, #8]
 8005a88:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8005a8e:	697b      	ldr	r3, [r7, #20]
 8005a90:	1c5a      	adds	r2, r3, #1
 8005a92:	617a      	str	r2, [r7, #20]
 8005a94:	68ba      	ldr	r2, [r7, #8]
 8005a96:	b2d2      	uxtb	r2, r2
 8005a98:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	3b01      	subs	r3, #1
 8005a9e:	607b      	str	r3, [r7, #4]
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d1f3      	bne.n	8005a8e <mem_set+0x10>
}
 8005aa6:	bf00      	nop
 8005aa8:	bf00      	nop
 8005aaa:	371c      	adds	r7, #28
 8005aac:	46bd      	mov	sp, r7
 8005aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab2:	4770      	bx	lr

08005ab4 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8005ab4:	b480      	push	{r7}
 8005ab6:	b089      	sub	sp, #36	; 0x24
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	60f8      	str	r0, [r7, #12]
 8005abc:	60b9      	str	r1, [r7, #8]
 8005abe:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	61fb      	str	r3, [r7, #28]
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8005ac8:	2300      	movs	r3, #0
 8005aca:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8005acc:	69fb      	ldr	r3, [r7, #28]
 8005ace:	1c5a      	adds	r2, r3, #1
 8005ad0:	61fa      	str	r2, [r7, #28]
 8005ad2:	781b      	ldrb	r3, [r3, #0]
 8005ad4:	4619      	mov	r1, r3
 8005ad6:	69bb      	ldr	r3, [r7, #24]
 8005ad8:	1c5a      	adds	r2, r3, #1
 8005ada:	61ba      	str	r2, [r7, #24]
 8005adc:	781b      	ldrb	r3, [r3, #0]
 8005ade:	1acb      	subs	r3, r1, r3
 8005ae0:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	3b01      	subs	r3, #1
 8005ae6:	607b      	str	r3, [r7, #4]
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d002      	beq.n	8005af4 <mem_cmp+0x40>
 8005aee:	697b      	ldr	r3, [r7, #20]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d0eb      	beq.n	8005acc <mem_cmp+0x18>

	return r;
 8005af4:	697b      	ldr	r3, [r7, #20]
}
 8005af6:	4618      	mov	r0, r3
 8005af8:	3724      	adds	r7, #36	; 0x24
 8005afa:	46bd      	mov	sp, r7
 8005afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b00:	4770      	bx	lr

08005b02 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8005b02:	b480      	push	{r7}
 8005b04:	b083      	sub	sp, #12
 8005b06:	af00      	add	r7, sp, #0
 8005b08:	6078      	str	r0, [r7, #4]
 8005b0a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8005b0c:	e002      	b.n	8005b14 <chk_chr+0x12>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	3301      	adds	r3, #1
 8005b12:	607b      	str	r3, [r7, #4]
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	781b      	ldrb	r3, [r3, #0]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d005      	beq.n	8005b28 <chk_chr+0x26>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	781b      	ldrb	r3, [r3, #0]
 8005b20:	461a      	mov	r2, r3
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d1f2      	bne.n	8005b0e <chk_chr+0xc>
	return *str;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	781b      	ldrb	r3, [r3, #0]
}
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	370c      	adds	r7, #12
 8005b30:	46bd      	mov	sp, r7
 8005b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b36:	4770      	bx	lr

08005b38 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005b38:	b480      	push	{r7}
 8005b3a:	b085      	sub	sp, #20
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
 8005b40:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005b42:	2300      	movs	r3, #0
 8005b44:	60bb      	str	r3, [r7, #8]
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	60fb      	str	r3, [r7, #12]
 8005b4a:	e029      	b.n	8005ba0 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8005b4c:	4a27      	ldr	r2, [pc, #156]	; (8005bec <chk_lock+0xb4>)
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	011b      	lsls	r3, r3, #4
 8005b52:	4413      	add	r3, r2
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d01d      	beq.n	8005b96 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005b5a:	4a24      	ldr	r2, [pc, #144]	; (8005bec <chk_lock+0xb4>)
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	011b      	lsls	r3, r3, #4
 8005b60:	4413      	add	r3, r2
 8005b62:	681a      	ldr	r2, [r3, #0]
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	429a      	cmp	r2, r3
 8005b6a:	d116      	bne.n	8005b9a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8005b6c:	4a1f      	ldr	r2, [pc, #124]	; (8005bec <chk_lock+0xb4>)
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	011b      	lsls	r3, r3, #4
 8005b72:	4413      	add	r3, r2
 8005b74:	3304      	adds	r3, #4
 8005b76:	681a      	ldr	r2, [r3, #0]
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005b7c:	429a      	cmp	r2, r3
 8005b7e:	d10c      	bne.n	8005b9a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005b80:	4a1a      	ldr	r2, [pc, #104]	; (8005bec <chk_lock+0xb4>)
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	011b      	lsls	r3, r3, #4
 8005b86:	4413      	add	r3, r2
 8005b88:	3308      	adds	r3, #8
 8005b8a:	681a      	ldr	r2, [r3, #0]
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8005b90:	429a      	cmp	r2, r3
 8005b92:	d102      	bne.n	8005b9a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005b94:	e007      	b.n	8005ba6 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8005b96:	2301      	movs	r3, #1
 8005b98:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	3301      	adds	r3, #1
 8005b9e:	60fb      	str	r3, [r7, #12]
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	2b01      	cmp	r3, #1
 8005ba4:	d9d2      	bls.n	8005b4c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	2b02      	cmp	r3, #2
 8005baa:	d109      	bne.n	8005bc0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d102      	bne.n	8005bb8 <chk_lock+0x80>
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	2b02      	cmp	r3, #2
 8005bb6:	d101      	bne.n	8005bbc <chk_lock+0x84>
 8005bb8:	2300      	movs	r3, #0
 8005bba:	e010      	b.n	8005bde <chk_lock+0xa6>
 8005bbc:	2312      	movs	r3, #18
 8005bbe:	e00e      	b.n	8005bde <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d108      	bne.n	8005bd8 <chk_lock+0xa0>
 8005bc6:	4a09      	ldr	r2, [pc, #36]	; (8005bec <chk_lock+0xb4>)
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	011b      	lsls	r3, r3, #4
 8005bcc:	4413      	add	r3, r2
 8005bce:	330c      	adds	r3, #12
 8005bd0:	881b      	ldrh	r3, [r3, #0]
 8005bd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005bd6:	d101      	bne.n	8005bdc <chk_lock+0xa4>
 8005bd8:	2310      	movs	r3, #16
 8005bda:	e000      	b.n	8005bde <chk_lock+0xa6>
 8005bdc:	2300      	movs	r3, #0
}
 8005bde:	4618      	mov	r0, r3
 8005be0:	3714      	adds	r7, #20
 8005be2:	46bd      	mov	sp, r7
 8005be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be8:	4770      	bx	lr
 8005bea:	bf00      	nop
 8005bec:	20000150 	.word	0x20000150

08005bf0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8005bf0:	b480      	push	{r7}
 8005bf2:	b083      	sub	sp, #12
 8005bf4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	607b      	str	r3, [r7, #4]
 8005bfa:	e002      	b.n	8005c02 <enq_lock+0x12>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	3301      	adds	r3, #1
 8005c00:	607b      	str	r3, [r7, #4]
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2b01      	cmp	r3, #1
 8005c06:	d806      	bhi.n	8005c16 <enq_lock+0x26>
 8005c08:	4a09      	ldr	r2, [pc, #36]	; (8005c30 <enq_lock+0x40>)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	011b      	lsls	r3, r3, #4
 8005c0e:	4413      	add	r3, r2
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d1f2      	bne.n	8005bfc <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2b02      	cmp	r3, #2
 8005c1a:	bf14      	ite	ne
 8005c1c:	2301      	movne	r3, #1
 8005c1e:	2300      	moveq	r3, #0
 8005c20:	b2db      	uxtb	r3, r3
}
 8005c22:	4618      	mov	r0, r3
 8005c24:	370c      	adds	r7, #12
 8005c26:	46bd      	mov	sp, r7
 8005c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2c:	4770      	bx	lr
 8005c2e:	bf00      	nop
 8005c30:	20000150 	.word	0x20000150

08005c34 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005c34:	b480      	push	{r7}
 8005c36:	b085      	sub	sp, #20
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
 8005c3c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005c3e:	2300      	movs	r3, #0
 8005c40:	60fb      	str	r3, [r7, #12]
 8005c42:	e01f      	b.n	8005c84 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8005c44:	4a41      	ldr	r2, [pc, #260]	; (8005d4c <inc_lock+0x118>)
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	011b      	lsls	r3, r3, #4
 8005c4a:	4413      	add	r3, r2
 8005c4c:	681a      	ldr	r2, [r3, #0]
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	429a      	cmp	r2, r3
 8005c54:	d113      	bne.n	8005c7e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8005c56:	4a3d      	ldr	r2, [pc, #244]	; (8005d4c <inc_lock+0x118>)
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	011b      	lsls	r3, r3, #4
 8005c5c:	4413      	add	r3, r2
 8005c5e:	3304      	adds	r3, #4
 8005c60:	681a      	ldr	r2, [r3, #0]
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8005c66:	429a      	cmp	r2, r3
 8005c68:	d109      	bne.n	8005c7e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8005c6a:	4a38      	ldr	r2, [pc, #224]	; (8005d4c <inc_lock+0x118>)
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	011b      	lsls	r3, r3, #4
 8005c70:	4413      	add	r3, r2
 8005c72:	3308      	adds	r3, #8
 8005c74:	681a      	ldr	r2, [r3, #0]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8005c7a:	429a      	cmp	r2, r3
 8005c7c:	d006      	beq.n	8005c8c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	3301      	adds	r3, #1
 8005c82:	60fb      	str	r3, [r7, #12]
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	2b01      	cmp	r3, #1
 8005c88:	d9dc      	bls.n	8005c44 <inc_lock+0x10>
 8005c8a:	e000      	b.n	8005c8e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8005c8c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	2b02      	cmp	r3, #2
 8005c92:	d132      	bne.n	8005cfa <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005c94:	2300      	movs	r3, #0
 8005c96:	60fb      	str	r3, [r7, #12]
 8005c98:	e002      	b.n	8005ca0 <inc_lock+0x6c>
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	3301      	adds	r3, #1
 8005c9e:	60fb      	str	r3, [r7, #12]
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	2b01      	cmp	r3, #1
 8005ca4:	d806      	bhi.n	8005cb4 <inc_lock+0x80>
 8005ca6:	4a29      	ldr	r2, [pc, #164]	; (8005d4c <inc_lock+0x118>)
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	011b      	lsls	r3, r3, #4
 8005cac:	4413      	add	r3, r2
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d1f2      	bne.n	8005c9a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	2b02      	cmp	r3, #2
 8005cb8:	d101      	bne.n	8005cbe <inc_lock+0x8a>
 8005cba:	2300      	movs	r3, #0
 8005cbc:	e040      	b.n	8005d40 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681a      	ldr	r2, [r3, #0]
 8005cc2:	4922      	ldr	r1, [pc, #136]	; (8005d4c <inc_lock+0x118>)
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	011b      	lsls	r3, r3, #4
 8005cc8:	440b      	add	r3, r1
 8005cca:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	689a      	ldr	r2, [r3, #8]
 8005cd0:	491e      	ldr	r1, [pc, #120]	; (8005d4c <inc_lock+0x118>)
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	011b      	lsls	r3, r3, #4
 8005cd6:	440b      	add	r3, r1
 8005cd8:	3304      	adds	r3, #4
 8005cda:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	695a      	ldr	r2, [r3, #20]
 8005ce0:	491a      	ldr	r1, [pc, #104]	; (8005d4c <inc_lock+0x118>)
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	011b      	lsls	r3, r3, #4
 8005ce6:	440b      	add	r3, r1
 8005ce8:	3308      	adds	r3, #8
 8005cea:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8005cec:	4a17      	ldr	r2, [pc, #92]	; (8005d4c <inc_lock+0x118>)
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	011b      	lsls	r3, r3, #4
 8005cf2:	4413      	add	r3, r2
 8005cf4:	330c      	adds	r3, #12
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d009      	beq.n	8005d14 <inc_lock+0xe0>
 8005d00:	4a12      	ldr	r2, [pc, #72]	; (8005d4c <inc_lock+0x118>)
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	011b      	lsls	r3, r3, #4
 8005d06:	4413      	add	r3, r2
 8005d08:	330c      	adds	r3, #12
 8005d0a:	881b      	ldrh	r3, [r3, #0]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d001      	beq.n	8005d14 <inc_lock+0xe0>
 8005d10:	2300      	movs	r3, #0
 8005d12:	e015      	b.n	8005d40 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d108      	bne.n	8005d2c <inc_lock+0xf8>
 8005d1a:	4a0c      	ldr	r2, [pc, #48]	; (8005d4c <inc_lock+0x118>)
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	011b      	lsls	r3, r3, #4
 8005d20:	4413      	add	r3, r2
 8005d22:	330c      	adds	r3, #12
 8005d24:	881b      	ldrh	r3, [r3, #0]
 8005d26:	3301      	adds	r3, #1
 8005d28:	b29a      	uxth	r2, r3
 8005d2a:	e001      	b.n	8005d30 <inc_lock+0xfc>
 8005d2c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005d30:	4906      	ldr	r1, [pc, #24]	; (8005d4c <inc_lock+0x118>)
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	011b      	lsls	r3, r3, #4
 8005d36:	440b      	add	r3, r1
 8005d38:	330c      	adds	r3, #12
 8005d3a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	3301      	adds	r3, #1
}
 8005d40:	4618      	mov	r0, r3
 8005d42:	3714      	adds	r7, #20
 8005d44:	46bd      	mov	sp, r7
 8005d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4a:	4770      	bx	lr
 8005d4c:	20000150 	.word	0x20000150

08005d50 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8005d50:	b480      	push	{r7}
 8005d52:	b085      	sub	sp, #20
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	3b01      	subs	r3, #1
 8005d5c:	607b      	str	r3, [r7, #4]
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2b01      	cmp	r3, #1
 8005d62:	d825      	bhi.n	8005db0 <dec_lock+0x60>
		n = Files[i].ctr;
 8005d64:	4a17      	ldr	r2, [pc, #92]	; (8005dc4 <dec_lock+0x74>)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	011b      	lsls	r3, r3, #4
 8005d6a:	4413      	add	r3, r2
 8005d6c:	330c      	adds	r3, #12
 8005d6e:	881b      	ldrh	r3, [r3, #0]
 8005d70:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8005d72:	89fb      	ldrh	r3, [r7, #14]
 8005d74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d78:	d101      	bne.n	8005d7e <dec_lock+0x2e>
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8005d7e:	89fb      	ldrh	r3, [r7, #14]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d002      	beq.n	8005d8a <dec_lock+0x3a>
 8005d84:	89fb      	ldrh	r3, [r7, #14]
 8005d86:	3b01      	subs	r3, #1
 8005d88:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8005d8a:	4a0e      	ldr	r2, [pc, #56]	; (8005dc4 <dec_lock+0x74>)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	011b      	lsls	r3, r3, #4
 8005d90:	4413      	add	r3, r2
 8005d92:	330c      	adds	r3, #12
 8005d94:	89fa      	ldrh	r2, [r7, #14]
 8005d96:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8005d98:	89fb      	ldrh	r3, [r7, #14]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d105      	bne.n	8005daa <dec_lock+0x5a>
 8005d9e:	4a09      	ldr	r2, [pc, #36]	; (8005dc4 <dec_lock+0x74>)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	011b      	lsls	r3, r3, #4
 8005da4:	4413      	add	r3, r2
 8005da6:	2200      	movs	r2, #0
 8005da8:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8005daa:	2300      	movs	r3, #0
 8005dac:	737b      	strb	r3, [r7, #13]
 8005dae:	e001      	b.n	8005db4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8005db0:	2302      	movs	r3, #2
 8005db2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8005db4:	7b7b      	ldrb	r3, [r7, #13]
}
 8005db6:	4618      	mov	r0, r3
 8005db8:	3714      	adds	r7, #20
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc0:	4770      	bx	lr
 8005dc2:	bf00      	nop
 8005dc4:	20000150 	.word	0x20000150

08005dc8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8005dc8:	b480      	push	{r7}
 8005dca:	b085      	sub	sp, #20
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	60fb      	str	r3, [r7, #12]
 8005dd4:	e010      	b.n	8005df8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8005dd6:	4a0d      	ldr	r2, [pc, #52]	; (8005e0c <clear_lock+0x44>)
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	011b      	lsls	r3, r3, #4
 8005ddc:	4413      	add	r3, r2
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	687a      	ldr	r2, [r7, #4]
 8005de2:	429a      	cmp	r2, r3
 8005de4:	d105      	bne.n	8005df2 <clear_lock+0x2a>
 8005de6:	4a09      	ldr	r2, [pc, #36]	; (8005e0c <clear_lock+0x44>)
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	011b      	lsls	r3, r3, #4
 8005dec:	4413      	add	r3, r2
 8005dee:	2200      	movs	r2, #0
 8005df0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	3301      	adds	r3, #1
 8005df6:	60fb      	str	r3, [r7, #12]
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	2b01      	cmp	r3, #1
 8005dfc:	d9eb      	bls.n	8005dd6 <clear_lock+0xe>
	}
}
 8005dfe:	bf00      	nop
 8005e00:	bf00      	nop
 8005e02:	3714      	adds	r7, #20
 8005e04:	46bd      	mov	sp, r7
 8005e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0a:	4770      	bx	lr
 8005e0c:	20000150 	.word	0x20000150

08005e10 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b086      	sub	sp, #24
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8005e18:	2300      	movs	r3, #0
 8005e1a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	78db      	ldrb	r3, [r3, #3]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d034      	beq.n	8005e8e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e28:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	7858      	ldrb	r0, [r3, #1]
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005e34:	2301      	movs	r3, #1
 8005e36:	697a      	ldr	r2, [r7, #20]
 8005e38:	f7ff fd40 	bl	80058bc <disk_write>
 8005e3c:	4603      	mov	r3, r0
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d002      	beq.n	8005e48 <sync_window+0x38>
			res = FR_DISK_ERR;
 8005e42:	2301      	movs	r3, #1
 8005e44:	73fb      	strb	r3, [r7, #15]
 8005e46:	e022      	b.n	8005e8e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e52:	697a      	ldr	r2, [r7, #20]
 8005e54:	1ad2      	subs	r2, r2, r3
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	69db      	ldr	r3, [r3, #28]
 8005e5a:	429a      	cmp	r2, r3
 8005e5c:	d217      	bcs.n	8005e8e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	789b      	ldrb	r3, [r3, #2]
 8005e62:	613b      	str	r3, [r7, #16]
 8005e64:	e010      	b.n	8005e88 <sync_window+0x78>
					wsect += fs->fsize;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	69db      	ldr	r3, [r3, #28]
 8005e6a:	697a      	ldr	r2, [r7, #20]
 8005e6c:	4413      	add	r3, r2
 8005e6e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	7858      	ldrb	r0, [r3, #1]
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	697a      	ldr	r2, [r7, #20]
 8005e7e:	f7ff fd1d 	bl	80058bc <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005e82:	693b      	ldr	r3, [r7, #16]
 8005e84:	3b01      	subs	r3, #1
 8005e86:	613b      	str	r3, [r7, #16]
 8005e88:	693b      	ldr	r3, [r7, #16]
 8005e8a:	2b01      	cmp	r3, #1
 8005e8c:	d8eb      	bhi.n	8005e66 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8005e8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e90:	4618      	mov	r0, r3
 8005e92:	3718      	adds	r7, #24
 8005e94:	46bd      	mov	sp, r7
 8005e96:	bd80      	pop	{r7, pc}

08005e98 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b084      	sub	sp, #16
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
 8005ea0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eaa:	683a      	ldr	r2, [r7, #0]
 8005eac:	429a      	cmp	r2, r3
 8005eae:	d01b      	beq.n	8005ee8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8005eb0:	6878      	ldr	r0, [r7, #4]
 8005eb2:	f7ff ffad 	bl	8005e10 <sync_window>
 8005eb6:	4603      	mov	r3, r0
 8005eb8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8005eba:	7bfb      	ldrb	r3, [r7, #15]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d113      	bne.n	8005ee8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	7858      	ldrb	r0, [r3, #1]
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005eca:	2301      	movs	r3, #1
 8005ecc:	683a      	ldr	r2, [r7, #0]
 8005ece:	f7ff fcd5 	bl	800587c <disk_read>
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d004      	beq.n	8005ee2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8005ed8:	f04f 33ff 	mov.w	r3, #4294967295
 8005edc:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8005ede:	2301      	movs	r3, #1
 8005ee0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	683a      	ldr	r2, [r7, #0]
 8005ee6:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8005ee8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005eea:	4618      	mov	r0, r3
 8005eec:	3710      	adds	r7, #16
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	bd80      	pop	{r7, pc}
	...

08005ef4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b084      	sub	sp, #16
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8005efc:	6878      	ldr	r0, [r7, #4]
 8005efe:	f7ff ff87 	bl	8005e10 <sync_window>
 8005f02:	4603      	mov	r3, r0
 8005f04:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8005f06:	7bfb      	ldrb	r3, [r7, #15]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d158      	bne.n	8005fbe <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	781b      	ldrb	r3, [r3, #0]
 8005f10:	2b03      	cmp	r3, #3
 8005f12:	d148      	bne.n	8005fa6 <sync_fs+0xb2>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	791b      	ldrb	r3, [r3, #4]
 8005f18:	2b01      	cmp	r3, #1
 8005f1a:	d144      	bne.n	8005fa6 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	3334      	adds	r3, #52	; 0x34
 8005f20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f24:	2100      	movs	r1, #0
 8005f26:	4618      	mov	r0, r3
 8005f28:	f7ff fda9 	bl	8005a7e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	3334      	adds	r3, #52	; 0x34
 8005f30:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005f34:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8005f38:	4618      	mov	r0, r3
 8005f3a:	f7ff fd38 	bl	80059ae <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	3334      	adds	r3, #52	; 0x34
 8005f42:	4921      	ldr	r1, [pc, #132]	; (8005fc8 <sync_fs+0xd4>)
 8005f44:	4618      	mov	r0, r3
 8005f46:	f7ff fd4d 	bl	80059e4 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	3334      	adds	r3, #52	; 0x34
 8005f4e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8005f52:	491e      	ldr	r1, [pc, #120]	; (8005fcc <sync_fs+0xd8>)
 8005f54:	4618      	mov	r0, r3
 8005f56:	f7ff fd45 	bl	80059e4 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	3334      	adds	r3, #52	; 0x34
 8005f5e:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	695b      	ldr	r3, [r3, #20]
 8005f66:	4619      	mov	r1, r3
 8005f68:	4610      	mov	r0, r2
 8005f6a:	f7ff fd3b 	bl	80059e4 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	3334      	adds	r3, #52	; 0x34
 8005f72:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	691b      	ldr	r3, [r3, #16]
 8005f7a:	4619      	mov	r1, r3
 8005f7c:	4610      	mov	r0, r2
 8005f7e:	f7ff fd31 	bl	80059e4 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6a1b      	ldr	r3, [r3, #32]
 8005f86:	1c5a      	adds	r2, r3, #1
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	7858      	ldrb	r0, [r3, #1]
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	f7ff fc8e 	bl	80058bc <disk_write>
			fs->fsi_flag = 0;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	785b      	ldrb	r3, [r3, #1]
 8005faa:	2200      	movs	r2, #0
 8005fac:	2100      	movs	r1, #0
 8005fae:	4618      	mov	r0, r3
 8005fb0:	f7ff fca4 	bl	80058fc <disk_ioctl>
 8005fb4:	4603      	mov	r3, r0
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d001      	beq.n	8005fbe <sync_fs+0xca>
 8005fba:	2301      	movs	r3, #1
 8005fbc:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8005fbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	3710      	adds	r7, #16
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	bd80      	pop	{r7, pc}
 8005fc8:	41615252 	.word	0x41615252
 8005fcc:	61417272 	.word	0x61417272

08005fd0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	b083      	sub	sp, #12
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
 8005fd8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	3b02      	subs	r3, #2
 8005fde:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	699b      	ldr	r3, [r3, #24]
 8005fe4:	3b02      	subs	r3, #2
 8005fe6:	683a      	ldr	r2, [r7, #0]
 8005fe8:	429a      	cmp	r2, r3
 8005fea:	d301      	bcc.n	8005ff0 <clust2sect+0x20>
 8005fec:	2300      	movs	r3, #0
 8005fee:	e008      	b.n	8006002 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	895b      	ldrh	r3, [r3, #10]
 8005ff4:	461a      	mov	r2, r3
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	fb03 f202 	mul.w	r2, r3, r2
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006000:	4413      	add	r3, r2
}
 8006002:	4618      	mov	r0, r3
 8006004:	370c      	adds	r7, #12
 8006006:	46bd      	mov	sp, r7
 8006008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600c:	4770      	bx	lr

0800600e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800600e:	b580      	push	{r7, lr}
 8006010:	b086      	sub	sp, #24
 8006012:	af00      	add	r7, sp, #0
 8006014:	6078      	str	r0, [r7, #4]
 8006016:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	2b01      	cmp	r3, #1
 8006022:	d904      	bls.n	800602e <get_fat+0x20>
 8006024:	693b      	ldr	r3, [r7, #16]
 8006026:	699b      	ldr	r3, [r3, #24]
 8006028:	683a      	ldr	r2, [r7, #0]
 800602a:	429a      	cmp	r2, r3
 800602c:	d302      	bcc.n	8006034 <get_fat+0x26>
		val = 1;	/* Internal error */
 800602e:	2301      	movs	r3, #1
 8006030:	617b      	str	r3, [r7, #20]
 8006032:	e08f      	b.n	8006154 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8006034:	f04f 33ff 	mov.w	r3, #4294967295
 8006038:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800603a:	693b      	ldr	r3, [r7, #16]
 800603c:	781b      	ldrb	r3, [r3, #0]
 800603e:	2b03      	cmp	r3, #3
 8006040:	d062      	beq.n	8006108 <get_fat+0xfa>
 8006042:	2b03      	cmp	r3, #3
 8006044:	dc7c      	bgt.n	8006140 <get_fat+0x132>
 8006046:	2b01      	cmp	r3, #1
 8006048:	d002      	beq.n	8006050 <get_fat+0x42>
 800604a:	2b02      	cmp	r3, #2
 800604c:	d042      	beq.n	80060d4 <get_fat+0xc6>
 800604e:	e077      	b.n	8006140 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	60fb      	str	r3, [r7, #12]
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	085b      	lsrs	r3, r3, #1
 8006058:	68fa      	ldr	r2, [r7, #12]
 800605a:	4413      	add	r3, r2
 800605c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800605e:	693b      	ldr	r3, [r7, #16]
 8006060:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	0a5b      	lsrs	r3, r3, #9
 8006066:	4413      	add	r3, r2
 8006068:	4619      	mov	r1, r3
 800606a:	6938      	ldr	r0, [r7, #16]
 800606c:	f7ff ff14 	bl	8005e98 <move_window>
 8006070:	4603      	mov	r3, r0
 8006072:	2b00      	cmp	r3, #0
 8006074:	d167      	bne.n	8006146 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	1c5a      	adds	r2, r3, #1
 800607a:	60fa      	str	r2, [r7, #12]
 800607c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006080:	693a      	ldr	r2, [r7, #16]
 8006082:	4413      	add	r3, r2
 8006084:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006088:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800608a:	693b      	ldr	r3, [r7, #16]
 800608c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	0a5b      	lsrs	r3, r3, #9
 8006092:	4413      	add	r3, r2
 8006094:	4619      	mov	r1, r3
 8006096:	6938      	ldr	r0, [r7, #16]
 8006098:	f7ff fefe 	bl	8005e98 <move_window>
 800609c:	4603      	mov	r3, r0
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d153      	bne.n	800614a <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060a8:	693a      	ldr	r2, [r7, #16]
 80060aa:	4413      	add	r3, r2
 80060ac:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80060b0:	021b      	lsls	r3, r3, #8
 80060b2:	461a      	mov	r2, r3
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	4313      	orrs	r3, r2
 80060b8:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	f003 0301 	and.w	r3, r3, #1
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d002      	beq.n	80060ca <get_fat+0xbc>
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	091b      	lsrs	r3, r3, #4
 80060c8:	e002      	b.n	80060d0 <get_fat+0xc2>
 80060ca:	68bb      	ldr	r3, [r7, #8]
 80060cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80060d0:	617b      	str	r3, [r7, #20]
			break;
 80060d2:	e03f      	b.n	8006154 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80060d4:	693b      	ldr	r3, [r7, #16]
 80060d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	0a1b      	lsrs	r3, r3, #8
 80060dc:	4413      	add	r3, r2
 80060de:	4619      	mov	r1, r3
 80060e0:	6938      	ldr	r0, [r7, #16]
 80060e2:	f7ff fed9 	bl	8005e98 <move_window>
 80060e6:	4603      	mov	r3, r0
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d130      	bne.n	800614e <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80060ec:	693b      	ldr	r3, [r7, #16]
 80060ee:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	005b      	lsls	r3, r3, #1
 80060f6:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80060fa:	4413      	add	r3, r2
 80060fc:	4618      	mov	r0, r3
 80060fe:	f7ff fc1b 	bl	8005938 <ld_word>
 8006102:	4603      	mov	r3, r0
 8006104:	617b      	str	r3, [r7, #20]
			break;
 8006106:	e025      	b.n	8006154 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006108:	693b      	ldr	r3, [r7, #16]
 800610a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	09db      	lsrs	r3, r3, #7
 8006110:	4413      	add	r3, r2
 8006112:	4619      	mov	r1, r3
 8006114:	6938      	ldr	r0, [r7, #16]
 8006116:	f7ff febf 	bl	8005e98 <move_window>
 800611a:	4603      	mov	r3, r0
 800611c:	2b00      	cmp	r3, #0
 800611e:	d118      	bne.n	8006152 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8006120:	693b      	ldr	r3, [r7, #16]
 8006122:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	009b      	lsls	r3, r3, #2
 800612a:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800612e:	4413      	add	r3, r2
 8006130:	4618      	mov	r0, r3
 8006132:	f7ff fc19 	bl	8005968 <ld_dword>
 8006136:	4603      	mov	r3, r0
 8006138:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800613c:	617b      	str	r3, [r7, #20]
			break;
 800613e:	e009      	b.n	8006154 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8006140:	2301      	movs	r3, #1
 8006142:	617b      	str	r3, [r7, #20]
 8006144:	e006      	b.n	8006154 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006146:	bf00      	nop
 8006148:	e004      	b.n	8006154 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800614a:	bf00      	nop
 800614c:	e002      	b.n	8006154 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800614e:	bf00      	nop
 8006150:	e000      	b.n	8006154 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006152:	bf00      	nop
		}
	}

	return val;
 8006154:	697b      	ldr	r3, [r7, #20]
}
 8006156:	4618      	mov	r0, r3
 8006158:	3718      	adds	r7, #24
 800615a:	46bd      	mov	sp, r7
 800615c:	bd80      	pop	{r7, pc}

0800615e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800615e:	b590      	push	{r4, r7, lr}
 8006160:	b089      	sub	sp, #36	; 0x24
 8006162:	af00      	add	r7, sp, #0
 8006164:	60f8      	str	r0, [r7, #12]
 8006166:	60b9      	str	r1, [r7, #8]
 8006168:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800616a:	2302      	movs	r3, #2
 800616c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	2b01      	cmp	r3, #1
 8006172:	f240 80d2 	bls.w	800631a <put_fat+0x1bc>
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	699b      	ldr	r3, [r3, #24]
 800617a:	68ba      	ldr	r2, [r7, #8]
 800617c:	429a      	cmp	r2, r3
 800617e:	f080 80cc 	bcs.w	800631a <put_fat+0x1bc>
		switch (fs->fs_type) {
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	781b      	ldrb	r3, [r3, #0]
 8006186:	2b03      	cmp	r3, #3
 8006188:	f000 8096 	beq.w	80062b8 <put_fat+0x15a>
 800618c:	2b03      	cmp	r3, #3
 800618e:	f300 80cd 	bgt.w	800632c <put_fat+0x1ce>
 8006192:	2b01      	cmp	r3, #1
 8006194:	d002      	beq.n	800619c <put_fat+0x3e>
 8006196:	2b02      	cmp	r3, #2
 8006198:	d06e      	beq.n	8006278 <put_fat+0x11a>
 800619a:	e0c7      	b.n	800632c <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	61bb      	str	r3, [r7, #24]
 80061a0:	69bb      	ldr	r3, [r7, #24]
 80061a2:	085b      	lsrs	r3, r3, #1
 80061a4:	69ba      	ldr	r2, [r7, #24]
 80061a6:	4413      	add	r3, r2
 80061a8:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80061ae:	69bb      	ldr	r3, [r7, #24]
 80061b0:	0a5b      	lsrs	r3, r3, #9
 80061b2:	4413      	add	r3, r2
 80061b4:	4619      	mov	r1, r3
 80061b6:	68f8      	ldr	r0, [r7, #12]
 80061b8:	f7ff fe6e 	bl	8005e98 <move_window>
 80061bc:	4603      	mov	r3, r0
 80061be:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80061c0:	7ffb      	ldrb	r3, [r7, #31]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	f040 80ab 	bne.w	800631e <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80061ce:	69bb      	ldr	r3, [r7, #24]
 80061d0:	1c59      	adds	r1, r3, #1
 80061d2:	61b9      	str	r1, [r7, #24]
 80061d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061d8:	4413      	add	r3, r2
 80061da:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	f003 0301 	and.w	r3, r3, #1
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d00d      	beq.n	8006202 <put_fat+0xa4>
 80061e6:	697b      	ldr	r3, [r7, #20]
 80061e8:	781b      	ldrb	r3, [r3, #0]
 80061ea:	b25b      	sxtb	r3, r3
 80061ec:	f003 030f 	and.w	r3, r3, #15
 80061f0:	b25a      	sxtb	r2, r3
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	b2db      	uxtb	r3, r3
 80061f6:	011b      	lsls	r3, r3, #4
 80061f8:	b25b      	sxtb	r3, r3
 80061fa:	4313      	orrs	r3, r2
 80061fc:	b25b      	sxtb	r3, r3
 80061fe:	b2db      	uxtb	r3, r3
 8006200:	e001      	b.n	8006206 <put_fat+0xa8>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	b2db      	uxtb	r3, r3
 8006206:	697a      	ldr	r2, [r7, #20]
 8006208:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	2201      	movs	r2, #1
 800620e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006214:	69bb      	ldr	r3, [r7, #24]
 8006216:	0a5b      	lsrs	r3, r3, #9
 8006218:	4413      	add	r3, r2
 800621a:	4619      	mov	r1, r3
 800621c:	68f8      	ldr	r0, [r7, #12]
 800621e:	f7ff fe3b 	bl	8005e98 <move_window>
 8006222:	4603      	mov	r3, r0
 8006224:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006226:	7ffb      	ldrb	r3, [r7, #31]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d17a      	bne.n	8006322 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8006232:	69bb      	ldr	r3, [r7, #24]
 8006234:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006238:	4413      	add	r3, r2
 800623a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800623c:	68bb      	ldr	r3, [r7, #8]
 800623e:	f003 0301 	and.w	r3, r3, #1
 8006242:	2b00      	cmp	r3, #0
 8006244:	d003      	beq.n	800624e <put_fat+0xf0>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	091b      	lsrs	r3, r3, #4
 800624a:	b2db      	uxtb	r3, r3
 800624c:	e00e      	b.n	800626c <put_fat+0x10e>
 800624e:	697b      	ldr	r3, [r7, #20]
 8006250:	781b      	ldrb	r3, [r3, #0]
 8006252:	b25b      	sxtb	r3, r3
 8006254:	f023 030f 	bic.w	r3, r3, #15
 8006258:	b25a      	sxtb	r2, r3
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	0a1b      	lsrs	r3, r3, #8
 800625e:	b25b      	sxtb	r3, r3
 8006260:	f003 030f 	and.w	r3, r3, #15
 8006264:	b25b      	sxtb	r3, r3
 8006266:	4313      	orrs	r3, r2
 8006268:	b25b      	sxtb	r3, r3
 800626a:	b2db      	uxtb	r3, r3
 800626c:	697a      	ldr	r2, [r7, #20]
 800626e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	2201      	movs	r2, #1
 8006274:	70da      	strb	r2, [r3, #3]
			break;
 8006276:	e059      	b.n	800632c <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800627c:	68bb      	ldr	r3, [r7, #8]
 800627e:	0a1b      	lsrs	r3, r3, #8
 8006280:	4413      	add	r3, r2
 8006282:	4619      	mov	r1, r3
 8006284:	68f8      	ldr	r0, [r7, #12]
 8006286:	f7ff fe07 	bl	8005e98 <move_window>
 800628a:	4603      	mov	r3, r0
 800628c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800628e:	7ffb      	ldrb	r3, [r7, #31]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d148      	bne.n	8006326 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800629a:	68bb      	ldr	r3, [r7, #8]
 800629c:	005b      	lsls	r3, r3, #1
 800629e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80062a2:	4413      	add	r3, r2
 80062a4:	687a      	ldr	r2, [r7, #4]
 80062a6:	b292      	uxth	r2, r2
 80062a8:	4611      	mov	r1, r2
 80062aa:	4618      	mov	r0, r3
 80062ac:	f7ff fb7f 	bl	80059ae <st_word>
			fs->wflag = 1;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	2201      	movs	r2, #1
 80062b4:	70da      	strb	r2, [r3, #3]
			break;
 80062b6:	e039      	b.n	800632c <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	09db      	lsrs	r3, r3, #7
 80062c0:	4413      	add	r3, r2
 80062c2:	4619      	mov	r1, r3
 80062c4:	68f8      	ldr	r0, [r7, #12]
 80062c6:	f7ff fde7 	bl	8005e98 <move_window>
 80062ca:	4603      	mov	r3, r0
 80062cc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80062ce:	7ffb      	ldrb	r3, [r7, #31]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d12a      	bne.n	800632a <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	009b      	lsls	r3, r3, #2
 80062e4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80062e8:	4413      	add	r3, r2
 80062ea:	4618      	mov	r0, r3
 80062ec:	f7ff fb3c 	bl	8005968 <ld_dword>
 80062f0:	4603      	mov	r3, r0
 80062f2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80062f6:	4323      	orrs	r3, r4
 80062f8:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8006300:	68bb      	ldr	r3, [r7, #8]
 8006302:	009b      	lsls	r3, r3, #2
 8006304:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8006308:	4413      	add	r3, r2
 800630a:	6879      	ldr	r1, [r7, #4]
 800630c:	4618      	mov	r0, r3
 800630e:	f7ff fb69 	bl	80059e4 <st_dword>
			fs->wflag = 1;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	2201      	movs	r2, #1
 8006316:	70da      	strb	r2, [r3, #3]
			break;
 8006318:	e008      	b.n	800632c <put_fat+0x1ce>
		}
	}
 800631a:	bf00      	nop
 800631c:	e006      	b.n	800632c <put_fat+0x1ce>
			if (res != FR_OK) break;
 800631e:	bf00      	nop
 8006320:	e004      	b.n	800632c <put_fat+0x1ce>
			if (res != FR_OK) break;
 8006322:	bf00      	nop
 8006324:	e002      	b.n	800632c <put_fat+0x1ce>
			if (res != FR_OK) break;
 8006326:	bf00      	nop
 8006328:	e000      	b.n	800632c <put_fat+0x1ce>
			if (res != FR_OK) break;
 800632a:	bf00      	nop
	return res;
 800632c:	7ffb      	ldrb	r3, [r7, #31]
}
 800632e:	4618      	mov	r0, r3
 8006330:	3724      	adds	r7, #36	; 0x24
 8006332:	46bd      	mov	sp, r7
 8006334:	bd90      	pop	{r4, r7, pc}

08006336 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8006336:	b580      	push	{r7, lr}
 8006338:	b088      	sub	sp, #32
 800633a:	af00      	add	r7, sp, #0
 800633c:	60f8      	str	r0, [r7, #12]
 800633e:	60b9      	str	r1, [r7, #8]
 8006340:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8006342:	2300      	movs	r3, #0
 8006344:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	2b01      	cmp	r3, #1
 8006350:	d904      	bls.n	800635c <remove_chain+0x26>
 8006352:	69bb      	ldr	r3, [r7, #24]
 8006354:	699b      	ldr	r3, [r3, #24]
 8006356:	68ba      	ldr	r2, [r7, #8]
 8006358:	429a      	cmp	r2, r3
 800635a:	d301      	bcc.n	8006360 <remove_chain+0x2a>
 800635c:	2302      	movs	r3, #2
 800635e:	e04b      	b.n	80063f8 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d00c      	beq.n	8006380 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8006366:	f04f 32ff 	mov.w	r2, #4294967295
 800636a:	6879      	ldr	r1, [r7, #4]
 800636c:	69b8      	ldr	r0, [r7, #24]
 800636e:	f7ff fef6 	bl	800615e <put_fat>
 8006372:	4603      	mov	r3, r0
 8006374:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8006376:	7ffb      	ldrb	r3, [r7, #31]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d001      	beq.n	8006380 <remove_chain+0x4a>
 800637c:	7ffb      	ldrb	r3, [r7, #31]
 800637e:	e03b      	b.n	80063f8 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8006380:	68b9      	ldr	r1, [r7, #8]
 8006382:	68f8      	ldr	r0, [r7, #12]
 8006384:	f7ff fe43 	bl	800600e <get_fat>
 8006388:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800638a:	697b      	ldr	r3, [r7, #20]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d031      	beq.n	80063f4 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8006390:	697b      	ldr	r3, [r7, #20]
 8006392:	2b01      	cmp	r3, #1
 8006394:	d101      	bne.n	800639a <remove_chain+0x64>
 8006396:	2302      	movs	r3, #2
 8006398:	e02e      	b.n	80063f8 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800639a:	697b      	ldr	r3, [r7, #20]
 800639c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063a0:	d101      	bne.n	80063a6 <remove_chain+0x70>
 80063a2:	2301      	movs	r3, #1
 80063a4:	e028      	b.n	80063f8 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80063a6:	2200      	movs	r2, #0
 80063a8:	68b9      	ldr	r1, [r7, #8]
 80063aa:	69b8      	ldr	r0, [r7, #24]
 80063ac:	f7ff fed7 	bl	800615e <put_fat>
 80063b0:	4603      	mov	r3, r0
 80063b2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80063b4:	7ffb      	ldrb	r3, [r7, #31]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d001      	beq.n	80063be <remove_chain+0x88>
 80063ba:	7ffb      	ldrb	r3, [r7, #31]
 80063bc:	e01c      	b.n	80063f8 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80063be:	69bb      	ldr	r3, [r7, #24]
 80063c0:	695a      	ldr	r2, [r3, #20]
 80063c2:	69bb      	ldr	r3, [r7, #24]
 80063c4:	699b      	ldr	r3, [r3, #24]
 80063c6:	3b02      	subs	r3, #2
 80063c8:	429a      	cmp	r2, r3
 80063ca:	d20b      	bcs.n	80063e4 <remove_chain+0xae>
			fs->free_clst++;
 80063cc:	69bb      	ldr	r3, [r7, #24]
 80063ce:	695b      	ldr	r3, [r3, #20]
 80063d0:	1c5a      	adds	r2, r3, #1
 80063d2:	69bb      	ldr	r3, [r7, #24]
 80063d4:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 80063d6:	69bb      	ldr	r3, [r7, #24]
 80063d8:	791b      	ldrb	r3, [r3, #4]
 80063da:	f043 0301 	orr.w	r3, r3, #1
 80063de:	b2da      	uxtb	r2, r3
 80063e0:	69bb      	ldr	r3, [r7, #24]
 80063e2:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80063e4:	697b      	ldr	r3, [r7, #20]
 80063e6:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80063e8:	69bb      	ldr	r3, [r7, #24]
 80063ea:	699b      	ldr	r3, [r3, #24]
 80063ec:	68ba      	ldr	r2, [r7, #8]
 80063ee:	429a      	cmp	r2, r3
 80063f0:	d3c6      	bcc.n	8006380 <remove_chain+0x4a>
 80063f2:	e000      	b.n	80063f6 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80063f4:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80063f6:	2300      	movs	r3, #0
}
 80063f8:	4618      	mov	r0, r3
 80063fa:	3720      	adds	r7, #32
 80063fc:	46bd      	mov	sp, r7
 80063fe:	bd80      	pop	{r7, pc}

08006400 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b088      	sub	sp, #32
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
 8006408:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d10d      	bne.n	8006432 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8006416:	693b      	ldr	r3, [r7, #16]
 8006418:	691b      	ldr	r3, [r3, #16]
 800641a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800641c:	69bb      	ldr	r3, [r7, #24]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d004      	beq.n	800642c <create_chain+0x2c>
 8006422:	693b      	ldr	r3, [r7, #16]
 8006424:	699b      	ldr	r3, [r3, #24]
 8006426:	69ba      	ldr	r2, [r7, #24]
 8006428:	429a      	cmp	r2, r3
 800642a:	d31b      	bcc.n	8006464 <create_chain+0x64>
 800642c:	2301      	movs	r3, #1
 800642e:	61bb      	str	r3, [r7, #24]
 8006430:	e018      	b.n	8006464 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8006432:	6839      	ldr	r1, [r7, #0]
 8006434:	6878      	ldr	r0, [r7, #4]
 8006436:	f7ff fdea 	bl	800600e <get_fat>
 800643a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	2b01      	cmp	r3, #1
 8006440:	d801      	bhi.n	8006446 <create_chain+0x46>
 8006442:	2301      	movs	r3, #1
 8006444:	e070      	b.n	8006528 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	f1b3 3fff 	cmp.w	r3, #4294967295
 800644c:	d101      	bne.n	8006452 <create_chain+0x52>
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	e06a      	b.n	8006528 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8006452:	693b      	ldr	r3, [r7, #16]
 8006454:	699b      	ldr	r3, [r3, #24]
 8006456:	68fa      	ldr	r2, [r7, #12]
 8006458:	429a      	cmp	r2, r3
 800645a:	d201      	bcs.n	8006460 <create_chain+0x60>
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	e063      	b.n	8006528 <create_chain+0x128>
		scl = clst;
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8006464:	69bb      	ldr	r3, [r7, #24]
 8006466:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8006468:	69fb      	ldr	r3, [r7, #28]
 800646a:	3301      	adds	r3, #1
 800646c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800646e:	693b      	ldr	r3, [r7, #16]
 8006470:	699b      	ldr	r3, [r3, #24]
 8006472:	69fa      	ldr	r2, [r7, #28]
 8006474:	429a      	cmp	r2, r3
 8006476:	d307      	bcc.n	8006488 <create_chain+0x88>
				ncl = 2;
 8006478:	2302      	movs	r3, #2
 800647a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800647c:	69fa      	ldr	r2, [r7, #28]
 800647e:	69bb      	ldr	r3, [r7, #24]
 8006480:	429a      	cmp	r2, r3
 8006482:	d901      	bls.n	8006488 <create_chain+0x88>
 8006484:	2300      	movs	r3, #0
 8006486:	e04f      	b.n	8006528 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8006488:	69f9      	ldr	r1, [r7, #28]
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	f7ff fdbf 	bl	800600e <get_fat>
 8006490:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d00e      	beq.n	80064b6 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	2b01      	cmp	r3, #1
 800649c:	d003      	beq.n	80064a6 <create_chain+0xa6>
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064a4:	d101      	bne.n	80064aa <create_chain+0xaa>
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	e03e      	b.n	8006528 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80064aa:	69fa      	ldr	r2, [r7, #28]
 80064ac:	69bb      	ldr	r3, [r7, #24]
 80064ae:	429a      	cmp	r2, r3
 80064b0:	d1da      	bne.n	8006468 <create_chain+0x68>
 80064b2:	2300      	movs	r3, #0
 80064b4:	e038      	b.n	8006528 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80064b6:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80064b8:	f04f 32ff 	mov.w	r2, #4294967295
 80064bc:	69f9      	ldr	r1, [r7, #28]
 80064be:	6938      	ldr	r0, [r7, #16]
 80064c0:	f7ff fe4d 	bl	800615e <put_fat>
 80064c4:	4603      	mov	r3, r0
 80064c6:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80064c8:	7dfb      	ldrb	r3, [r7, #23]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d109      	bne.n	80064e2 <create_chain+0xe2>
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d006      	beq.n	80064e2 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80064d4:	69fa      	ldr	r2, [r7, #28]
 80064d6:	6839      	ldr	r1, [r7, #0]
 80064d8:	6938      	ldr	r0, [r7, #16]
 80064da:	f7ff fe40 	bl	800615e <put_fat>
 80064de:	4603      	mov	r3, r0
 80064e0:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80064e2:	7dfb      	ldrb	r3, [r7, #23]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d116      	bne.n	8006516 <create_chain+0x116>
		fs->last_clst = ncl;
 80064e8:	693b      	ldr	r3, [r7, #16]
 80064ea:	69fa      	ldr	r2, [r7, #28]
 80064ec:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80064ee:	693b      	ldr	r3, [r7, #16]
 80064f0:	695a      	ldr	r2, [r3, #20]
 80064f2:	693b      	ldr	r3, [r7, #16]
 80064f4:	699b      	ldr	r3, [r3, #24]
 80064f6:	3b02      	subs	r3, #2
 80064f8:	429a      	cmp	r2, r3
 80064fa:	d804      	bhi.n	8006506 <create_chain+0x106>
 80064fc:	693b      	ldr	r3, [r7, #16]
 80064fe:	695b      	ldr	r3, [r3, #20]
 8006500:	1e5a      	subs	r2, r3, #1
 8006502:	693b      	ldr	r3, [r7, #16]
 8006504:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8006506:	693b      	ldr	r3, [r7, #16]
 8006508:	791b      	ldrb	r3, [r3, #4]
 800650a:	f043 0301 	orr.w	r3, r3, #1
 800650e:	b2da      	uxtb	r2, r3
 8006510:	693b      	ldr	r3, [r7, #16]
 8006512:	711a      	strb	r2, [r3, #4]
 8006514:	e007      	b.n	8006526 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8006516:	7dfb      	ldrb	r3, [r7, #23]
 8006518:	2b01      	cmp	r3, #1
 800651a:	d102      	bne.n	8006522 <create_chain+0x122>
 800651c:	f04f 33ff 	mov.w	r3, #4294967295
 8006520:	e000      	b.n	8006524 <create_chain+0x124>
 8006522:	2301      	movs	r3, #1
 8006524:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8006526:	69fb      	ldr	r3, [r7, #28]
}
 8006528:	4618      	mov	r0, r3
 800652a:	3720      	adds	r7, #32
 800652c:	46bd      	mov	sp, r7
 800652e:	bd80      	pop	{r7, pc}

08006530 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8006530:	b480      	push	{r7}
 8006532:	b087      	sub	sp, #28
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
 8006538:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006544:	3304      	adds	r3, #4
 8006546:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	0a5b      	lsrs	r3, r3, #9
 800654c:	68fa      	ldr	r2, [r7, #12]
 800654e:	8952      	ldrh	r2, [r2, #10]
 8006550:	fbb3 f3f2 	udiv	r3, r3, r2
 8006554:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006556:	693b      	ldr	r3, [r7, #16]
 8006558:	1d1a      	adds	r2, r3, #4
 800655a:	613a      	str	r2, [r7, #16]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8006560:	68bb      	ldr	r3, [r7, #8]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d101      	bne.n	800656a <clmt_clust+0x3a>
 8006566:	2300      	movs	r3, #0
 8006568:	e010      	b.n	800658c <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800656a:	697a      	ldr	r2, [r7, #20]
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	429a      	cmp	r2, r3
 8006570:	d307      	bcc.n	8006582 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8006572:	697a      	ldr	r2, [r7, #20]
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	1ad3      	subs	r3, r2, r3
 8006578:	617b      	str	r3, [r7, #20]
 800657a:	693b      	ldr	r3, [r7, #16]
 800657c:	3304      	adds	r3, #4
 800657e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006580:	e7e9      	b.n	8006556 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8006582:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8006584:	693b      	ldr	r3, [r7, #16]
 8006586:	681a      	ldr	r2, [r3, #0]
 8006588:	697b      	ldr	r3, [r7, #20]
 800658a:	4413      	add	r3, r2
}
 800658c:	4618      	mov	r0, r3
 800658e:	371c      	adds	r7, #28
 8006590:	46bd      	mov	sp, r7
 8006592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006596:	4770      	bx	lr

08006598 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b086      	sub	sp, #24
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
 80065a0:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80065ae:	d204      	bcs.n	80065ba <dir_sdi+0x22>
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	f003 031f 	and.w	r3, r3, #31
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d001      	beq.n	80065be <dir_sdi+0x26>
		return FR_INT_ERR;
 80065ba:	2302      	movs	r3, #2
 80065bc:	e063      	b.n	8006686 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	683a      	ldr	r2, [r7, #0]
 80065c2:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	689b      	ldr	r3, [r3, #8]
 80065c8:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80065ca:	697b      	ldr	r3, [r7, #20]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d106      	bne.n	80065de <dir_sdi+0x46>
 80065d0:	693b      	ldr	r3, [r7, #16]
 80065d2:	781b      	ldrb	r3, [r3, #0]
 80065d4:	2b02      	cmp	r3, #2
 80065d6:	d902      	bls.n	80065de <dir_sdi+0x46>
		clst = fs->dirbase;
 80065d8:	693b      	ldr	r3, [r7, #16]
 80065da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065dc:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80065de:	697b      	ldr	r3, [r7, #20]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d10c      	bne.n	80065fe <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	095b      	lsrs	r3, r3, #5
 80065e8:	693a      	ldr	r2, [r7, #16]
 80065ea:	8912      	ldrh	r2, [r2, #8]
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d301      	bcc.n	80065f4 <dir_sdi+0x5c>
 80065f0:	2302      	movs	r3, #2
 80065f2:	e048      	b.n	8006686 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 80065f4:	693b      	ldr	r3, [r7, #16]
 80065f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	61da      	str	r2, [r3, #28]
 80065fc:	e029      	b.n	8006652 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80065fe:	693b      	ldr	r3, [r7, #16]
 8006600:	895b      	ldrh	r3, [r3, #10]
 8006602:	025b      	lsls	r3, r3, #9
 8006604:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006606:	e019      	b.n	800663c <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6979      	ldr	r1, [r7, #20]
 800660c:	4618      	mov	r0, r3
 800660e:	f7ff fcfe 	bl	800600e <get_fat>
 8006612:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006614:	697b      	ldr	r3, [r7, #20]
 8006616:	f1b3 3fff 	cmp.w	r3, #4294967295
 800661a:	d101      	bne.n	8006620 <dir_sdi+0x88>
 800661c:	2301      	movs	r3, #1
 800661e:	e032      	b.n	8006686 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8006620:	697b      	ldr	r3, [r7, #20]
 8006622:	2b01      	cmp	r3, #1
 8006624:	d904      	bls.n	8006630 <dir_sdi+0x98>
 8006626:	693b      	ldr	r3, [r7, #16]
 8006628:	699b      	ldr	r3, [r3, #24]
 800662a:	697a      	ldr	r2, [r7, #20]
 800662c:	429a      	cmp	r2, r3
 800662e:	d301      	bcc.n	8006634 <dir_sdi+0x9c>
 8006630:	2302      	movs	r3, #2
 8006632:	e028      	b.n	8006686 <dir_sdi+0xee>
			ofs -= csz;
 8006634:	683a      	ldr	r2, [r7, #0]
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	1ad3      	subs	r3, r2, r3
 800663a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800663c:	683a      	ldr	r2, [r7, #0]
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	429a      	cmp	r2, r3
 8006642:	d2e1      	bcs.n	8006608 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8006644:	6979      	ldr	r1, [r7, #20]
 8006646:	6938      	ldr	r0, [r7, #16]
 8006648:	f7ff fcc2 	bl	8005fd0 <clust2sect>
 800664c:	4602      	mov	r2, r0
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	697a      	ldr	r2, [r7, #20]
 8006656:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	69db      	ldr	r3, [r3, #28]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d101      	bne.n	8006664 <dir_sdi+0xcc>
 8006660:	2302      	movs	r3, #2
 8006662:	e010      	b.n	8006686 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	69da      	ldr	r2, [r3, #28]
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	0a5b      	lsrs	r3, r3, #9
 800666c:	441a      	add	r2, r3
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8006672:	693b      	ldr	r3, [r7, #16]
 8006674:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800667e:	441a      	add	r2, r3
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006684:	2300      	movs	r3, #0
}
 8006686:	4618      	mov	r0, r3
 8006688:	3718      	adds	r7, #24
 800668a:	46bd      	mov	sp, r7
 800668c:	bd80      	pop	{r7, pc}

0800668e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800668e:	b580      	push	{r7, lr}
 8006690:	b086      	sub	sp, #24
 8006692:	af00      	add	r7, sp, #0
 8006694:	6078      	str	r0, [r7, #4]
 8006696:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	695b      	ldr	r3, [r3, #20]
 80066a2:	3320      	adds	r3, #32
 80066a4:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	69db      	ldr	r3, [r3, #28]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d003      	beq.n	80066b6 <dir_next+0x28>
 80066ae:	68bb      	ldr	r3, [r7, #8]
 80066b0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80066b4:	d301      	bcc.n	80066ba <dir_next+0x2c>
 80066b6:	2304      	movs	r3, #4
 80066b8:	e0aa      	b.n	8006810 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80066ba:	68bb      	ldr	r3, [r7, #8]
 80066bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	f040 8098 	bne.w	80067f6 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	69db      	ldr	r3, [r3, #28]
 80066ca:	1c5a      	adds	r2, r3, #1
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	699b      	ldr	r3, [r3, #24]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d10b      	bne.n	80066f0 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	095b      	lsrs	r3, r3, #5
 80066dc:	68fa      	ldr	r2, [r7, #12]
 80066de:	8912      	ldrh	r2, [r2, #8]
 80066e0:	4293      	cmp	r3, r2
 80066e2:	f0c0 8088 	bcc.w	80067f6 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2200      	movs	r2, #0
 80066ea:	61da      	str	r2, [r3, #28]
 80066ec:	2304      	movs	r3, #4
 80066ee:	e08f      	b.n	8006810 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	0a5b      	lsrs	r3, r3, #9
 80066f4:	68fa      	ldr	r2, [r7, #12]
 80066f6:	8952      	ldrh	r2, [r2, #10]
 80066f8:	3a01      	subs	r2, #1
 80066fa:	4013      	ands	r3, r2
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d17a      	bne.n	80067f6 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8006700:	687a      	ldr	r2, [r7, #4]
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	699b      	ldr	r3, [r3, #24]
 8006706:	4619      	mov	r1, r3
 8006708:	4610      	mov	r0, r2
 800670a:	f7ff fc80 	bl	800600e <get_fat>
 800670e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8006710:	697b      	ldr	r3, [r7, #20]
 8006712:	2b01      	cmp	r3, #1
 8006714:	d801      	bhi.n	800671a <dir_next+0x8c>
 8006716:	2302      	movs	r3, #2
 8006718:	e07a      	b.n	8006810 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800671a:	697b      	ldr	r3, [r7, #20]
 800671c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006720:	d101      	bne.n	8006726 <dir_next+0x98>
 8006722:	2301      	movs	r3, #1
 8006724:	e074      	b.n	8006810 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	699b      	ldr	r3, [r3, #24]
 800672a:	697a      	ldr	r2, [r7, #20]
 800672c:	429a      	cmp	r2, r3
 800672e:	d358      	bcc.n	80067e2 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d104      	bne.n	8006740 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2200      	movs	r2, #0
 800673a:	61da      	str	r2, [r3, #28]
 800673c:	2304      	movs	r3, #4
 800673e:	e067      	b.n	8006810 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8006740:	687a      	ldr	r2, [r7, #4]
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	699b      	ldr	r3, [r3, #24]
 8006746:	4619      	mov	r1, r3
 8006748:	4610      	mov	r0, r2
 800674a:	f7ff fe59 	bl	8006400 <create_chain>
 800674e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8006750:	697b      	ldr	r3, [r7, #20]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d101      	bne.n	800675a <dir_next+0xcc>
 8006756:	2307      	movs	r3, #7
 8006758:	e05a      	b.n	8006810 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800675a:	697b      	ldr	r3, [r7, #20]
 800675c:	2b01      	cmp	r3, #1
 800675e:	d101      	bne.n	8006764 <dir_next+0xd6>
 8006760:	2302      	movs	r3, #2
 8006762:	e055      	b.n	8006810 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006764:	697b      	ldr	r3, [r7, #20]
 8006766:	f1b3 3fff 	cmp.w	r3, #4294967295
 800676a:	d101      	bne.n	8006770 <dir_next+0xe2>
 800676c:	2301      	movs	r3, #1
 800676e:	e04f      	b.n	8006810 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8006770:	68f8      	ldr	r0, [r7, #12]
 8006772:	f7ff fb4d 	bl	8005e10 <sync_window>
 8006776:	4603      	mov	r3, r0
 8006778:	2b00      	cmp	r3, #0
 800677a:	d001      	beq.n	8006780 <dir_next+0xf2>
 800677c:	2301      	movs	r3, #1
 800677e:	e047      	b.n	8006810 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	3334      	adds	r3, #52	; 0x34
 8006784:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006788:	2100      	movs	r1, #0
 800678a:	4618      	mov	r0, r3
 800678c:	f7ff f977 	bl	8005a7e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006790:	2300      	movs	r3, #0
 8006792:	613b      	str	r3, [r7, #16]
 8006794:	6979      	ldr	r1, [r7, #20]
 8006796:	68f8      	ldr	r0, [r7, #12]
 8006798:	f7ff fc1a 	bl	8005fd0 <clust2sect>
 800679c:	4602      	mov	r2, r0
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	631a      	str	r2, [r3, #48]	; 0x30
 80067a2:	e012      	b.n	80067ca <dir_next+0x13c>
						fs->wflag = 1;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	2201      	movs	r2, #1
 80067a8:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80067aa:	68f8      	ldr	r0, [r7, #12]
 80067ac:	f7ff fb30 	bl	8005e10 <sync_window>
 80067b0:	4603      	mov	r3, r0
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d001      	beq.n	80067ba <dir_next+0x12c>
 80067b6:	2301      	movs	r3, #1
 80067b8:	e02a      	b.n	8006810 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80067ba:	693b      	ldr	r3, [r7, #16]
 80067bc:	3301      	adds	r3, #1
 80067be:	613b      	str	r3, [r7, #16]
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067c4:	1c5a      	adds	r2, r3, #1
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	631a      	str	r2, [r3, #48]	; 0x30
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	895b      	ldrh	r3, [r3, #10]
 80067ce:	461a      	mov	r2, r3
 80067d0:	693b      	ldr	r3, [r7, #16]
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d3e6      	bcc.n	80067a4 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80067da:	693b      	ldr	r3, [r7, #16]
 80067dc:	1ad2      	subs	r2, r2, r3
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	697a      	ldr	r2, [r7, #20]
 80067e6:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80067e8:	6979      	ldr	r1, [r7, #20]
 80067ea:	68f8      	ldr	r0, [r7, #12]
 80067ec:	f7ff fbf0 	bl	8005fd0 <clust2sect>
 80067f0:	4602      	mov	r2, r0
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	68ba      	ldr	r2, [r7, #8]
 80067fa:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8006802:	68bb      	ldr	r3, [r7, #8]
 8006804:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006808:	441a      	add	r2, r3
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800680e:	2300      	movs	r3, #0
}
 8006810:	4618      	mov	r0, r3
 8006812:	3718      	adds	r7, #24
 8006814:	46bd      	mov	sp, r7
 8006816:	bd80      	pop	{r7, pc}

08006818 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b086      	sub	sp, #24
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
 8006820:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8006828:	2100      	movs	r1, #0
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	f7ff feb4 	bl	8006598 <dir_sdi>
 8006830:	4603      	mov	r3, r0
 8006832:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006834:	7dfb      	ldrb	r3, [r7, #23]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d12b      	bne.n	8006892 <dir_alloc+0x7a>
		n = 0;
 800683a:	2300      	movs	r3, #0
 800683c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	69db      	ldr	r3, [r3, #28]
 8006842:	4619      	mov	r1, r3
 8006844:	68f8      	ldr	r0, [r7, #12]
 8006846:	f7ff fb27 	bl	8005e98 <move_window>
 800684a:	4603      	mov	r3, r0
 800684c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800684e:	7dfb      	ldrb	r3, [r7, #23]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d11d      	bne.n	8006890 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6a1b      	ldr	r3, [r3, #32]
 8006858:	781b      	ldrb	r3, [r3, #0]
 800685a:	2be5      	cmp	r3, #229	; 0xe5
 800685c:	d004      	beq.n	8006868 <dir_alloc+0x50>
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6a1b      	ldr	r3, [r3, #32]
 8006862:	781b      	ldrb	r3, [r3, #0]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d107      	bne.n	8006878 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8006868:	693b      	ldr	r3, [r7, #16]
 800686a:	3301      	adds	r3, #1
 800686c:	613b      	str	r3, [r7, #16]
 800686e:	693a      	ldr	r2, [r7, #16]
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	429a      	cmp	r2, r3
 8006874:	d102      	bne.n	800687c <dir_alloc+0x64>
 8006876:	e00c      	b.n	8006892 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8006878:	2300      	movs	r3, #0
 800687a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800687c:	2101      	movs	r1, #1
 800687e:	6878      	ldr	r0, [r7, #4]
 8006880:	f7ff ff05 	bl	800668e <dir_next>
 8006884:	4603      	mov	r3, r0
 8006886:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8006888:	7dfb      	ldrb	r3, [r7, #23]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d0d7      	beq.n	800683e <dir_alloc+0x26>
 800688e:	e000      	b.n	8006892 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8006890:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8006892:	7dfb      	ldrb	r3, [r7, #23]
 8006894:	2b04      	cmp	r3, #4
 8006896:	d101      	bne.n	800689c <dir_alloc+0x84>
 8006898:	2307      	movs	r3, #7
 800689a:	75fb      	strb	r3, [r7, #23]
	return res;
 800689c:	7dfb      	ldrb	r3, [r7, #23]
}
 800689e:	4618      	mov	r0, r3
 80068a0:	3718      	adds	r7, #24
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bd80      	pop	{r7, pc}

080068a6 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80068a6:	b580      	push	{r7, lr}
 80068a8:	b084      	sub	sp, #16
 80068aa:	af00      	add	r7, sp, #0
 80068ac:	6078      	str	r0, [r7, #4]
 80068ae:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	331a      	adds	r3, #26
 80068b4:	4618      	mov	r0, r3
 80068b6:	f7ff f83f 	bl	8005938 <ld_word>
 80068ba:	4603      	mov	r3, r0
 80068bc:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	781b      	ldrb	r3, [r3, #0]
 80068c2:	2b03      	cmp	r3, #3
 80068c4:	d109      	bne.n	80068da <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	3314      	adds	r3, #20
 80068ca:	4618      	mov	r0, r3
 80068cc:	f7ff f834 	bl	8005938 <ld_word>
 80068d0:	4603      	mov	r3, r0
 80068d2:	041b      	lsls	r3, r3, #16
 80068d4:	68fa      	ldr	r2, [r7, #12]
 80068d6:	4313      	orrs	r3, r2
 80068d8:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80068da:	68fb      	ldr	r3, [r7, #12]
}
 80068dc:	4618      	mov	r0, r3
 80068de:	3710      	adds	r7, #16
 80068e0:	46bd      	mov	sp, r7
 80068e2:	bd80      	pop	{r7, pc}

080068e4 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b084      	sub	sp, #16
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	60f8      	str	r0, [r7, #12]
 80068ec:	60b9      	str	r1, [r7, #8]
 80068ee:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80068f0:	68bb      	ldr	r3, [r7, #8]
 80068f2:	331a      	adds	r3, #26
 80068f4:	687a      	ldr	r2, [r7, #4]
 80068f6:	b292      	uxth	r2, r2
 80068f8:	4611      	mov	r1, r2
 80068fa:	4618      	mov	r0, r3
 80068fc:	f7ff f857 	bl	80059ae <st_word>
	if (fs->fs_type == FS_FAT32) {
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	781b      	ldrb	r3, [r3, #0]
 8006904:	2b03      	cmp	r3, #3
 8006906:	d109      	bne.n	800691c <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	f103 0214 	add.w	r2, r3, #20
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	0c1b      	lsrs	r3, r3, #16
 8006912:	b29b      	uxth	r3, r3
 8006914:	4619      	mov	r1, r3
 8006916:	4610      	mov	r0, r2
 8006918:	f7ff f849 	bl	80059ae <st_word>
	}
}
 800691c:	bf00      	nop
 800691e:	3710      	adds	r7, #16
 8006920:	46bd      	mov	sp, r7
 8006922:	bd80      	pop	{r7, pc}

08006924 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8006924:	b590      	push	{r4, r7, lr}
 8006926:	b087      	sub	sp, #28
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
 800692c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	331a      	adds	r3, #26
 8006932:	4618      	mov	r0, r3
 8006934:	f7ff f800 	bl	8005938 <ld_word>
 8006938:	4603      	mov	r3, r0
 800693a:	2b00      	cmp	r3, #0
 800693c:	d001      	beq.n	8006942 <cmp_lfn+0x1e>
 800693e:	2300      	movs	r3, #0
 8006940:	e059      	b.n	80069f6 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	781b      	ldrb	r3, [r3, #0]
 8006946:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800694a:	1e5a      	subs	r2, r3, #1
 800694c:	4613      	mov	r3, r2
 800694e:	005b      	lsls	r3, r3, #1
 8006950:	4413      	add	r3, r2
 8006952:	009b      	lsls	r3, r3, #2
 8006954:	4413      	add	r3, r2
 8006956:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8006958:	2301      	movs	r3, #1
 800695a:	81fb      	strh	r3, [r7, #14]
 800695c:	2300      	movs	r3, #0
 800695e:	613b      	str	r3, [r7, #16]
 8006960:	e033      	b.n	80069ca <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8006962:	4a27      	ldr	r2, [pc, #156]	; (8006a00 <cmp_lfn+0xdc>)
 8006964:	693b      	ldr	r3, [r7, #16]
 8006966:	4413      	add	r3, r2
 8006968:	781b      	ldrb	r3, [r3, #0]
 800696a:	461a      	mov	r2, r3
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	4413      	add	r3, r2
 8006970:	4618      	mov	r0, r3
 8006972:	f7fe ffe1 	bl	8005938 <ld_word>
 8006976:	4603      	mov	r3, r0
 8006978:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800697a:	89fb      	ldrh	r3, [r7, #14]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d01a      	beq.n	80069b6 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8006980:	697b      	ldr	r3, [r7, #20]
 8006982:	2bfe      	cmp	r3, #254	; 0xfe
 8006984:	d812      	bhi.n	80069ac <cmp_lfn+0x88>
 8006986:	89bb      	ldrh	r3, [r7, #12]
 8006988:	4618      	mov	r0, r3
 800698a:	f001 fd63 	bl	8008454 <ff_wtoupper>
 800698e:	4603      	mov	r3, r0
 8006990:	461c      	mov	r4, r3
 8006992:	697b      	ldr	r3, [r7, #20]
 8006994:	1c5a      	adds	r2, r3, #1
 8006996:	617a      	str	r2, [r7, #20]
 8006998:	005b      	lsls	r3, r3, #1
 800699a:	687a      	ldr	r2, [r7, #4]
 800699c:	4413      	add	r3, r2
 800699e:	881b      	ldrh	r3, [r3, #0]
 80069a0:	4618      	mov	r0, r3
 80069a2:	f001 fd57 	bl	8008454 <ff_wtoupper>
 80069a6:	4603      	mov	r3, r0
 80069a8:	429c      	cmp	r4, r3
 80069aa:	d001      	beq.n	80069b0 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 80069ac:	2300      	movs	r3, #0
 80069ae:	e022      	b.n	80069f6 <cmp_lfn+0xd2>
			}
			wc = uc;
 80069b0:	89bb      	ldrh	r3, [r7, #12]
 80069b2:	81fb      	strh	r3, [r7, #14]
 80069b4:	e006      	b.n	80069c4 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80069b6:	89bb      	ldrh	r3, [r7, #12]
 80069b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80069bc:	4293      	cmp	r3, r2
 80069be:	d001      	beq.n	80069c4 <cmp_lfn+0xa0>
 80069c0:	2300      	movs	r3, #0
 80069c2:	e018      	b.n	80069f6 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80069c4:	693b      	ldr	r3, [r7, #16]
 80069c6:	3301      	adds	r3, #1
 80069c8:	613b      	str	r3, [r7, #16]
 80069ca:	693b      	ldr	r3, [r7, #16]
 80069cc:	2b0c      	cmp	r3, #12
 80069ce:	d9c8      	bls.n	8006962 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	781b      	ldrb	r3, [r3, #0]
 80069d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d00b      	beq.n	80069f4 <cmp_lfn+0xd0>
 80069dc:	89fb      	ldrh	r3, [r7, #14]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d008      	beq.n	80069f4 <cmp_lfn+0xd0>
 80069e2:	697b      	ldr	r3, [r7, #20]
 80069e4:	005b      	lsls	r3, r3, #1
 80069e6:	687a      	ldr	r2, [r7, #4]
 80069e8:	4413      	add	r3, r2
 80069ea:	881b      	ldrh	r3, [r3, #0]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d001      	beq.n	80069f4 <cmp_lfn+0xd0>
 80069f0:	2300      	movs	r3, #0
 80069f2:	e000      	b.n	80069f6 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 80069f4:	2301      	movs	r3, #1
}
 80069f6:	4618      	mov	r0, r3
 80069f8:	371c      	adds	r7, #28
 80069fa:	46bd      	mov	sp, r7
 80069fc:	bd90      	pop	{r4, r7, pc}
 80069fe:	bf00      	nop
 8006a00:	080086d0 	.word	0x080086d0

08006a04 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b088      	sub	sp, #32
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	60f8      	str	r0, [r7, #12]
 8006a0c:	60b9      	str	r1, [r7, #8]
 8006a0e:	4611      	mov	r1, r2
 8006a10:	461a      	mov	r2, r3
 8006a12:	460b      	mov	r3, r1
 8006a14:	71fb      	strb	r3, [r7, #7]
 8006a16:	4613      	mov	r3, r2
 8006a18:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8006a1a:	68bb      	ldr	r3, [r7, #8]
 8006a1c:	330d      	adds	r3, #13
 8006a1e:	79ba      	ldrb	r2, [r7, #6]
 8006a20:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8006a22:	68bb      	ldr	r3, [r7, #8]
 8006a24:	330b      	adds	r3, #11
 8006a26:	220f      	movs	r2, #15
 8006a28:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8006a2a:	68bb      	ldr	r3, [r7, #8]
 8006a2c:	330c      	adds	r3, #12
 8006a2e:	2200      	movs	r2, #0
 8006a30:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	331a      	adds	r3, #26
 8006a36:	2100      	movs	r1, #0
 8006a38:	4618      	mov	r0, r3
 8006a3a:	f7fe ffb8 	bl	80059ae <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8006a3e:	79fb      	ldrb	r3, [r7, #7]
 8006a40:	1e5a      	subs	r2, r3, #1
 8006a42:	4613      	mov	r3, r2
 8006a44:	005b      	lsls	r3, r3, #1
 8006a46:	4413      	add	r3, r2
 8006a48:	009b      	lsls	r3, r3, #2
 8006a4a:	4413      	add	r3, r2
 8006a4c:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8006a4e:	2300      	movs	r3, #0
 8006a50:	82fb      	strh	r3, [r7, #22]
 8006a52:	2300      	movs	r3, #0
 8006a54:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8006a56:	8afb      	ldrh	r3, [r7, #22]
 8006a58:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d007      	beq.n	8006a70 <put_lfn+0x6c>
 8006a60:	69fb      	ldr	r3, [r7, #28]
 8006a62:	1c5a      	adds	r2, r3, #1
 8006a64:	61fa      	str	r2, [r7, #28]
 8006a66:	005b      	lsls	r3, r3, #1
 8006a68:	68fa      	ldr	r2, [r7, #12]
 8006a6a:	4413      	add	r3, r2
 8006a6c:	881b      	ldrh	r3, [r3, #0]
 8006a6e:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8006a70:	4a17      	ldr	r2, [pc, #92]	; (8006ad0 <put_lfn+0xcc>)
 8006a72:	69bb      	ldr	r3, [r7, #24]
 8006a74:	4413      	add	r3, r2
 8006a76:	781b      	ldrb	r3, [r3, #0]
 8006a78:	461a      	mov	r2, r3
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	4413      	add	r3, r2
 8006a7e:	8afa      	ldrh	r2, [r7, #22]
 8006a80:	4611      	mov	r1, r2
 8006a82:	4618      	mov	r0, r3
 8006a84:	f7fe ff93 	bl	80059ae <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8006a88:	8afb      	ldrh	r3, [r7, #22]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d102      	bne.n	8006a94 <put_lfn+0x90>
 8006a8e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006a92:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8006a94:	69bb      	ldr	r3, [r7, #24]
 8006a96:	3301      	adds	r3, #1
 8006a98:	61bb      	str	r3, [r7, #24]
 8006a9a:	69bb      	ldr	r3, [r7, #24]
 8006a9c:	2b0c      	cmp	r3, #12
 8006a9e:	d9da      	bls.n	8006a56 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8006aa0:	8afb      	ldrh	r3, [r7, #22]
 8006aa2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	d006      	beq.n	8006ab8 <put_lfn+0xb4>
 8006aaa:	69fb      	ldr	r3, [r7, #28]
 8006aac:	005b      	lsls	r3, r3, #1
 8006aae:	68fa      	ldr	r2, [r7, #12]
 8006ab0:	4413      	add	r3, r2
 8006ab2:	881b      	ldrh	r3, [r3, #0]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d103      	bne.n	8006ac0 <put_lfn+0xbc>
 8006ab8:	79fb      	ldrb	r3, [r7, #7]
 8006aba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006abe:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	79fa      	ldrb	r2, [r7, #7]
 8006ac4:	701a      	strb	r2, [r3, #0]
}
 8006ac6:	bf00      	nop
 8006ac8:	3720      	adds	r7, #32
 8006aca:	46bd      	mov	sp, r7
 8006acc:	bd80      	pop	{r7, pc}
 8006ace:	bf00      	nop
 8006ad0:	080086d0 	.word	0x080086d0

08006ad4 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b08c      	sub	sp, #48	; 0x30
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	60f8      	str	r0, [r7, #12]
 8006adc:	60b9      	str	r1, [r7, #8]
 8006ade:	607a      	str	r2, [r7, #4]
 8006ae0:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8006ae2:	220b      	movs	r2, #11
 8006ae4:	68b9      	ldr	r1, [r7, #8]
 8006ae6:	68f8      	ldr	r0, [r7, #12]
 8006ae8:	f7fe ffa8 	bl	8005a3c <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	2b05      	cmp	r3, #5
 8006af0:	d929      	bls.n	8006b46 <gen_numname+0x72>
		sr = seq;
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8006af6:	e020      	b.n	8006b3a <gen_numname+0x66>
			wc = *lfn++;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	1c9a      	adds	r2, r3, #2
 8006afc:	607a      	str	r2, [r7, #4]
 8006afe:	881b      	ldrh	r3, [r3, #0]
 8006b00:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8006b02:	2300      	movs	r3, #0
 8006b04:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b06:	e015      	b.n	8006b34 <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 8006b08:	69fb      	ldr	r3, [r7, #28]
 8006b0a:	005a      	lsls	r2, r3, #1
 8006b0c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006b0e:	f003 0301 	and.w	r3, r3, #1
 8006b12:	4413      	add	r3, r2
 8006b14:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8006b16:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006b18:	085b      	lsrs	r3, r3, #1
 8006b1a:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8006b1c:	69fb      	ldr	r3, [r7, #28]
 8006b1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d003      	beq.n	8006b2e <gen_numname+0x5a>
 8006b26:	69fa      	ldr	r2, [r7, #28]
 8006b28:	4b31      	ldr	r3, [pc, #196]	; (8006bf0 <gen_numname+0x11c>)
 8006b2a:	4053      	eors	r3, r2
 8006b2c:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8006b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b30:	3301      	adds	r3, #1
 8006b32:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b36:	2b0f      	cmp	r3, #15
 8006b38:	d9e6      	bls.n	8006b08 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	881b      	ldrh	r3, [r3, #0]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d1da      	bne.n	8006af8 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8006b42:	69fb      	ldr	r3, [r7, #28]
 8006b44:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8006b46:	2307      	movs	r3, #7
 8006b48:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	b2db      	uxtb	r3, r3
 8006b4e:	f003 030f 	and.w	r3, r3, #15
 8006b52:	b2db      	uxtb	r3, r3
 8006b54:	3330      	adds	r3, #48	; 0x30
 8006b56:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8006b5a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006b5e:	2b39      	cmp	r3, #57	; 0x39
 8006b60:	d904      	bls.n	8006b6c <gen_numname+0x98>
 8006b62:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006b66:	3307      	adds	r3, #7
 8006b68:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8006b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b6e:	1e5a      	subs	r2, r3, #1
 8006b70:	62ba      	str	r2, [r7, #40]	; 0x28
 8006b72:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8006b76:	4413      	add	r3, r2
 8006b78:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8006b7c:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	091b      	lsrs	r3, r3, #4
 8006b84:	603b      	str	r3, [r7, #0]
	} while (seq);
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d1de      	bne.n	8006b4a <gen_numname+0x76>
	ns[i] = '~';
 8006b8c:	f107 0214 	add.w	r2, r7, #20
 8006b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b92:	4413      	add	r3, r2
 8006b94:	227e      	movs	r2, #126	; 0x7e
 8006b96:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8006b98:	2300      	movs	r3, #0
 8006b9a:	627b      	str	r3, [r7, #36]	; 0x24
 8006b9c:	e002      	b.n	8006ba4 <gen_numname+0xd0>
 8006b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ba0:	3301      	adds	r3, #1
 8006ba2:	627b      	str	r3, [r7, #36]	; 0x24
 8006ba4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ba8:	429a      	cmp	r2, r3
 8006baa:	d205      	bcs.n	8006bb8 <gen_numname+0xe4>
 8006bac:	68fa      	ldr	r2, [r7, #12]
 8006bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bb0:	4413      	add	r3, r2
 8006bb2:	781b      	ldrb	r3, [r3, #0]
 8006bb4:	2b20      	cmp	r3, #32
 8006bb6:	d1f2      	bne.n	8006b9e <gen_numname+0xca>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8006bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bba:	2b07      	cmp	r3, #7
 8006bbc:	d808      	bhi.n	8006bd0 <gen_numname+0xfc>
 8006bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bc0:	1c5a      	adds	r2, r3, #1
 8006bc2:	62ba      	str	r2, [r7, #40]	; 0x28
 8006bc4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8006bc8:	4413      	add	r3, r2
 8006bca:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8006bce:	e000      	b.n	8006bd2 <gen_numname+0xfe>
 8006bd0:	2120      	movs	r1, #32
 8006bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bd4:	1c5a      	adds	r2, r3, #1
 8006bd6:	627a      	str	r2, [r7, #36]	; 0x24
 8006bd8:	68fa      	ldr	r2, [r7, #12]
 8006bda:	4413      	add	r3, r2
 8006bdc:	460a      	mov	r2, r1
 8006bde:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8006be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006be2:	2b07      	cmp	r3, #7
 8006be4:	d9e8      	bls.n	8006bb8 <gen_numname+0xe4>
}
 8006be6:	bf00      	nop
 8006be8:	bf00      	nop
 8006bea:	3730      	adds	r7, #48	; 0x30
 8006bec:	46bd      	mov	sp, r7
 8006bee:	bd80      	pop	{r7, pc}
 8006bf0:	00011021 	.word	0x00011021

08006bf4 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8006bf4:	b480      	push	{r7}
 8006bf6:	b085      	sub	sp, #20
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8006c00:	230b      	movs	r3, #11
 8006c02:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8006c04:	7bfb      	ldrb	r3, [r7, #15]
 8006c06:	b2da      	uxtb	r2, r3
 8006c08:	0852      	lsrs	r2, r2, #1
 8006c0a:	01db      	lsls	r3, r3, #7
 8006c0c:	4313      	orrs	r3, r2
 8006c0e:	b2da      	uxtb	r2, r3
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	1c59      	adds	r1, r3, #1
 8006c14:	6079      	str	r1, [r7, #4]
 8006c16:	781b      	ldrb	r3, [r3, #0]
 8006c18:	4413      	add	r3, r2
 8006c1a:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	3b01      	subs	r3, #1
 8006c20:	60bb      	str	r3, [r7, #8]
 8006c22:	68bb      	ldr	r3, [r7, #8]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d1ed      	bne.n	8006c04 <sum_sfn+0x10>
	return sum;
 8006c28:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	3714      	adds	r7, #20
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c34:	4770      	bx	lr

08006c36 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8006c36:	b580      	push	{r7, lr}
 8006c38:	b086      	sub	sp, #24
 8006c3a:	af00      	add	r7, sp, #0
 8006c3c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8006c44:	2100      	movs	r1, #0
 8006c46:	6878      	ldr	r0, [r7, #4]
 8006c48:	f7ff fca6 	bl	8006598 <dir_sdi>
 8006c4c:	4603      	mov	r3, r0
 8006c4e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8006c50:	7dfb      	ldrb	r3, [r7, #23]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d001      	beq.n	8006c5a <dir_find+0x24>
 8006c56:	7dfb      	ldrb	r3, [r7, #23]
 8006c58:	e0a9      	b.n	8006dae <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006c5a:	23ff      	movs	r3, #255	; 0xff
 8006c5c:	753b      	strb	r3, [r7, #20]
 8006c5e:	7d3b      	ldrb	r3, [r7, #20]
 8006c60:	757b      	strb	r3, [r7, #21]
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	f04f 32ff 	mov.w	r2, #4294967295
 8006c68:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	69db      	ldr	r3, [r3, #28]
 8006c6e:	4619      	mov	r1, r3
 8006c70:	6938      	ldr	r0, [r7, #16]
 8006c72:	f7ff f911 	bl	8005e98 <move_window>
 8006c76:	4603      	mov	r3, r0
 8006c78:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006c7a:	7dfb      	ldrb	r3, [r7, #23]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	f040 8090 	bne.w	8006da2 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6a1b      	ldr	r3, [r3, #32]
 8006c86:	781b      	ldrb	r3, [r3, #0]
 8006c88:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8006c8a:	7dbb      	ldrb	r3, [r7, #22]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d102      	bne.n	8006c96 <dir_find+0x60>
 8006c90:	2304      	movs	r3, #4
 8006c92:	75fb      	strb	r3, [r7, #23]
 8006c94:	e08a      	b.n	8006dac <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6a1b      	ldr	r3, [r3, #32]
 8006c9a:	330b      	adds	r3, #11
 8006c9c:	781b      	ldrb	r3, [r3, #0]
 8006c9e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006ca2:	73fb      	strb	r3, [r7, #15]
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	7bfa      	ldrb	r2, [r7, #15]
 8006ca8:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8006caa:	7dbb      	ldrb	r3, [r7, #22]
 8006cac:	2be5      	cmp	r3, #229	; 0xe5
 8006cae:	d007      	beq.n	8006cc0 <dir_find+0x8a>
 8006cb0:	7bfb      	ldrb	r3, [r7, #15]
 8006cb2:	f003 0308 	and.w	r3, r3, #8
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d009      	beq.n	8006cce <dir_find+0x98>
 8006cba:	7bfb      	ldrb	r3, [r7, #15]
 8006cbc:	2b0f      	cmp	r3, #15
 8006cbe:	d006      	beq.n	8006cce <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006cc0:	23ff      	movs	r3, #255	; 0xff
 8006cc2:	757b      	strb	r3, [r7, #21]
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	f04f 32ff 	mov.w	r2, #4294967295
 8006cca:	631a      	str	r2, [r3, #48]	; 0x30
 8006ccc:	e05e      	b.n	8006d8c <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8006cce:	7bfb      	ldrb	r3, [r7, #15]
 8006cd0:	2b0f      	cmp	r3, #15
 8006cd2:	d136      	bne.n	8006d42 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006cda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d154      	bne.n	8006d8c <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8006ce2:	7dbb      	ldrb	r3, [r7, #22]
 8006ce4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d00d      	beq.n	8006d08 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	6a1b      	ldr	r3, [r3, #32]
 8006cf0:	7b5b      	ldrb	r3, [r3, #13]
 8006cf2:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8006cf4:	7dbb      	ldrb	r3, [r7, #22]
 8006cf6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006cfa:	75bb      	strb	r3, [r7, #22]
 8006cfc:	7dbb      	ldrb	r3, [r7, #22]
 8006cfe:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	695a      	ldr	r2, [r3, #20]
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8006d08:	7dba      	ldrb	r2, [r7, #22]
 8006d0a:	7d7b      	ldrb	r3, [r7, #21]
 8006d0c:	429a      	cmp	r2, r3
 8006d0e:	d115      	bne.n	8006d3c <dir_find+0x106>
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	6a1b      	ldr	r3, [r3, #32]
 8006d14:	330d      	adds	r3, #13
 8006d16:	781b      	ldrb	r3, [r3, #0]
 8006d18:	7d3a      	ldrb	r2, [r7, #20]
 8006d1a:	429a      	cmp	r2, r3
 8006d1c:	d10e      	bne.n	8006d3c <dir_find+0x106>
 8006d1e:	693b      	ldr	r3, [r7, #16]
 8006d20:	68da      	ldr	r2, [r3, #12]
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	6a1b      	ldr	r3, [r3, #32]
 8006d26:	4619      	mov	r1, r3
 8006d28:	4610      	mov	r0, r2
 8006d2a:	f7ff fdfb 	bl	8006924 <cmp_lfn>
 8006d2e:	4603      	mov	r3, r0
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d003      	beq.n	8006d3c <dir_find+0x106>
 8006d34:	7d7b      	ldrb	r3, [r7, #21]
 8006d36:	3b01      	subs	r3, #1
 8006d38:	b2db      	uxtb	r3, r3
 8006d3a:	e000      	b.n	8006d3e <dir_find+0x108>
 8006d3c:	23ff      	movs	r3, #255	; 0xff
 8006d3e:	757b      	strb	r3, [r7, #21]
 8006d40:	e024      	b.n	8006d8c <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8006d42:	7d7b      	ldrb	r3, [r7, #21]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d109      	bne.n	8006d5c <dir_find+0x126>
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	6a1b      	ldr	r3, [r3, #32]
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	f7ff ff51 	bl	8006bf4 <sum_sfn>
 8006d52:	4603      	mov	r3, r0
 8006d54:	461a      	mov	r2, r3
 8006d56:	7d3b      	ldrb	r3, [r7, #20]
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d024      	beq.n	8006da6 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006d62:	f003 0301 	and.w	r3, r3, #1
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d10a      	bne.n	8006d80 <dir_find+0x14a>
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6a18      	ldr	r0, [r3, #32]
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	3324      	adds	r3, #36	; 0x24
 8006d72:	220b      	movs	r2, #11
 8006d74:	4619      	mov	r1, r3
 8006d76:	f7fe fe9d 	bl	8005ab4 <mem_cmp>
 8006d7a:	4603      	mov	r3, r0
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d014      	beq.n	8006daa <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006d80:	23ff      	movs	r3, #255	; 0xff
 8006d82:	757b      	strb	r3, [r7, #21]
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	f04f 32ff 	mov.w	r2, #4294967295
 8006d8a:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8006d8c:	2100      	movs	r1, #0
 8006d8e:	6878      	ldr	r0, [r7, #4]
 8006d90:	f7ff fc7d 	bl	800668e <dir_next>
 8006d94:	4603      	mov	r3, r0
 8006d96:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8006d98:	7dfb      	ldrb	r3, [r7, #23]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	f43f af65 	beq.w	8006c6a <dir_find+0x34>
 8006da0:	e004      	b.n	8006dac <dir_find+0x176>
		if (res != FR_OK) break;
 8006da2:	bf00      	nop
 8006da4:	e002      	b.n	8006dac <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8006da6:	bf00      	nop
 8006da8:	e000      	b.n	8006dac <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8006daa:	bf00      	nop

	return res;
 8006dac:	7dfb      	ldrb	r3, [r7, #23]
}
 8006dae:	4618      	mov	r0, r3
 8006db0:	3718      	adds	r7, #24
 8006db2:	46bd      	mov	sp, r7
 8006db4:	bd80      	pop	{r7, pc}
	...

08006db8 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b08c      	sub	sp, #48	; 0x30
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006dcc:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d001      	beq.n	8006dd8 <dir_register+0x20>
 8006dd4:	2306      	movs	r3, #6
 8006dd6:	e0e0      	b.n	8006f9a <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8006dd8:	2300      	movs	r3, #0
 8006dda:	627b      	str	r3, [r7, #36]	; 0x24
 8006ddc:	e002      	b.n	8006de4 <dir_register+0x2c>
 8006dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006de0:	3301      	adds	r3, #1
 8006de2:	627b      	str	r3, [r7, #36]	; 0x24
 8006de4:	69fb      	ldr	r3, [r7, #28]
 8006de6:	68da      	ldr	r2, [r3, #12]
 8006de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dea:	005b      	lsls	r3, r3, #1
 8006dec:	4413      	add	r3, r2
 8006dee:	881b      	ldrh	r3, [r3, #0]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d1f4      	bne.n	8006dde <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8006dfa:	f107 030c 	add.w	r3, r7, #12
 8006dfe:	220c      	movs	r2, #12
 8006e00:	4618      	mov	r0, r3
 8006e02:	f7fe fe1b 	bl	8005a3c <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8006e06:	7dfb      	ldrb	r3, [r7, #23]
 8006e08:	f003 0301 	and.w	r3, r3, #1
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d032      	beq.n	8006e76 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2240      	movs	r2, #64	; 0x40
 8006e14:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8006e18:	2301      	movs	r3, #1
 8006e1a:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e1c:	e016      	b.n	8006e4c <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8006e24:	69fb      	ldr	r3, [r7, #28]
 8006e26:	68da      	ldr	r2, [r3, #12]
 8006e28:	f107 010c 	add.w	r1, r7, #12
 8006e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e2e:	f7ff fe51 	bl	8006ad4 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8006e32:	6878      	ldr	r0, [r7, #4]
 8006e34:	f7ff feff 	bl	8006c36 <dir_find>
 8006e38:	4603      	mov	r3, r0
 8006e3a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8006e3e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d106      	bne.n	8006e54 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8006e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e48:	3301      	adds	r3, #1
 8006e4a:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e4e:	2b63      	cmp	r3, #99	; 0x63
 8006e50:	d9e5      	bls.n	8006e1e <dir_register+0x66>
 8006e52:	e000      	b.n	8006e56 <dir_register+0x9e>
			if (res != FR_OK) break;
 8006e54:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8006e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e58:	2b64      	cmp	r3, #100	; 0x64
 8006e5a:	d101      	bne.n	8006e60 <dir_register+0xa8>
 8006e5c:	2307      	movs	r3, #7
 8006e5e:	e09c      	b.n	8006f9a <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8006e60:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006e64:	2b04      	cmp	r3, #4
 8006e66:	d002      	beq.n	8006e6e <dir_register+0xb6>
 8006e68:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006e6c:	e095      	b.n	8006f9a <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8006e6e:	7dfa      	ldrb	r2, [r7, #23]
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8006e76:	7dfb      	ldrb	r3, [r7, #23]
 8006e78:	f003 0302 	and.w	r3, r3, #2
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d007      	beq.n	8006e90 <dir_register+0xd8>
 8006e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e82:	330c      	adds	r3, #12
 8006e84:	4a47      	ldr	r2, [pc, #284]	; (8006fa4 <dir_register+0x1ec>)
 8006e86:	fba2 2303 	umull	r2, r3, r2, r3
 8006e8a:	089b      	lsrs	r3, r3, #2
 8006e8c:	3301      	adds	r3, #1
 8006e8e:	e000      	b.n	8006e92 <dir_register+0xda>
 8006e90:	2301      	movs	r3, #1
 8006e92:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8006e94:	6a39      	ldr	r1, [r7, #32]
 8006e96:	6878      	ldr	r0, [r7, #4]
 8006e98:	f7ff fcbe 	bl	8006818 <dir_alloc>
 8006e9c:	4603      	mov	r3, r0
 8006e9e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8006ea2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d148      	bne.n	8006f3c <dir_register+0x184>
 8006eaa:	6a3b      	ldr	r3, [r7, #32]
 8006eac:	3b01      	subs	r3, #1
 8006eae:	623b      	str	r3, [r7, #32]
 8006eb0:	6a3b      	ldr	r3, [r7, #32]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d042      	beq.n	8006f3c <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	695a      	ldr	r2, [r3, #20]
 8006eba:	6a3b      	ldr	r3, [r7, #32]
 8006ebc:	015b      	lsls	r3, r3, #5
 8006ebe:	1ad3      	subs	r3, r2, r3
 8006ec0:	4619      	mov	r1, r3
 8006ec2:	6878      	ldr	r0, [r7, #4]
 8006ec4:	f7ff fb68 	bl	8006598 <dir_sdi>
 8006ec8:	4603      	mov	r3, r0
 8006eca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8006ece:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d132      	bne.n	8006f3c <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	3324      	adds	r3, #36	; 0x24
 8006eda:	4618      	mov	r0, r3
 8006edc:	f7ff fe8a 	bl	8006bf4 <sum_sfn>
 8006ee0:	4603      	mov	r3, r0
 8006ee2:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	69db      	ldr	r3, [r3, #28]
 8006ee8:	4619      	mov	r1, r3
 8006eea:	69f8      	ldr	r0, [r7, #28]
 8006eec:	f7fe ffd4 	bl	8005e98 <move_window>
 8006ef0:	4603      	mov	r3, r0
 8006ef2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8006ef6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d11d      	bne.n	8006f3a <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8006efe:	69fb      	ldr	r3, [r7, #28]
 8006f00:	68d8      	ldr	r0, [r3, #12]
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6a19      	ldr	r1, [r3, #32]
 8006f06:	6a3b      	ldr	r3, [r7, #32]
 8006f08:	b2da      	uxtb	r2, r3
 8006f0a:	7efb      	ldrb	r3, [r7, #27]
 8006f0c:	f7ff fd7a 	bl	8006a04 <put_lfn>
				fs->wflag = 1;
 8006f10:	69fb      	ldr	r3, [r7, #28]
 8006f12:	2201      	movs	r2, #1
 8006f14:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8006f16:	2100      	movs	r1, #0
 8006f18:	6878      	ldr	r0, [r7, #4]
 8006f1a:	f7ff fbb8 	bl	800668e <dir_next>
 8006f1e:	4603      	mov	r3, r0
 8006f20:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8006f24:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d107      	bne.n	8006f3c <dir_register+0x184>
 8006f2c:	6a3b      	ldr	r3, [r7, #32]
 8006f2e:	3b01      	subs	r3, #1
 8006f30:	623b      	str	r3, [r7, #32]
 8006f32:	6a3b      	ldr	r3, [r7, #32]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d1d5      	bne.n	8006ee4 <dir_register+0x12c>
 8006f38:	e000      	b.n	8006f3c <dir_register+0x184>
				if (res != FR_OK) break;
 8006f3a:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8006f3c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d128      	bne.n	8006f96 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	69db      	ldr	r3, [r3, #28]
 8006f48:	4619      	mov	r1, r3
 8006f4a:	69f8      	ldr	r0, [r7, #28]
 8006f4c:	f7fe ffa4 	bl	8005e98 <move_window>
 8006f50:	4603      	mov	r3, r0
 8006f52:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8006f56:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d11b      	bne.n	8006f96 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6a1b      	ldr	r3, [r3, #32]
 8006f62:	2220      	movs	r2, #32
 8006f64:	2100      	movs	r1, #0
 8006f66:	4618      	mov	r0, r3
 8006f68:	f7fe fd89 	bl	8005a7e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	6a18      	ldr	r0, [r3, #32]
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	3324      	adds	r3, #36	; 0x24
 8006f74:	220b      	movs	r2, #11
 8006f76:	4619      	mov	r1, r3
 8006f78:	f7fe fd60 	bl	8005a3c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6a1b      	ldr	r3, [r3, #32]
 8006f86:	330c      	adds	r3, #12
 8006f88:	f002 0218 	and.w	r2, r2, #24
 8006f8c:	b2d2      	uxtb	r2, r2
 8006f8e:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8006f90:	69fb      	ldr	r3, [r7, #28]
 8006f92:	2201      	movs	r2, #1
 8006f94:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8006f96:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	3730      	adds	r7, #48	; 0x30
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	bd80      	pop	{r7, pc}
 8006fa2:	bf00      	nop
 8006fa4:	4ec4ec4f 	.word	0x4ec4ec4f

08006fa8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b08a      	sub	sp, #40	; 0x28
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
 8006fb0:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	613b      	str	r3, [r7, #16]
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	68db      	ldr	r3, [r3, #12]
 8006fbe:	60fb      	str	r3, [r7, #12]
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	617b      	str	r3, [r7, #20]
 8006fc4:	697b      	ldr	r3, [r7, #20]
 8006fc6:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8006fc8:	69bb      	ldr	r3, [r7, #24]
 8006fca:	1c5a      	adds	r2, r3, #1
 8006fcc:	61ba      	str	r2, [r7, #24]
 8006fce:	693a      	ldr	r2, [r7, #16]
 8006fd0:	4413      	add	r3, r2
 8006fd2:	781b      	ldrb	r3, [r3, #0]
 8006fd4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8006fd6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006fd8:	2b1f      	cmp	r3, #31
 8006fda:	d940      	bls.n	800705e <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8006fdc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006fde:	2b2f      	cmp	r3, #47	; 0x2f
 8006fe0:	d006      	beq.n	8006ff0 <create_name+0x48>
 8006fe2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006fe4:	2b5c      	cmp	r3, #92	; 0x5c
 8006fe6:	d110      	bne.n	800700a <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8006fe8:	e002      	b.n	8006ff0 <create_name+0x48>
 8006fea:	69bb      	ldr	r3, [r7, #24]
 8006fec:	3301      	adds	r3, #1
 8006fee:	61bb      	str	r3, [r7, #24]
 8006ff0:	693a      	ldr	r2, [r7, #16]
 8006ff2:	69bb      	ldr	r3, [r7, #24]
 8006ff4:	4413      	add	r3, r2
 8006ff6:	781b      	ldrb	r3, [r3, #0]
 8006ff8:	2b2f      	cmp	r3, #47	; 0x2f
 8006ffa:	d0f6      	beq.n	8006fea <create_name+0x42>
 8006ffc:	693a      	ldr	r2, [r7, #16]
 8006ffe:	69bb      	ldr	r3, [r7, #24]
 8007000:	4413      	add	r3, r2
 8007002:	781b      	ldrb	r3, [r3, #0]
 8007004:	2b5c      	cmp	r3, #92	; 0x5c
 8007006:	d0f0      	beq.n	8006fea <create_name+0x42>
			break;
 8007008:	e02a      	b.n	8007060 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800700a:	697b      	ldr	r3, [r7, #20]
 800700c:	2bfe      	cmp	r3, #254	; 0xfe
 800700e:	d901      	bls.n	8007014 <create_name+0x6c>
 8007010:	2306      	movs	r3, #6
 8007012:	e177      	b.n	8007304 <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 8007014:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007016:	b2db      	uxtb	r3, r3
 8007018:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800701a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800701c:	2101      	movs	r1, #1
 800701e:	4618      	mov	r0, r3
 8007020:	f001 f9dc 	bl	80083dc <ff_convert>
 8007024:	4603      	mov	r3, r0
 8007026:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8007028:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800702a:	2b00      	cmp	r3, #0
 800702c:	d101      	bne.n	8007032 <create_name+0x8a>
 800702e:	2306      	movs	r3, #6
 8007030:	e168      	b.n	8007304 <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8007032:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007034:	2b7f      	cmp	r3, #127	; 0x7f
 8007036:	d809      	bhi.n	800704c <create_name+0xa4>
 8007038:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800703a:	4619      	mov	r1, r3
 800703c:	48b3      	ldr	r0, [pc, #716]	; (800730c <create_name+0x364>)
 800703e:	f7fe fd60 	bl	8005b02 <chk_chr>
 8007042:	4603      	mov	r3, r0
 8007044:	2b00      	cmp	r3, #0
 8007046:	d001      	beq.n	800704c <create_name+0xa4>
 8007048:	2306      	movs	r3, #6
 800704a:	e15b      	b.n	8007304 <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 800704c:	697b      	ldr	r3, [r7, #20]
 800704e:	1c5a      	adds	r2, r3, #1
 8007050:	617a      	str	r2, [r7, #20]
 8007052:	005b      	lsls	r3, r3, #1
 8007054:	68fa      	ldr	r2, [r7, #12]
 8007056:	4413      	add	r3, r2
 8007058:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800705a:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800705c:	e7b4      	b.n	8006fc8 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800705e:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8007060:	693a      	ldr	r2, [r7, #16]
 8007062:	69bb      	ldr	r3, [r7, #24]
 8007064:	441a      	add	r2, r3
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800706a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800706c:	2b1f      	cmp	r3, #31
 800706e:	d801      	bhi.n	8007074 <create_name+0xcc>
 8007070:	2304      	movs	r3, #4
 8007072:	e000      	b.n	8007076 <create_name+0xce>
 8007074:	2300      	movs	r3, #0
 8007076:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800707a:	e011      	b.n	80070a0 <create_name+0xf8>
		w = lfn[di - 1];
 800707c:	697a      	ldr	r2, [r7, #20]
 800707e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8007082:	4413      	add	r3, r2
 8007084:	005b      	lsls	r3, r3, #1
 8007086:	68fa      	ldr	r2, [r7, #12]
 8007088:	4413      	add	r3, r2
 800708a:	881b      	ldrh	r3, [r3, #0]
 800708c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800708e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007090:	2b20      	cmp	r3, #32
 8007092:	d002      	beq.n	800709a <create_name+0xf2>
 8007094:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007096:	2b2e      	cmp	r3, #46	; 0x2e
 8007098:	d106      	bne.n	80070a8 <create_name+0x100>
		di--;
 800709a:	697b      	ldr	r3, [r7, #20]
 800709c:	3b01      	subs	r3, #1
 800709e:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80070a0:	697b      	ldr	r3, [r7, #20]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d1ea      	bne.n	800707c <create_name+0xd4>
 80070a6:	e000      	b.n	80070aa <create_name+0x102>
		if (w != ' ' && w != '.') break;
 80070a8:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 80070aa:	697b      	ldr	r3, [r7, #20]
 80070ac:	005b      	lsls	r3, r3, #1
 80070ae:	68fa      	ldr	r2, [r7, #12]
 80070b0:	4413      	add	r3, r2
 80070b2:	2200      	movs	r2, #0
 80070b4:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 80070b6:	697b      	ldr	r3, [r7, #20]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d101      	bne.n	80070c0 <create_name+0x118>
 80070bc:	2306      	movs	r3, #6
 80070be:	e121      	b.n	8007304 <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	3324      	adds	r3, #36	; 0x24
 80070c4:	220b      	movs	r2, #11
 80070c6:	2120      	movs	r1, #32
 80070c8:	4618      	mov	r0, r3
 80070ca:	f7fe fcd8 	bl	8005a7e <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 80070ce:	2300      	movs	r3, #0
 80070d0:	61bb      	str	r3, [r7, #24]
 80070d2:	e002      	b.n	80070da <create_name+0x132>
 80070d4:	69bb      	ldr	r3, [r7, #24]
 80070d6:	3301      	adds	r3, #1
 80070d8:	61bb      	str	r3, [r7, #24]
 80070da:	69bb      	ldr	r3, [r7, #24]
 80070dc:	005b      	lsls	r3, r3, #1
 80070de:	68fa      	ldr	r2, [r7, #12]
 80070e0:	4413      	add	r3, r2
 80070e2:	881b      	ldrh	r3, [r3, #0]
 80070e4:	2b20      	cmp	r3, #32
 80070e6:	d0f5      	beq.n	80070d4 <create_name+0x12c>
 80070e8:	69bb      	ldr	r3, [r7, #24]
 80070ea:	005b      	lsls	r3, r3, #1
 80070ec:	68fa      	ldr	r2, [r7, #12]
 80070ee:	4413      	add	r3, r2
 80070f0:	881b      	ldrh	r3, [r3, #0]
 80070f2:	2b2e      	cmp	r3, #46	; 0x2e
 80070f4:	d0ee      	beq.n	80070d4 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 80070f6:	69bb      	ldr	r3, [r7, #24]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d009      	beq.n	8007110 <create_name+0x168>
 80070fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007100:	f043 0303 	orr.w	r3, r3, #3
 8007104:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8007108:	e002      	b.n	8007110 <create_name+0x168>
 800710a:	697b      	ldr	r3, [r7, #20]
 800710c:	3b01      	subs	r3, #1
 800710e:	617b      	str	r3, [r7, #20]
 8007110:	697b      	ldr	r3, [r7, #20]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d009      	beq.n	800712a <create_name+0x182>
 8007116:	697a      	ldr	r2, [r7, #20]
 8007118:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800711c:	4413      	add	r3, r2
 800711e:	005b      	lsls	r3, r3, #1
 8007120:	68fa      	ldr	r2, [r7, #12]
 8007122:	4413      	add	r3, r2
 8007124:	881b      	ldrh	r3, [r3, #0]
 8007126:	2b2e      	cmp	r3, #46	; 0x2e
 8007128:	d1ef      	bne.n	800710a <create_name+0x162>

	i = b = 0; ni = 8;
 800712a:	2300      	movs	r3, #0
 800712c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007130:	2300      	movs	r3, #0
 8007132:	623b      	str	r3, [r7, #32]
 8007134:	2308      	movs	r3, #8
 8007136:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8007138:	69bb      	ldr	r3, [r7, #24]
 800713a:	1c5a      	adds	r2, r3, #1
 800713c:	61ba      	str	r2, [r7, #24]
 800713e:	005b      	lsls	r3, r3, #1
 8007140:	68fa      	ldr	r2, [r7, #12]
 8007142:	4413      	add	r3, r2
 8007144:	881b      	ldrh	r3, [r3, #0]
 8007146:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8007148:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800714a:	2b00      	cmp	r3, #0
 800714c:	f000 8090 	beq.w	8007270 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8007150:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007152:	2b20      	cmp	r3, #32
 8007154:	d006      	beq.n	8007164 <create_name+0x1bc>
 8007156:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007158:	2b2e      	cmp	r3, #46	; 0x2e
 800715a:	d10a      	bne.n	8007172 <create_name+0x1ca>
 800715c:	69ba      	ldr	r2, [r7, #24]
 800715e:	697b      	ldr	r3, [r7, #20]
 8007160:	429a      	cmp	r2, r3
 8007162:	d006      	beq.n	8007172 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8007164:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007168:	f043 0303 	orr.w	r3, r3, #3
 800716c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007170:	e07d      	b.n	800726e <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8007172:	6a3a      	ldr	r2, [r7, #32]
 8007174:	69fb      	ldr	r3, [r7, #28]
 8007176:	429a      	cmp	r2, r3
 8007178:	d203      	bcs.n	8007182 <create_name+0x1da>
 800717a:	69ba      	ldr	r2, [r7, #24]
 800717c:	697b      	ldr	r3, [r7, #20]
 800717e:	429a      	cmp	r2, r3
 8007180:	d123      	bne.n	80071ca <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8007182:	69fb      	ldr	r3, [r7, #28]
 8007184:	2b0b      	cmp	r3, #11
 8007186:	d106      	bne.n	8007196 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8007188:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800718c:	f043 0303 	orr.w	r3, r3, #3
 8007190:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007194:	e06f      	b.n	8007276 <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8007196:	69ba      	ldr	r2, [r7, #24]
 8007198:	697b      	ldr	r3, [r7, #20]
 800719a:	429a      	cmp	r2, r3
 800719c:	d005      	beq.n	80071aa <create_name+0x202>
 800719e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80071a2:	f043 0303 	orr.w	r3, r3, #3
 80071a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 80071aa:	69ba      	ldr	r2, [r7, #24]
 80071ac:	697b      	ldr	r3, [r7, #20]
 80071ae:	429a      	cmp	r2, r3
 80071b0:	d860      	bhi.n	8007274 <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 80071b2:	697b      	ldr	r3, [r7, #20]
 80071b4:	61bb      	str	r3, [r7, #24]
 80071b6:	2308      	movs	r3, #8
 80071b8:	623b      	str	r3, [r7, #32]
 80071ba:	230b      	movs	r3, #11
 80071bc:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 80071be:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80071c2:	009b      	lsls	r3, r3, #2
 80071c4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80071c8:	e051      	b.n	800726e <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 80071ca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80071cc:	2b7f      	cmp	r3, #127	; 0x7f
 80071ce:	d914      	bls.n	80071fa <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 80071d0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80071d2:	2100      	movs	r1, #0
 80071d4:	4618      	mov	r0, r3
 80071d6:	f001 f901 	bl	80083dc <ff_convert>
 80071da:	4603      	mov	r3, r0
 80071dc:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 80071de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d004      	beq.n	80071ee <create_name+0x246>
 80071e4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80071e6:	3b80      	subs	r3, #128	; 0x80
 80071e8:	4a49      	ldr	r2, [pc, #292]	; (8007310 <create_name+0x368>)
 80071ea:	5cd3      	ldrb	r3, [r2, r3]
 80071ec:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 80071ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80071f2:	f043 0302 	orr.w	r3, r3, #2
 80071f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 80071fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d007      	beq.n	8007210 <create_name+0x268>
 8007200:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007202:	4619      	mov	r1, r3
 8007204:	4843      	ldr	r0, [pc, #268]	; (8007314 <create_name+0x36c>)
 8007206:	f7fe fc7c 	bl	8005b02 <chk_chr>
 800720a:	4603      	mov	r3, r0
 800720c:	2b00      	cmp	r3, #0
 800720e:	d008      	beq.n	8007222 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8007210:	235f      	movs	r3, #95	; 0x5f
 8007212:	84bb      	strh	r3, [r7, #36]	; 0x24
 8007214:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007218:	f043 0303 	orr.w	r3, r3, #3
 800721c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007220:	e01b      	b.n	800725a <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8007222:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007224:	2b40      	cmp	r3, #64	; 0x40
 8007226:	d909      	bls.n	800723c <create_name+0x294>
 8007228:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800722a:	2b5a      	cmp	r3, #90	; 0x5a
 800722c:	d806      	bhi.n	800723c <create_name+0x294>
					b |= 2;
 800722e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007232:	f043 0302 	orr.w	r3, r3, #2
 8007236:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800723a:	e00e      	b.n	800725a <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800723c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800723e:	2b60      	cmp	r3, #96	; 0x60
 8007240:	d90b      	bls.n	800725a <create_name+0x2b2>
 8007242:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007244:	2b7a      	cmp	r3, #122	; 0x7a
 8007246:	d808      	bhi.n	800725a <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8007248:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800724c:	f043 0301 	orr.w	r3, r3, #1
 8007250:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007254:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007256:	3b20      	subs	r3, #32
 8007258:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800725a:	6a3b      	ldr	r3, [r7, #32]
 800725c:	1c5a      	adds	r2, r3, #1
 800725e:	623a      	str	r2, [r7, #32]
 8007260:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007262:	b2d1      	uxtb	r1, r2
 8007264:	687a      	ldr	r2, [r7, #4]
 8007266:	4413      	add	r3, r2
 8007268:	460a      	mov	r2, r1
 800726a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800726e:	e763      	b.n	8007138 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8007270:	bf00      	nop
 8007272:	e000      	b.n	8007276 <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 8007274:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800727c:	2be5      	cmp	r3, #229	; 0xe5
 800727e:	d103      	bne.n	8007288 <create_name+0x2e0>
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2205      	movs	r2, #5
 8007284:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8007288:	69fb      	ldr	r3, [r7, #28]
 800728a:	2b08      	cmp	r3, #8
 800728c:	d104      	bne.n	8007298 <create_name+0x2f0>
 800728e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007292:	009b      	lsls	r3, r3, #2
 8007294:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8007298:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800729c:	f003 030c 	and.w	r3, r3, #12
 80072a0:	2b0c      	cmp	r3, #12
 80072a2:	d005      	beq.n	80072b0 <create_name+0x308>
 80072a4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80072a8:	f003 0303 	and.w	r3, r3, #3
 80072ac:	2b03      	cmp	r3, #3
 80072ae:	d105      	bne.n	80072bc <create_name+0x314>
 80072b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80072b4:	f043 0302 	orr.w	r3, r3, #2
 80072b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 80072bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80072c0:	f003 0302 	and.w	r3, r3, #2
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d117      	bne.n	80072f8 <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 80072c8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80072cc:	f003 0303 	and.w	r3, r3, #3
 80072d0:	2b01      	cmp	r3, #1
 80072d2:	d105      	bne.n	80072e0 <create_name+0x338>
 80072d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80072d8:	f043 0310 	orr.w	r3, r3, #16
 80072dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 80072e0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80072e4:	f003 030c 	and.w	r3, r3, #12
 80072e8:	2b04      	cmp	r3, #4
 80072ea:	d105      	bne.n	80072f8 <create_name+0x350>
 80072ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80072f0:	f043 0308 	orr.w	r3, r3, #8
 80072f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80072fe:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 8007302:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8007304:	4618      	mov	r0, r3
 8007306:	3728      	adds	r7, #40	; 0x28
 8007308:	46bd      	mov	sp, r7
 800730a:	bd80      	pop	{r7, pc}
 800730c:	080085dc 	.word	0x080085dc
 8007310:	08008650 	.word	0x08008650
 8007314:	080085e8 	.word	0x080085e8

08007318 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b086      	sub	sp, #24
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
 8007320:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8007326:	693b      	ldr	r3, [r7, #16]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800732c:	e002      	b.n	8007334 <follow_path+0x1c>
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	3301      	adds	r3, #1
 8007332:	603b      	str	r3, [r7, #0]
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	781b      	ldrb	r3, [r3, #0]
 8007338:	2b2f      	cmp	r3, #47	; 0x2f
 800733a:	d0f8      	beq.n	800732e <follow_path+0x16>
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	781b      	ldrb	r3, [r3, #0]
 8007340:	2b5c      	cmp	r3, #92	; 0x5c
 8007342:	d0f4      	beq.n	800732e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8007344:	693b      	ldr	r3, [r7, #16]
 8007346:	2200      	movs	r2, #0
 8007348:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800734a:	683b      	ldr	r3, [r7, #0]
 800734c:	781b      	ldrb	r3, [r3, #0]
 800734e:	2b1f      	cmp	r3, #31
 8007350:	d80a      	bhi.n	8007368 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2280      	movs	r2, #128	; 0x80
 8007356:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800735a:	2100      	movs	r1, #0
 800735c:	6878      	ldr	r0, [r7, #4]
 800735e:	f7ff f91b 	bl	8006598 <dir_sdi>
 8007362:	4603      	mov	r3, r0
 8007364:	75fb      	strb	r3, [r7, #23]
 8007366:	e043      	b.n	80073f0 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007368:	463b      	mov	r3, r7
 800736a:	4619      	mov	r1, r3
 800736c:	6878      	ldr	r0, [r7, #4]
 800736e:	f7ff fe1b 	bl	8006fa8 <create_name>
 8007372:	4603      	mov	r3, r0
 8007374:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007376:	7dfb      	ldrb	r3, [r7, #23]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d134      	bne.n	80073e6 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800737c:	6878      	ldr	r0, [r7, #4]
 800737e:	f7ff fc5a 	bl	8006c36 <dir_find>
 8007382:	4603      	mov	r3, r0
 8007384:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800738c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800738e:	7dfb      	ldrb	r3, [r7, #23]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d00a      	beq.n	80073aa <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8007394:	7dfb      	ldrb	r3, [r7, #23]
 8007396:	2b04      	cmp	r3, #4
 8007398:	d127      	bne.n	80073ea <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800739a:	7afb      	ldrb	r3, [r7, #11]
 800739c:	f003 0304 	and.w	r3, r3, #4
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d122      	bne.n	80073ea <follow_path+0xd2>
 80073a4:	2305      	movs	r3, #5
 80073a6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80073a8:	e01f      	b.n	80073ea <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80073aa:	7afb      	ldrb	r3, [r7, #11]
 80073ac:	f003 0304 	and.w	r3, r3, #4
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d11c      	bne.n	80073ee <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80073b4:	693b      	ldr	r3, [r7, #16]
 80073b6:	799b      	ldrb	r3, [r3, #6]
 80073b8:	f003 0310 	and.w	r3, r3, #16
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d102      	bne.n	80073c6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 80073c0:	2305      	movs	r3, #5
 80073c2:	75fb      	strb	r3, [r7, #23]
 80073c4:	e014      	b.n	80073f0 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	695b      	ldr	r3, [r3, #20]
 80073d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073d4:	4413      	add	r3, r2
 80073d6:	4619      	mov	r1, r3
 80073d8:	68f8      	ldr	r0, [r7, #12]
 80073da:	f7ff fa64 	bl	80068a6 <ld_clust>
 80073de:	4602      	mov	r2, r0
 80073e0:	693b      	ldr	r3, [r7, #16]
 80073e2:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80073e4:	e7c0      	b.n	8007368 <follow_path+0x50>
			if (res != FR_OK) break;
 80073e6:	bf00      	nop
 80073e8:	e002      	b.n	80073f0 <follow_path+0xd8>
				break;
 80073ea:	bf00      	nop
 80073ec:	e000      	b.n	80073f0 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80073ee:	bf00      	nop
			}
		}
	}

	return res;
 80073f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80073f2:	4618      	mov	r0, r3
 80073f4:	3718      	adds	r7, #24
 80073f6:	46bd      	mov	sp, r7
 80073f8:	bd80      	pop	{r7, pc}

080073fa <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80073fa:	b480      	push	{r7}
 80073fc:	b087      	sub	sp, #28
 80073fe:	af00      	add	r7, sp, #0
 8007400:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8007402:	f04f 33ff 	mov.w	r3, #4294967295
 8007406:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d031      	beq.n	8007474 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	617b      	str	r3, [r7, #20]
 8007416:	e002      	b.n	800741e <get_ldnumber+0x24>
 8007418:	697b      	ldr	r3, [r7, #20]
 800741a:	3301      	adds	r3, #1
 800741c:	617b      	str	r3, [r7, #20]
 800741e:	697b      	ldr	r3, [r7, #20]
 8007420:	781b      	ldrb	r3, [r3, #0]
 8007422:	2b1f      	cmp	r3, #31
 8007424:	d903      	bls.n	800742e <get_ldnumber+0x34>
 8007426:	697b      	ldr	r3, [r7, #20]
 8007428:	781b      	ldrb	r3, [r3, #0]
 800742a:	2b3a      	cmp	r3, #58	; 0x3a
 800742c:	d1f4      	bne.n	8007418 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800742e:	697b      	ldr	r3, [r7, #20]
 8007430:	781b      	ldrb	r3, [r3, #0]
 8007432:	2b3a      	cmp	r3, #58	; 0x3a
 8007434:	d11c      	bne.n	8007470 <get_ldnumber+0x76>
			tp = *path;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	1c5a      	adds	r2, r3, #1
 8007440:	60fa      	str	r2, [r7, #12]
 8007442:	781b      	ldrb	r3, [r3, #0]
 8007444:	3b30      	subs	r3, #48	; 0x30
 8007446:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8007448:	68bb      	ldr	r3, [r7, #8]
 800744a:	2b09      	cmp	r3, #9
 800744c:	d80e      	bhi.n	800746c <get_ldnumber+0x72>
 800744e:	68fa      	ldr	r2, [r7, #12]
 8007450:	697b      	ldr	r3, [r7, #20]
 8007452:	429a      	cmp	r2, r3
 8007454:	d10a      	bne.n	800746c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8007456:	68bb      	ldr	r3, [r7, #8]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d107      	bne.n	800746c <get_ldnumber+0x72>
					vol = (int)i;
 800745c:	68bb      	ldr	r3, [r7, #8]
 800745e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8007460:	697b      	ldr	r3, [r7, #20]
 8007462:	3301      	adds	r3, #1
 8007464:	617b      	str	r3, [r7, #20]
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	697a      	ldr	r2, [r7, #20]
 800746a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800746c:	693b      	ldr	r3, [r7, #16]
 800746e:	e002      	b.n	8007476 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8007470:	2300      	movs	r3, #0
 8007472:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8007474:	693b      	ldr	r3, [r7, #16]
}
 8007476:	4618      	mov	r0, r3
 8007478:	371c      	adds	r7, #28
 800747a:	46bd      	mov	sp, r7
 800747c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007480:	4770      	bx	lr
	...

08007484 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b082      	sub	sp, #8
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
 800748c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2200      	movs	r2, #0
 8007492:	70da      	strb	r2, [r3, #3]
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	f04f 32ff 	mov.w	r2, #4294967295
 800749a:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800749c:	6839      	ldr	r1, [r7, #0]
 800749e:	6878      	ldr	r0, [r7, #4]
 80074a0:	f7fe fcfa 	bl	8005e98 <move_window>
 80074a4:	4603      	mov	r3, r0
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d001      	beq.n	80074ae <check_fs+0x2a>
 80074aa:	2304      	movs	r3, #4
 80074ac:	e038      	b.n	8007520 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	3334      	adds	r3, #52	; 0x34
 80074b2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80074b6:	4618      	mov	r0, r3
 80074b8:	f7fe fa3e 	bl	8005938 <ld_word>
 80074bc:	4603      	mov	r3, r0
 80074be:	461a      	mov	r2, r3
 80074c0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80074c4:	429a      	cmp	r2, r3
 80074c6:	d001      	beq.n	80074cc <check_fs+0x48>
 80074c8:	2303      	movs	r3, #3
 80074ca:	e029      	b.n	8007520 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80074d2:	2be9      	cmp	r3, #233	; 0xe9
 80074d4:	d009      	beq.n	80074ea <check_fs+0x66>
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80074dc:	2beb      	cmp	r3, #235	; 0xeb
 80074de:	d11e      	bne.n	800751e <check_fs+0x9a>
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80074e6:	2b90      	cmp	r3, #144	; 0x90
 80074e8:	d119      	bne.n	800751e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	3334      	adds	r3, #52	; 0x34
 80074ee:	3336      	adds	r3, #54	; 0x36
 80074f0:	4618      	mov	r0, r3
 80074f2:	f7fe fa39 	bl	8005968 <ld_dword>
 80074f6:	4603      	mov	r3, r0
 80074f8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80074fc:	4a0a      	ldr	r2, [pc, #40]	; (8007528 <check_fs+0xa4>)
 80074fe:	4293      	cmp	r3, r2
 8007500:	d101      	bne.n	8007506 <check_fs+0x82>
 8007502:	2300      	movs	r3, #0
 8007504:	e00c      	b.n	8007520 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	3334      	adds	r3, #52	; 0x34
 800750a:	3352      	adds	r3, #82	; 0x52
 800750c:	4618      	mov	r0, r3
 800750e:	f7fe fa2b 	bl	8005968 <ld_dword>
 8007512:	4603      	mov	r3, r0
 8007514:	4a05      	ldr	r2, [pc, #20]	; (800752c <check_fs+0xa8>)
 8007516:	4293      	cmp	r3, r2
 8007518:	d101      	bne.n	800751e <check_fs+0x9a>
 800751a:	2300      	movs	r3, #0
 800751c:	e000      	b.n	8007520 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800751e:	2302      	movs	r3, #2
}
 8007520:	4618      	mov	r0, r3
 8007522:	3708      	adds	r7, #8
 8007524:	46bd      	mov	sp, r7
 8007526:	bd80      	pop	{r7, pc}
 8007528:	00544146 	.word	0x00544146
 800752c:	33544146 	.word	0x33544146

08007530 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8007530:	b580      	push	{r7, lr}
 8007532:	b096      	sub	sp, #88	; 0x58
 8007534:	af00      	add	r7, sp, #0
 8007536:	60f8      	str	r0, [r7, #12]
 8007538:	60b9      	str	r1, [r7, #8]
 800753a:	4613      	mov	r3, r2
 800753c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800753e:	68bb      	ldr	r3, [r7, #8]
 8007540:	2200      	movs	r2, #0
 8007542:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8007544:	68f8      	ldr	r0, [r7, #12]
 8007546:	f7ff ff58 	bl	80073fa <get_ldnumber>
 800754a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800754c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800754e:	2b00      	cmp	r3, #0
 8007550:	da01      	bge.n	8007556 <find_volume+0x26>
 8007552:	230b      	movs	r3, #11
 8007554:	e22e      	b.n	80079b4 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8007556:	4aa8      	ldr	r2, [pc, #672]	; (80077f8 <find_volume+0x2c8>)
 8007558:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800755a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800755e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8007560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007562:	2b00      	cmp	r3, #0
 8007564:	d101      	bne.n	800756a <find_volume+0x3a>
 8007566:	230c      	movs	r3, #12
 8007568:	e224      	b.n	80079b4 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800756a:	68bb      	ldr	r3, [r7, #8]
 800756c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800756e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8007570:	79fb      	ldrb	r3, [r7, #7]
 8007572:	f023 0301 	bic.w	r3, r3, #1
 8007576:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8007578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800757a:	781b      	ldrb	r3, [r3, #0]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d01a      	beq.n	80075b6 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8007580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007582:	785b      	ldrb	r3, [r3, #1]
 8007584:	4618      	mov	r0, r3
 8007586:	f7fe f939 	bl	80057fc <disk_status>
 800758a:	4603      	mov	r3, r0
 800758c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8007590:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007594:	f003 0301 	and.w	r3, r3, #1
 8007598:	2b00      	cmp	r3, #0
 800759a:	d10c      	bne.n	80075b6 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800759c:	79fb      	ldrb	r3, [r7, #7]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d007      	beq.n	80075b2 <find_volume+0x82>
 80075a2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80075a6:	f003 0304 	and.w	r3, r3, #4
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d001      	beq.n	80075b2 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80075ae:	230a      	movs	r3, #10
 80075b0:	e200      	b.n	80079b4 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 80075b2:	2300      	movs	r3, #0
 80075b4:	e1fe      	b.n	80079b4 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80075b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075b8:	2200      	movs	r2, #0
 80075ba:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80075bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075be:	b2da      	uxtb	r2, r3
 80075c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075c2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80075c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075c6:	785b      	ldrb	r3, [r3, #1]
 80075c8:	4618      	mov	r0, r3
 80075ca:	f7fe f931 	bl	8005830 <disk_initialize>
 80075ce:	4603      	mov	r3, r0
 80075d0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80075d4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80075d8:	f003 0301 	and.w	r3, r3, #1
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d001      	beq.n	80075e4 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80075e0:	2303      	movs	r3, #3
 80075e2:	e1e7      	b.n	80079b4 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80075e4:	79fb      	ldrb	r3, [r7, #7]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d007      	beq.n	80075fa <find_volume+0xca>
 80075ea:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80075ee:	f003 0304 	and.w	r3, r3, #4
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d001      	beq.n	80075fa <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80075f6:	230a      	movs	r3, #10
 80075f8:	e1dc      	b.n	80079b4 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80075fa:	2300      	movs	r3, #0
 80075fc:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80075fe:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007600:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007602:	f7ff ff3f 	bl	8007484 <check_fs>
 8007606:	4603      	mov	r3, r0
 8007608:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800760c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007610:	2b02      	cmp	r3, #2
 8007612:	d14b      	bne.n	80076ac <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007614:	2300      	movs	r3, #0
 8007616:	643b      	str	r3, [r7, #64]	; 0x40
 8007618:	e01f      	b.n	800765a <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800761a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800761c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8007620:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007622:	011b      	lsls	r3, r3, #4
 8007624:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8007628:	4413      	add	r3, r2
 800762a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800762c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800762e:	3304      	adds	r3, #4
 8007630:	781b      	ldrb	r3, [r3, #0]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d006      	beq.n	8007644 <find_volume+0x114>
 8007636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007638:	3308      	adds	r3, #8
 800763a:	4618      	mov	r0, r3
 800763c:	f7fe f994 	bl	8005968 <ld_dword>
 8007640:	4602      	mov	r2, r0
 8007642:	e000      	b.n	8007646 <find_volume+0x116>
 8007644:	2200      	movs	r2, #0
 8007646:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007648:	009b      	lsls	r3, r3, #2
 800764a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800764e:	440b      	add	r3, r1
 8007650:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007654:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007656:	3301      	adds	r3, #1
 8007658:	643b      	str	r3, [r7, #64]	; 0x40
 800765a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800765c:	2b03      	cmp	r3, #3
 800765e:	d9dc      	bls.n	800761a <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8007660:	2300      	movs	r3, #0
 8007662:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8007664:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007666:	2b00      	cmp	r3, #0
 8007668:	d002      	beq.n	8007670 <find_volume+0x140>
 800766a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800766c:	3b01      	subs	r3, #1
 800766e:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8007670:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007672:	009b      	lsls	r3, r3, #2
 8007674:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8007678:	4413      	add	r3, r2
 800767a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800767e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8007680:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007682:	2b00      	cmp	r3, #0
 8007684:	d005      	beq.n	8007692 <find_volume+0x162>
 8007686:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007688:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800768a:	f7ff fefb 	bl	8007484 <check_fs>
 800768e:	4603      	mov	r3, r0
 8007690:	e000      	b.n	8007694 <find_volume+0x164>
 8007692:	2303      	movs	r3, #3
 8007694:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8007698:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800769c:	2b01      	cmp	r3, #1
 800769e:	d905      	bls.n	80076ac <find_volume+0x17c>
 80076a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80076a2:	3301      	adds	r3, #1
 80076a4:	643b      	str	r3, [r7, #64]	; 0x40
 80076a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80076a8:	2b03      	cmp	r3, #3
 80076aa:	d9e1      	bls.n	8007670 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80076ac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80076b0:	2b04      	cmp	r3, #4
 80076b2:	d101      	bne.n	80076b8 <find_volume+0x188>
 80076b4:	2301      	movs	r3, #1
 80076b6:	e17d      	b.n	80079b4 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80076b8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80076bc:	2b01      	cmp	r3, #1
 80076be:	d901      	bls.n	80076c4 <find_volume+0x194>
 80076c0:	230d      	movs	r3, #13
 80076c2:	e177      	b.n	80079b4 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80076c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076c6:	3334      	adds	r3, #52	; 0x34
 80076c8:	330b      	adds	r3, #11
 80076ca:	4618      	mov	r0, r3
 80076cc:	f7fe f934 	bl	8005938 <ld_word>
 80076d0:	4603      	mov	r3, r0
 80076d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80076d6:	d001      	beq.n	80076dc <find_volume+0x1ac>
 80076d8:	230d      	movs	r3, #13
 80076da:	e16b      	b.n	80079b4 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80076dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076de:	3334      	adds	r3, #52	; 0x34
 80076e0:	3316      	adds	r3, #22
 80076e2:	4618      	mov	r0, r3
 80076e4:	f7fe f928 	bl	8005938 <ld_word>
 80076e8:	4603      	mov	r3, r0
 80076ea:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80076ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d106      	bne.n	8007700 <find_volume+0x1d0>
 80076f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076f4:	3334      	adds	r3, #52	; 0x34
 80076f6:	3324      	adds	r3, #36	; 0x24
 80076f8:	4618      	mov	r0, r3
 80076fa:	f7fe f935 	bl	8005968 <ld_dword>
 80076fe:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8007700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007702:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007704:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8007706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007708:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800770c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800770e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8007710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007712:	789b      	ldrb	r3, [r3, #2]
 8007714:	2b01      	cmp	r3, #1
 8007716:	d005      	beq.n	8007724 <find_volume+0x1f4>
 8007718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800771a:	789b      	ldrb	r3, [r3, #2]
 800771c:	2b02      	cmp	r3, #2
 800771e:	d001      	beq.n	8007724 <find_volume+0x1f4>
 8007720:	230d      	movs	r3, #13
 8007722:	e147      	b.n	80079b4 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8007724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007726:	789b      	ldrb	r3, [r3, #2]
 8007728:	461a      	mov	r2, r3
 800772a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800772c:	fb02 f303 	mul.w	r3, r2, r3
 8007730:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8007732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007734:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007738:	b29a      	uxth	r2, r3
 800773a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800773c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800773e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007740:	895b      	ldrh	r3, [r3, #10]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d008      	beq.n	8007758 <find_volume+0x228>
 8007746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007748:	895b      	ldrh	r3, [r3, #10]
 800774a:	461a      	mov	r2, r3
 800774c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800774e:	895b      	ldrh	r3, [r3, #10]
 8007750:	3b01      	subs	r3, #1
 8007752:	4013      	ands	r3, r2
 8007754:	2b00      	cmp	r3, #0
 8007756:	d001      	beq.n	800775c <find_volume+0x22c>
 8007758:	230d      	movs	r3, #13
 800775a:	e12b      	b.n	80079b4 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800775c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800775e:	3334      	adds	r3, #52	; 0x34
 8007760:	3311      	adds	r3, #17
 8007762:	4618      	mov	r0, r3
 8007764:	f7fe f8e8 	bl	8005938 <ld_word>
 8007768:	4603      	mov	r3, r0
 800776a:	461a      	mov	r2, r3
 800776c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800776e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8007770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007772:	891b      	ldrh	r3, [r3, #8]
 8007774:	f003 030f 	and.w	r3, r3, #15
 8007778:	b29b      	uxth	r3, r3
 800777a:	2b00      	cmp	r3, #0
 800777c:	d001      	beq.n	8007782 <find_volume+0x252>
 800777e:	230d      	movs	r3, #13
 8007780:	e118      	b.n	80079b4 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8007782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007784:	3334      	adds	r3, #52	; 0x34
 8007786:	3313      	adds	r3, #19
 8007788:	4618      	mov	r0, r3
 800778a:	f7fe f8d5 	bl	8005938 <ld_word>
 800778e:	4603      	mov	r3, r0
 8007790:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8007792:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007794:	2b00      	cmp	r3, #0
 8007796:	d106      	bne.n	80077a6 <find_volume+0x276>
 8007798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800779a:	3334      	adds	r3, #52	; 0x34
 800779c:	3320      	adds	r3, #32
 800779e:	4618      	mov	r0, r3
 80077a0:	f7fe f8e2 	bl	8005968 <ld_dword>
 80077a4:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80077a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077a8:	3334      	adds	r3, #52	; 0x34
 80077aa:	330e      	adds	r3, #14
 80077ac:	4618      	mov	r0, r3
 80077ae:	f7fe f8c3 	bl	8005938 <ld_word>
 80077b2:	4603      	mov	r3, r0
 80077b4:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80077b6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d101      	bne.n	80077c0 <find_volume+0x290>
 80077bc:	230d      	movs	r3, #13
 80077be:	e0f9      	b.n	80079b4 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80077c0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80077c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077c4:	4413      	add	r3, r2
 80077c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80077c8:	8912      	ldrh	r2, [r2, #8]
 80077ca:	0912      	lsrs	r2, r2, #4
 80077cc:	b292      	uxth	r2, r2
 80077ce:	4413      	add	r3, r2
 80077d0:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80077d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80077d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077d6:	429a      	cmp	r2, r3
 80077d8:	d201      	bcs.n	80077de <find_volume+0x2ae>
 80077da:	230d      	movs	r3, #13
 80077dc:	e0ea      	b.n	80079b4 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80077de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80077e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077e2:	1ad3      	subs	r3, r2, r3
 80077e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80077e6:	8952      	ldrh	r2, [r2, #10]
 80077e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80077ec:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80077ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d103      	bne.n	80077fc <find_volume+0x2cc>
 80077f4:	230d      	movs	r3, #13
 80077f6:	e0dd      	b.n	80079b4 <find_volume+0x484>
 80077f8:	20000148 	.word	0x20000148
		fmt = FS_FAT32;
 80077fc:	2303      	movs	r3, #3
 80077fe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8007802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007804:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8007808:	4293      	cmp	r3, r2
 800780a:	d802      	bhi.n	8007812 <find_volume+0x2e2>
 800780c:	2302      	movs	r3, #2
 800780e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8007812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007814:	f640 72f5 	movw	r2, #4085	; 0xff5
 8007818:	4293      	cmp	r3, r2
 800781a:	d802      	bhi.n	8007822 <find_volume+0x2f2>
 800781c:	2301      	movs	r3, #1
 800781e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8007822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007824:	1c9a      	adds	r2, r3, #2
 8007826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007828:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800782a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800782c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800782e:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8007830:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007832:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007834:	441a      	add	r2, r3
 8007836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007838:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800783a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800783c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800783e:	441a      	add	r2, r3
 8007840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007842:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8007844:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007848:	2b03      	cmp	r3, #3
 800784a:	d11e      	bne.n	800788a <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800784c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800784e:	3334      	adds	r3, #52	; 0x34
 8007850:	332a      	adds	r3, #42	; 0x2a
 8007852:	4618      	mov	r0, r3
 8007854:	f7fe f870 	bl	8005938 <ld_word>
 8007858:	4603      	mov	r3, r0
 800785a:	2b00      	cmp	r3, #0
 800785c:	d001      	beq.n	8007862 <find_volume+0x332>
 800785e:	230d      	movs	r3, #13
 8007860:	e0a8      	b.n	80079b4 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8007862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007864:	891b      	ldrh	r3, [r3, #8]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d001      	beq.n	800786e <find_volume+0x33e>
 800786a:	230d      	movs	r3, #13
 800786c:	e0a2      	b.n	80079b4 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800786e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007870:	3334      	adds	r3, #52	; 0x34
 8007872:	332c      	adds	r3, #44	; 0x2c
 8007874:	4618      	mov	r0, r3
 8007876:	f7fe f877 	bl	8005968 <ld_dword>
 800787a:	4602      	mov	r2, r0
 800787c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800787e:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8007880:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007882:	699b      	ldr	r3, [r3, #24]
 8007884:	009b      	lsls	r3, r3, #2
 8007886:	647b      	str	r3, [r7, #68]	; 0x44
 8007888:	e01f      	b.n	80078ca <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800788a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800788c:	891b      	ldrh	r3, [r3, #8]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d101      	bne.n	8007896 <find_volume+0x366>
 8007892:	230d      	movs	r3, #13
 8007894:	e08e      	b.n	80079b4 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8007896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007898:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800789a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800789c:	441a      	add	r2, r3
 800789e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078a0:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80078a2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80078a6:	2b02      	cmp	r3, #2
 80078a8:	d103      	bne.n	80078b2 <find_volume+0x382>
 80078aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078ac:	699b      	ldr	r3, [r3, #24]
 80078ae:	005b      	lsls	r3, r3, #1
 80078b0:	e00a      	b.n	80078c8 <find_volume+0x398>
 80078b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078b4:	699a      	ldr	r2, [r3, #24]
 80078b6:	4613      	mov	r3, r2
 80078b8:	005b      	lsls	r3, r3, #1
 80078ba:	4413      	add	r3, r2
 80078bc:	085a      	lsrs	r2, r3, #1
 80078be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078c0:	699b      	ldr	r3, [r3, #24]
 80078c2:	f003 0301 	and.w	r3, r3, #1
 80078c6:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80078c8:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80078ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078cc:	69da      	ldr	r2, [r3, #28]
 80078ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80078d0:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80078d4:	0a5b      	lsrs	r3, r3, #9
 80078d6:	429a      	cmp	r2, r3
 80078d8:	d201      	bcs.n	80078de <find_volume+0x3ae>
 80078da:	230d      	movs	r3, #13
 80078dc:	e06a      	b.n	80079b4 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80078de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078e0:	f04f 32ff 	mov.w	r2, #4294967295
 80078e4:	615a      	str	r2, [r3, #20]
 80078e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078e8:	695a      	ldr	r2, [r3, #20]
 80078ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078ec:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 80078ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078f0:	2280      	movs	r2, #128	; 0x80
 80078f2:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80078f4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80078f8:	2b03      	cmp	r3, #3
 80078fa:	d149      	bne.n	8007990 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80078fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078fe:	3334      	adds	r3, #52	; 0x34
 8007900:	3330      	adds	r3, #48	; 0x30
 8007902:	4618      	mov	r0, r3
 8007904:	f7fe f818 	bl	8005938 <ld_word>
 8007908:	4603      	mov	r3, r0
 800790a:	2b01      	cmp	r3, #1
 800790c:	d140      	bne.n	8007990 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 800790e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007910:	3301      	adds	r3, #1
 8007912:	4619      	mov	r1, r3
 8007914:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007916:	f7fe fabf 	bl	8005e98 <move_window>
 800791a:	4603      	mov	r3, r0
 800791c:	2b00      	cmp	r3, #0
 800791e:	d137      	bne.n	8007990 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 8007920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007922:	2200      	movs	r2, #0
 8007924:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8007926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007928:	3334      	adds	r3, #52	; 0x34
 800792a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800792e:	4618      	mov	r0, r3
 8007930:	f7fe f802 	bl	8005938 <ld_word>
 8007934:	4603      	mov	r3, r0
 8007936:	461a      	mov	r2, r3
 8007938:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800793c:	429a      	cmp	r2, r3
 800793e:	d127      	bne.n	8007990 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8007940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007942:	3334      	adds	r3, #52	; 0x34
 8007944:	4618      	mov	r0, r3
 8007946:	f7fe f80f 	bl	8005968 <ld_dword>
 800794a:	4603      	mov	r3, r0
 800794c:	4a1b      	ldr	r2, [pc, #108]	; (80079bc <find_volume+0x48c>)
 800794e:	4293      	cmp	r3, r2
 8007950:	d11e      	bne.n	8007990 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8007952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007954:	3334      	adds	r3, #52	; 0x34
 8007956:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800795a:	4618      	mov	r0, r3
 800795c:	f7fe f804 	bl	8005968 <ld_dword>
 8007960:	4603      	mov	r3, r0
 8007962:	4a17      	ldr	r2, [pc, #92]	; (80079c0 <find_volume+0x490>)
 8007964:	4293      	cmp	r3, r2
 8007966:	d113      	bne.n	8007990 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8007968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800796a:	3334      	adds	r3, #52	; 0x34
 800796c:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8007970:	4618      	mov	r0, r3
 8007972:	f7fd fff9 	bl	8005968 <ld_dword>
 8007976:	4602      	mov	r2, r0
 8007978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800797a:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800797c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800797e:	3334      	adds	r3, #52	; 0x34
 8007980:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8007984:	4618      	mov	r0, r3
 8007986:	f7fd ffef 	bl	8005968 <ld_dword>
 800798a:	4602      	mov	r2, r0
 800798c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800798e:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8007990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007992:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8007996:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8007998:	4b0a      	ldr	r3, [pc, #40]	; (80079c4 <find_volume+0x494>)
 800799a:	881b      	ldrh	r3, [r3, #0]
 800799c:	3301      	adds	r3, #1
 800799e:	b29a      	uxth	r2, r3
 80079a0:	4b08      	ldr	r3, [pc, #32]	; (80079c4 <find_volume+0x494>)
 80079a2:	801a      	strh	r2, [r3, #0]
 80079a4:	4b07      	ldr	r3, [pc, #28]	; (80079c4 <find_volume+0x494>)
 80079a6:	881a      	ldrh	r2, [r3, #0]
 80079a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079aa:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80079ac:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80079ae:	f7fe fa0b 	bl	8005dc8 <clear_lock>
#endif
	return FR_OK;
 80079b2:	2300      	movs	r3, #0
}
 80079b4:	4618      	mov	r0, r3
 80079b6:	3758      	adds	r7, #88	; 0x58
 80079b8:	46bd      	mov	sp, r7
 80079ba:	bd80      	pop	{r7, pc}
 80079bc:	41615252 	.word	0x41615252
 80079c0:	61417272 	.word	0x61417272
 80079c4:	2000014c 	.word	0x2000014c

080079c8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b084      	sub	sp, #16
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
 80079d0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80079d2:	2309      	movs	r3, #9
 80079d4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d01c      	beq.n	8007a16 <validate+0x4e>
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d018      	beq.n	8007a16 <validate+0x4e>
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	781b      	ldrb	r3, [r3, #0]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d013      	beq.n	8007a16 <validate+0x4e>
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	889a      	ldrh	r2, [r3, #4]
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	88db      	ldrh	r3, [r3, #6]
 80079f8:	429a      	cmp	r2, r3
 80079fa:	d10c      	bne.n	8007a16 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	785b      	ldrb	r3, [r3, #1]
 8007a02:	4618      	mov	r0, r3
 8007a04:	f7fd fefa 	bl	80057fc <disk_status>
 8007a08:	4603      	mov	r3, r0
 8007a0a:	f003 0301 	and.w	r3, r3, #1
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d101      	bne.n	8007a16 <validate+0x4e>
			res = FR_OK;
 8007a12:	2300      	movs	r3, #0
 8007a14:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8007a16:	7bfb      	ldrb	r3, [r7, #15]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d102      	bne.n	8007a22 <validate+0x5a>
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	e000      	b.n	8007a24 <validate+0x5c>
 8007a22:	2300      	movs	r3, #0
 8007a24:	683a      	ldr	r2, [r7, #0]
 8007a26:	6013      	str	r3, [r2, #0]
	return res;
 8007a28:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	3710      	adds	r7, #16
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	bd80      	pop	{r7, pc}
	...

08007a34 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8007a34:	b580      	push	{r7, lr}
 8007a36:	b088      	sub	sp, #32
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	60f8      	str	r0, [r7, #12]
 8007a3c:	60b9      	str	r1, [r7, #8]
 8007a3e:	4613      	mov	r3, r2
 8007a40:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8007a42:	68bb      	ldr	r3, [r7, #8]
 8007a44:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8007a46:	f107 0310 	add.w	r3, r7, #16
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	f7ff fcd5 	bl	80073fa <get_ldnumber>
 8007a50:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8007a52:	69fb      	ldr	r3, [r7, #28]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	da01      	bge.n	8007a5c <f_mount+0x28>
 8007a58:	230b      	movs	r3, #11
 8007a5a:	e02b      	b.n	8007ab4 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8007a5c:	4a17      	ldr	r2, [pc, #92]	; (8007abc <f_mount+0x88>)
 8007a5e:	69fb      	ldr	r3, [r7, #28]
 8007a60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a64:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8007a66:	69bb      	ldr	r3, [r7, #24]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d005      	beq.n	8007a78 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8007a6c:	69b8      	ldr	r0, [r7, #24]
 8007a6e:	f7fe f9ab 	bl	8005dc8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8007a72:	69bb      	ldr	r3, [r7, #24]
 8007a74:	2200      	movs	r2, #0
 8007a76:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d002      	beq.n	8007a84 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	2200      	movs	r2, #0
 8007a82:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8007a84:	68fa      	ldr	r2, [r7, #12]
 8007a86:	490d      	ldr	r1, [pc, #52]	; (8007abc <f_mount+0x88>)
 8007a88:	69fb      	ldr	r3, [r7, #28]
 8007a8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d002      	beq.n	8007a9a <f_mount+0x66>
 8007a94:	79fb      	ldrb	r3, [r7, #7]
 8007a96:	2b01      	cmp	r3, #1
 8007a98:	d001      	beq.n	8007a9e <f_mount+0x6a>
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	e00a      	b.n	8007ab4 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8007a9e:	f107 010c 	add.w	r1, r7, #12
 8007aa2:	f107 0308 	add.w	r3, r7, #8
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	f7ff fd41 	bl	8007530 <find_volume>
 8007aae:	4603      	mov	r3, r0
 8007ab0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8007ab2:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	3720      	adds	r7, #32
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	bd80      	pop	{r7, pc}
 8007abc:	20000148 	.word	0x20000148

08007ac0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
 8007ac6:	af00      	add	r7, sp, #0
 8007ac8:	f107 030c 	add.w	r3, r7, #12
 8007acc:	6018      	str	r0, [r3, #0]
 8007ace:	f107 0308 	add.w	r3, r7, #8
 8007ad2:	6019      	str	r1, [r3, #0]
 8007ad4:	1dfb      	adds	r3, r7, #7
 8007ad6:	701a      	strb	r2, [r3, #0]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8007ad8:	f107 030c 	add.w	r3, r7, #12
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d101      	bne.n	8007ae6 <f_open+0x26>
 8007ae2:	2309      	movs	r3, #9
 8007ae4:	e231      	b.n	8007f4a <f_open+0x48a>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8007ae6:	1dfb      	adds	r3, r7, #7
 8007ae8:	1dfa      	adds	r2, r7, #7
 8007aea:	7812      	ldrb	r2, [r2, #0]
 8007aec:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8007af0:	701a      	strb	r2, [r3, #0]
	res = find_volume(&path, &fs, mode);
 8007af2:	1dfb      	adds	r3, r7, #7
 8007af4:	781a      	ldrb	r2, [r3, #0]
 8007af6:	f507 7105 	add.w	r1, r7, #532	; 0x214
 8007afa:	f107 0308 	add.w	r3, r7, #8
 8007afe:	4618      	mov	r0, r3
 8007b00:	f7ff fd16 	bl	8007530 <find_volume>
 8007b04:	4603      	mov	r3, r0
 8007b06:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
	if (res == FR_OK) {
 8007b0a:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	f040 8210 	bne.w	8007f34 <f_open+0x474>
		dj.obj.fs = fs;
 8007b14:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8007b18:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
		INIT_NAMBUF(fs);
 8007b1c:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8007b20:	f107 0214 	add.w	r2, r7, #20
 8007b24:	60da      	str	r2, [r3, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 8007b26:	f107 0308 	add.w	r3, r7, #8
 8007b2a:	681a      	ldr	r2, [r3, #0]
 8007b2c:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8007b30:	4611      	mov	r1, r2
 8007b32:	4618      	mov	r0, r3
 8007b34:	f7ff fbf0 	bl	8007318 <follow_path>
 8007b38:	4603      	mov	r3, r0
 8007b3a:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8007b3e:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d11b      	bne.n	8007b7e <f_open+0xbe>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8007b46:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
 8007b4a:	b25b      	sxtb	r3, r3
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	da03      	bge.n	8007b58 <f_open+0x98>
				res = FR_INVALID_NAME;
 8007b50:	2306      	movs	r3, #6
 8007b52:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 8007b56:	e012      	b.n	8007b7e <f_open+0xbe>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007b58:	1dfb      	adds	r3, r7, #7
 8007b5a:	781b      	ldrb	r3, [r3, #0]
 8007b5c:	f023 0301 	bic.w	r3, r3, #1
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	bf14      	ite	ne
 8007b64:	2301      	movne	r3, #1
 8007b66:	2300      	moveq	r3, #0
 8007b68:	b2db      	uxtb	r3, r3
 8007b6a:	461a      	mov	r2, r3
 8007b6c:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8007b70:	4611      	mov	r1, r2
 8007b72:	4618      	mov	r0, r3
 8007b74:	f7fd ffe0 	bl	8005b38 <chk_lock>
 8007b78:	4603      	mov	r3, r0
 8007b7a:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8007b7e:	1dfb      	adds	r3, r7, #7
 8007b80:	781b      	ldrb	r3, [r3, #0]
 8007b82:	f003 031c 	and.w	r3, r3, #28
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	f000 809b 	beq.w	8007cc2 <f_open+0x202>
			if (res != FR_OK) {					/* No file, create new */
 8007b8c:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d019      	beq.n	8007bc8 <f_open+0x108>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8007b94:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8007b98:	2b04      	cmp	r3, #4
 8007b9a:	d10e      	bne.n	8007bba <f_open+0xfa>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8007b9c:	f7fe f828 	bl	8005bf0 <enq_lock>
 8007ba0:	4603      	mov	r3, r0
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d006      	beq.n	8007bb4 <f_open+0xf4>
 8007ba6:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8007baa:	4618      	mov	r0, r3
 8007bac:	f7ff f904 	bl	8006db8 <dir_register>
 8007bb0:	4603      	mov	r3, r0
 8007bb2:	e000      	b.n	8007bb6 <f_open+0xf6>
 8007bb4:	2312      	movs	r3, #18
 8007bb6:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8007bba:	1dfb      	adds	r3, r7, #7
 8007bbc:	1dfa      	adds	r2, r7, #7
 8007bbe:	7812      	ldrb	r2, [r2, #0]
 8007bc0:	f042 0208 	orr.w	r2, r2, #8
 8007bc4:	701a      	strb	r2, [r3, #0]
 8007bc6:	e012      	b.n	8007bee <f_open+0x12e>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8007bc8:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 8007bcc:	f003 0311 	and.w	r3, r3, #17
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d003      	beq.n	8007bdc <f_open+0x11c>
					res = FR_DENIED;
 8007bd4:	2307      	movs	r3, #7
 8007bd6:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 8007bda:	e008      	b.n	8007bee <f_open+0x12e>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8007bdc:	1dfb      	adds	r3, r7, #7
 8007bde:	781b      	ldrb	r3, [r3, #0]
 8007be0:	f003 0304 	and.w	r3, r3, #4
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d002      	beq.n	8007bee <f_open+0x12e>
 8007be8:	2308      	movs	r3, #8
 8007bea:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8007bee:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	f040 8082 	bne.w	8007cfc <f_open+0x23c>
 8007bf8:	1dfb      	adds	r3, r7, #7
 8007bfa:	781b      	ldrb	r3, [r3, #0]
 8007bfc:	f003 0308 	and.w	r3, r3, #8
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d07b      	beq.n	8007cfc <f_open+0x23c>
				dw = GET_FATTIME();
 8007c04:	f7fd fc8e 	bl	8005524 <get_fattime>
 8007c08:	f8c7 0258 	str.w	r0, [r7, #600]	; 0x258
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8007c0c:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8007c10:	330e      	adds	r3, #14
 8007c12:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 8007c16:	4618      	mov	r0, r3
 8007c18:	f7fd fee4 	bl	80059e4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8007c1c:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8007c20:	3316      	adds	r3, #22
 8007c22:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 8007c26:	4618      	mov	r0, r3
 8007c28:	f7fd fedc 	bl	80059e4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8007c2c:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8007c30:	330b      	adds	r3, #11
 8007c32:	2220      	movs	r2, #32
 8007c34:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8007c36:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8007c3a:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 8007c3e:	4611      	mov	r1, r2
 8007c40:	4618      	mov	r0, r3
 8007c42:	f7fe fe30 	bl	80068a6 <ld_clust>
 8007c46:	f8c7 0254 	str.w	r0, [r7, #596]	; 0x254
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8007c4a:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8007c4e:	f8d7 1238 	ldr.w	r1, [r7, #568]	; 0x238
 8007c52:	2200      	movs	r2, #0
 8007c54:	4618      	mov	r0, r3
 8007c56:	f7fe fe45 	bl	80068e4 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8007c5a:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8007c5e:	331c      	adds	r3, #28
 8007c60:	2100      	movs	r1, #0
 8007c62:	4618      	mov	r0, r3
 8007c64:	f7fd febe 	bl	80059e4 <st_dword>
					fs->wflag = 1;
 8007c68:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8007c6c:	2201      	movs	r2, #1
 8007c6e:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8007c70:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d041      	beq.n	8007cfc <f_open+0x23c>
						dw = fs->winsect;
 8007c78:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8007c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c7e:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
						res = remove_chain(&dj.obj, cl, 0);
 8007c82:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8007c86:	2200      	movs	r2, #0
 8007c88:	f8d7 1254 	ldr.w	r1, [r7, #596]	; 0x254
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	f7fe fb52 	bl	8006336 <remove_chain>
 8007c92:	4603      	mov	r3, r0
 8007c94:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
						if (res == FR_OK) {
 8007c98:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d12d      	bne.n	8007cfc <f_open+0x23c>
							res = move_window(fs, dw);
 8007ca0:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8007ca4:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 8007ca8:	4618      	mov	r0, r3
 8007caa:	f7fe f8f5 	bl	8005e98 <move_window>
 8007cae:	4603      	mov	r3, r0
 8007cb0:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8007cb4:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8007cb8:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 8007cbc:	3a01      	subs	r2, #1
 8007cbe:	611a      	str	r2, [r3, #16]
 8007cc0:	e01c      	b.n	8007cfc <f_open+0x23c>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8007cc2:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d118      	bne.n	8007cfc <f_open+0x23c>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8007cca:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 8007cce:	f003 0310 	and.w	r3, r3, #16
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d003      	beq.n	8007cde <f_open+0x21e>
					res = FR_NO_FILE;
 8007cd6:	2304      	movs	r3, #4
 8007cd8:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 8007cdc:	e00e      	b.n	8007cfc <f_open+0x23c>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8007cde:	1dfb      	adds	r3, r7, #7
 8007ce0:	781b      	ldrb	r3, [r3, #0]
 8007ce2:	f003 0302 	and.w	r3, r3, #2
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d008      	beq.n	8007cfc <f_open+0x23c>
 8007cea:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 8007cee:	f003 0301 	and.w	r3, r3, #1
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d002      	beq.n	8007cfc <f_open+0x23c>
						res = FR_DENIED;
 8007cf6:	2307      	movs	r3, #7
 8007cf8:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
					}
				}
			}
		}
		if (res == FR_OK) {
 8007cfc:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d136      	bne.n	8007d72 <f_open+0x2b2>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8007d04:	1dfb      	adds	r3, r7, #7
 8007d06:	781b      	ldrb	r3, [r3, #0]
 8007d08:	f003 0308 	and.w	r3, r3, #8
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d005      	beq.n	8007d1c <f_open+0x25c>
				mode |= FA_MODIFIED;
 8007d10:	1dfb      	adds	r3, r7, #7
 8007d12:	1dfa      	adds	r2, r7, #7
 8007d14:	7812      	ldrb	r2, [r2, #0]
 8007d16:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007d1a:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8007d1c:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8007d20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007d22:	f107 030c 	add.w	r3, r7, #12
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8007d2a:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 8007d2e:	f107 030c 	add.w	r3, r7, #12
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007d36:	1dfb      	adds	r3, r7, #7
 8007d38:	781b      	ldrb	r3, [r3, #0]
 8007d3a:	f023 0301 	bic.w	r3, r3, #1
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	bf14      	ite	ne
 8007d42:	2301      	movne	r3, #1
 8007d44:	2300      	moveq	r3, #0
 8007d46:	b2db      	uxtb	r3, r3
 8007d48:	461a      	mov	r2, r3
 8007d4a:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8007d4e:	4611      	mov	r1, r2
 8007d50:	4618      	mov	r0, r3
 8007d52:	f7fd ff6f 	bl	8005c34 <inc_lock>
 8007d56:	4602      	mov	r2, r0
 8007d58:	f107 030c 	add.w	r3, r7, #12
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8007d60:	f107 030c 	add.w	r3, r7, #12
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	691b      	ldr	r3, [r3, #16]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d102      	bne.n	8007d72 <f_open+0x2b2>
 8007d6c:	2302      	movs	r3, #2
 8007d6e:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				}
			}
		}
#endif

		if (res == FR_OK) {
 8007d72:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	f040 80dc 	bne.w	8007f34 <f_open+0x474>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8007d7c:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8007d80:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 8007d84:	4611      	mov	r1, r2
 8007d86:	4618      	mov	r0, r3
 8007d88:	f7fe fd8d 	bl	80068a6 <ld_clust>
 8007d8c:	4602      	mov	r2, r0
 8007d8e:	f107 030c 	add.w	r3, r7, #12
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8007d96:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8007d9a:	331c      	adds	r3, #28
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	f7fd fde3 	bl	8005968 <ld_dword>
 8007da2:	4602      	mov	r2, r0
 8007da4:	f107 030c 	add.w	r3, r7, #12
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8007dac:	f107 030c 	add.w	r3, r7, #12
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	2200      	movs	r2, #0
 8007db4:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8007db6:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8007dba:	f107 030c 	add.w	r3, r7, #12
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8007dc2:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8007dc6:	88da      	ldrh	r2, [r3, #6]
 8007dc8:	f107 030c 	add.w	r3, r7, #12
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8007dd0:	f107 030c 	add.w	r3, r7, #12
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	1dfa      	adds	r2, r7, #7
 8007dd8:	7812      	ldrb	r2, [r2, #0]
 8007dda:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8007ddc:	f107 030c 	add.w	r3, r7, #12
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	2200      	movs	r2, #0
 8007de4:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8007de6:	f107 030c 	add.w	r3, r7, #12
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	2200      	movs	r2, #0
 8007dee:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8007df0:	f107 030c 	add.w	r3, r7, #12
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	2200      	movs	r2, #0
 8007df8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8007dfa:	f107 030c 	add.w	r3, r7, #12
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	3330      	adds	r3, #48	; 0x30
 8007e02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007e06:	2100      	movs	r1, #0
 8007e08:	4618      	mov	r0, r3
 8007e0a:	f7fd fe38 	bl	8005a7e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8007e0e:	1dfb      	adds	r3, r7, #7
 8007e10:	781b      	ldrb	r3, [r3, #0]
 8007e12:	f003 0320 	and.w	r3, r3, #32
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	f000 808c 	beq.w	8007f34 <f_open+0x474>
 8007e1c:	f107 030c 	add.w	r3, r7, #12
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	68db      	ldr	r3, [r3, #12]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	f000 8085 	beq.w	8007f34 <f_open+0x474>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8007e2a:	f107 030c 	add.w	r3, r7, #12
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	68da      	ldr	r2, [r3, #12]
 8007e32:	f107 030c 	add.w	r3, r7, #12
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8007e3a:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8007e3e:	895b      	ldrh	r3, [r3, #10]
 8007e40:	025b      	lsls	r3, r3, #9
 8007e42:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8007e46:	f107 030c 	add.w	r3, r7, #12
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	689b      	ldr	r3, [r3, #8]
 8007e4e:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007e52:	f107 030c 	add.w	r3, r7, #12
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	68db      	ldr	r3, [r3, #12]
 8007e5a:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 8007e5e:	e01f      	b.n	8007ea0 <f_open+0x3e0>
					clst = get_fat(&fp->obj, clst);
 8007e60:	f107 030c 	add.w	r3, r7, #12
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	f7fe f8cf 	bl	800600e <get_fat>
 8007e70:	f8c7 0260 	str.w	r0, [r7, #608]	; 0x260
					if (clst <= 1) res = FR_INT_ERR;
 8007e74:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8007e78:	2b01      	cmp	r3, #1
 8007e7a:	d802      	bhi.n	8007e82 <f_open+0x3c2>
 8007e7c:	2302      	movs	r3, #2
 8007e7e:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8007e82:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8007e86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e8a:	d102      	bne.n	8007e92 <f_open+0x3d2>
 8007e8c:	2301      	movs	r3, #1
 8007e8e:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007e92:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 8007e96:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8007e9a:	1ad3      	subs	r3, r2, r3
 8007e9c:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 8007ea0:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d105      	bne.n	8007eb4 <f_open+0x3f4>
 8007ea8:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 8007eac:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8007eb0:	429a      	cmp	r2, r3
 8007eb2:	d8d5      	bhi.n	8007e60 <f_open+0x3a0>
				}
				fp->clust = clst;
 8007eb4:	f107 030c 	add.w	r3, r7, #12
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	f8d7 2260 	ldr.w	r2, [r7, #608]	; 0x260
 8007ebe:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8007ec0:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d135      	bne.n	8007f34 <f_open+0x474>
 8007ec8:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8007ecc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d02f      	beq.n	8007f34 <f_open+0x474>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8007ed4:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8007ed8:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 8007edc:	4618      	mov	r0, r3
 8007ede:	f7fe f877 	bl	8005fd0 <clust2sect>
 8007ee2:	f8c7 024c 	str.w	r0, [r7, #588]	; 0x24c
 8007ee6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d103      	bne.n	8007ef6 <f_open+0x436>
						res = FR_INT_ERR;
 8007eee:	2302      	movs	r3, #2
 8007ef0:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 8007ef4:	e01e      	b.n	8007f34 <f_open+0x474>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8007ef6:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8007efa:	0a5a      	lsrs	r2, r3, #9
 8007efc:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007f00:	441a      	add	r2, r3
 8007f02:	f107 030c 	add.w	r3, r7, #12
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8007f0a:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8007f0e:	7858      	ldrb	r0, [r3, #1]
 8007f10:	f107 030c 	add.w	r3, r7, #12
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007f1a:	f107 030c 	add.w	r3, r7, #12
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	6a1a      	ldr	r2, [r3, #32]
 8007f22:	2301      	movs	r3, #1
 8007f24:	f7fd fcaa 	bl	800587c <disk_read>
 8007f28:	4603      	mov	r3, r0
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d002      	beq.n	8007f34 <f_open+0x474>
 8007f2e:	2301      	movs	r3, #1
 8007f30:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8007f34:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d004      	beq.n	8007f46 <f_open+0x486>
 8007f3c:	f107 030c 	add.w	r3, r7, #12
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	2200      	movs	r2, #0
 8007f44:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8007f46:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
}
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	f507 771a 	add.w	r7, r7, #616	; 0x268
 8007f50:	46bd      	mov	sp, r7
 8007f52:	bd80      	pop	{r7, pc}

08007f54 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b08e      	sub	sp, #56	; 0x38
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	60f8      	str	r0, [r7, #12]
 8007f5c:	60b9      	str	r1, [r7, #8]
 8007f5e:	607a      	str	r2, [r7, #4]
 8007f60:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8007f62:	68bb      	ldr	r3, [r7, #8]
 8007f64:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8007f66:	683b      	ldr	r3, [r7, #0]
 8007f68:	2200      	movs	r2, #0
 8007f6a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	f107 0214 	add.w	r2, r7, #20
 8007f72:	4611      	mov	r1, r2
 8007f74:	4618      	mov	r0, r3
 8007f76:	f7ff fd27 	bl	80079c8 <validate>
 8007f7a:	4603      	mov	r3, r0
 8007f7c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8007f80:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d107      	bne.n	8007f98 <f_read+0x44>
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	7d5b      	ldrb	r3, [r3, #21]
 8007f8c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8007f90:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d002      	beq.n	8007f9e <f_read+0x4a>
 8007f98:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007f9c:	e115      	b.n	80081ca <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	7d1b      	ldrb	r3, [r3, #20]
 8007fa2:	f003 0301 	and.w	r3, r3, #1
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d101      	bne.n	8007fae <f_read+0x5a>
 8007faa:	2307      	movs	r3, #7
 8007fac:	e10d      	b.n	80081ca <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	68da      	ldr	r2, [r3, #12]
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	699b      	ldr	r3, [r3, #24]
 8007fb6:	1ad3      	subs	r3, r2, r3
 8007fb8:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8007fba:	687a      	ldr	r2, [r7, #4]
 8007fbc:	6a3b      	ldr	r3, [r7, #32]
 8007fbe:	429a      	cmp	r2, r3
 8007fc0:	f240 80fe 	bls.w	80081c0 <f_read+0x26c>
 8007fc4:	6a3b      	ldr	r3, [r7, #32]
 8007fc6:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8007fc8:	e0fa      	b.n	80081c0 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	699b      	ldr	r3, [r3, #24]
 8007fce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	f040 80c6 	bne.w	8008164 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	699b      	ldr	r3, [r3, #24]
 8007fdc:	0a5b      	lsrs	r3, r3, #9
 8007fde:	697a      	ldr	r2, [r7, #20]
 8007fe0:	8952      	ldrh	r2, [r2, #10]
 8007fe2:	3a01      	subs	r2, #1
 8007fe4:	4013      	ands	r3, r2
 8007fe6:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8007fe8:	69fb      	ldr	r3, [r7, #28]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d12f      	bne.n	800804e <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	699b      	ldr	r3, [r3, #24]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d103      	bne.n	8007ffe <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	689b      	ldr	r3, [r3, #8]
 8007ffa:	633b      	str	r3, [r7, #48]	; 0x30
 8007ffc:	e013      	b.n	8008026 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008002:	2b00      	cmp	r3, #0
 8008004:	d007      	beq.n	8008016 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	699b      	ldr	r3, [r3, #24]
 800800a:	4619      	mov	r1, r3
 800800c:	68f8      	ldr	r0, [r7, #12]
 800800e:	f7fe fa8f 	bl	8006530 <clmt_clust>
 8008012:	6338      	str	r0, [r7, #48]	; 0x30
 8008014:	e007      	b.n	8008026 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8008016:	68fa      	ldr	r2, [r7, #12]
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	69db      	ldr	r3, [r3, #28]
 800801c:	4619      	mov	r1, r3
 800801e:	4610      	mov	r0, r2
 8008020:	f7fd fff5 	bl	800600e <get_fat>
 8008024:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8008026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008028:	2b01      	cmp	r3, #1
 800802a:	d804      	bhi.n	8008036 <f_read+0xe2>
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	2202      	movs	r2, #2
 8008030:	755a      	strb	r2, [r3, #21]
 8008032:	2302      	movs	r3, #2
 8008034:	e0c9      	b.n	80081ca <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008038:	f1b3 3fff 	cmp.w	r3, #4294967295
 800803c:	d104      	bne.n	8008048 <f_read+0xf4>
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	2201      	movs	r2, #1
 8008042:	755a      	strb	r2, [r3, #21]
 8008044:	2301      	movs	r3, #1
 8008046:	e0c0      	b.n	80081ca <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800804c:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800804e:	697a      	ldr	r2, [r7, #20]
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	69db      	ldr	r3, [r3, #28]
 8008054:	4619      	mov	r1, r3
 8008056:	4610      	mov	r0, r2
 8008058:	f7fd ffba 	bl	8005fd0 <clust2sect>
 800805c:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800805e:	69bb      	ldr	r3, [r7, #24]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d104      	bne.n	800806e <f_read+0x11a>
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	2202      	movs	r2, #2
 8008068:	755a      	strb	r2, [r3, #21]
 800806a:	2302      	movs	r3, #2
 800806c:	e0ad      	b.n	80081ca <f_read+0x276>
			sect += csect;
 800806e:	69ba      	ldr	r2, [r7, #24]
 8008070:	69fb      	ldr	r3, [r7, #28]
 8008072:	4413      	add	r3, r2
 8008074:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	0a5b      	lsrs	r3, r3, #9
 800807a:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800807c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800807e:	2b00      	cmp	r3, #0
 8008080:	d039      	beq.n	80080f6 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8008082:	69fa      	ldr	r2, [r7, #28]
 8008084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008086:	4413      	add	r3, r2
 8008088:	697a      	ldr	r2, [r7, #20]
 800808a:	8952      	ldrh	r2, [r2, #10]
 800808c:	4293      	cmp	r3, r2
 800808e:	d905      	bls.n	800809c <f_read+0x148>
					cc = fs->csize - csect;
 8008090:	697b      	ldr	r3, [r7, #20]
 8008092:	895b      	ldrh	r3, [r3, #10]
 8008094:	461a      	mov	r2, r3
 8008096:	69fb      	ldr	r3, [r7, #28]
 8008098:	1ad3      	subs	r3, r2, r3
 800809a:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800809c:	697b      	ldr	r3, [r7, #20]
 800809e:	7858      	ldrb	r0, [r3, #1]
 80080a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080a2:	69ba      	ldr	r2, [r7, #24]
 80080a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80080a6:	f7fd fbe9 	bl	800587c <disk_read>
 80080aa:	4603      	mov	r3, r0
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d004      	beq.n	80080ba <f_read+0x166>
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	2201      	movs	r2, #1
 80080b4:	755a      	strb	r2, [r3, #21]
 80080b6:	2301      	movs	r3, #1
 80080b8:	e087      	b.n	80081ca <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	7d1b      	ldrb	r3, [r3, #20]
 80080be:	b25b      	sxtb	r3, r3
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	da14      	bge.n	80080ee <f_read+0x19a>
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	6a1a      	ldr	r2, [r3, #32]
 80080c8:	69bb      	ldr	r3, [r7, #24]
 80080ca:	1ad3      	subs	r3, r2, r3
 80080cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80080ce:	429a      	cmp	r2, r3
 80080d0:	d90d      	bls.n	80080ee <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	6a1a      	ldr	r2, [r3, #32]
 80080d6:	69bb      	ldr	r3, [r7, #24]
 80080d8:	1ad3      	subs	r3, r2, r3
 80080da:	025b      	lsls	r3, r3, #9
 80080dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080de:	18d0      	adds	r0, r2, r3
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	3330      	adds	r3, #48	; 0x30
 80080e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80080e8:	4619      	mov	r1, r3
 80080ea:	f7fd fca7 	bl	8005a3c <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80080ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080f0:	025b      	lsls	r3, r3, #9
 80080f2:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 80080f4:	e050      	b.n	8008198 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	6a1b      	ldr	r3, [r3, #32]
 80080fa:	69ba      	ldr	r2, [r7, #24]
 80080fc:	429a      	cmp	r2, r3
 80080fe:	d02e      	beq.n	800815e <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	7d1b      	ldrb	r3, [r3, #20]
 8008104:	b25b      	sxtb	r3, r3
 8008106:	2b00      	cmp	r3, #0
 8008108:	da18      	bge.n	800813c <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800810a:	697b      	ldr	r3, [r7, #20]
 800810c:	7858      	ldrb	r0, [r3, #1]
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	6a1a      	ldr	r2, [r3, #32]
 8008118:	2301      	movs	r3, #1
 800811a:	f7fd fbcf 	bl	80058bc <disk_write>
 800811e:	4603      	mov	r3, r0
 8008120:	2b00      	cmp	r3, #0
 8008122:	d004      	beq.n	800812e <f_read+0x1da>
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	2201      	movs	r2, #1
 8008128:	755a      	strb	r2, [r3, #21]
 800812a:	2301      	movs	r3, #1
 800812c:	e04d      	b.n	80081ca <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	7d1b      	ldrb	r3, [r3, #20]
 8008132:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008136:	b2da      	uxtb	r2, r3
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800813c:	697b      	ldr	r3, [r7, #20]
 800813e:	7858      	ldrb	r0, [r3, #1]
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008146:	2301      	movs	r3, #1
 8008148:	69ba      	ldr	r2, [r7, #24]
 800814a:	f7fd fb97 	bl	800587c <disk_read>
 800814e:	4603      	mov	r3, r0
 8008150:	2b00      	cmp	r3, #0
 8008152:	d004      	beq.n	800815e <f_read+0x20a>
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	2201      	movs	r2, #1
 8008158:	755a      	strb	r2, [r3, #21]
 800815a:	2301      	movs	r3, #1
 800815c:	e035      	b.n	80081ca <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	69ba      	ldr	r2, [r7, #24]
 8008162:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	699b      	ldr	r3, [r3, #24]
 8008168:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800816c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8008170:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8008172:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	429a      	cmp	r2, r3
 8008178:	d901      	bls.n	800817e <f_read+0x22a>
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	699b      	ldr	r3, [r3, #24]
 8008188:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800818c:	4413      	add	r3, r2
 800818e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008190:	4619      	mov	r1, r3
 8008192:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008194:	f7fd fc52 	bl	8005a3c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8008198:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800819a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800819c:	4413      	add	r3, r2
 800819e:	627b      	str	r3, [r7, #36]	; 0x24
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	699a      	ldr	r2, [r3, #24]
 80081a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081a6:	441a      	add	r2, r3
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	619a      	str	r2, [r3, #24]
 80081ac:	683b      	ldr	r3, [r7, #0]
 80081ae:	681a      	ldr	r2, [r3, #0]
 80081b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081b2:	441a      	add	r2, r3
 80081b4:	683b      	ldr	r3, [r7, #0]
 80081b6:	601a      	str	r2, [r3, #0]
 80081b8:	687a      	ldr	r2, [r7, #4]
 80081ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081bc:	1ad3      	subs	r3, r2, r3
 80081be:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	f47f af01 	bne.w	8007fca <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 80081c8:	2300      	movs	r3, #0
}
 80081ca:	4618      	mov	r0, r3
 80081cc:	3738      	adds	r7, #56	; 0x38
 80081ce:	46bd      	mov	sp, r7
 80081d0:	bd80      	pop	{r7, pc}

080081d2 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80081d2:	b580      	push	{r7, lr}
 80081d4:	b086      	sub	sp, #24
 80081d6:	af00      	add	r7, sp, #0
 80081d8:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	f107 0208 	add.w	r2, r7, #8
 80081e0:	4611      	mov	r1, r2
 80081e2:	4618      	mov	r0, r3
 80081e4:	f7ff fbf0 	bl	80079c8 <validate>
 80081e8:	4603      	mov	r3, r0
 80081ea:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80081ec:	7dfb      	ldrb	r3, [r7, #23]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d168      	bne.n	80082c4 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	7d1b      	ldrb	r3, [r3, #20]
 80081f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d062      	beq.n	80082c4 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	7d1b      	ldrb	r3, [r3, #20]
 8008202:	b25b      	sxtb	r3, r3
 8008204:	2b00      	cmp	r3, #0
 8008206:	da15      	bge.n	8008234 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8008208:	68bb      	ldr	r3, [r7, #8]
 800820a:	7858      	ldrb	r0, [r3, #1]
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	6a1a      	ldr	r2, [r3, #32]
 8008216:	2301      	movs	r3, #1
 8008218:	f7fd fb50 	bl	80058bc <disk_write>
 800821c:	4603      	mov	r3, r0
 800821e:	2b00      	cmp	r3, #0
 8008220:	d001      	beq.n	8008226 <f_sync+0x54>
 8008222:	2301      	movs	r3, #1
 8008224:	e04f      	b.n	80082c6 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	7d1b      	ldrb	r3, [r3, #20]
 800822a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800822e:	b2da      	uxtb	r2, r3
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8008234:	f7fd f976 	bl	8005524 <get_fattime>
 8008238:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800823a:	68ba      	ldr	r2, [r7, #8]
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008240:	4619      	mov	r1, r3
 8008242:	4610      	mov	r0, r2
 8008244:	f7fd fe28 	bl	8005e98 <move_window>
 8008248:	4603      	mov	r3, r0
 800824a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800824c:	7dfb      	ldrb	r3, [r7, #23]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d138      	bne.n	80082c4 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008256:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	330b      	adds	r3, #11
 800825c:	781a      	ldrb	r2, [r3, #0]
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	330b      	adds	r3, #11
 8008262:	f042 0220 	orr.w	r2, r2, #32
 8008266:	b2d2      	uxtb	r2, r2
 8008268:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	6818      	ldr	r0, [r3, #0]
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	689b      	ldr	r3, [r3, #8]
 8008272:	461a      	mov	r2, r3
 8008274:	68f9      	ldr	r1, [r7, #12]
 8008276:	f7fe fb35 	bl	80068e4 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	f103 021c 	add.w	r2, r3, #28
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	68db      	ldr	r3, [r3, #12]
 8008284:	4619      	mov	r1, r3
 8008286:	4610      	mov	r0, r2
 8008288:	f7fd fbac 	bl	80059e4 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	3316      	adds	r3, #22
 8008290:	6939      	ldr	r1, [r7, #16]
 8008292:	4618      	mov	r0, r3
 8008294:	f7fd fba6 	bl	80059e4 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	3312      	adds	r3, #18
 800829c:	2100      	movs	r1, #0
 800829e:	4618      	mov	r0, r3
 80082a0:	f7fd fb85 	bl	80059ae <st_word>
					fs->wflag = 1;
 80082a4:	68bb      	ldr	r3, [r7, #8]
 80082a6:	2201      	movs	r2, #1
 80082a8:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80082aa:	68bb      	ldr	r3, [r7, #8]
 80082ac:	4618      	mov	r0, r3
 80082ae:	f7fd fe21 	bl	8005ef4 <sync_fs>
 80082b2:	4603      	mov	r3, r0
 80082b4:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	7d1b      	ldrb	r3, [r3, #20]
 80082ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80082be:	b2da      	uxtb	r2, r3
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80082c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80082c6:	4618      	mov	r0, r3
 80082c8:	3718      	adds	r7, #24
 80082ca:	46bd      	mov	sp, r7
 80082cc:	bd80      	pop	{r7, pc}

080082ce <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80082ce:	b580      	push	{r7, lr}
 80082d0:	b084      	sub	sp, #16
 80082d2:	af00      	add	r7, sp, #0
 80082d4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80082d6:	6878      	ldr	r0, [r7, #4]
 80082d8:	f7ff ff7b 	bl	80081d2 <f_sync>
 80082dc:	4603      	mov	r3, r0
 80082de:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80082e0:	7bfb      	ldrb	r3, [r7, #15]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d118      	bne.n	8008318 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	f107 0208 	add.w	r2, r7, #8
 80082ec:	4611      	mov	r1, r2
 80082ee:	4618      	mov	r0, r3
 80082f0:	f7ff fb6a 	bl	80079c8 <validate>
 80082f4:	4603      	mov	r3, r0
 80082f6:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80082f8:	7bfb      	ldrb	r3, [r7, #15]
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d10c      	bne.n	8008318 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	691b      	ldr	r3, [r3, #16]
 8008302:	4618      	mov	r0, r3
 8008304:	f7fd fd24 	bl	8005d50 <dec_lock>
 8008308:	4603      	mov	r3, r0
 800830a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800830c:	7bfb      	ldrb	r3, [r7, #15]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d102      	bne.n	8008318 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	2200      	movs	r2, #0
 8008316:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8008318:	7bfb      	ldrb	r3, [r7, #15]
}
 800831a:	4618      	mov	r0, r3
 800831c:	3710      	adds	r7, #16
 800831e:	46bd      	mov	sp, r7
 8008320:	bd80      	pop	{r7, pc}
	...

08008324 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008324:	b480      	push	{r7}
 8008326:	b087      	sub	sp, #28
 8008328:	af00      	add	r7, sp, #0
 800832a:	60f8      	str	r0, [r7, #12]
 800832c:	60b9      	str	r1, [r7, #8]
 800832e:	4613      	mov	r3, r2
 8008330:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8008332:	2301      	movs	r3, #1
 8008334:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8008336:	2300      	movs	r3, #0
 8008338:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800833a:	4b1f      	ldr	r3, [pc, #124]	; (80083b8 <FATFS_LinkDriverEx+0x94>)
 800833c:	7a5b      	ldrb	r3, [r3, #9]
 800833e:	b2db      	uxtb	r3, r3
 8008340:	2b00      	cmp	r3, #0
 8008342:	d131      	bne.n	80083a8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008344:	4b1c      	ldr	r3, [pc, #112]	; (80083b8 <FATFS_LinkDriverEx+0x94>)
 8008346:	7a5b      	ldrb	r3, [r3, #9]
 8008348:	b2db      	uxtb	r3, r3
 800834a:	461a      	mov	r2, r3
 800834c:	4b1a      	ldr	r3, [pc, #104]	; (80083b8 <FATFS_LinkDriverEx+0x94>)
 800834e:	2100      	movs	r1, #0
 8008350:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8008352:	4b19      	ldr	r3, [pc, #100]	; (80083b8 <FATFS_LinkDriverEx+0x94>)
 8008354:	7a5b      	ldrb	r3, [r3, #9]
 8008356:	b2db      	uxtb	r3, r3
 8008358:	4a17      	ldr	r2, [pc, #92]	; (80083b8 <FATFS_LinkDriverEx+0x94>)
 800835a:	009b      	lsls	r3, r3, #2
 800835c:	4413      	add	r3, r2
 800835e:	68fa      	ldr	r2, [r7, #12]
 8008360:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8008362:	4b15      	ldr	r3, [pc, #84]	; (80083b8 <FATFS_LinkDriverEx+0x94>)
 8008364:	7a5b      	ldrb	r3, [r3, #9]
 8008366:	b2db      	uxtb	r3, r3
 8008368:	461a      	mov	r2, r3
 800836a:	4b13      	ldr	r3, [pc, #76]	; (80083b8 <FATFS_LinkDriverEx+0x94>)
 800836c:	4413      	add	r3, r2
 800836e:	79fa      	ldrb	r2, [r7, #7]
 8008370:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8008372:	4b11      	ldr	r3, [pc, #68]	; (80083b8 <FATFS_LinkDriverEx+0x94>)
 8008374:	7a5b      	ldrb	r3, [r3, #9]
 8008376:	b2db      	uxtb	r3, r3
 8008378:	1c5a      	adds	r2, r3, #1
 800837a:	b2d1      	uxtb	r1, r2
 800837c:	4a0e      	ldr	r2, [pc, #56]	; (80083b8 <FATFS_LinkDriverEx+0x94>)
 800837e:	7251      	strb	r1, [r2, #9]
 8008380:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8008382:	7dbb      	ldrb	r3, [r7, #22]
 8008384:	3330      	adds	r3, #48	; 0x30
 8008386:	b2da      	uxtb	r2, r3
 8008388:	68bb      	ldr	r3, [r7, #8]
 800838a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800838c:	68bb      	ldr	r3, [r7, #8]
 800838e:	3301      	adds	r3, #1
 8008390:	223a      	movs	r2, #58	; 0x3a
 8008392:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008394:	68bb      	ldr	r3, [r7, #8]
 8008396:	3302      	adds	r3, #2
 8008398:	222f      	movs	r2, #47	; 0x2f
 800839a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800839c:	68bb      	ldr	r3, [r7, #8]
 800839e:	3303      	adds	r3, #3
 80083a0:	2200      	movs	r2, #0
 80083a2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80083a4:	2300      	movs	r3, #0
 80083a6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80083a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80083aa:	4618      	mov	r0, r3
 80083ac:	371c      	adds	r7, #28
 80083ae:	46bd      	mov	sp, r7
 80083b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b4:	4770      	bx	lr
 80083b6:	bf00      	nop
 80083b8:	20000170 	.word	0x20000170

080083bc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80083bc:	b580      	push	{r7, lr}
 80083be:	b082      	sub	sp, #8
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
 80083c4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80083c6:	2200      	movs	r2, #0
 80083c8:	6839      	ldr	r1, [r7, #0]
 80083ca:	6878      	ldr	r0, [r7, #4]
 80083cc:	f7ff ffaa 	bl	8008324 <FATFS_LinkDriverEx>
 80083d0:	4603      	mov	r3, r0
}
 80083d2:	4618      	mov	r0, r3
 80083d4:	3708      	adds	r7, #8
 80083d6:	46bd      	mov	sp, r7
 80083d8:	bd80      	pop	{r7, pc}
	...

080083dc <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 80083dc:	b480      	push	{r7}
 80083de:	b085      	sub	sp, #20
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	4603      	mov	r3, r0
 80083e4:	6039      	str	r1, [r7, #0]
 80083e6:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 80083e8:	88fb      	ldrh	r3, [r7, #6]
 80083ea:	2b7f      	cmp	r3, #127	; 0x7f
 80083ec:	d802      	bhi.n	80083f4 <ff_convert+0x18>
		c = chr;
 80083ee:	88fb      	ldrh	r3, [r7, #6]
 80083f0:	81fb      	strh	r3, [r7, #14]
 80083f2:	e025      	b.n	8008440 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 80083f4:	683b      	ldr	r3, [r7, #0]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d00b      	beq.n	8008412 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 80083fa:	88fb      	ldrh	r3, [r7, #6]
 80083fc:	2bff      	cmp	r3, #255	; 0xff
 80083fe:	d805      	bhi.n	800840c <ff_convert+0x30>
 8008400:	88fb      	ldrh	r3, [r7, #6]
 8008402:	3b80      	subs	r3, #128	; 0x80
 8008404:	4a12      	ldr	r2, [pc, #72]	; (8008450 <ff_convert+0x74>)
 8008406:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800840a:	e000      	b.n	800840e <ff_convert+0x32>
 800840c:	2300      	movs	r3, #0
 800840e:	81fb      	strh	r3, [r7, #14]
 8008410:	e016      	b.n	8008440 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8008412:	2300      	movs	r3, #0
 8008414:	81fb      	strh	r3, [r7, #14]
 8008416:	e009      	b.n	800842c <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8008418:	89fb      	ldrh	r3, [r7, #14]
 800841a:	4a0d      	ldr	r2, [pc, #52]	; (8008450 <ff_convert+0x74>)
 800841c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008420:	88fa      	ldrh	r2, [r7, #6]
 8008422:	429a      	cmp	r2, r3
 8008424:	d006      	beq.n	8008434 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8008426:	89fb      	ldrh	r3, [r7, #14]
 8008428:	3301      	adds	r3, #1
 800842a:	81fb      	strh	r3, [r7, #14]
 800842c:	89fb      	ldrh	r3, [r7, #14]
 800842e:	2b7f      	cmp	r3, #127	; 0x7f
 8008430:	d9f2      	bls.n	8008418 <ff_convert+0x3c>
 8008432:	e000      	b.n	8008436 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8008434:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8008436:	89fb      	ldrh	r3, [r7, #14]
 8008438:	3380      	adds	r3, #128	; 0x80
 800843a:	b29b      	uxth	r3, r3
 800843c:	b2db      	uxtb	r3, r3
 800843e:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8008440:	89fb      	ldrh	r3, [r7, #14]
}
 8008442:	4618      	mov	r0, r3
 8008444:	3714      	adds	r7, #20
 8008446:	46bd      	mov	sp, r7
 8008448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844c:	4770      	bx	lr
 800844e:	bf00      	nop
 8008450:	080086e0 	.word	0x080086e0

08008454 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8008454:	b480      	push	{r7}
 8008456:	b087      	sub	sp, #28
 8008458:	af00      	add	r7, sp, #0
 800845a:	4603      	mov	r3, r0
 800845c:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800845e:	88fb      	ldrh	r3, [r7, #6]
 8008460:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008464:	d201      	bcs.n	800846a <ff_wtoupper+0x16>
 8008466:	4b3e      	ldr	r3, [pc, #248]	; (8008560 <ff_wtoupper+0x10c>)
 8008468:	e000      	b.n	800846c <ff_wtoupper+0x18>
 800846a:	4b3e      	ldr	r3, [pc, #248]	; (8008564 <ff_wtoupper+0x110>)
 800846c:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800846e:	697b      	ldr	r3, [r7, #20]
 8008470:	1c9a      	adds	r2, r3, #2
 8008472:	617a      	str	r2, [r7, #20]
 8008474:	881b      	ldrh	r3, [r3, #0]
 8008476:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8008478:	8a7b      	ldrh	r3, [r7, #18]
 800847a:	2b00      	cmp	r3, #0
 800847c:	d068      	beq.n	8008550 <ff_wtoupper+0xfc>
 800847e:	88fa      	ldrh	r2, [r7, #6]
 8008480:	8a7b      	ldrh	r3, [r7, #18]
 8008482:	429a      	cmp	r2, r3
 8008484:	d364      	bcc.n	8008550 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8008486:	697b      	ldr	r3, [r7, #20]
 8008488:	1c9a      	adds	r2, r3, #2
 800848a:	617a      	str	r2, [r7, #20]
 800848c:	881b      	ldrh	r3, [r3, #0]
 800848e:	823b      	strh	r3, [r7, #16]
 8008490:	8a3b      	ldrh	r3, [r7, #16]
 8008492:	0a1b      	lsrs	r3, r3, #8
 8008494:	81fb      	strh	r3, [r7, #14]
 8008496:	8a3b      	ldrh	r3, [r7, #16]
 8008498:	b2db      	uxtb	r3, r3
 800849a:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800849c:	88fa      	ldrh	r2, [r7, #6]
 800849e:	8a79      	ldrh	r1, [r7, #18]
 80084a0:	8a3b      	ldrh	r3, [r7, #16]
 80084a2:	440b      	add	r3, r1
 80084a4:	429a      	cmp	r2, r3
 80084a6:	da49      	bge.n	800853c <ff_wtoupper+0xe8>
			switch (cmd) {
 80084a8:	89fb      	ldrh	r3, [r7, #14]
 80084aa:	2b08      	cmp	r3, #8
 80084ac:	d84f      	bhi.n	800854e <ff_wtoupper+0xfa>
 80084ae:	a201      	add	r2, pc, #4	; (adr r2, 80084b4 <ff_wtoupper+0x60>)
 80084b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084b4:	080084d9 	.word	0x080084d9
 80084b8:	080084eb 	.word	0x080084eb
 80084bc:	08008501 	.word	0x08008501
 80084c0:	08008509 	.word	0x08008509
 80084c4:	08008511 	.word	0x08008511
 80084c8:	08008519 	.word	0x08008519
 80084cc:	08008521 	.word	0x08008521
 80084d0:	08008529 	.word	0x08008529
 80084d4:	08008531 	.word	0x08008531
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 80084d8:	88fa      	ldrh	r2, [r7, #6]
 80084da:	8a7b      	ldrh	r3, [r7, #18]
 80084dc:	1ad3      	subs	r3, r2, r3
 80084de:	005b      	lsls	r3, r3, #1
 80084e0:	697a      	ldr	r2, [r7, #20]
 80084e2:	4413      	add	r3, r2
 80084e4:	881b      	ldrh	r3, [r3, #0]
 80084e6:	80fb      	strh	r3, [r7, #6]
 80084e8:	e027      	b.n	800853a <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 80084ea:	88fa      	ldrh	r2, [r7, #6]
 80084ec:	8a7b      	ldrh	r3, [r7, #18]
 80084ee:	1ad3      	subs	r3, r2, r3
 80084f0:	b29b      	uxth	r3, r3
 80084f2:	f003 0301 	and.w	r3, r3, #1
 80084f6:	b29b      	uxth	r3, r3
 80084f8:	88fa      	ldrh	r2, [r7, #6]
 80084fa:	1ad3      	subs	r3, r2, r3
 80084fc:	80fb      	strh	r3, [r7, #6]
 80084fe:	e01c      	b.n	800853a <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8008500:	88fb      	ldrh	r3, [r7, #6]
 8008502:	3b10      	subs	r3, #16
 8008504:	80fb      	strh	r3, [r7, #6]
 8008506:	e018      	b.n	800853a <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8008508:	88fb      	ldrh	r3, [r7, #6]
 800850a:	3b20      	subs	r3, #32
 800850c:	80fb      	strh	r3, [r7, #6]
 800850e:	e014      	b.n	800853a <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8008510:	88fb      	ldrh	r3, [r7, #6]
 8008512:	3b30      	subs	r3, #48	; 0x30
 8008514:	80fb      	strh	r3, [r7, #6]
 8008516:	e010      	b.n	800853a <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8008518:	88fb      	ldrh	r3, [r7, #6]
 800851a:	3b1a      	subs	r3, #26
 800851c:	80fb      	strh	r3, [r7, #6]
 800851e:	e00c      	b.n	800853a <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8008520:	88fb      	ldrh	r3, [r7, #6]
 8008522:	3308      	adds	r3, #8
 8008524:	80fb      	strh	r3, [r7, #6]
 8008526:	e008      	b.n	800853a <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8008528:	88fb      	ldrh	r3, [r7, #6]
 800852a:	3b50      	subs	r3, #80	; 0x50
 800852c:	80fb      	strh	r3, [r7, #6]
 800852e:	e004      	b.n	800853a <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8008530:	88fb      	ldrh	r3, [r7, #6]
 8008532:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8008536:	80fb      	strh	r3, [r7, #6]
 8008538:	bf00      	nop
			}
			break;
 800853a:	e008      	b.n	800854e <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800853c:	89fb      	ldrh	r3, [r7, #14]
 800853e:	2b00      	cmp	r3, #0
 8008540:	d195      	bne.n	800846e <ff_wtoupper+0x1a>
 8008542:	8a3b      	ldrh	r3, [r7, #16]
 8008544:	005b      	lsls	r3, r3, #1
 8008546:	697a      	ldr	r2, [r7, #20]
 8008548:	4413      	add	r3, r2
 800854a:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800854c:	e78f      	b.n	800846e <ff_wtoupper+0x1a>
			break;
 800854e:	bf00      	nop
	}

	return chr;
 8008550:	88fb      	ldrh	r3, [r7, #6]
}
 8008552:	4618      	mov	r0, r3
 8008554:	371c      	adds	r7, #28
 8008556:	46bd      	mov	sp, r7
 8008558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855c:	4770      	bx	lr
 800855e:	bf00      	nop
 8008560:	080087e0 	.word	0x080087e0
 8008564:	080089d4 	.word	0x080089d4

08008568 <__libc_init_array>:
 8008568:	b570      	push	{r4, r5, r6, lr}
 800856a:	4d0d      	ldr	r5, [pc, #52]	; (80085a0 <__libc_init_array+0x38>)
 800856c:	4c0d      	ldr	r4, [pc, #52]	; (80085a4 <__libc_init_array+0x3c>)
 800856e:	1b64      	subs	r4, r4, r5
 8008570:	10a4      	asrs	r4, r4, #2
 8008572:	2600      	movs	r6, #0
 8008574:	42a6      	cmp	r6, r4
 8008576:	d109      	bne.n	800858c <__libc_init_array+0x24>
 8008578:	4d0b      	ldr	r5, [pc, #44]	; (80085a8 <__libc_init_array+0x40>)
 800857a:	4c0c      	ldr	r4, [pc, #48]	; (80085ac <__libc_init_array+0x44>)
 800857c:	f000 f820 	bl	80085c0 <_init>
 8008580:	1b64      	subs	r4, r4, r5
 8008582:	10a4      	asrs	r4, r4, #2
 8008584:	2600      	movs	r6, #0
 8008586:	42a6      	cmp	r6, r4
 8008588:	d105      	bne.n	8008596 <__libc_init_array+0x2e>
 800858a:	bd70      	pop	{r4, r5, r6, pc}
 800858c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008590:	4798      	blx	r3
 8008592:	3601      	adds	r6, #1
 8008594:	e7ee      	b.n	8008574 <__libc_init_array+0xc>
 8008596:	f855 3b04 	ldr.w	r3, [r5], #4
 800859a:	4798      	blx	r3
 800859c:	3601      	adds	r6, #1
 800859e:	e7f2      	b.n	8008586 <__libc_init_array+0x1e>
 80085a0:	08008a98 	.word	0x08008a98
 80085a4:	08008a98 	.word	0x08008a98
 80085a8:	08008a98 	.word	0x08008a98
 80085ac:	08008a9c 	.word	0x08008a9c

080085b0 <memset>:
 80085b0:	4402      	add	r2, r0
 80085b2:	4603      	mov	r3, r0
 80085b4:	4293      	cmp	r3, r2
 80085b6:	d100      	bne.n	80085ba <memset+0xa>
 80085b8:	4770      	bx	lr
 80085ba:	f803 1b01 	strb.w	r1, [r3], #1
 80085be:	e7f9      	b.n	80085b4 <memset+0x4>

080085c0 <_init>:
 80085c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085c2:	bf00      	nop
 80085c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085c6:	bc08      	pop	{r3}
 80085c8:	469e      	mov	lr, r3
 80085ca:	4770      	bx	lr

080085cc <_fini>:
 80085cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085ce:	bf00      	nop
 80085d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085d2:	bc08      	pop	{r3}
 80085d4:	469e      	mov	lr, r3
 80085d6:	4770      	bx	lr
