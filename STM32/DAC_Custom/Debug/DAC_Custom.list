
DAC_Custom.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000050f4  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f0  080052c0  080052c0  000152c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080054b0  080054b0  000200a0  2**0
                  CONTENTS
  4 .ARM          00000008  080054b0  080054b0  000154b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080054b8  080054b8  000200a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080054b8  080054b8  000154b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080054bc  080054bc  000154bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  20000000  080054c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002114  200000a0  08005560  000200a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200021b4  08005560  000221b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000db9c  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c05  00000000  00000000  0002dc6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cb0  00000000  00000000  0002f878  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c08  00000000  00000000  00030528  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002588a  00000000  00000000  00031130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dd6e  00000000  00000000  000569ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eec67  00000000  00000000  00064728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015338f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003934  00000000  00000000  001533e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	200000a0 	.word	0x200000a0
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080052a4 	.word	0x080052a4

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	200000a4 	.word	0x200000a4
 8000204:	080052a4 	.word	0x080052a4

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__gedf2>:
 80009a4:	f04f 3cff 	mov.w	ip, #4294967295
 80009a8:	e006      	b.n	80009b8 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__ledf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	e002      	b.n	80009b8 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__cmpdf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ce:	d01b      	beq.n	8000a08 <__cmpdf2+0x54>
 80009d0:	b001      	add	sp, #4
 80009d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009d6:	bf0c      	ite	eq
 80009d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009dc:	ea91 0f03 	teqne	r1, r3
 80009e0:	bf02      	ittt	eq
 80009e2:	ea90 0f02 	teqeq	r0, r2
 80009e6:	2000      	moveq	r0, #0
 80009e8:	4770      	bxeq	lr
 80009ea:	f110 0f00 	cmn.w	r0, #0
 80009ee:	ea91 0f03 	teq	r1, r3
 80009f2:	bf58      	it	pl
 80009f4:	4299      	cmppl	r1, r3
 80009f6:	bf08      	it	eq
 80009f8:	4290      	cmpeq	r0, r2
 80009fa:	bf2c      	ite	cs
 80009fc:	17d8      	asrcs	r0, r3, #31
 80009fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a02:	f040 0001 	orr.w	r0, r0, #1
 8000a06:	4770      	bx	lr
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__cmpdf2+0x64>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d107      	bne.n	8000a28 <__cmpdf2+0x74>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d1d6      	bne.n	80009d0 <__cmpdf2+0x1c>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d0d3      	beq.n	80009d0 <__cmpdf2+0x1c>
 8000a28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdrcmple>:
 8000a30:	4684      	mov	ip, r0
 8000a32:	4610      	mov	r0, r2
 8000a34:	4662      	mov	r2, ip
 8000a36:	468c      	mov	ip, r1
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4663      	mov	r3, ip
 8000a3c:	e000      	b.n	8000a40 <__aeabi_cdcmpeq>
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdcmpeq>:
 8000a40:	b501      	push	{r0, lr}
 8000a42:	f7ff ffb7 	bl	80009b4 <__cmpdf2>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	bf48      	it	mi
 8000a4a:	f110 0f00 	cmnmi.w	r0, #0
 8000a4e:	bd01      	pop	{r0, pc}

08000a50 <__aeabi_dcmpeq>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff fff4 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a58:	bf0c      	ite	eq
 8000a5a:	2001      	moveq	r0, #1
 8000a5c:	2000      	movne	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmplt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffea 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmple>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffe0 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpge>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffce 	bl	8000a30 <__aeabi_cdrcmple>
 8000a94:	bf94      	ite	ls
 8000a96:	2001      	movls	r0, #1
 8000a98:	2000      	movhi	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpgt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffc4 	bl	8000a30 <__aeabi_cdrcmple>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_d2iz>:
 8000ab4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000abc:	d215      	bcs.n	8000aea <__aeabi_d2iz+0x36>
 8000abe:	d511      	bpl.n	8000ae4 <__aeabi_d2iz+0x30>
 8000ac0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac8:	d912      	bls.n	8000af0 <__aeabi_d2iz+0x3c>
 8000aca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ace:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ad2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	fa23 f002 	lsr.w	r0, r3, r2
 8000ade:	bf18      	it	ne
 8000ae0:	4240      	negne	r0, r0
 8000ae2:	4770      	bx	lr
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aee:	d105      	bne.n	8000afc <__aeabi_d2iz+0x48>
 8000af0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af4:	bf08      	it	eq
 8000af6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000afa:	4770      	bx	lr
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop

08000b04 <__aeabi_d2uiz>:
 8000b04:	004a      	lsls	r2, r1, #1
 8000b06:	d211      	bcs.n	8000b2c <__aeabi_d2uiz+0x28>
 8000b08:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b0c:	d211      	bcs.n	8000b32 <__aeabi_d2uiz+0x2e>
 8000b0e:	d50d      	bpl.n	8000b2c <__aeabi_d2uiz+0x28>
 8000b10:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b14:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b18:	d40e      	bmi.n	8000b38 <__aeabi_d2uiz+0x34>
 8000b1a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b22:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b26:	fa23 f002 	lsr.w	r0, r3, r2
 8000b2a:	4770      	bx	lr
 8000b2c:	f04f 0000 	mov.w	r0, #0
 8000b30:	4770      	bx	lr
 8000b32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b36:	d102      	bne.n	8000b3e <__aeabi_d2uiz+0x3a>
 8000b38:	f04f 30ff 	mov.w	r0, #4294967295
 8000b3c:	4770      	bx	lr
 8000b3e:	f04f 0000 	mov.w	r0, #0
 8000b42:	4770      	bx	lr

08000b44 <__aeabi_uldivmod>:
 8000b44:	b953      	cbnz	r3, 8000b5c <__aeabi_uldivmod+0x18>
 8000b46:	b94a      	cbnz	r2, 8000b5c <__aeabi_uldivmod+0x18>
 8000b48:	2900      	cmp	r1, #0
 8000b4a:	bf08      	it	eq
 8000b4c:	2800      	cmpeq	r0, #0
 8000b4e:	bf1c      	itt	ne
 8000b50:	f04f 31ff 	movne.w	r1, #4294967295
 8000b54:	f04f 30ff 	movne.w	r0, #4294967295
 8000b58:	f000 b96e 	b.w	8000e38 <__aeabi_idiv0>
 8000b5c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b60:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b64:	f000 f806 	bl	8000b74 <__udivmoddi4>
 8000b68:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b70:	b004      	add	sp, #16
 8000b72:	4770      	bx	lr

08000b74 <__udivmoddi4>:
 8000b74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b78:	9d08      	ldr	r5, [sp, #32]
 8000b7a:	4604      	mov	r4, r0
 8000b7c:	468c      	mov	ip, r1
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	f040 8083 	bne.w	8000c8a <__udivmoddi4+0x116>
 8000b84:	428a      	cmp	r2, r1
 8000b86:	4617      	mov	r7, r2
 8000b88:	d947      	bls.n	8000c1a <__udivmoddi4+0xa6>
 8000b8a:	fab2 f282 	clz	r2, r2
 8000b8e:	b142      	cbz	r2, 8000ba2 <__udivmoddi4+0x2e>
 8000b90:	f1c2 0020 	rsb	r0, r2, #32
 8000b94:	fa24 f000 	lsr.w	r0, r4, r0
 8000b98:	4091      	lsls	r1, r2
 8000b9a:	4097      	lsls	r7, r2
 8000b9c:	ea40 0c01 	orr.w	ip, r0, r1
 8000ba0:	4094      	lsls	r4, r2
 8000ba2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000ba6:	0c23      	lsrs	r3, r4, #16
 8000ba8:	fbbc f6f8 	udiv	r6, ip, r8
 8000bac:	fa1f fe87 	uxth.w	lr, r7
 8000bb0:	fb08 c116 	mls	r1, r8, r6, ip
 8000bb4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bb8:	fb06 f10e 	mul.w	r1, r6, lr
 8000bbc:	4299      	cmp	r1, r3
 8000bbe:	d909      	bls.n	8000bd4 <__udivmoddi4+0x60>
 8000bc0:	18fb      	adds	r3, r7, r3
 8000bc2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000bc6:	f080 8119 	bcs.w	8000dfc <__udivmoddi4+0x288>
 8000bca:	4299      	cmp	r1, r3
 8000bcc:	f240 8116 	bls.w	8000dfc <__udivmoddi4+0x288>
 8000bd0:	3e02      	subs	r6, #2
 8000bd2:	443b      	add	r3, r7
 8000bd4:	1a5b      	subs	r3, r3, r1
 8000bd6:	b2a4      	uxth	r4, r4
 8000bd8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bdc:	fb08 3310 	mls	r3, r8, r0, r3
 8000be0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000be4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000be8:	45a6      	cmp	lr, r4
 8000bea:	d909      	bls.n	8000c00 <__udivmoddi4+0x8c>
 8000bec:	193c      	adds	r4, r7, r4
 8000bee:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bf2:	f080 8105 	bcs.w	8000e00 <__udivmoddi4+0x28c>
 8000bf6:	45a6      	cmp	lr, r4
 8000bf8:	f240 8102 	bls.w	8000e00 <__udivmoddi4+0x28c>
 8000bfc:	3802      	subs	r0, #2
 8000bfe:	443c      	add	r4, r7
 8000c00:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c04:	eba4 040e 	sub.w	r4, r4, lr
 8000c08:	2600      	movs	r6, #0
 8000c0a:	b11d      	cbz	r5, 8000c14 <__udivmoddi4+0xa0>
 8000c0c:	40d4      	lsrs	r4, r2
 8000c0e:	2300      	movs	r3, #0
 8000c10:	e9c5 4300 	strd	r4, r3, [r5]
 8000c14:	4631      	mov	r1, r6
 8000c16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c1a:	b902      	cbnz	r2, 8000c1e <__udivmoddi4+0xaa>
 8000c1c:	deff      	udf	#255	; 0xff
 8000c1e:	fab2 f282 	clz	r2, r2
 8000c22:	2a00      	cmp	r2, #0
 8000c24:	d150      	bne.n	8000cc8 <__udivmoddi4+0x154>
 8000c26:	1bcb      	subs	r3, r1, r7
 8000c28:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c2c:	fa1f f887 	uxth.w	r8, r7
 8000c30:	2601      	movs	r6, #1
 8000c32:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c36:	0c21      	lsrs	r1, r4, #16
 8000c38:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c3c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c40:	fb08 f30c 	mul.w	r3, r8, ip
 8000c44:	428b      	cmp	r3, r1
 8000c46:	d907      	bls.n	8000c58 <__udivmoddi4+0xe4>
 8000c48:	1879      	adds	r1, r7, r1
 8000c4a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c4e:	d202      	bcs.n	8000c56 <__udivmoddi4+0xe2>
 8000c50:	428b      	cmp	r3, r1
 8000c52:	f200 80e9 	bhi.w	8000e28 <__udivmoddi4+0x2b4>
 8000c56:	4684      	mov	ip, r0
 8000c58:	1ac9      	subs	r1, r1, r3
 8000c5a:	b2a3      	uxth	r3, r4
 8000c5c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c60:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c64:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000c68:	fb08 f800 	mul.w	r8, r8, r0
 8000c6c:	45a0      	cmp	r8, r4
 8000c6e:	d907      	bls.n	8000c80 <__udivmoddi4+0x10c>
 8000c70:	193c      	adds	r4, r7, r4
 8000c72:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c76:	d202      	bcs.n	8000c7e <__udivmoddi4+0x10a>
 8000c78:	45a0      	cmp	r8, r4
 8000c7a:	f200 80d9 	bhi.w	8000e30 <__udivmoddi4+0x2bc>
 8000c7e:	4618      	mov	r0, r3
 8000c80:	eba4 0408 	sub.w	r4, r4, r8
 8000c84:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c88:	e7bf      	b.n	8000c0a <__udivmoddi4+0x96>
 8000c8a:	428b      	cmp	r3, r1
 8000c8c:	d909      	bls.n	8000ca2 <__udivmoddi4+0x12e>
 8000c8e:	2d00      	cmp	r5, #0
 8000c90:	f000 80b1 	beq.w	8000df6 <__udivmoddi4+0x282>
 8000c94:	2600      	movs	r6, #0
 8000c96:	e9c5 0100 	strd	r0, r1, [r5]
 8000c9a:	4630      	mov	r0, r6
 8000c9c:	4631      	mov	r1, r6
 8000c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca2:	fab3 f683 	clz	r6, r3
 8000ca6:	2e00      	cmp	r6, #0
 8000ca8:	d14a      	bne.n	8000d40 <__udivmoddi4+0x1cc>
 8000caa:	428b      	cmp	r3, r1
 8000cac:	d302      	bcc.n	8000cb4 <__udivmoddi4+0x140>
 8000cae:	4282      	cmp	r2, r0
 8000cb0:	f200 80b8 	bhi.w	8000e24 <__udivmoddi4+0x2b0>
 8000cb4:	1a84      	subs	r4, r0, r2
 8000cb6:	eb61 0103 	sbc.w	r1, r1, r3
 8000cba:	2001      	movs	r0, #1
 8000cbc:	468c      	mov	ip, r1
 8000cbe:	2d00      	cmp	r5, #0
 8000cc0:	d0a8      	beq.n	8000c14 <__udivmoddi4+0xa0>
 8000cc2:	e9c5 4c00 	strd	r4, ip, [r5]
 8000cc6:	e7a5      	b.n	8000c14 <__udivmoddi4+0xa0>
 8000cc8:	f1c2 0320 	rsb	r3, r2, #32
 8000ccc:	fa20 f603 	lsr.w	r6, r0, r3
 8000cd0:	4097      	lsls	r7, r2
 8000cd2:	fa01 f002 	lsl.w	r0, r1, r2
 8000cd6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cda:	40d9      	lsrs	r1, r3
 8000cdc:	4330      	orrs	r0, r6
 8000cde:	0c03      	lsrs	r3, r0, #16
 8000ce0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ce4:	fa1f f887 	uxth.w	r8, r7
 8000ce8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000cec:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cf0:	fb06 f108 	mul.w	r1, r6, r8
 8000cf4:	4299      	cmp	r1, r3
 8000cf6:	fa04 f402 	lsl.w	r4, r4, r2
 8000cfa:	d909      	bls.n	8000d10 <__udivmoddi4+0x19c>
 8000cfc:	18fb      	adds	r3, r7, r3
 8000cfe:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d02:	f080 808d 	bcs.w	8000e20 <__udivmoddi4+0x2ac>
 8000d06:	4299      	cmp	r1, r3
 8000d08:	f240 808a 	bls.w	8000e20 <__udivmoddi4+0x2ac>
 8000d0c:	3e02      	subs	r6, #2
 8000d0e:	443b      	add	r3, r7
 8000d10:	1a5b      	subs	r3, r3, r1
 8000d12:	b281      	uxth	r1, r0
 8000d14:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d18:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d1c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d20:	fb00 f308 	mul.w	r3, r0, r8
 8000d24:	428b      	cmp	r3, r1
 8000d26:	d907      	bls.n	8000d38 <__udivmoddi4+0x1c4>
 8000d28:	1879      	adds	r1, r7, r1
 8000d2a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d2e:	d273      	bcs.n	8000e18 <__udivmoddi4+0x2a4>
 8000d30:	428b      	cmp	r3, r1
 8000d32:	d971      	bls.n	8000e18 <__udivmoddi4+0x2a4>
 8000d34:	3802      	subs	r0, #2
 8000d36:	4439      	add	r1, r7
 8000d38:	1acb      	subs	r3, r1, r3
 8000d3a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d3e:	e778      	b.n	8000c32 <__udivmoddi4+0xbe>
 8000d40:	f1c6 0c20 	rsb	ip, r6, #32
 8000d44:	fa03 f406 	lsl.w	r4, r3, r6
 8000d48:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d4c:	431c      	orrs	r4, r3
 8000d4e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d52:	fa01 f306 	lsl.w	r3, r1, r6
 8000d56:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d5a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000d5e:	431f      	orrs	r7, r3
 8000d60:	0c3b      	lsrs	r3, r7, #16
 8000d62:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d66:	fa1f f884 	uxth.w	r8, r4
 8000d6a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d6e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d72:	fb09 fa08 	mul.w	sl, r9, r8
 8000d76:	458a      	cmp	sl, r1
 8000d78:	fa02 f206 	lsl.w	r2, r2, r6
 8000d7c:	fa00 f306 	lsl.w	r3, r0, r6
 8000d80:	d908      	bls.n	8000d94 <__udivmoddi4+0x220>
 8000d82:	1861      	adds	r1, r4, r1
 8000d84:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d88:	d248      	bcs.n	8000e1c <__udivmoddi4+0x2a8>
 8000d8a:	458a      	cmp	sl, r1
 8000d8c:	d946      	bls.n	8000e1c <__udivmoddi4+0x2a8>
 8000d8e:	f1a9 0902 	sub.w	r9, r9, #2
 8000d92:	4421      	add	r1, r4
 8000d94:	eba1 010a 	sub.w	r1, r1, sl
 8000d98:	b2bf      	uxth	r7, r7
 8000d9a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d9e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000da2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000da6:	fb00 f808 	mul.w	r8, r0, r8
 8000daa:	45b8      	cmp	r8, r7
 8000dac:	d907      	bls.n	8000dbe <__udivmoddi4+0x24a>
 8000dae:	19e7      	adds	r7, r4, r7
 8000db0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000db4:	d22e      	bcs.n	8000e14 <__udivmoddi4+0x2a0>
 8000db6:	45b8      	cmp	r8, r7
 8000db8:	d92c      	bls.n	8000e14 <__udivmoddi4+0x2a0>
 8000dba:	3802      	subs	r0, #2
 8000dbc:	4427      	add	r7, r4
 8000dbe:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dc2:	eba7 0708 	sub.w	r7, r7, r8
 8000dc6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dca:	454f      	cmp	r7, r9
 8000dcc:	46c6      	mov	lr, r8
 8000dce:	4649      	mov	r1, r9
 8000dd0:	d31a      	bcc.n	8000e08 <__udivmoddi4+0x294>
 8000dd2:	d017      	beq.n	8000e04 <__udivmoddi4+0x290>
 8000dd4:	b15d      	cbz	r5, 8000dee <__udivmoddi4+0x27a>
 8000dd6:	ebb3 020e 	subs.w	r2, r3, lr
 8000dda:	eb67 0701 	sbc.w	r7, r7, r1
 8000dde:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000de2:	40f2      	lsrs	r2, r6
 8000de4:	ea4c 0202 	orr.w	r2, ip, r2
 8000de8:	40f7      	lsrs	r7, r6
 8000dea:	e9c5 2700 	strd	r2, r7, [r5]
 8000dee:	2600      	movs	r6, #0
 8000df0:	4631      	mov	r1, r6
 8000df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df6:	462e      	mov	r6, r5
 8000df8:	4628      	mov	r0, r5
 8000dfa:	e70b      	b.n	8000c14 <__udivmoddi4+0xa0>
 8000dfc:	4606      	mov	r6, r0
 8000dfe:	e6e9      	b.n	8000bd4 <__udivmoddi4+0x60>
 8000e00:	4618      	mov	r0, r3
 8000e02:	e6fd      	b.n	8000c00 <__udivmoddi4+0x8c>
 8000e04:	4543      	cmp	r3, r8
 8000e06:	d2e5      	bcs.n	8000dd4 <__udivmoddi4+0x260>
 8000e08:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e0c:	eb69 0104 	sbc.w	r1, r9, r4
 8000e10:	3801      	subs	r0, #1
 8000e12:	e7df      	b.n	8000dd4 <__udivmoddi4+0x260>
 8000e14:	4608      	mov	r0, r1
 8000e16:	e7d2      	b.n	8000dbe <__udivmoddi4+0x24a>
 8000e18:	4660      	mov	r0, ip
 8000e1a:	e78d      	b.n	8000d38 <__udivmoddi4+0x1c4>
 8000e1c:	4681      	mov	r9, r0
 8000e1e:	e7b9      	b.n	8000d94 <__udivmoddi4+0x220>
 8000e20:	4666      	mov	r6, ip
 8000e22:	e775      	b.n	8000d10 <__udivmoddi4+0x19c>
 8000e24:	4630      	mov	r0, r6
 8000e26:	e74a      	b.n	8000cbe <__udivmoddi4+0x14a>
 8000e28:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e2c:	4439      	add	r1, r7
 8000e2e:	e713      	b.n	8000c58 <__udivmoddi4+0xe4>
 8000e30:	3802      	subs	r0, #2
 8000e32:	443c      	add	r4, r7
 8000e34:	e724      	b.n	8000c80 <__udivmoddi4+0x10c>
 8000e36:	bf00      	nop

08000e38 <__aeabi_idiv0>:
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop

08000e3c <DAC_OUTPUT>:
pin2	PG6
pin1	PC6
pin0	PC7
*/

void DAC_OUTPUT(){
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOI, GPIO_PIN_3, !!(DAC_REG & (1<<7)));
 8000e40:	4b37      	ldr	r3, [pc, #220]	; (8000f20 <DAC_OUTPUT+0xe4>)
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	b25b      	sxtb	r3, r3
 8000e46:	b2db      	uxtb	r3, r3
 8000e48:	09db      	lsrs	r3, r3, #7
 8000e4a:	b2db      	uxtb	r3, r3
 8000e4c:	461a      	mov	r2, r3
 8000e4e:	2108      	movs	r1, #8
 8000e50:	4834      	ldr	r0, [pc, #208]	; (8000f24 <DAC_OUTPUT+0xe8>)
 8000e52:	f001 f82b 	bl	8001eac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOH, GPIO_PIN_6, !!(DAC_REG & (1<<6)));
 8000e56:	4b32      	ldr	r3, [pc, #200]	; (8000f20 <DAC_OUTPUT+0xe4>)
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	bf14      	ite	ne
 8000e62:	2301      	movne	r3, #1
 8000e64:	2300      	moveq	r3, #0
 8000e66:	b2db      	uxtb	r3, r3
 8000e68:	461a      	mov	r2, r3
 8000e6a:	2140      	movs	r1, #64	; 0x40
 8000e6c:	482e      	ldr	r0, [pc, #184]	; (8000f28 <DAC_OUTPUT+0xec>)
 8000e6e:	f001 f81d 	bl	8001eac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, !!(DAC_REG & (1<<5)));
 8000e72:	4b2b      	ldr	r3, [pc, #172]	; (8000f20 <DAC_OUTPUT+0xe4>)
 8000e74:	781b      	ldrb	r3, [r3, #0]
 8000e76:	f003 0320 	and.w	r3, r3, #32
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	bf14      	ite	ne
 8000e7e:	2301      	movne	r3, #1
 8000e80:	2300      	moveq	r3, #0
 8000e82:	b2db      	uxtb	r3, r3
 8000e84:	461a      	mov	r2, r3
 8000e86:	2101      	movs	r1, #1
 8000e88:	4826      	ldr	r0, [pc, #152]	; (8000f24 <DAC_OUTPUT+0xe8>)
 8000e8a:	f001 f80f 	bl	8001eac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7, !!(DAC_REG & (1<<4)));
 8000e8e:	4b24      	ldr	r3, [pc, #144]	; (8000f20 <DAC_OUTPUT+0xe4>)
 8000e90:	781b      	ldrb	r3, [r3, #0]
 8000e92:	f003 0310 	and.w	r3, r3, #16
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	bf14      	ite	ne
 8000e9a:	2301      	movne	r3, #1
 8000e9c:	2300      	moveq	r3, #0
 8000e9e:	b2db      	uxtb	r3, r3
 8000ea0:	461a      	mov	r2, r3
 8000ea2:	2180      	movs	r1, #128	; 0x80
 8000ea4:	4821      	ldr	r0, [pc, #132]	; (8000f2c <DAC_OUTPUT+0xf0>)
 8000ea6:	f001 f801 	bl	8001eac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, !!(DAC_REG & (1<<3)));
 8000eaa:	4b1d      	ldr	r3, [pc, #116]	; (8000f20 <DAC_OUTPUT+0xe4>)
 8000eac:	781b      	ldrb	r3, [r3, #0]
 8000eae:	f003 0308 	and.w	r3, r3, #8
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	bf14      	ite	ne
 8000eb6:	2301      	movne	r3, #1
 8000eb8:	2300      	moveq	r3, #0
 8000eba:	b2db      	uxtb	r3, r3
 8000ebc:	461a      	mov	r2, r3
 8000ebe:	2110      	movs	r1, #16
 8000ec0:	481b      	ldr	r0, [pc, #108]	; (8000f30 <DAC_OUTPUT+0xf4>)
 8000ec2:	f000 fff3 	bl	8001eac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, !!(DAC_REG & (1<<2)));
 8000ec6:	4b16      	ldr	r3, [pc, #88]	; (8000f20 <DAC_OUTPUT+0xe4>)
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	f003 0304 	and.w	r3, r3, #4
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	bf14      	ite	ne
 8000ed2:	2301      	movne	r3, #1
 8000ed4:	2300      	moveq	r3, #0
 8000ed6:	b2db      	uxtb	r3, r3
 8000ed8:	461a      	mov	r2, r3
 8000eda:	2140      	movs	r1, #64	; 0x40
 8000edc:	4813      	ldr	r0, [pc, #76]	; (8000f2c <DAC_OUTPUT+0xf0>)
 8000ede:	f000 ffe5 	bl	8001eac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, !!(DAC_REG & (1<<1)));
 8000ee2:	4b0f      	ldr	r3, [pc, #60]	; (8000f20 <DAC_OUTPUT+0xe4>)
 8000ee4:	781b      	ldrb	r3, [r3, #0]
 8000ee6:	f003 0302 	and.w	r3, r3, #2
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	bf14      	ite	ne
 8000eee:	2301      	movne	r3, #1
 8000ef0:	2300      	moveq	r3, #0
 8000ef2:	b2db      	uxtb	r3, r3
 8000ef4:	461a      	mov	r2, r3
 8000ef6:	2140      	movs	r1, #64	; 0x40
 8000ef8:	480e      	ldr	r0, [pc, #56]	; (8000f34 <DAC_OUTPUT+0xf8>)
 8000efa:	f000 ffd7 	bl	8001eac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, !!(DAC_REG & (1<<0)));
 8000efe:	4b08      	ldr	r3, [pc, #32]	; (8000f20 <DAC_OUTPUT+0xe4>)
 8000f00:	781b      	ldrb	r3, [r3, #0]
 8000f02:	f003 0301 	and.w	r3, r3, #1
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	bf14      	ite	ne
 8000f0a:	2301      	movne	r3, #1
 8000f0c:	2300      	moveq	r3, #0
 8000f0e:	b2db      	uxtb	r3, r3
 8000f10:	461a      	mov	r2, r3
 8000f12:	2180      	movs	r1, #128	; 0x80
 8000f14:	4807      	ldr	r0, [pc, #28]	; (8000f34 <DAC_OUTPUT+0xf8>)
 8000f16:	f000 ffc9 	bl	8001eac <HAL_GPIO_WritePin>
}
 8000f1a:	bf00      	nop
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	200000ca 	.word	0x200000ca
 8000f24:	40022000 	.word	0x40022000
 8000f28:	40021c00 	.word	0x40021c00
 8000f2c:	40021800 	.word	0x40021800
 8000f30:	40020400 	.word	0x40020400
 8000f34:	40020800 	.word	0x40020800

08000f38 <read_key_release>:
A2 PF9
A3 PF8
A4 PF7
A5 PF6
*/
int read_key_release(){
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
	int a;
	r_data[0] = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8000f3e:	2101      	movs	r1, #1
 8000f40:	4826      	ldr	r0, [pc, #152]	; (8000fdc <read_key_release+0xa4>)
 8000f42:	f000 ff9b 	bl	8001e7c <HAL_GPIO_ReadPin>
 8000f46:	4603      	mov	r3, r0
 8000f48:	461a      	mov	r2, r3
 8000f4a:	4b25      	ldr	r3, [pc, #148]	; (8000fe0 <read_key_release+0xa8>)
 8000f4c:	701a      	strb	r2, [r3, #0]
	r_data[1] = HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_10);
 8000f4e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f52:	4824      	ldr	r0, [pc, #144]	; (8000fe4 <read_key_release+0xac>)
 8000f54:	f000 ff92 	bl	8001e7c <HAL_GPIO_ReadPin>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	461a      	mov	r2, r3
 8000f5c:	4b20      	ldr	r3, [pc, #128]	; (8000fe0 <read_key_release+0xa8>)
 8000f5e:	705a      	strb	r2, [r3, #1]
	r_data[2] = HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_9);
 8000f60:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f64:	481f      	ldr	r0, [pc, #124]	; (8000fe4 <read_key_release+0xac>)
 8000f66:	f000 ff89 	bl	8001e7c <HAL_GPIO_ReadPin>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	461a      	mov	r2, r3
 8000f6e:	4b1c      	ldr	r3, [pc, #112]	; (8000fe0 <read_key_release+0xa8>)
 8000f70:	709a      	strb	r2, [r3, #2]
	r_data[3] = HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_8);
 8000f72:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f76:	481b      	ldr	r0, [pc, #108]	; (8000fe4 <read_key_release+0xac>)
 8000f78:	f000 ff80 	bl	8001e7c <HAL_GPIO_ReadPin>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	461a      	mov	r2, r3
 8000f80:	4b17      	ldr	r3, [pc, #92]	; (8000fe0 <read_key_release+0xa8>)
 8000f82:	70da      	strb	r2, [r3, #3]
	r_data[4] = HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_7);
 8000f84:	2180      	movs	r1, #128	; 0x80
 8000f86:	4817      	ldr	r0, [pc, #92]	; (8000fe4 <read_key_release+0xac>)
 8000f88:	f000 ff78 	bl	8001e7c <HAL_GPIO_ReadPin>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	461a      	mov	r2, r3
 8000f90:	4b13      	ldr	r3, [pc, #76]	; (8000fe0 <read_key_release+0xa8>)
 8000f92:	711a      	strb	r2, [r3, #4]
	r_data[5] = HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_6);
 8000f94:	2140      	movs	r1, #64	; 0x40
 8000f96:	4813      	ldr	r0, [pc, #76]	; (8000fe4 <read_key_release+0xac>)
 8000f98:	f000 ff70 	bl	8001e7c <HAL_GPIO_ReadPin>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	461a      	mov	r2, r3
 8000fa0:	4b0f      	ldr	r3, [pc, #60]	; (8000fe0 <read_key_release+0xa8>)
 8000fa2:	715a      	strb	r2, [r3, #5]

	a = (r_data[5]<<5) + (r_data[4]<<4) + (r_data[3]<<3) + (r_data[2]<<2) + (r_data[1]<<1) + (r_data[0]<<0);
 8000fa4:	4b0e      	ldr	r3, [pc, #56]	; (8000fe0 <read_key_release+0xa8>)
 8000fa6:	795b      	ldrb	r3, [r3, #5]
 8000fa8:	015a      	lsls	r2, r3, #5
 8000faa:	4b0d      	ldr	r3, [pc, #52]	; (8000fe0 <read_key_release+0xa8>)
 8000fac:	791b      	ldrb	r3, [r3, #4]
 8000fae:	011b      	lsls	r3, r3, #4
 8000fb0:	441a      	add	r2, r3
 8000fb2:	4b0b      	ldr	r3, [pc, #44]	; (8000fe0 <read_key_release+0xa8>)
 8000fb4:	78db      	ldrb	r3, [r3, #3]
 8000fb6:	00db      	lsls	r3, r3, #3
 8000fb8:	441a      	add	r2, r3
 8000fba:	4b09      	ldr	r3, [pc, #36]	; (8000fe0 <read_key_release+0xa8>)
 8000fbc:	789b      	ldrb	r3, [r3, #2]
 8000fbe:	009b      	lsls	r3, r3, #2
 8000fc0:	441a      	add	r2, r3
 8000fc2:	4b07      	ldr	r3, [pc, #28]	; (8000fe0 <read_key_release+0xa8>)
 8000fc4:	785b      	ldrb	r3, [r3, #1]
 8000fc6:	005b      	lsls	r3, r3, #1
 8000fc8:	4413      	add	r3, r2
 8000fca:	4a05      	ldr	r2, [pc, #20]	; (8000fe0 <read_key_release+0xa8>)
 8000fcc:	7812      	ldrb	r2, [r2, #0]
 8000fce:	4413      	add	r3, r2
 8000fd0:	607b      	str	r3, [r7, #4]
	return a;
 8000fd2:	687b      	ldr	r3, [r7, #4]
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	3708      	adds	r7, #8
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	40020000 	.word	0x40020000
 8000fe0:	200000cc 	.word	0x200000cc
 8000fe4:	40021400 	.word	0x40021400

08000fe8 <read_key_press>:
pin11 PB15
pin12 PB14
pin13 PI1

*/
int read_key_press(){
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
	int a;
	p_data[0] = HAL_GPIO_ReadPin(GPIOI, GPIO_PIN_2);
 8000fee:	2104      	movs	r1, #4
 8000ff0:	4827      	ldr	r0, [pc, #156]	; (8001090 <read_key_press+0xa8>)
 8000ff2:	f000 ff43 	bl	8001e7c <HAL_GPIO_ReadPin>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	461a      	mov	r2, r3
 8000ffa:	4b26      	ldr	r3, [pc, #152]	; (8001094 <read_key_press+0xac>)
 8000ffc:	701a      	strb	r2, [r3, #0]
	p_data[1] = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15);
 8000ffe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001002:	4825      	ldr	r0, [pc, #148]	; (8001098 <read_key_press+0xb0>)
 8001004:	f000 ff3a 	bl	8001e7c <HAL_GPIO_ReadPin>
 8001008:	4603      	mov	r3, r0
 800100a:	461a      	mov	r2, r3
 800100c:	4b21      	ldr	r3, [pc, #132]	; (8001094 <read_key_press+0xac>)
 800100e:	705a      	strb	r2, [r3, #1]
	p_data[2] = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8);
 8001010:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001014:	4820      	ldr	r0, [pc, #128]	; (8001098 <read_key_press+0xb0>)
 8001016:	f000 ff31 	bl	8001e7c <HAL_GPIO_ReadPin>
 800101a:	4603      	mov	r3, r0
 800101c:	461a      	mov	r2, r3
 800101e:	4b1d      	ldr	r3, [pc, #116]	; (8001094 <read_key_press+0xac>)
 8001020:	709a      	strb	r2, [r3, #2]
	p_data[3] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15);
 8001022:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001026:	481d      	ldr	r0, [pc, #116]	; (800109c <read_key_press+0xb4>)
 8001028:	f000 ff28 	bl	8001e7c <HAL_GPIO_ReadPin>
 800102c:	4603      	mov	r3, r0
 800102e:	461a      	mov	r2, r3
 8001030:	4b18      	ldr	r3, [pc, #96]	; (8001094 <read_key_press+0xac>)
 8001032:	70da      	strb	r2, [r3, #3]
	p_data[4] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14);
 8001034:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001038:	4818      	ldr	r0, [pc, #96]	; (800109c <read_key_press+0xb4>)
 800103a:	f000 ff1f 	bl	8001e7c <HAL_GPIO_ReadPin>
 800103e:	4603      	mov	r3, r0
 8001040:	461a      	mov	r2, r3
 8001042:	4b14      	ldr	r3, [pc, #80]	; (8001094 <read_key_press+0xac>)
 8001044:	711a      	strb	r2, [r3, #4]
	p_data[5] = HAL_GPIO_ReadPin(GPIOI, GPIO_PIN_1);
 8001046:	2102      	movs	r1, #2
 8001048:	4811      	ldr	r0, [pc, #68]	; (8001090 <read_key_press+0xa8>)
 800104a:	f000 ff17 	bl	8001e7c <HAL_GPIO_ReadPin>
 800104e:	4603      	mov	r3, r0
 8001050:	461a      	mov	r2, r3
 8001052:	4b10      	ldr	r3, [pc, #64]	; (8001094 <read_key_press+0xac>)
 8001054:	715a      	strb	r2, [r3, #5]


	a = (p_data[5]<<5) + (p_data[4]<<4) + (p_data[3]<<3) + (p_data[2]<<2) + (p_data[1]<<1) + (p_data[0]<<0);
 8001056:	4b0f      	ldr	r3, [pc, #60]	; (8001094 <read_key_press+0xac>)
 8001058:	795b      	ldrb	r3, [r3, #5]
 800105a:	015a      	lsls	r2, r3, #5
 800105c:	4b0d      	ldr	r3, [pc, #52]	; (8001094 <read_key_press+0xac>)
 800105e:	791b      	ldrb	r3, [r3, #4]
 8001060:	011b      	lsls	r3, r3, #4
 8001062:	441a      	add	r2, r3
 8001064:	4b0b      	ldr	r3, [pc, #44]	; (8001094 <read_key_press+0xac>)
 8001066:	78db      	ldrb	r3, [r3, #3]
 8001068:	00db      	lsls	r3, r3, #3
 800106a:	441a      	add	r2, r3
 800106c:	4b09      	ldr	r3, [pc, #36]	; (8001094 <read_key_press+0xac>)
 800106e:	789b      	ldrb	r3, [r3, #2]
 8001070:	009b      	lsls	r3, r3, #2
 8001072:	441a      	add	r2, r3
 8001074:	4b07      	ldr	r3, [pc, #28]	; (8001094 <read_key_press+0xac>)
 8001076:	785b      	ldrb	r3, [r3, #1]
 8001078:	005b      	lsls	r3, r3, #1
 800107a:	4413      	add	r3, r2
 800107c:	4a05      	ldr	r2, [pc, #20]	; (8001094 <read_key_press+0xac>)
 800107e:	7812      	ldrb	r2, [r2, #0]
 8001080:	4413      	add	r3, r2
 8001082:	607b      	str	r3, [r7, #4]

	return a;
 8001084:	687b      	ldr	r3, [r7, #4]
}
 8001086:	4618      	mov	r0, r3
 8001088:	3708      	adds	r7, #8
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	40022000 	.word	0x40022000
 8001094:	200000c4 	.word	0x200000c4
 8001098:	40020000 	.word	0x40020000
 800109c:	40020400 	.word	0x40020400

080010a0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80010a0:	b5b0      	push	{r4, r5, r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]

//  BUFFER_POINTER = (++BUFFER_POINTER) % BUFF_SIZE;
//  DAC_REG = AUDIO_BUFFER[BUFFER_POINTER];
//	DAC_OUTPUT();

	n++;
 80010a8:	4b3d      	ldr	r3, [pc, #244]	; (80011a0 <HAL_TIM_PeriodElapsedCallback+0x100>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	3301      	adds	r3, #1
 80010ae:	4a3c      	ldr	r2, [pc, #240]	; (80011a0 <HAL_TIM_PeriodElapsedCallback+0x100>)
 80010b0:	6013      	str	r3, [r2, #0]
	if (key_pressed >= 0 && key_pressed < 36 && key_pressed!=key_released){
 80010b2:	4b3c      	ldr	r3, [pc, #240]	; (80011a4 <HAL_TIM_PeriodElapsedCallback+0x104>)
 80010b4:	781b      	ldrb	r3, [r3, #0]
 80010b6:	2b23      	cmp	r3, #35	; 0x23
 80010b8:	d863      	bhi.n	8001182 <HAL_TIM_PeriodElapsedCallback+0xe2>
 80010ba:	4b3a      	ldr	r3, [pc, #232]	; (80011a4 <HAL_TIM_PeriodElapsedCallback+0x104>)
 80010bc:	781a      	ldrb	r2, [r3, #0]
 80010be:	4b3a      	ldr	r3, [pc, #232]	; (80011a8 <HAL_TIM_PeriodElapsedCallback+0x108>)
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	429a      	cmp	r2, r3
 80010c4:	d05d      	beq.n	8001182 <HAL_TIM_PeriodElapsedCallback+0xe2>
		DAC_REG = 4*(sin(2*PI*baseF[key_pressed]*2*(float)n/Fs) + 1);
 80010c6:	4b37      	ldr	r3, [pc, #220]	; (80011a4 <HAL_TIM_PeriodElapsedCallback+0x104>)
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	4a38      	ldr	r2, [pc, #224]	; (80011ac <HAL_TIM_PeriodElapsedCallback+0x10c>)
 80010cc:	009b      	lsls	r3, r3, #2
 80010ce:	4413      	add	r3, r2
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4618      	mov	r0, r3
 80010d4:	f7ff f9fc 	bl	80004d0 <__aeabi_f2d>
 80010d8:	a32f      	add	r3, pc, #188	; (adr r3, 8001198 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 80010da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010de:	f7ff fa4f 	bl	8000580 <__aeabi_dmul>
 80010e2:	4602      	mov	r2, r0
 80010e4:	460b      	mov	r3, r1
 80010e6:	4610      	mov	r0, r2
 80010e8:	4619      	mov	r1, r3
 80010ea:	4602      	mov	r2, r0
 80010ec:	460b      	mov	r3, r1
 80010ee:	f7ff f891 	bl	8000214 <__adddf3>
 80010f2:	4602      	mov	r2, r0
 80010f4:	460b      	mov	r3, r1
 80010f6:	4614      	mov	r4, r2
 80010f8:	461d      	mov	r5, r3
 80010fa:	4b29      	ldr	r3, [pc, #164]	; (80011a0 <HAL_TIM_PeriodElapsedCallback+0x100>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	ee07 3a90 	vmov	s15, r3
 8001102:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001106:	ee17 0a90 	vmov	r0, s15
 800110a:	f7ff f9e1 	bl	80004d0 <__aeabi_f2d>
 800110e:	4602      	mov	r2, r0
 8001110:	460b      	mov	r3, r1
 8001112:	4620      	mov	r0, r4
 8001114:	4629      	mov	r1, r5
 8001116:	f7ff fa33 	bl	8000580 <__aeabi_dmul>
 800111a:	4602      	mov	r2, r0
 800111c:	460b      	mov	r3, r1
 800111e:	4614      	mov	r4, r2
 8001120:	461d      	mov	r5, r3
 8001122:	4b23      	ldr	r3, [pc, #140]	; (80011b0 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4618      	mov	r0, r3
 8001128:	f7ff f9b0 	bl	800048c <__aeabi_ui2d>
 800112c:	4602      	mov	r2, r0
 800112e:	460b      	mov	r3, r1
 8001130:	4620      	mov	r0, r4
 8001132:	4629      	mov	r1, r5
 8001134:	f7ff fb4e 	bl	80007d4 <__aeabi_ddiv>
 8001138:	4602      	mov	r2, r0
 800113a:	460b      	mov	r3, r1
 800113c:	ec43 2b17 	vmov	d7, r2, r3
 8001140:	eeb0 0a47 	vmov.f32	s0, s14
 8001144:	eef0 0a67 	vmov.f32	s1, s15
 8001148:	f003 f876 	bl	8004238 <sin>
 800114c:	ec51 0b10 	vmov	r0, r1, d0
 8001150:	f04f 0200 	mov.w	r2, #0
 8001154:	4b17      	ldr	r3, [pc, #92]	; (80011b4 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8001156:	f7ff f85d 	bl	8000214 <__adddf3>
 800115a:	4602      	mov	r2, r0
 800115c:	460b      	mov	r3, r1
 800115e:	4610      	mov	r0, r2
 8001160:	4619      	mov	r1, r3
 8001162:	f04f 0200 	mov.w	r2, #0
 8001166:	4b14      	ldr	r3, [pc, #80]	; (80011b8 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8001168:	f7ff fa0a 	bl	8000580 <__aeabi_dmul>
 800116c:	4602      	mov	r2, r0
 800116e:	460b      	mov	r3, r1
 8001170:	4610      	mov	r0, r2
 8001172:	4619      	mov	r1, r3
 8001174:	f7ff fcc6 	bl	8000b04 <__aeabi_d2uiz>
 8001178:	4603      	mov	r3, r0
 800117a:	b2da      	uxtb	r2, r3
 800117c:	4b0f      	ldr	r3, [pc, #60]	; (80011bc <HAL_TIM_PeriodElapsedCallback+0x11c>)
 800117e:	701a      	strb	r2, [r3, #0]
 8001180:	e002      	b.n	8001188 <HAL_TIM_PeriodElapsedCallback+0xe8>
	}
	else
		DAC_REG = 0;
 8001182:	4b0e      	ldr	r3, [pc, #56]	; (80011bc <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8001184:	2200      	movs	r2, #0
 8001186:	701a      	strb	r2, [r3, #0]

	DAC_OUTPUT();
 8001188:	f7ff fe58 	bl	8000e3c <DAC_OUTPUT>

}
 800118c:	bf00      	nop
 800118e:	3708      	adds	r7, #8
 8001190:	46bd      	mov	sp, r7
 8001192:	bdb0      	pop	{r4, r5, r7, pc}
 8001194:	f3af 8000 	nop.w
 8001198:	54411744 	.word	0x54411744
 800119c:	401921fb 	.word	0x401921fb
 80011a0:	200000c0 	.word	0x200000c0
 80011a4:	2000215c 	.word	0x2000215c
 80011a8:	2000215d 	.word	0x2000215d
 80011ac:	20000004 	.word	0x20000004
 80011b0:	20000000 	.word	0x20000000
 80011b4:	3ff00000 	.word	0x3ff00000
 80011b8:	40100000 	.word	0x40100000
 80011bc:	200000ca 	.word	0x200000ca

080011c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011c4:	f000 fb3f 	bl	8001846 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011c8:	f000 f81c 	bl	8001204 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011cc:	f000 f926 	bl	800141c <MX_GPIO_Init>
  MX_TIM2_Init();
 80011d0:	f000 f8a8 	bl	8001324 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80011d4:	f000 f8f2 	bl	80013bc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim2);	// initialize counter interrupt
 80011d8:	4807      	ldr	r0, [pc, #28]	; (80011f8 <main+0x38>)
 80011da:	f001 ff93 	bl	8003104 <HAL_TIM_Base_Start_IT>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//	  HAL_UART_Transmit(&huart1, message, 10, 100);

	  key_pressed = read_key_press();
 80011de:	f7ff ff03 	bl	8000fe8 <read_key_press>
 80011e2:	4603      	mov	r3, r0
 80011e4:	b2da      	uxtb	r2, r3
 80011e6:	4b05      	ldr	r3, [pc, #20]	; (80011fc <main+0x3c>)
 80011e8:	701a      	strb	r2, [r3, #0]
	  key_released = read_key_release();
 80011ea:	f7ff fea5 	bl	8000f38 <read_key_release>
 80011ee:	4603      	mov	r3, r0
 80011f0:	b2da      	uxtb	r2, r3
 80011f2:	4b03      	ldr	r3, [pc, #12]	; (8001200 <main+0x40>)
 80011f4:	701a      	strb	r2, [r3, #0]
	  key_pressed = read_key_press();
 80011f6:	e7f2      	b.n	80011de <main+0x1e>
 80011f8:	20002160 	.word	0x20002160
 80011fc:	2000215c 	.word	0x2000215c
 8001200:	2000215d 	.word	0x2000215d

08001204 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b0b4      	sub	sp, #208	; 0xd0
 8001208:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800120a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800120e:	2230      	movs	r2, #48	; 0x30
 8001210:	2100      	movs	r1, #0
 8001212:	4618      	mov	r0, r3
 8001214:	f003 f808 	bl	8004228 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001218:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800121c:	2200      	movs	r2, #0
 800121e:	601a      	str	r2, [r3, #0]
 8001220:	605a      	str	r2, [r3, #4]
 8001222:	609a      	str	r2, [r3, #8]
 8001224:	60da      	str	r2, [r3, #12]
 8001226:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001228:	f107 0308 	add.w	r3, r7, #8
 800122c:	2284      	movs	r2, #132	; 0x84
 800122e:	2100      	movs	r1, #0
 8001230:	4618      	mov	r0, r3
 8001232:	f002 fff9 	bl	8004228 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001236:	4b39      	ldr	r3, [pc, #228]	; (800131c <SystemClock_Config+0x118>)
 8001238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123a:	4a38      	ldr	r2, [pc, #224]	; (800131c <SystemClock_Config+0x118>)
 800123c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001240:	6413      	str	r3, [r2, #64]	; 0x40
 8001242:	4b36      	ldr	r3, [pc, #216]	; (800131c <SystemClock_Config+0x118>)
 8001244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001246:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800124a:	607b      	str	r3, [r7, #4]
 800124c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800124e:	4b34      	ldr	r3, [pc, #208]	; (8001320 <SystemClock_Config+0x11c>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4a33      	ldr	r2, [pc, #204]	; (8001320 <SystemClock_Config+0x11c>)
 8001254:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001258:	6013      	str	r3, [r2, #0]
 800125a:	4b31      	ldr	r3, [pc, #196]	; (8001320 <SystemClock_Config+0x11c>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001262:	603b      	str	r3, [r7, #0]
 8001264:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001266:	2301      	movs	r3, #1
 8001268:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800126c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001270:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001274:	2302      	movs	r3, #2
 8001276:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800127a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800127e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001282:	2319      	movs	r3, #25
 8001284:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 8001288:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800128c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001290:	2302      	movs	r3, #2
 8001292:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8001296:	2309      	movs	r3, #9
 8001298:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800129c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80012a0:	4618      	mov	r0, r3
 80012a2:	f000 fe6d 	bl	8001f80 <HAL_RCC_OscConfig>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80012ac:	f000 f9bc 	bl	8001628 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80012b0:	f000 fe16 	bl	8001ee0 <HAL_PWREx_EnableOverDrive>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <SystemClock_Config+0xba>
  {
    Error_Handler();
 80012ba:	f000 f9b5 	bl	8001628 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012be:	230f      	movs	r3, #15
 80012c0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012c4:	2302      	movs	r3, #2
 80012c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012ca:	2300      	movs	r3, #0
 80012cc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80012d0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80012d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80012d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012dc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80012e0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80012e4:	2106      	movs	r1, #6
 80012e6:	4618      	mov	r0, r3
 80012e8:	f001 f8ee 	bl	80024c8 <HAL_RCC_ClockConfig>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80012f2:	f000 f999 	bl	8001628 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80012f6:	2340      	movs	r3, #64	; 0x40
 80012f8:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80012fa:	2300      	movs	r3, #0
 80012fc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012fe:	f107 0308 	add.w	r3, r7, #8
 8001302:	4618      	mov	r0, r3
 8001304:	f001 fab6 	bl	8002874 <HAL_RCCEx_PeriphCLKConfig>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <SystemClock_Config+0x10e>
  {
    Error_Handler();
 800130e:	f000 f98b 	bl	8001628 <Error_Handler>
  }
}
 8001312:	bf00      	nop
 8001314:	37d0      	adds	r7, #208	; 0xd0
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	40023800 	.word	0x40023800
 8001320:	40007000 	.word	0x40007000

08001324 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b088      	sub	sp, #32
 8001328:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800132a:	f107 0310 	add.w	r3, r7, #16
 800132e:	2200      	movs	r2, #0
 8001330:	601a      	str	r2, [r3, #0]
 8001332:	605a      	str	r2, [r3, #4]
 8001334:	609a      	str	r2, [r3, #8]
 8001336:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001338:	1d3b      	adds	r3, r7, #4
 800133a:	2200      	movs	r2, #0
 800133c:	601a      	str	r2, [r3, #0]
 800133e:	605a      	str	r2, [r3, #4]
 8001340:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001342:	4b1d      	ldr	r3, [pc, #116]	; (80013b8 <MX_TIM2_Init+0x94>)
 8001344:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001348:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100;
 800134a:	4b1b      	ldr	r3, [pc, #108]	; (80013b8 <MX_TIM2_Init+0x94>)
 800134c:	2264      	movs	r2, #100	; 0x64
 800134e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001350:	4b19      	ldr	r3, [pc, #100]	; (80013b8 <MX_TIM2_Init+0x94>)
 8001352:	2200      	movs	r2, #0
 8001354:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 124;
 8001356:	4b18      	ldr	r3, [pc, #96]	; (80013b8 <MX_TIM2_Init+0x94>)
 8001358:	227c      	movs	r2, #124	; 0x7c
 800135a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800135c:	4b16      	ldr	r3, [pc, #88]	; (80013b8 <MX_TIM2_Init+0x94>)
 800135e:	2200      	movs	r2, #0
 8001360:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001362:	4b15      	ldr	r3, [pc, #84]	; (80013b8 <MX_TIM2_Init+0x94>)
 8001364:	2200      	movs	r2, #0
 8001366:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001368:	4813      	ldr	r0, [pc, #76]	; (80013b8 <MX_TIM2_Init+0x94>)
 800136a:	f001 fe73 	bl	8003054 <HAL_TIM_Base_Init>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001374:	f000 f958 	bl	8001628 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001378:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800137c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800137e:	f107 0310 	add.w	r3, r7, #16
 8001382:	4619      	mov	r1, r3
 8001384:	480c      	ldr	r0, [pc, #48]	; (80013b8 <MX_TIM2_Init+0x94>)
 8001386:	f002 f855 	bl	8003434 <HAL_TIM_ConfigClockSource>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001390:	f000 f94a 	bl	8001628 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001394:	2320      	movs	r3, #32
 8001396:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001398:	2300      	movs	r3, #0
 800139a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800139c:	1d3b      	adds	r3, r7, #4
 800139e:	4619      	mov	r1, r3
 80013a0:	4805      	ldr	r0, [pc, #20]	; (80013b8 <MX_TIM2_Init+0x94>)
 80013a2:	f002 fa6f 	bl	8003884 <HAL_TIMEx_MasterConfigSynchronization>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80013ac:	f000 f93c 	bl	8001628 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80013b0:	bf00      	nop
 80013b2:	3720      	adds	r7, #32
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	20002160 	.word	0x20002160

080013bc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80013c0:	4b14      	ldr	r3, [pc, #80]	; (8001414 <MX_USART1_UART_Init+0x58>)
 80013c2:	4a15      	ldr	r2, [pc, #84]	; (8001418 <MX_USART1_UART_Init+0x5c>)
 80013c4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80013c6:	4b13      	ldr	r3, [pc, #76]	; (8001414 <MX_USART1_UART_Init+0x58>)
 80013c8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80013cc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80013ce:	4b11      	ldr	r3, [pc, #68]	; (8001414 <MX_USART1_UART_Init+0x58>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80013d4:	4b0f      	ldr	r3, [pc, #60]	; (8001414 <MX_USART1_UART_Init+0x58>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80013da:	4b0e      	ldr	r3, [pc, #56]	; (8001414 <MX_USART1_UART_Init+0x58>)
 80013dc:	2200      	movs	r2, #0
 80013de:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80013e0:	4b0c      	ldr	r3, [pc, #48]	; (8001414 <MX_USART1_UART_Init+0x58>)
 80013e2:	220c      	movs	r2, #12
 80013e4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013e6:	4b0b      	ldr	r3, [pc, #44]	; (8001414 <MX_USART1_UART_Init+0x58>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80013ec:	4b09      	ldr	r3, [pc, #36]	; (8001414 <MX_USART1_UART_Init+0x58>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013f2:	4b08      	ldr	r3, [pc, #32]	; (8001414 <MX_USART1_UART_Init+0x58>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013f8:	4b06      	ldr	r3, [pc, #24]	; (8001414 <MX_USART1_UART_Init+0x58>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80013fe:	4805      	ldr	r0, [pc, #20]	; (8001414 <MX_USART1_UART_Init+0x58>)
 8001400:	f002 faec 	bl	80039dc <HAL_UART_Init>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800140a:	f000 f90d 	bl	8001628 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800140e:	bf00      	nop
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	200020d8 	.word	0x200020d8
 8001418:	40011000 	.word	0x40011000

0800141c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b08c      	sub	sp, #48	; 0x30
 8001420:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001422:	f107 031c 	add.w	r3, r7, #28
 8001426:	2200      	movs	r2, #0
 8001428:	601a      	str	r2, [r3, #0]
 800142a:	605a      	str	r2, [r3, #4]
 800142c:	609a      	str	r2, [r3, #8]
 800142e:	60da      	str	r2, [r3, #12]
 8001430:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001432:	4b75      	ldr	r3, [pc, #468]	; (8001608 <MX_GPIO_Init+0x1ec>)
 8001434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001436:	4a74      	ldr	r2, [pc, #464]	; (8001608 <MX_GPIO_Init+0x1ec>)
 8001438:	f043 0302 	orr.w	r3, r3, #2
 800143c:	6313      	str	r3, [r2, #48]	; 0x30
 800143e:	4b72      	ldr	r3, [pc, #456]	; (8001608 <MX_GPIO_Init+0x1ec>)
 8001440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001442:	f003 0302 	and.w	r3, r3, #2
 8001446:	61bb      	str	r3, [r7, #24]
 8001448:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800144a:	4b6f      	ldr	r3, [pc, #444]	; (8001608 <MX_GPIO_Init+0x1ec>)
 800144c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144e:	4a6e      	ldr	r2, [pc, #440]	; (8001608 <MX_GPIO_Init+0x1ec>)
 8001450:	f043 0301 	orr.w	r3, r3, #1
 8001454:	6313      	str	r3, [r2, #48]	; 0x30
 8001456:	4b6c      	ldr	r3, [pc, #432]	; (8001608 <MX_GPIO_Init+0x1ec>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145a:	f003 0301 	and.w	r3, r3, #1
 800145e:	617b      	str	r3, [r7, #20]
 8001460:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001462:	4b69      	ldr	r3, [pc, #420]	; (8001608 <MX_GPIO_Init+0x1ec>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001466:	4a68      	ldr	r2, [pc, #416]	; (8001608 <MX_GPIO_Init+0x1ec>)
 8001468:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800146c:	6313      	str	r3, [r2, #48]	; 0x30
 800146e:	4b66      	ldr	r3, [pc, #408]	; (8001608 <MX_GPIO_Init+0x1ec>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001472:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001476:	613b      	str	r3, [r7, #16]
 8001478:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800147a:	4b63      	ldr	r3, [pc, #396]	; (8001608 <MX_GPIO_Init+0x1ec>)
 800147c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147e:	4a62      	ldr	r2, [pc, #392]	; (8001608 <MX_GPIO_Init+0x1ec>)
 8001480:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001484:	6313      	str	r3, [r2, #48]	; 0x30
 8001486:	4b60      	ldr	r3, [pc, #384]	; (8001608 <MX_GPIO_Init+0x1ec>)
 8001488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800148e:	60fb      	str	r3, [r7, #12]
 8001490:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001492:	4b5d      	ldr	r3, [pc, #372]	; (8001608 <MX_GPIO_Init+0x1ec>)
 8001494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001496:	4a5c      	ldr	r2, [pc, #368]	; (8001608 <MX_GPIO_Init+0x1ec>)
 8001498:	f043 0304 	orr.w	r3, r3, #4
 800149c:	6313      	str	r3, [r2, #48]	; 0x30
 800149e:	4b5a      	ldr	r3, [pc, #360]	; (8001608 <MX_GPIO_Init+0x1ec>)
 80014a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a2:	f003 0304 	and.w	r3, r3, #4
 80014a6:	60bb      	str	r3, [r7, #8]
 80014a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80014aa:	4b57      	ldr	r3, [pc, #348]	; (8001608 <MX_GPIO_Init+0x1ec>)
 80014ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ae:	4a56      	ldr	r2, [pc, #344]	; (8001608 <MX_GPIO_Init+0x1ec>)
 80014b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014b4:	6313      	str	r3, [r2, #48]	; 0x30
 80014b6:	4b54      	ldr	r3, [pc, #336]	; (8001608 <MX_GPIO_Init+0x1ec>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014be:	607b      	str	r3, [r7, #4]
 80014c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80014c2:	4b51      	ldr	r3, [pc, #324]	; (8001608 <MX_GPIO_Init+0x1ec>)
 80014c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c6:	4a50      	ldr	r2, [pc, #320]	; (8001608 <MX_GPIO_Init+0x1ec>)
 80014c8:	f043 0320 	orr.w	r3, r3, #32
 80014cc:	6313      	str	r3, [r2, #48]	; 0x30
 80014ce:	4b4e      	ldr	r3, [pc, #312]	; (8001608 <MX_GPIO_Init+0x1ec>)
 80014d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d2:	f003 0320 	and.w	r3, r3, #32
 80014d6:	603b      	str	r3, [r7, #0]
 80014d8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 80014da:	2200      	movs	r2, #0
 80014dc:	2110      	movs	r1, #16
 80014de:	484b      	ldr	r0, [pc, #300]	; (800160c <MX_GPIO_Init+0x1f0>)
 80014e0:	f000 fce4 	bl	8001eac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_3|GPIO_PIN_0, GPIO_PIN_RESET);
 80014e4:	2200      	movs	r2, #0
 80014e6:	2109      	movs	r1, #9
 80014e8:	4849      	ldr	r0, [pc, #292]	; (8001610 <MX_GPIO_Init+0x1f4>)
 80014ea:	f000 fcdf 	bl	8001eac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7|GPIO_PIN_6, GPIO_PIN_RESET);
 80014ee:	2200      	movs	r2, #0
 80014f0:	21c0      	movs	r1, #192	; 0xc0
 80014f2:	4848      	ldr	r0, [pc, #288]	; (8001614 <MX_GPIO_Init+0x1f8>)
 80014f4:	f000 fcda 	bl	8001eac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7|GPIO_PIN_6, GPIO_PIN_RESET);
 80014f8:	2200      	movs	r2, #0
 80014fa:	21c0      	movs	r1, #192	; 0xc0
 80014fc:	4846      	ldr	r0, [pc, #280]	; (8001618 <MX_GPIO_Init+0x1fc>)
 80014fe:	f000 fcd5 	bl	8001eac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_6, GPIO_PIN_RESET);
 8001502:	2200      	movs	r2, #0
 8001504:	2140      	movs	r1, #64	; 0x40
 8001506:	4845      	ldr	r0, [pc, #276]	; (800161c <MX_GPIO_Init+0x200>)
 8001508:	f000 fcd0 	bl	8001eac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800150c:	2310      	movs	r3, #16
 800150e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001510:	2301      	movs	r3, #1
 8001512:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001514:	2300      	movs	r3, #0
 8001516:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001518:	2300      	movs	r3, #0
 800151a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800151c:	f107 031c 	add.w	r3, r7, #28
 8001520:	4619      	mov	r1, r3
 8001522:	483a      	ldr	r0, [pc, #232]	; (800160c <MX_GPIO_Init+0x1f0>)
 8001524:	f000 fafe 	bl	8001b24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA15 PA8 PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_0;
 8001528:	f248 1301 	movw	r3, #33025	; 0x8101
 800152c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800152e:	2300      	movs	r3, #0
 8001530:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001532:	2300      	movs	r3, #0
 8001534:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001536:	f107 031c 	add.w	r3, r7, #28
 800153a:	4619      	mov	r1, r3
 800153c:	4838      	ldr	r0, [pc, #224]	; (8001620 <MX_GPIO_Init+0x204>)
 800153e:	f000 faf1 	bl	8001b24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PI3 PI0 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_0;
 8001542:	2309      	movs	r3, #9
 8001544:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001546:	2301      	movs	r3, #1
 8001548:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154a:	2300      	movs	r3, #0
 800154c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800154e:	2300      	movs	r3, #0
 8001550:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001552:	f107 031c 	add.w	r3, r7, #28
 8001556:	4619      	mov	r1, r3
 8001558:	482d      	ldr	r0, [pc, #180]	; (8001610 <MX_GPIO_Init+0x1f4>)
 800155a:	f000 fae3 	bl	8001b24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PI2 PI1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1;
 800155e:	2306      	movs	r3, #6
 8001560:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001562:	2300      	movs	r3, #0
 8001564:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001566:	2300      	movs	r3, #0
 8001568:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800156a:	f107 031c 	add.w	r3, r7, #28
 800156e:	4619      	mov	r1, r3
 8001570:	4827      	ldr	r0, [pc, #156]	; (8001610 <MX_GPIO_Init+0x1f4>)
 8001572:	f000 fad7 	bl	8001b24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC7 PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8001576:	23c0      	movs	r3, #192	; 0xc0
 8001578:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800157a:	2301      	movs	r3, #1
 800157c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157e:	2300      	movs	r3, #0
 8001580:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001582:	2300      	movs	r3, #0
 8001584:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001586:	f107 031c 	add.w	r3, r7, #28
 800158a:	4619      	mov	r1, r3
 800158c:	4821      	ldr	r0, [pc, #132]	; (8001614 <MX_GPIO_Init+0x1f8>)
 800158e:	f000 fac9 	bl	8001b24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG7 PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8001592:	23c0      	movs	r3, #192	; 0xc0
 8001594:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001596:	2301      	movs	r3, #1
 8001598:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159a:	2300      	movs	r3, #0
 800159c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800159e:	2300      	movs	r3, #0
 80015a0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80015a2:	f107 031c 	add.w	r3, r7, #28
 80015a6:	4619      	mov	r1, r3
 80015a8:	481b      	ldr	r0, [pc, #108]	; (8001618 <MX_GPIO_Init+0x1fc>)
 80015aa:	f000 fabb 	bl	8001b24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF7 PF6 PF10 PF9
                           PF8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_10|GPIO_PIN_9
 80015ae:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 80015b2:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015b4:	2300      	movs	r3, #0
 80015b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b8:	2300      	movs	r3, #0
 80015ba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80015bc:	f107 031c 	add.w	r3, r7, #28
 80015c0:	4619      	mov	r1, r3
 80015c2:	4818      	ldr	r0, [pc, #96]	; (8001624 <MX_GPIO_Init+0x208>)
 80015c4:	f000 faae 	bl	8001b24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80015c8:	2340      	movs	r3, #64	; 0x40
 80015ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015cc:	2301      	movs	r3, #1
 80015ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d0:	2300      	movs	r3, #0
 80015d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d4:	2300      	movs	r3, #0
 80015d6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80015d8:	f107 031c 	add.w	r3, r7, #28
 80015dc:	4619      	mov	r1, r3
 80015de:	480f      	ldr	r0, [pc, #60]	; (800161c <MX_GPIO_Init+0x200>)
 80015e0:	f000 faa0 	bl	8001b24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80015e4:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80015e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015ea:	2300      	movs	r3, #0
 80015ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ee:	2300      	movs	r3, #0
 80015f0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015f2:	f107 031c 	add.w	r3, r7, #28
 80015f6:	4619      	mov	r1, r3
 80015f8:	4804      	ldr	r0, [pc, #16]	; (800160c <MX_GPIO_Init+0x1f0>)
 80015fa:	f000 fa93 	bl	8001b24 <HAL_GPIO_Init>

}
 80015fe:	bf00      	nop
 8001600:	3730      	adds	r7, #48	; 0x30
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	40023800 	.word	0x40023800
 800160c:	40020400 	.word	0x40020400
 8001610:	40022000 	.word	0x40022000
 8001614:	40020800 	.word	0x40020800
 8001618:	40021800 	.word	0x40021800
 800161c:	40021c00 	.word	0x40021c00
 8001620:	40020000 	.word	0x40020000
 8001624:	40021400 	.word	0x40021400

08001628 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800162c:	b672      	cpsid	i
}
 800162e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001630:	e7fe      	b.n	8001630 <Error_Handler+0x8>
	...

08001634 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800163a:	4b12      	ldr	r3, [pc, #72]	; (8001684 <HAL_MspInit+0x50>)
 800163c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163e:	4a11      	ldr	r2, [pc, #68]	; (8001684 <HAL_MspInit+0x50>)
 8001640:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001644:	6413      	str	r3, [r2, #64]	; 0x40
 8001646:	4b0f      	ldr	r3, [pc, #60]	; (8001684 <HAL_MspInit+0x50>)
 8001648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800164e:	607b      	str	r3, [r7, #4]
 8001650:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001652:	4b0c      	ldr	r3, [pc, #48]	; (8001684 <HAL_MspInit+0x50>)
 8001654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001656:	4a0b      	ldr	r2, [pc, #44]	; (8001684 <HAL_MspInit+0x50>)
 8001658:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800165c:	6453      	str	r3, [r2, #68]	; 0x44
 800165e:	4b09      	ldr	r3, [pc, #36]	; (8001684 <HAL_MspInit+0x50>)
 8001660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001662:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001666:	603b      	str	r3, [r7, #0]
 8001668:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 800166a:	2200      	movs	r2, #0
 800166c:	2100      	movs	r1, #0
 800166e:	2005      	movs	r0, #5
 8001670:	f000 fa21 	bl	8001ab6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001674:	2005      	movs	r0, #5
 8001676:	f000 fa3a 	bl	8001aee <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800167a:	bf00      	nop
 800167c:	3708      	adds	r7, #8
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	40023800 	.word	0x40023800

08001688 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b084      	sub	sp, #16
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001698:	d113      	bne.n	80016c2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800169a:	4b0c      	ldr	r3, [pc, #48]	; (80016cc <HAL_TIM_Base_MspInit+0x44>)
 800169c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169e:	4a0b      	ldr	r2, [pc, #44]	; (80016cc <HAL_TIM_Base_MspInit+0x44>)
 80016a0:	f043 0301 	orr.w	r3, r3, #1
 80016a4:	6413      	str	r3, [r2, #64]	; 0x40
 80016a6:	4b09      	ldr	r3, [pc, #36]	; (80016cc <HAL_TIM_Base_MspInit+0x44>)
 80016a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016aa:	f003 0301 	and.w	r3, r3, #1
 80016ae:	60fb      	str	r3, [r7, #12]
 80016b0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80016b2:	2200      	movs	r2, #0
 80016b4:	2100      	movs	r1, #0
 80016b6:	201c      	movs	r0, #28
 80016b8:	f000 f9fd 	bl	8001ab6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80016bc:	201c      	movs	r0, #28
 80016be:	f000 fa16 	bl	8001aee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80016c2:	bf00      	nop
 80016c4:	3710      	adds	r7, #16
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	40023800 	.word	0x40023800

080016d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b08a      	sub	sp, #40	; 0x28
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d8:	f107 0314 	add.w	r3, r7, #20
 80016dc:	2200      	movs	r2, #0
 80016de:	601a      	str	r2, [r3, #0]
 80016e0:	605a      	str	r2, [r3, #4]
 80016e2:	609a      	str	r2, [r3, #8]
 80016e4:	60da      	str	r2, [r3, #12]
 80016e6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a17      	ldr	r2, [pc, #92]	; (800174c <HAL_UART_MspInit+0x7c>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d127      	bne.n	8001742 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80016f2:	4b17      	ldr	r3, [pc, #92]	; (8001750 <HAL_UART_MspInit+0x80>)
 80016f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016f6:	4a16      	ldr	r2, [pc, #88]	; (8001750 <HAL_UART_MspInit+0x80>)
 80016f8:	f043 0310 	orr.w	r3, r3, #16
 80016fc:	6453      	str	r3, [r2, #68]	; 0x44
 80016fe:	4b14      	ldr	r3, [pc, #80]	; (8001750 <HAL_UART_MspInit+0x80>)
 8001700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001702:	f003 0310 	and.w	r3, r3, #16
 8001706:	613b      	str	r3, [r7, #16]
 8001708:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800170a:	4b11      	ldr	r3, [pc, #68]	; (8001750 <HAL_UART_MspInit+0x80>)
 800170c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170e:	4a10      	ldr	r2, [pc, #64]	; (8001750 <HAL_UART_MspInit+0x80>)
 8001710:	f043 0302 	orr.w	r3, r3, #2
 8001714:	6313      	str	r3, [r2, #48]	; 0x30
 8001716:	4b0e      	ldr	r3, [pc, #56]	; (8001750 <HAL_UART_MspInit+0x80>)
 8001718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171a:	f003 0302 	and.w	r3, r3, #2
 800171e:	60fb      	str	r3, [r7, #12]
 8001720:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8001722:	23c0      	movs	r3, #192	; 0xc0
 8001724:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001726:	2302      	movs	r3, #2
 8001728:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172a:	2300      	movs	r3, #0
 800172c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800172e:	2303      	movs	r3, #3
 8001730:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001732:	2307      	movs	r3, #7
 8001734:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001736:	f107 0314 	add.w	r3, r7, #20
 800173a:	4619      	mov	r1, r3
 800173c:	4805      	ldr	r0, [pc, #20]	; (8001754 <HAL_UART_MspInit+0x84>)
 800173e:	f000 f9f1 	bl	8001b24 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001742:	bf00      	nop
 8001744:	3728      	adds	r7, #40	; 0x28
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	40011000 	.word	0x40011000
 8001750:	40023800 	.word	0x40023800
 8001754:	40020400 	.word	0x40020400

08001758 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800175c:	e7fe      	b.n	800175c <NMI_Handler+0x4>

0800175e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800175e:	b480      	push	{r7}
 8001760:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001762:	e7fe      	b.n	8001762 <HardFault_Handler+0x4>

08001764 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001768:	e7fe      	b.n	8001768 <MemManage_Handler+0x4>

0800176a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800176a:	b480      	push	{r7}
 800176c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800176e:	e7fe      	b.n	800176e <BusFault_Handler+0x4>

08001770 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001774:	e7fe      	b.n	8001774 <UsageFault_Handler+0x4>

08001776 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001776:	b480      	push	{r7}
 8001778:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800177a:	bf00      	nop
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr

08001784 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001788:	bf00      	nop
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr

08001792 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001792:	b480      	push	{r7}
 8001794:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001796:	bf00      	nop
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr

080017a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017a4:	f000 f88c 	bl	80018c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017a8:	bf00      	nop
 80017aa:	bd80      	pop	{r7, pc}

080017ac <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80017b0:	bf00      	nop
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr
	...

080017bc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80017c0:	4802      	ldr	r0, [pc, #8]	; (80017cc <TIM2_IRQHandler+0x10>)
 80017c2:	f001 fd17 	bl	80031f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80017c6:	bf00      	nop
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	20002160 	.word	0x20002160

080017d0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017d4:	4b06      	ldr	r3, [pc, #24]	; (80017f0 <SystemInit+0x20>)
 80017d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017da:	4a05      	ldr	r2, [pc, #20]	; (80017f0 <SystemInit+0x20>)
 80017dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017e4:	bf00      	nop
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr
 80017ee:	bf00      	nop
 80017f0:	e000ed00 	.word	0xe000ed00

080017f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80017f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800182c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017f8:	480d      	ldr	r0, [pc, #52]	; (8001830 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80017fa:	490e      	ldr	r1, [pc, #56]	; (8001834 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80017fc:	4a0e      	ldr	r2, [pc, #56]	; (8001838 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001800:	e002      	b.n	8001808 <LoopCopyDataInit>

08001802 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001802:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001804:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001806:	3304      	adds	r3, #4

08001808 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001808:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800180a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800180c:	d3f9      	bcc.n	8001802 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800180e:	4a0b      	ldr	r2, [pc, #44]	; (800183c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001810:	4c0b      	ldr	r4, [pc, #44]	; (8001840 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001812:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001814:	e001      	b.n	800181a <LoopFillZerobss>

08001816 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001816:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001818:	3204      	adds	r2, #4

0800181a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800181a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800181c:	d3fb      	bcc.n	8001816 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800181e:	f7ff ffd7 	bl	80017d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001822:	f002 fcdd 	bl	80041e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001826:	f7ff fccb 	bl	80011c0 <main>
  bx  lr    
 800182a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800182c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001830:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001834:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 8001838:	080054c0 	.word	0x080054c0
  ldr r2, =_sbss
 800183c:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 8001840:	200021b4 	.word	0x200021b4

08001844 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001844:	e7fe      	b.n	8001844 <ADC_IRQHandler>

08001846 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001846:	b580      	push	{r7, lr}
 8001848:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800184a:	2003      	movs	r0, #3
 800184c:	f000 f928 	bl	8001aa0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001850:	2000      	movs	r0, #0
 8001852:	f000 f805 	bl	8001860 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001856:	f7ff feed 	bl	8001634 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800185a:	2300      	movs	r3, #0
}
 800185c:	4618      	mov	r0, r3
 800185e:	bd80      	pop	{r7, pc}

08001860 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001868:	4b12      	ldr	r3, [pc, #72]	; (80018b4 <HAL_InitTick+0x54>)
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	4b12      	ldr	r3, [pc, #72]	; (80018b8 <HAL_InitTick+0x58>)
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	4619      	mov	r1, r3
 8001872:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001876:	fbb3 f3f1 	udiv	r3, r3, r1
 800187a:	fbb2 f3f3 	udiv	r3, r2, r3
 800187e:	4618      	mov	r0, r3
 8001880:	f000 f943 	bl	8001b0a <HAL_SYSTICK_Config>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d001      	beq.n	800188e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	e00e      	b.n	80018ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2b0f      	cmp	r3, #15
 8001892:	d80a      	bhi.n	80018aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001894:	2200      	movs	r2, #0
 8001896:	6879      	ldr	r1, [r7, #4]
 8001898:	f04f 30ff 	mov.w	r0, #4294967295
 800189c:	f000 f90b 	bl	8001ab6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018a0:	4a06      	ldr	r2, [pc, #24]	; (80018bc <HAL_InitTick+0x5c>)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018a6:	2300      	movs	r3, #0
 80018a8:	e000      	b.n	80018ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	3708      	adds	r7, #8
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	20000094 	.word	0x20000094
 80018b8:	2000009c 	.word	0x2000009c
 80018bc:	20000098 	.word	0x20000098

080018c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018c4:	4b06      	ldr	r3, [pc, #24]	; (80018e0 <HAL_IncTick+0x20>)
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	461a      	mov	r2, r3
 80018ca:	4b06      	ldr	r3, [pc, #24]	; (80018e4 <HAL_IncTick+0x24>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4413      	add	r3, r2
 80018d0:	4a04      	ldr	r2, [pc, #16]	; (80018e4 <HAL_IncTick+0x24>)
 80018d2:	6013      	str	r3, [r2, #0]
}
 80018d4:	bf00      	nop
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr
 80018de:	bf00      	nop
 80018e0:	2000009c 	.word	0x2000009c
 80018e4:	200021b0 	.word	0x200021b0

080018e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
  return uwTick;
 80018ec:	4b03      	ldr	r3, [pc, #12]	; (80018fc <HAL_GetTick+0x14>)
 80018ee:	681b      	ldr	r3, [r3, #0]
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr
 80018fa:	bf00      	nop
 80018fc:	200021b0 	.word	0x200021b0

08001900 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001900:	b480      	push	{r7}
 8001902:	b085      	sub	sp, #20
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	f003 0307 	and.w	r3, r3, #7
 800190e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001910:	4b0b      	ldr	r3, [pc, #44]	; (8001940 <__NVIC_SetPriorityGrouping+0x40>)
 8001912:	68db      	ldr	r3, [r3, #12]
 8001914:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001916:	68ba      	ldr	r2, [r7, #8]
 8001918:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800191c:	4013      	ands	r3, r2
 800191e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001928:	4b06      	ldr	r3, [pc, #24]	; (8001944 <__NVIC_SetPriorityGrouping+0x44>)
 800192a:	4313      	orrs	r3, r2
 800192c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800192e:	4a04      	ldr	r2, [pc, #16]	; (8001940 <__NVIC_SetPriorityGrouping+0x40>)
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	60d3      	str	r3, [r2, #12]
}
 8001934:	bf00      	nop
 8001936:	3714      	adds	r7, #20
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr
 8001940:	e000ed00 	.word	0xe000ed00
 8001944:	05fa0000 	.word	0x05fa0000

08001948 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800194c:	4b04      	ldr	r3, [pc, #16]	; (8001960 <__NVIC_GetPriorityGrouping+0x18>)
 800194e:	68db      	ldr	r3, [r3, #12]
 8001950:	0a1b      	lsrs	r3, r3, #8
 8001952:	f003 0307 	and.w	r3, r3, #7
}
 8001956:	4618      	mov	r0, r3
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr
 8001960:	e000ed00 	.word	0xe000ed00

08001964 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
 800196a:	4603      	mov	r3, r0
 800196c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800196e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001972:	2b00      	cmp	r3, #0
 8001974:	db0b      	blt.n	800198e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001976:	79fb      	ldrb	r3, [r7, #7]
 8001978:	f003 021f 	and.w	r2, r3, #31
 800197c:	4907      	ldr	r1, [pc, #28]	; (800199c <__NVIC_EnableIRQ+0x38>)
 800197e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001982:	095b      	lsrs	r3, r3, #5
 8001984:	2001      	movs	r0, #1
 8001986:	fa00 f202 	lsl.w	r2, r0, r2
 800198a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800198e:	bf00      	nop
 8001990:	370c      	adds	r7, #12
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr
 800199a:	bf00      	nop
 800199c:	e000e100 	.word	0xe000e100

080019a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b083      	sub	sp, #12
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	4603      	mov	r3, r0
 80019a8:	6039      	str	r1, [r7, #0]
 80019aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	db0a      	blt.n	80019ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	b2da      	uxtb	r2, r3
 80019b8:	490c      	ldr	r1, [pc, #48]	; (80019ec <__NVIC_SetPriority+0x4c>)
 80019ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019be:	0112      	lsls	r2, r2, #4
 80019c0:	b2d2      	uxtb	r2, r2
 80019c2:	440b      	add	r3, r1
 80019c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019c8:	e00a      	b.n	80019e0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	b2da      	uxtb	r2, r3
 80019ce:	4908      	ldr	r1, [pc, #32]	; (80019f0 <__NVIC_SetPriority+0x50>)
 80019d0:	79fb      	ldrb	r3, [r7, #7]
 80019d2:	f003 030f 	and.w	r3, r3, #15
 80019d6:	3b04      	subs	r3, #4
 80019d8:	0112      	lsls	r2, r2, #4
 80019da:	b2d2      	uxtb	r2, r2
 80019dc:	440b      	add	r3, r1
 80019de:	761a      	strb	r2, [r3, #24]
}
 80019e0:	bf00      	nop
 80019e2:	370c      	adds	r7, #12
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr
 80019ec:	e000e100 	.word	0xe000e100
 80019f0:	e000ed00 	.word	0xe000ed00

080019f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b089      	sub	sp, #36	; 0x24
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	60f8      	str	r0, [r7, #12]
 80019fc:	60b9      	str	r1, [r7, #8]
 80019fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	f003 0307 	and.w	r3, r3, #7
 8001a06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a08:	69fb      	ldr	r3, [r7, #28]
 8001a0a:	f1c3 0307 	rsb	r3, r3, #7
 8001a0e:	2b04      	cmp	r3, #4
 8001a10:	bf28      	it	cs
 8001a12:	2304      	movcs	r3, #4
 8001a14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	3304      	adds	r3, #4
 8001a1a:	2b06      	cmp	r3, #6
 8001a1c:	d902      	bls.n	8001a24 <NVIC_EncodePriority+0x30>
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	3b03      	subs	r3, #3
 8001a22:	e000      	b.n	8001a26 <NVIC_EncodePriority+0x32>
 8001a24:	2300      	movs	r3, #0
 8001a26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a28:	f04f 32ff 	mov.w	r2, #4294967295
 8001a2c:	69bb      	ldr	r3, [r7, #24]
 8001a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a32:	43da      	mvns	r2, r3
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	401a      	ands	r2, r3
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a3c:	f04f 31ff 	mov.w	r1, #4294967295
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	fa01 f303 	lsl.w	r3, r1, r3
 8001a46:	43d9      	mvns	r1, r3
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a4c:	4313      	orrs	r3, r2
         );
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3724      	adds	r7, #36	; 0x24
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
	...

08001a5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	3b01      	subs	r3, #1
 8001a68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a6c:	d301      	bcc.n	8001a72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e00f      	b.n	8001a92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a72:	4a0a      	ldr	r2, [pc, #40]	; (8001a9c <SysTick_Config+0x40>)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	3b01      	subs	r3, #1
 8001a78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a7a:	210f      	movs	r1, #15
 8001a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a80:	f7ff ff8e 	bl	80019a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a84:	4b05      	ldr	r3, [pc, #20]	; (8001a9c <SysTick_Config+0x40>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a8a:	4b04      	ldr	r3, [pc, #16]	; (8001a9c <SysTick_Config+0x40>)
 8001a8c:	2207      	movs	r2, #7
 8001a8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a90:	2300      	movs	r3, #0
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3708      	adds	r7, #8
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	e000e010 	.word	0xe000e010

08001aa0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001aa8:	6878      	ldr	r0, [r7, #4]
 8001aaa:	f7ff ff29 	bl	8001900 <__NVIC_SetPriorityGrouping>
}
 8001aae:	bf00      	nop
 8001ab0:	3708      	adds	r7, #8
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}

08001ab6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ab6:	b580      	push	{r7, lr}
 8001ab8:	b086      	sub	sp, #24
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	4603      	mov	r3, r0
 8001abe:	60b9      	str	r1, [r7, #8]
 8001ac0:	607a      	str	r2, [r7, #4]
 8001ac2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ac8:	f7ff ff3e 	bl	8001948 <__NVIC_GetPriorityGrouping>
 8001acc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ace:	687a      	ldr	r2, [r7, #4]
 8001ad0:	68b9      	ldr	r1, [r7, #8]
 8001ad2:	6978      	ldr	r0, [r7, #20]
 8001ad4:	f7ff ff8e 	bl	80019f4 <NVIC_EncodePriority>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ade:	4611      	mov	r1, r2
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f7ff ff5d 	bl	80019a0 <__NVIC_SetPriority>
}
 8001ae6:	bf00      	nop
 8001ae8:	3718      	adds	r7, #24
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}

08001aee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aee:	b580      	push	{r7, lr}
 8001af0:	b082      	sub	sp, #8
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	4603      	mov	r3, r0
 8001af6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001af8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001afc:	4618      	mov	r0, r3
 8001afe:	f7ff ff31 	bl	8001964 <__NVIC_EnableIRQ>
}
 8001b02:	bf00      	nop
 8001b04:	3708      	adds	r7, #8
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}

08001b0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b0a:	b580      	push	{r7, lr}
 8001b0c:	b082      	sub	sp, #8
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	f7ff ffa2 	bl	8001a5c <SysTick_Config>
 8001b18:	4603      	mov	r3, r0
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3708      	adds	r7, #8
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
	...

08001b24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b089      	sub	sp, #36	; 0x24
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
 8001b2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001b32:	2300      	movs	r3, #0
 8001b34:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001b36:	2300      	movs	r3, #0
 8001b38:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001b3e:	2300      	movs	r3, #0
 8001b40:	61fb      	str	r3, [r7, #28]
 8001b42:	e175      	b.n	8001e30 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001b44:	2201      	movs	r2, #1
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	697a      	ldr	r2, [r7, #20]
 8001b54:	4013      	ands	r3, r2
 8001b56:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b58:	693a      	ldr	r2, [r7, #16]
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	f040 8164 	bne.w	8001e2a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	2b01      	cmp	r3, #1
 8001b68:	d00b      	beq.n	8001b82 <HAL_GPIO_Init+0x5e>
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	2b02      	cmp	r3, #2
 8001b70:	d007      	beq.n	8001b82 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b76:	2b11      	cmp	r3, #17
 8001b78:	d003      	beq.n	8001b82 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	2b12      	cmp	r3, #18
 8001b80:	d130      	bne.n	8001be4 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001b88:	69fb      	ldr	r3, [r7, #28]
 8001b8a:	005b      	lsls	r3, r3, #1
 8001b8c:	2203      	movs	r2, #3
 8001b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b92:	43db      	mvns	r3, r3
 8001b94:	69ba      	ldr	r2, [r7, #24]
 8001b96:	4013      	ands	r3, r2
 8001b98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	68da      	ldr	r2, [r3, #12]
 8001b9e:	69fb      	ldr	r3, [r7, #28]
 8001ba0:	005b      	lsls	r3, r3, #1
 8001ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba6:	69ba      	ldr	r2, [r7, #24]
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	69ba      	ldr	r2, [r7, #24]
 8001bb0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bb8:	2201      	movs	r2, #1
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc0:	43db      	mvns	r3, r3
 8001bc2:	69ba      	ldr	r2, [r7, #24]
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	091b      	lsrs	r3, r3, #4
 8001bce:	f003 0201 	and.w	r2, r3, #1
 8001bd2:	69fb      	ldr	r3, [r7, #28]
 8001bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd8:	69ba      	ldr	r2, [r7, #24]
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	69ba      	ldr	r2, [r7, #24]
 8001be2:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	68db      	ldr	r3, [r3, #12]
 8001be8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001bea:	69fb      	ldr	r3, [r7, #28]
 8001bec:	005b      	lsls	r3, r3, #1
 8001bee:	2203      	movs	r2, #3
 8001bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf4:	43db      	mvns	r3, r3
 8001bf6:	69ba      	ldr	r2, [r7, #24]
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	689a      	ldr	r2, [r3, #8]
 8001c00:	69fb      	ldr	r3, [r7, #28]
 8001c02:	005b      	lsls	r3, r3, #1
 8001c04:	fa02 f303 	lsl.w	r3, r2, r3
 8001c08:	69ba      	ldr	r2, [r7, #24]
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	69ba      	ldr	r2, [r7, #24]
 8001c12:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	2b02      	cmp	r3, #2
 8001c1a:	d003      	beq.n	8001c24 <HAL_GPIO_Init+0x100>
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	2b12      	cmp	r3, #18
 8001c22:	d123      	bne.n	8001c6c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001c24:	69fb      	ldr	r3, [r7, #28]
 8001c26:	08da      	lsrs	r2, r3, #3
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	3208      	adds	r2, #8
 8001c2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001c32:	69fb      	ldr	r3, [r7, #28]
 8001c34:	f003 0307 	and.w	r3, r3, #7
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	220f      	movs	r2, #15
 8001c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c40:	43db      	mvns	r3, r3
 8001c42:	69ba      	ldr	r2, [r7, #24]
 8001c44:	4013      	ands	r3, r2
 8001c46:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	691a      	ldr	r2, [r3, #16]
 8001c4c:	69fb      	ldr	r3, [r7, #28]
 8001c4e:	f003 0307 	and.w	r3, r3, #7
 8001c52:	009b      	lsls	r3, r3, #2
 8001c54:	fa02 f303 	lsl.w	r3, r2, r3
 8001c58:	69ba      	ldr	r2, [r7, #24]
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001c5e:	69fb      	ldr	r3, [r7, #28]
 8001c60:	08da      	lsrs	r2, r3, #3
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	3208      	adds	r2, #8
 8001c66:	69b9      	ldr	r1, [r7, #24]
 8001c68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001c72:	69fb      	ldr	r3, [r7, #28]
 8001c74:	005b      	lsls	r3, r3, #1
 8001c76:	2203      	movs	r2, #3
 8001c78:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7c:	43db      	mvns	r3, r3
 8001c7e:	69ba      	ldr	r2, [r7, #24]
 8001c80:	4013      	ands	r3, r2
 8001c82:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f003 0203 	and.w	r2, r3, #3
 8001c8c:	69fb      	ldr	r3, [r7, #28]
 8001c8e:	005b      	lsls	r3, r3, #1
 8001c90:	fa02 f303 	lsl.w	r3, r2, r3
 8001c94:	69ba      	ldr	r2, [r7, #24]
 8001c96:	4313      	orrs	r3, r2
 8001c98:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	69ba      	ldr	r2, [r7, #24]
 8001c9e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	f000 80be 	beq.w	8001e2a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cae:	4b66      	ldr	r3, [pc, #408]	; (8001e48 <HAL_GPIO_Init+0x324>)
 8001cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cb2:	4a65      	ldr	r2, [pc, #404]	; (8001e48 <HAL_GPIO_Init+0x324>)
 8001cb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cb8:	6453      	str	r3, [r2, #68]	; 0x44
 8001cba:	4b63      	ldr	r3, [pc, #396]	; (8001e48 <HAL_GPIO_Init+0x324>)
 8001cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cc2:	60fb      	str	r3, [r7, #12]
 8001cc4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001cc6:	4a61      	ldr	r2, [pc, #388]	; (8001e4c <HAL_GPIO_Init+0x328>)
 8001cc8:	69fb      	ldr	r3, [r7, #28]
 8001cca:	089b      	lsrs	r3, r3, #2
 8001ccc:	3302      	adds	r3, #2
 8001cce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001cd4:	69fb      	ldr	r3, [r7, #28]
 8001cd6:	f003 0303 	and.w	r3, r3, #3
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	220f      	movs	r2, #15
 8001cde:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce2:	43db      	mvns	r3, r3
 8001ce4:	69ba      	ldr	r2, [r7, #24]
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	4a58      	ldr	r2, [pc, #352]	; (8001e50 <HAL_GPIO_Init+0x32c>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d037      	beq.n	8001d62 <HAL_GPIO_Init+0x23e>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	4a57      	ldr	r2, [pc, #348]	; (8001e54 <HAL_GPIO_Init+0x330>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d031      	beq.n	8001d5e <HAL_GPIO_Init+0x23a>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	4a56      	ldr	r2, [pc, #344]	; (8001e58 <HAL_GPIO_Init+0x334>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d02b      	beq.n	8001d5a <HAL_GPIO_Init+0x236>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	4a55      	ldr	r2, [pc, #340]	; (8001e5c <HAL_GPIO_Init+0x338>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d025      	beq.n	8001d56 <HAL_GPIO_Init+0x232>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	4a54      	ldr	r2, [pc, #336]	; (8001e60 <HAL_GPIO_Init+0x33c>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d01f      	beq.n	8001d52 <HAL_GPIO_Init+0x22e>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	4a53      	ldr	r2, [pc, #332]	; (8001e64 <HAL_GPIO_Init+0x340>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d019      	beq.n	8001d4e <HAL_GPIO_Init+0x22a>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	4a52      	ldr	r2, [pc, #328]	; (8001e68 <HAL_GPIO_Init+0x344>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d013      	beq.n	8001d4a <HAL_GPIO_Init+0x226>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	4a51      	ldr	r2, [pc, #324]	; (8001e6c <HAL_GPIO_Init+0x348>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d00d      	beq.n	8001d46 <HAL_GPIO_Init+0x222>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	4a50      	ldr	r2, [pc, #320]	; (8001e70 <HAL_GPIO_Init+0x34c>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d007      	beq.n	8001d42 <HAL_GPIO_Init+0x21e>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	4a4f      	ldr	r2, [pc, #316]	; (8001e74 <HAL_GPIO_Init+0x350>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d101      	bne.n	8001d3e <HAL_GPIO_Init+0x21a>
 8001d3a:	2309      	movs	r3, #9
 8001d3c:	e012      	b.n	8001d64 <HAL_GPIO_Init+0x240>
 8001d3e:	230a      	movs	r3, #10
 8001d40:	e010      	b.n	8001d64 <HAL_GPIO_Init+0x240>
 8001d42:	2308      	movs	r3, #8
 8001d44:	e00e      	b.n	8001d64 <HAL_GPIO_Init+0x240>
 8001d46:	2307      	movs	r3, #7
 8001d48:	e00c      	b.n	8001d64 <HAL_GPIO_Init+0x240>
 8001d4a:	2306      	movs	r3, #6
 8001d4c:	e00a      	b.n	8001d64 <HAL_GPIO_Init+0x240>
 8001d4e:	2305      	movs	r3, #5
 8001d50:	e008      	b.n	8001d64 <HAL_GPIO_Init+0x240>
 8001d52:	2304      	movs	r3, #4
 8001d54:	e006      	b.n	8001d64 <HAL_GPIO_Init+0x240>
 8001d56:	2303      	movs	r3, #3
 8001d58:	e004      	b.n	8001d64 <HAL_GPIO_Init+0x240>
 8001d5a:	2302      	movs	r3, #2
 8001d5c:	e002      	b.n	8001d64 <HAL_GPIO_Init+0x240>
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e000      	b.n	8001d64 <HAL_GPIO_Init+0x240>
 8001d62:	2300      	movs	r3, #0
 8001d64:	69fa      	ldr	r2, [r7, #28]
 8001d66:	f002 0203 	and.w	r2, r2, #3
 8001d6a:	0092      	lsls	r2, r2, #2
 8001d6c:	4093      	lsls	r3, r2
 8001d6e:	69ba      	ldr	r2, [r7, #24]
 8001d70:	4313      	orrs	r3, r2
 8001d72:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001d74:	4935      	ldr	r1, [pc, #212]	; (8001e4c <HAL_GPIO_Init+0x328>)
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	089b      	lsrs	r3, r3, #2
 8001d7a:	3302      	adds	r3, #2
 8001d7c:	69ba      	ldr	r2, [r7, #24]
 8001d7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d82:	4b3d      	ldr	r3, [pc, #244]	; (8001e78 <HAL_GPIO_Init+0x354>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	43db      	mvns	r3, r3
 8001d8c:	69ba      	ldr	r2, [r7, #24]
 8001d8e:	4013      	ands	r3, r2
 8001d90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d003      	beq.n	8001da6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001d9e:	69ba      	ldr	r2, [r7, #24]
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	4313      	orrs	r3, r2
 8001da4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001da6:	4a34      	ldr	r2, [pc, #208]	; (8001e78 <HAL_GPIO_Init+0x354>)
 8001da8:	69bb      	ldr	r3, [r7, #24]
 8001daa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001dac:	4b32      	ldr	r3, [pc, #200]	; (8001e78 <HAL_GPIO_Init+0x354>)
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	43db      	mvns	r3, r3
 8001db6:	69ba      	ldr	r2, [r7, #24]
 8001db8:	4013      	ands	r3, r2
 8001dba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d003      	beq.n	8001dd0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001dc8:	69ba      	ldr	r2, [r7, #24]
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001dd0:	4a29      	ldr	r2, [pc, #164]	; (8001e78 <HAL_GPIO_Init+0x354>)
 8001dd2:	69bb      	ldr	r3, [r7, #24]
 8001dd4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001dd6:	4b28      	ldr	r3, [pc, #160]	; (8001e78 <HAL_GPIO_Init+0x354>)
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	43db      	mvns	r3, r3
 8001de0:	69ba      	ldr	r2, [r7, #24]
 8001de2:	4013      	ands	r3, r2
 8001de4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d003      	beq.n	8001dfa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001df2:	69ba      	ldr	r2, [r7, #24]
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	4313      	orrs	r3, r2
 8001df8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001dfa:	4a1f      	ldr	r2, [pc, #124]	; (8001e78 <HAL_GPIO_Init+0x354>)
 8001dfc:	69bb      	ldr	r3, [r7, #24]
 8001dfe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e00:	4b1d      	ldr	r3, [pc, #116]	; (8001e78 <HAL_GPIO_Init+0x354>)
 8001e02:	68db      	ldr	r3, [r3, #12]
 8001e04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	43db      	mvns	r3, r3
 8001e0a:	69ba      	ldr	r2, [r7, #24]
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d003      	beq.n	8001e24 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001e1c:	69ba      	ldr	r2, [r7, #24]
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	4313      	orrs	r3, r2
 8001e22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e24:	4a14      	ldr	r2, [pc, #80]	; (8001e78 <HAL_GPIO_Init+0x354>)
 8001e26:	69bb      	ldr	r3, [r7, #24]
 8001e28:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	3301      	adds	r3, #1
 8001e2e:	61fb      	str	r3, [r7, #28]
 8001e30:	69fb      	ldr	r3, [r7, #28]
 8001e32:	2b0f      	cmp	r3, #15
 8001e34:	f67f ae86 	bls.w	8001b44 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001e38:	bf00      	nop
 8001e3a:	bf00      	nop
 8001e3c:	3724      	adds	r7, #36	; 0x24
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
 8001e46:	bf00      	nop
 8001e48:	40023800 	.word	0x40023800
 8001e4c:	40013800 	.word	0x40013800
 8001e50:	40020000 	.word	0x40020000
 8001e54:	40020400 	.word	0x40020400
 8001e58:	40020800 	.word	0x40020800
 8001e5c:	40020c00 	.word	0x40020c00
 8001e60:	40021000 	.word	0x40021000
 8001e64:	40021400 	.word	0x40021400
 8001e68:	40021800 	.word	0x40021800
 8001e6c:	40021c00 	.word	0x40021c00
 8001e70:	40022000 	.word	0x40022000
 8001e74:	40022400 	.word	0x40022400
 8001e78:	40013c00 	.word	0x40013c00

08001e7c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b085      	sub	sp, #20
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
 8001e84:	460b      	mov	r3, r1
 8001e86:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	691a      	ldr	r2, [r3, #16]
 8001e8c:	887b      	ldrh	r3, [r7, #2]
 8001e8e:	4013      	ands	r3, r2
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d002      	beq.n	8001e9a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e94:	2301      	movs	r3, #1
 8001e96:	73fb      	strb	r3, [r7, #15]
 8001e98:	e001      	b.n	8001e9e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	3714      	adds	r7, #20
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr

08001eac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b083      	sub	sp, #12
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
 8001eb4:	460b      	mov	r3, r1
 8001eb6:	807b      	strh	r3, [r7, #2]
 8001eb8:	4613      	mov	r3, r2
 8001eba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ebc:	787b      	ldrb	r3, [r7, #1]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d003      	beq.n	8001eca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ec2:	887a      	ldrh	r2, [r7, #2]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001ec8:	e003      	b.n	8001ed2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001eca:	887b      	ldrh	r3, [r7, #2]
 8001ecc:	041a      	lsls	r2, r3, #16
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	619a      	str	r2, [r3, #24]
}
 8001ed2:	bf00      	nop
 8001ed4:	370c      	adds	r7, #12
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr
	...

08001ee0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b082      	sub	sp, #8
 8001ee4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001eea:	4b23      	ldr	r3, [pc, #140]	; (8001f78 <HAL_PWREx_EnableOverDrive+0x98>)
 8001eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eee:	4a22      	ldr	r2, [pc, #136]	; (8001f78 <HAL_PWREx_EnableOverDrive+0x98>)
 8001ef0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ef4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ef6:	4b20      	ldr	r3, [pc, #128]	; (8001f78 <HAL_PWREx_EnableOverDrive+0x98>)
 8001ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001efe:	603b      	str	r3, [r7, #0]
 8001f00:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001f02:	4b1e      	ldr	r3, [pc, #120]	; (8001f7c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a1d      	ldr	r2, [pc, #116]	; (8001f7c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001f08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f0c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f0e:	f7ff fceb 	bl	80018e8 <HAL_GetTick>
 8001f12:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001f14:	e009      	b.n	8001f2a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001f16:	f7ff fce7 	bl	80018e8 <HAL_GetTick>
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	1ad3      	subs	r3, r2, r3
 8001f20:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001f24:	d901      	bls.n	8001f2a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001f26:	2303      	movs	r3, #3
 8001f28:	e022      	b.n	8001f70 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001f2a:	4b14      	ldr	r3, [pc, #80]	; (8001f7c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f36:	d1ee      	bne.n	8001f16 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001f38:	4b10      	ldr	r3, [pc, #64]	; (8001f7c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a0f      	ldr	r2, [pc, #60]	; (8001f7c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001f3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f42:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f44:	f7ff fcd0 	bl	80018e8 <HAL_GetTick>
 8001f48:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001f4a:	e009      	b.n	8001f60 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001f4c:	f7ff fccc 	bl	80018e8 <HAL_GetTick>
 8001f50:	4602      	mov	r2, r0
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	1ad3      	subs	r3, r2, r3
 8001f56:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001f5a:	d901      	bls.n	8001f60 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001f5c:	2303      	movs	r3, #3
 8001f5e:	e007      	b.n	8001f70 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001f60:	4b06      	ldr	r3, [pc, #24]	; (8001f7c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f68:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001f6c:	d1ee      	bne.n	8001f4c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001f6e:	2300      	movs	r3, #0
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3708      	adds	r7, #8
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	40023800 	.word	0x40023800
 8001f7c:	40007000 	.word	0x40007000

08001f80 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b086      	sub	sp, #24
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d101      	bne.n	8001f96 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e291      	b.n	80024ba <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f003 0301 	and.w	r3, r3, #1
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	f000 8087 	beq.w	80020b2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001fa4:	4b96      	ldr	r3, [pc, #600]	; (8002200 <HAL_RCC_OscConfig+0x280>)
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	f003 030c 	and.w	r3, r3, #12
 8001fac:	2b04      	cmp	r3, #4
 8001fae:	d00c      	beq.n	8001fca <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001fb0:	4b93      	ldr	r3, [pc, #588]	; (8002200 <HAL_RCC_OscConfig+0x280>)
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	f003 030c 	and.w	r3, r3, #12
 8001fb8:	2b08      	cmp	r3, #8
 8001fba:	d112      	bne.n	8001fe2 <HAL_RCC_OscConfig+0x62>
 8001fbc:	4b90      	ldr	r3, [pc, #576]	; (8002200 <HAL_RCC_OscConfig+0x280>)
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fc4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001fc8:	d10b      	bne.n	8001fe2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fca:	4b8d      	ldr	r3, [pc, #564]	; (8002200 <HAL_RCC_OscConfig+0x280>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d06c      	beq.n	80020b0 <HAL_RCC_OscConfig+0x130>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d168      	bne.n	80020b0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e26b      	b.n	80024ba <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fea:	d106      	bne.n	8001ffa <HAL_RCC_OscConfig+0x7a>
 8001fec:	4b84      	ldr	r3, [pc, #528]	; (8002200 <HAL_RCC_OscConfig+0x280>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a83      	ldr	r2, [pc, #524]	; (8002200 <HAL_RCC_OscConfig+0x280>)
 8001ff2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ff6:	6013      	str	r3, [r2, #0]
 8001ff8:	e02e      	b.n	8002058 <HAL_RCC_OscConfig+0xd8>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d10c      	bne.n	800201c <HAL_RCC_OscConfig+0x9c>
 8002002:	4b7f      	ldr	r3, [pc, #508]	; (8002200 <HAL_RCC_OscConfig+0x280>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a7e      	ldr	r2, [pc, #504]	; (8002200 <HAL_RCC_OscConfig+0x280>)
 8002008:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800200c:	6013      	str	r3, [r2, #0]
 800200e:	4b7c      	ldr	r3, [pc, #496]	; (8002200 <HAL_RCC_OscConfig+0x280>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a7b      	ldr	r2, [pc, #492]	; (8002200 <HAL_RCC_OscConfig+0x280>)
 8002014:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002018:	6013      	str	r3, [r2, #0]
 800201a:	e01d      	b.n	8002058 <HAL_RCC_OscConfig+0xd8>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002024:	d10c      	bne.n	8002040 <HAL_RCC_OscConfig+0xc0>
 8002026:	4b76      	ldr	r3, [pc, #472]	; (8002200 <HAL_RCC_OscConfig+0x280>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a75      	ldr	r2, [pc, #468]	; (8002200 <HAL_RCC_OscConfig+0x280>)
 800202c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002030:	6013      	str	r3, [r2, #0]
 8002032:	4b73      	ldr	r3, [pc, #460]	; (8002200 <HAL_RCC_OscConfig+0x280>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a72      	ldr	r2, [pc, #456]	; (8002200 <HAL_RCC_OscConfig+0x280>)
 8002038:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800203c:	6013      	str	r3, [r2, #0]
 800203e:	e00b      	b.n	8002058 <HAL_RCC_OscConfig+0xd8>
 8002040:	4b6f      	ldr	r3, [pc, #444]	; (8002200 <HAL_RCC_OscConfig+0x280>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a6e      	ldr	r2, [pc, #440]	; (8002200 <HAL_RCC_OscConfig+0x280>)
 8002046:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800204a:	6013      	str	r3, [r2, #0]
 800204c:	4b6c      	ldr	r3, [pc, #432]	; (8002200 <HAL_RCC_OscConfig+0x280>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a6b      	ldr	r2, [pc, #428]	; (8002200 <HAL_RCC_OscConfig+0x280>)
 8002052:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002056:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d013      	beq.n	8002088 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002060:	f7ff fc42 	bl	80018e8 <HAL_GetTick>
 8002064:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002066:	e008      	b.n	800207a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002068:	f7ff fc3e 	bl	80018e8 <HAL_GetTick>
 800206c:	4602      	mov	r2, r0
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	1ad3      	subs	r3, r2, r3
 8002072:	2b64      	cmp	r3, #100	; 0x64
 8002074:	d901      	bls.n	800207a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002076:	2303      	movs	r3, #3
 8002078:	e21f      	b.n	80024ba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800207a:	4b61      	ldr	r3, [pc, #388]	; (8002200 <HAL_RCC_OscConfig+0x280>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002082:	2b00      	cmp	r3, #0
 8002084:	d0f0      	beq.n	8002068 <HAL_RCC_OscConfig+0xe8>
 8002086:	e014      	b.n	80020b2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002088:	f7ff fc2e 	bl	80018e8 <HAL_GetTick>
 800208c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800208e:	e008      	b.n	80020a2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002090:	f7ff fc2a 	bl	80018e8 <HAL_GetTick>
 8002094:	4602      	mov	r2, r0
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	1ad3      	subs	r3, r2, r3
 800209a:	2b64      	cmp	r3, #100	; 0x64
 800209c:	d901      	bls.n	80020a2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800209e:	2303      	movs	r3, #3
 80020a0:	e20b      	b.n	80024ba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020a2:	4b57      	ldr	r3, [pc, #348]	; (8002200 <HAL_RCC_OscConfig+0x280>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d1f0      	bne.n	8002090 <HAL_RCC_OscConfig+0x110>
 80020ae:	e000      	b.n	80020b2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 0302 	and.w	r3, r3, #2
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d069      	beq.n	8002192 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80020be:	4b50      	ldr	r3, [pc, #320]	; (8002200 <HAL_RCC_OscConfig+0x280>)
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	f003 030c 	and.w	r3, r3, #12
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d00b      	beq.n	80020e2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020ca:	4b4d      	ldr	r3, [pc, #308]	; (8002200 <HAL_RCC_OscConfig+0x280>)
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	f003 030c 	and.w	r3, r3, #12
 80020d2:	2b08      	cmp	r3, #8
 80020d4:	d11c      	bne.n	8002110 <HAL_RCC_OscConfig+0x190>
 80020d6:	4b4a      	ldr	r3, [pc, #296]	; (8002200 <HAL_RCC_OscConfig+0x280>)
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d116      	bne.n	8002110 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020e2:	4b47      	ldr	r3, [pc, #284]	; (8002200 <HAL_RCC_OscConfig+0x280>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f003 0302 	and.w	r3, r3, #2
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d005      	beq.n	80020fa <HAL_RCC_OscConfig+0x17a>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	68db      	ldr	r3, [r3, #12]
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	d001      	beq.n	80020fa <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e1df      	b.n	80024ba <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020fa:	4b41      	ldr	r3, [pc, #260]	; (8002200 <HAL_RCC_OscConfig+0x280>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	691b      	ldr	r3, [r3, #16]
 8002106:	00db      	lsls	r3, r3, #3
 8002108:	493d      	ldr	r1, [pc, #244]	; (8002200 <HAL_RCC_OscConfig+0x280>)
 800210a:	4313      	orrs	r3, r2
 800210c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800210e:	e040      	b.n	8002192 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	68db      	ldr	r3, [r3, #12]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d023      	beq.n	8002160 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002118:	4b39      	ldr	r3, [pc, #228]	; (8002200 <HAL_RCC_OscConfig+0x280>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a38      	ldr	r2, [pc, #224]	; (8002200 <HAL_RCC_OscConfig+0x280>)
 800211e:	f043 0301 	orr.w	r3, r3, #1
 8002122:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002124:	f7ff fbe0 	bl	80018e8 <HAL_GetTick>
 8002128:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800212a:	e008      	b.n	800213e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800212c:	f7ff fbdc 	bl	80018e8 <HAL_GetTick>
 8002130:	4602      	mov	r2, r0
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	1ad3      	subs	r3, r2, r3
 8002136:	2b02      	cmp	r3, #2
 8002138:	d901      	bls.n	800213e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800213a:	2303      	movs	r3, #3
 800213c:	e1bd      	b.n	80024ba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800213e:	4b30      	ldr	r3, [pc, #192]	; (8002200 <HAL_RCC_OscConfig+0x280>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 0302 	and.w	r3, r3, #2
 8002146:	2b00      	cmp	r3, #0
 8002148:	d0f0      	beq.n	800212c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800214a:	4b2d      	ldr	r3, [pc, #180]	; (8002200 <HAL_RCC_OscConfig+0x280>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	691b      	ldr	r3, [r3, #16]
 8002156:	00db      	lsls	r3, r3, #3
 8002158:	4929      	ldr	r1, [pc, #164]	; (8002200 <HAL_RCC_OscConfig+0x280>)
 800215a:	4313      	orrs	r3, r2
 800215c:	600b      	str	r3, [r1, #0]
 800215e:	e018      	b.n	8002192 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002160:	4b27      	ldr	r3, [pc, #156]	; (8002200 <HAL_RCC_OscConfig+0x280>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a26      	ldr	r2, [pc, #152]	; (8002200 <HAL_RCC_OscConfig+0x280>)
 8002166:	f023 0301 	bic.w	r3, r3, #1
 800216a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800216c:	f7ff fbbc 	bl	80018e8 <HAL_GetTick>
 8002170:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002172:	e008      	b.n	8002186 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002174:	f7ff fbb8 	bl	80018e8 <HAL_GetTick>
 8002178:	4602      	mov	r2, r0
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	2b02      	cmp	r3, #2
 8002180:	d901      	bls.n	8002186 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002182:	2303      	movs	r3, #3
 8002184:	e199      	b.n	80024ba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002186:	4b1e      	ldr	r3, [pc, #120]	; (8002200 <HAL_RCC_OscConfig+0x280>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 0302 	and.w	r3, r3, #2
 800218e:	2b00      	cmp	r3, #0
 8002190:	d1f0      	bne.n	8002174 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f003 0308 	and.w	r3, r3, #8
 800219a:	2b00      	cmp	r3, #0
 800219c:	d038      	beq.n	8002210 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	695b      	ldr	r3, [r3, #20]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d019      	beq.n	80021da <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021a6:	4b16      	ldr	r3, [pc, #88]	; (8002200 <HAL_RCC_OscConfig+0x280>)
 80021a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021aa:	4a15      	ldr	r2, [pc, #84]	; (8002200 <HAL_RCC_OscConfig+0x280>)
 80021ac:	f043 0301 	orr.w	r3, r3, #1
 80021b0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021b2:	f7ff fb99 	bl	80018e8 <HAL_GetTick>
 80021b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021b8:	e008      	b.n	80021cc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021ba:	f7ff fb95 	bl	80018e8 <HAL_GetTick>
 80021be:	4602      	mov	r2, r0
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	1ad3      	subs	r3, r2, r3
 80021c4:	2b02      	cmp	r3, #2
 80021c6:	d901      	bls.n	80021cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80021c8:	2303      	movs	r3, #3
 80021ca:	e176      	b.n	80024ba <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021cc:	4b0c      	ldr	r3, [pc, #48]	; (8002200 <HAL_RCC_OscConfig+0x280>)
 80021ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021d0:	f003 0302 	and.w	r3, r3, #2
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d0f0      	beq.n	80021ba <HAL_RCC_OscConfig+0x23a>
 80021d8:	e01a      	b.n	8002210 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021da:	4b09      	ldr	r3, [pc, #36]	; (8002200 <HAL_RCC_OscConfig+0x280>)
 80021dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021de:	4a08      	ldr	r2, [pc, #32]	; (8002200 <HAL_RCC_OscConfig+0x280>)
 80021e0:	f023 0301 	bic.w	r3, r3, #1
 80021e4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021e6:	f7ff fb7f 	bl	80018e8 <HAL_GetTick>
 80021ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021ec:	e00a      	b.n	8002204 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021ee:	f7ff fb7b 	bl	80018e8 <HAL_GetTick>
 80021f2:	4602      	mov	r2, r0
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	1ad3      	subs	r3, r2, r3
 80021f8:	2b02      	cmp	r3, #2
 80021fa:	d903      	bls.n	8002204 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80021fc:	2303      	movs	r3, #3
 80021fe:	e15c      	b.n	80024ba <HAL_RCC_OscConfig+0x53a>
 8002200:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002204:	4b91      	ldr	r3, [pc, #580]	; (800244c <HAL_RCC_OscConfig+0x4cc>)
 8002206:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002208:	f003 0302 	and.w	r3, r3, #2
 800220c:	2b00      	cmp	r3, #0
 800220e:	d1ee      	bne.n	80021ee <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f003 0304 	and.w	r3, r3, #4
 8002218:	2b00      	cmp	r3, #0
 800221a:	f000 80a4 	beq.w	8002366 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800221e:	4b8b      	ldr	r3, [pc, #556]	; (800244c <HAL_RCC_OscConfig+0x4cc>)
 8002220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002222:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002226:	2b00      	cmp	r3, #0
 8002228:	d10d      	bne.n	8002246 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800222a:	4b88      	ldr	r3, [pc, #544]	; (800244c <HAL_RCC_OscConfig+0x4cc>)
 800222c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222e:	4a87      	ldr	r2, [pc, #540]	; (800244c <HAL_RCC_OscConfig+0x4cc>)
 8002230:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002234:	6413      	str	r3, [r2, #64]	; 0x40
 8002236:	4b85      	ldr	r3, [pc, #532]	; (800244c <HAL_RCC_OscConfig+0x4cc>)
 8002238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800223e:	60bb      	str	r3, [r7, #8]
 8002240:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002242:	2301      	movs	r3, #1
 8002244:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002246:	4b82      	ldr	r3, [pc, #520]	; (8002450 <HAL_RCC_OscConfig+0x4d0>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800224e:	2b00      	cmp	r3, #0
 8002250:	d118      	bne.n	8002284 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002252:	4b7f      	ldr	r3, [pc, #508]	; (8002450 <HAL_RCC_OscConfig+0x4d0>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a7e      	ldr	r2, [pc, #504]	; (8002450 <HAL_RCC_OscConfig+0x4d0>)
 8002258:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800225c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800225e:	f7ff fb43 	bl	80018e8 <HAL_GetTick>
 8002262:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002264:	e008      	b.n	8002278 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002266:	f7ff fb3f 	bl	80018e8 <HAL_GetTick>
 800226a:	4602      	mov	r2, r0
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	1ad3      	subs	r3, r2, r3
 8002270:	2b64      	cmp	r3, #100	; 0x64
 8002272:	d901      	bls.n	8002278 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002274:	2303      	movs	r3, #3
 8002276:	e120      	b.n	80024ba <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002278:	4b75      	ldr	r3, [pc, #468]	; (8002450 <HAL_RCC_OscConfig+0x4d0>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002280:	2b00      	cmp	r3, #0
 8002282:	d0f0      	beq.n	8002266 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	2b01      	cmp	r3, #1
 800228a:	d106      	bne.n	800229a <HAL_RCC_OscConfig+0x31a>
 800228c:	4b6f      	ldr	r3, [pc, #444]	; (800244c <HAL_RCC_OscConfig+0x4cc>)
 800228e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002290:	4a6e      	ldr	r2, [pc, #440]	; (800244c <HAL_RCC_OscConfig+0x4cc>)
 8002292:	f043 0301 	orr.w	r3, r3, #1
 8002296:	6713      	str	r3, [r2, #112]	; 0x70
 8002298:	e02d      	b.n	80022f6 <HAL_RCC_OscConfig+0x376>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d10c      	bne.n	80022bc <HAL_RCC_OscConfig+0x33c>
 80022a2:	4b6a      	ldr	r3, [pc, #424]	; (800244c <HAL_RCC_OscConfig+0x4cc>)
 80022a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022a6:	4a69      	ldr	r2, [pc, #420]	; (800244c <HAL_RCC_OscConfig+0x4cc>)
 80022a8:	f023 0301 	bic.w	r3, r3, #1
 80022ac:	6713      	str	r3, [r2, #112]	; 0x70
 80022ae:	4b67      	ldr	r3, [pc, #412]	; (800244c <HAL_RCC_OscConfig+0x4cc>)
 80022b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022b2:	4a66      	ldr	r2, [pc, #408]	; (800244c <HAL_RCC_OscConfig+0x4cc>)
 80022b4:	f023 0304 	bic.w	r3, r3, #4
 80022b8:	6713      	str	r3, [r2, #112]	; 0x70
 80022ba:	e01c      	b.n	80022f6 <HAL_RCC_OscConfig+0x376>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	2b05      	cmp	r3, #5
 80022c2:	d10c      	bne.n	80022de <HAL_RCC_OscConfig+0x35e>
 80022c4:	4b61      	ldr	r3, [pc, #388]	; (800244c <HAL_RCC_OscConfig+0x4cc>)
 80022c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022c8:	4a60      	ldr	r2, [pc, #384]	; (800244c <HAL_RCC_OscConfig+0x4cc>)
 80022ca:	f043 0304 	orr.w	r3, r3, #4
 80022ce:	6713      	str	r3, [r2, #112]	; 0x70
 80022d0:	4b5e      	ldr	r3, [pc, #376]	; (800244c <HAL_RCC_OscConfig+0x4cc>)
 80022d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022d4:	4a5d      	ldr	r2, [pc, #372]	; (800244c <HAL_RCC_OscConfig+0x4cc>)
 80022d6:	f043 0301 	orr.w	r3, r3, #1
 80022da:	6713      	str	r3, [r2, #112]	; 0x70
 80022dc:	e00b      	b.n	80022f6 <HAL_RCC_OscConfig+0x376>
 80022de:	4b5b      	ldr	r3, [pc, #364]	; (800244c <HAL_RCC_OscConfig+0x4cc>)
 80022e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022e2:	4a5a      	ldr	r2, [pc, #360]	; (800244c <HAL_RCC_OscConfig+0x4cc>)
 80022e4:	f023 0301 	bic.w	r3, r3, #1
 80022e8:	6713      	str	r3, [r2, #112]	; 0x70
 80022ea:	4b58      	ldr	r3, [pc, #352]	; (800244c <HAL_RCC_OscConfig+0x4cc>)
 80022ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022ee:	4a57      	ldr	r2, [pc, #348]	; (800244c <HAL_RCC_OscConfig+0x4cc>)
 80022f0:	f023 0304 	bic.w	r3, r3, #4
 80022f4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d015      	beq.n	800232a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022fe:	f7ff faf3 	bl	80018e8 <HAL_GetTick>
 8002302:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002304:	e00a      	b.n	800231c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002306:	f7ff faef 	bl	80018e8 <HAL_GetTick>
 800230a:	4602      	mov	r2, r0
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	1ad3      	subs	r3, r2, r3
 8002310:	f241 3288 	movw	r2, #5000	; 0x1388
 8002314:	4293      	cmp	r3, r2
 8002316:	d901      	bls.n	800231c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002318:	2303      	movs	r3, #3
 800231a:	e0ce      	b.n	80024ba <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800231c:	4b4b      	ldr	r3, [pc, #300]	; (800244c <HAL_RCC_OscConfig+0x4cc>)
 800231e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002320:	f003 0302 	and.w	r3, r3, #2
 8002324:	2b00      	cmp	r3, #0
 8002326:	d0ee      	beq.n	8002306 <HAL_RCC_OscConfig+0x386>
 8002328:	e014      	b.n	8002354 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800232a:	f7ff fadd 	bl	80018e8 <HAL_GetTick>
 800232e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002330:	e00a      	b.n	8002348 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002332:	f7ff fad9 	bl	80018e8 <HAL_GetTick>
 8002336:	4602      	mov	r2, r0
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	1ad3      	subs	r3, r2, r3
 800233c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002340:	4293      	cmp	r3, r2
 8002342:	d901      	bls.n	8002348 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002344:	2303      	movs	r3, #3
 8002346:	e0b8      	b.n	80024ba <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002348:	4b40      	ldr	r3, [pc, #256]	; (800244c <HAL_RCC_OscConfig+0x4cc>)
 800234a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800234c:	f003 0302 	and.w	r3, r3, #2
 8002350:	2b00      	cmp	r3, #0
 8002352:	d1ee      	bne.n	8002332 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002354:	7dfb      	ldrb	r3, [r7, #23]
 8002356:	2b01      	cmp	r3, #1
 8002358:	d105      	bne.n	8002366 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800235a:	4b3c      	ldr	r3, [pc, #240]	; (800244c <HAL_RCC_OscConfig+0x4cc>)
 800235c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235e:	4a3b      	ldr	r2, [pc, #236]	; (800244c <HAL_RCC_OscConfig+0x4cc>)
 8002360:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002364:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	699b      	ldr	r3, [r3, #24]
 800236a:	2b00      	cmp	r3, #0
 800236c:	f000 80a4 	beq.w	80024b8 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002370:	4b36      	ldr	r3, [pc, #216]	; (800244c <HAL_RCC_OscConfig+0x4cc>)
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	f003 030c 	and.w	r3, r3, #12
 8002378:	2b08      	cmp	r3, #8
 800237a:	d06b      	beq.n	8002454 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	699b      	ldr	r3, [r3, #24]
 8002380:	2b02      	cmp	r3, #2
 8002382:	d149      	bne.n	8002418 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002384:	4b31      	ldr	r3, [pc, #196]	; (800244c <HAL_RCC_OscConfig+0x4cc>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a30      	ldr	r2, [pc, #192]	; (800244c <HAL_RCC_OscConfig+0x4cc>)
 800238a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800238e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002390:	f7ff faaa 	bl	80018e8 <HAL_GetTick>
 8002394:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002396:	e008      	b.n	80023aa <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002398:	f7ff faa6 	bl	80018e8 <HAL_GetTick>
 800239c:	4602      	mov	r2, r0
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	2b02      	cmp	r3, #2
 80023a4:	d901      	bls.n	80023aa <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80023a6:	2303      	movs	r3, #3
 80023a8:	e087      	b.n	80024ba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023aa:	4b28      	ldr	r3, [pc, #160]	; (800244c <HAL_RCC_OscConfig+0x4cc>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d1f0      	bne.n	8002398 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	69da      	ldr	r2, [r3, #28]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6a1b      	ldr	r3, [r3, #32]
 80023be:	431a      	orrs	r2, r3
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c4:	019b      	lsls	r3, r3, #6
 80023c6:	431a      	orrs	r2, r3
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023cc:	085b      	lsrs	r3, r3, #1
 80023ce:	3b01      	subs	r3, #1
 80023d0:	041b      	lsls	r3, r3, #16
 80023d2:	431a      	orrs	r2, r3
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023d8:	061b      	lsls	r3, r3, #24
 80023da:	4313      	orrs	r3, r2
 80023dc:	4a1b      	ldr	r2, [pc, #108]	; (800244c <HAL_RCC_OscConfig+0x4cc>)
 80023de:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80023e2:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023e4:	4b19      	ldr	r3, [pc, #100]	; (800244c <HAL_RCC_OscConfig+0x4cc>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a18      	ldr	r2, [pc, #96]	; (800244c <HAL_RCC_OscConfig+0x4cc>)
 80023ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023f0:	f7ff fa7a 	bl	80018e8 <HAL_GetTick>
 80023f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023f6:	e008      	b.n	800240a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023f8:	f7ff fa76 	bl	80018e8 <HAL_GetTick>
 80023fc:	4602      	mov	r2, r0
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	2b02      	cmp	r3, #2
 8002404:	d901      	bls.n	800240a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002406:	2303      	movs	r3, #3
 8002408:	e057      	b.n	80024ba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800240a:	4b10      	ldr	r3, [pc, #64]	; (800244c <HAL_RCC_OscConfig+0x4cc>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002412:	2b00      	cmp	r3, #0
 8002414:	d0f0      	beq.n	80023f8 <HAL_RCC_OscConfig+0x478>
 8002416:	e04f      	b.n	80024b8 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002418:	4b0c      	ldr	r3, [pc, #48]	; (800244c <HAL_RCC_OscConfig+0x4cc>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a0b      	ldr	r2, [pc, #44]	; (800244c <HAL_RCC_OscConfig+0x4cc>)
 800241e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002422:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002424:	f7ff fa60 	bl	80018e8 <HAL_GetTick>
 8002428:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800242a:	e008      	b.n	800243e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800242c:	f7ff fa5c 	bl	80018e8 <HAL_GetTick>
 8002430:	4602      	mov	r2, r0
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	2b02      	cmp	r3, #2
 8002438:	d901      	bls.n	800243e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800243a:	2303      	movs	r3, #3
 800243c:	e03d      	b.n	80024ba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800243e:	4b03      	ldr	r3, [pc, #12]	; (800244c <HAL_RCC_OscConfig+0x4cc>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002446:	2b00      	cmp	r3, #0
 8002448:	d1f0      	bne.n	800242c <HAL_RCC_OscConfig+0x4ac>
 800244a:	e035      	b.n	80024b8 <HAL_RCC_OscConfig+0x538>
 800244c:	40023800 	.word	0x40023800
 8002450:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002454:	4b1b      	ldr	r3, [pc, #108]	; (80024c4 <HAL_RCC_OscConfig+0x544>)
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	699b      	ldr	r3, [r3, #24]
 800245e:	2b01      	cmp	r3, #1
 8002460:	d028      	beq.n	80024b4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800246c:	429a      	cmp	r2, r3
 800246e:	d121      	bne.n	80024b4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800247a:	429a      	cmp	r2, r3
 800247c:	d11a      	bne.n	80024b4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800247e:	68fa      	ldr	r2, [r7, #12]
 8002480:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002484:	4013      	ands	r3, r2
 8002486:	687a      	ldr	r2, [r7, #4]
 8002488:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800248a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800248c:	4293      	cmp	r3, r2
 800248e:	d111      	bne.n	80024b4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800249a:	085b      	lsrs	r3, r3, #1
 800249c:	3b01      	subs	r3, #1
 800249e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d107      	bne.n	80024b4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ae:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80024b0:	429a      	cmp	r2, r3
 80024b2:	d001      	beq.n	80024b8 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	e000      	b.n	80024ba <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80024b8:	2300      	movs	r3, #0
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3718      	adds	r7, #24
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	40023800 	.word	0x40023800

080024c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b084      	sub	sp, #16
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80024d2:	2300      	movs	r3, #0
 80024d4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d101      	bne.n	80024e0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	e0d0      	b.n	8002682 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80024e0:	4b6a      	ldr	r3, [pc, #424]	; (800268c <HAL_RCC_ClockConfig+0x1c4>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f003 030f 	and.w	r3, r3, #15
 80024e8:	683a      	ldr	r2, [r7, #0]
 80024ea:	429a      	cmp	r2, r3
 80024ec:	d910      	bls.n	8002510 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024ee:	4b67      	ldr	r3, [pc, #412]	; (800268c <HAL_RCC_ClockConfig+0x1c4>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f023 020f 	bic.w	r2, r3, #15
 80024f6:	4965      	ldr	r1, [pc, #404]	; (800268c <HAL_RCC_ClockConfig+0x1c4>)
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	4313      	orrs	r3, r2
 80024fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024fe:	4b63      	ldr	r3, [pc, #396]	; (800268c <HAL_RCC_ClockConfig+0x1c4>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 030f 	and.w	r3, r3, #15
 8002506:	683a      	ldr	r2, [r7, #0]
 8002508:	429a      	cmp	r2, r3
 800250a:	d001      	beq.n	8002510 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	e0b8      	b.n	8002682 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 0302 	and.w	r3, r3, #2
 8002518:	2b00      	cmp	r3, #0
 800251a:	d020      	beq.n	800255e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 0304 	and.w	r3, r3, #4
 8002524:	2b00      	cmp	r3, #0
 8002526:	d005      	beq.n	8002534 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002528:	4b59      	ldr	r3, [pc, #356]	; (8002690 <HAL_RCC_ClockConfig+0x1c8>)
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	4a58      	ldr	r2, [pc, #352]	; (8002690 <HAL_RCC_ClockConfig+0x1c8>)
 800252e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002532:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 0308 	and.w	r3, r3, #8
 800253c:	2b00      	cmp	r3, #0
 800253e:	d005      	beq.n	800254c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002540:	4b53      	ldr	r3, [pc, #332]	; (8002690 <HAL_RCC_ClockConfig+0x1c8>)
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	4a52      	ldr	r2, [pc, #328]	; (8002690 <HAL_RCC_ClockConfig+0x1c8>)
 8002546:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800254a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800254c:	4b50      	ldr	r3, [pc, #320]	; (8002690 <HAL_RCC_ClockConfig+0x1c8>)
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	494d      	ldr	r1, [pc, #308]	; (8002690 <HAL_RCC_ClockConfig+0x1c8>)
 800255a:	4313      	orrs	r3, r2
 800255c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0301 	and.w	r3, r3, #1
 8002566:	2b00      	cmp	r3, #0
 8002568:	d040      	beq.n	80025ec <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	2b01      	cmp	r3, #1
 8002570:	d107      	bne.n	8002582 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002572:	4b47      	ldr	r3, [pc, #284]	; (8002690 <HAL_RCC_ClockConfig+0x1c8>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800257a:	2b00      	cmp	r3, #0
 800257c:	d115      	bne.n	80025aa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	e07f      	b.n	8002682 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	2b02      	cmp	r3, #2
 8002588:	d107      	bne.n	800259a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800258a:	4b41      	ldr	r3, [pc, #260]	; (8002690 <HAL_RCC_ClockConfig+0x1c8>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002592:	2b00      	cmp	r3, #0
 8002594:	d109      	bne.n	80025aa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e073      	b.n	8002682 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800259a:	4b3d      	ldr	r3, [pc, #244]	; (8002690 <HAL_RCC_ClockConfig+0x1c8>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 0302 	and.w	r3, r3, #2
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d101      	bne.n	80025aa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e06b      	b.n	8002682 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025aa:	4b39      	ldr	r3, [pc, #228]	; (8002690 <HAL_RCC_ClockConfig+0x1c8>)
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	f023 0203 	bic.w	r2, r3, #3
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	4936      	ldr	r1, [pc, #216]	; (8002690 <HAL_RCC_ClockConfig+0x1c8>)
 80025b8:	4313      	orrs	r3, r2
 80025ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025bc:	f7ff f994 	bl	80018e8 <HAL_GetTick>
 80025c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025c2:	e00a      	b.n	80025da <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025c4:	f7ff f990 	bl	80018e8 <HAL_GetTick>
 80025c8:	4602      	mov	r2, r0
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	1ad3      	subs	r3, r2, r3
 80025ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d901      	bls.n	80025da <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80025d6:	2303      	movs	r3, #3
 80025d8:	e053      	b.n	8002682 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025da:	4b2d      	ldr	r3, [pc, #180]	; (8002690 <HAL_RCC_ClockConfig+0x1c8>)
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	f003 020c 	and.w	r2, r3, #12
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	429a      	cmp	r2, r3
 80025ea:	d1eb      	bne.n	80025c4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80025ec:	4b27      	ldr	r3, [pc, #156]	; (800268c <HAL_RCC_ClockConfig+0x1c4>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f003 030f 	and.w	r3, r3, #15
 80025f4:	683a      	ldr	r2, [r7, #0]
 80025f6:	429a      	cmp	r2, r3
 80025f8:	d210      	bcs.n	800261c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025fa:	4b24      	ldr	r3, [pc, #144]	; (800268c <HAL_RCC_ClockConfig+0x1c4>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f023 020f 	bic.w	r2, r3, #15
 8002602:	4922      	ldr	r1, [pc, #136]	; (800268c <HAL_RCC_ClockConfig+0x1c4>)
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	4313      	orrs	r3, r2
 8002608:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800260a:	4b20      	ldr	r3, [pc, #128]	; (800268c <HAL_RCC_ClockConfig+0x1c4>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 030f 	and.w	r3, r3, #15
 8002612:	683a      	ldr	r2, [r7, #0]
 8002614:	429a      	cmp	r2, r3
 8002616:	d001      	beq.n	800261c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	e032      	b.n	8002682 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f003 0304 	and.w	r3, r3, #4
 8002624:	2b00      	cmp	r3, #0
 8002626:	d008      	beq.n	800263a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002628:	4b19      	ldr	r3, [pc, #100]	; (8002690 <HAL_RCC_ClockConfig+0x1c8>)
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	68db      	ldr	r3, [r3, #12]
 8002634:	4916      	ldr	r1, [pc, #88]	; (8002690 <HAL_RCC_ClockConfig+0x1c8>)
 8002636:	4313      	orrs	r3, r2
 8002638:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 0308 	and.w	r3, r3, #8
 8002642:	2b00      	cmp	r3, #0
 8002644:	d009      	beq.n	800265a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002646:	4b12      	ldr	r3, [pc, #72]	; (8002690 <HAL_RCC_ClockConfig+0x1c8>)
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	691b      	ldr	r3, [r3, #16]
 8002652:	00db      	lsls	r3, r3, #3
 8002654:	490e      	ldr	r1, [pc, #56]	; (8002690 <HAL_RCC_ClockConfig+0x1c8>)
 8002656:	4313      	orrs	r3, r2
 8002658:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800265a:	f000 f821 	bl	80026a0 <HAL_RCC_GetSysClockFreq>
 800265e:	4602      	mov	r2, r0
 8002660:	4b0b      	ldr	r3, [pc, #44]	; (8002690 <HAL_RCC_ClockConfig+0x1c8>)
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	091b      	lsrs	r3, r3, #4
 8002666:	f003 030f 	and.w	r3, r3, #15
 800266a:	490a      	ldr	r1, [pc, #40]	; (8002694 <HAL_RCC_ClockConfig+0x1cc>)
 800266c:	5ccb      	ldrb	r3, [r1, r3]
 800266e:	fa22 f303 	lsr.w	r3, r2, r3
 8002672:	4a09      	ldr	r2, [pc, #36]	; (8002698 <HAL_RCC_ClockConfig+0x1d0>)
 8002674:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002676:	4b09      	ldr	r3, [pc, #36]	; (800269c <HAL_RCC_ClockConfig+0x1d4>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4618      	mov	r0, r3
 800267c:	f7ff f8f0 	bl	8001860 <HAL_InitTick>

  return HAL_OK;
 8002680:	2300      	movs	r3, #0
}
 8002682:	4618      	mov	r0, r3
 8002684:	3710      	adds	r7, #16
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop
 800268c:	40023c00 	.word	0x40023c00
 8002690:	40023800 	.word	0x40023800
 8002694:	080052c0 	.word	0x080052c0
 8002698:	20000094 	.word	0x20000094
 800269c:	20000098 	.word	0x20000098

080026a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026a0:	b5b0      	push	{r4, r5, r7, lr}
 80026a2:	b084      	sub	sp, #16
 80026a4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80026a6:	2100      	movs	r1, #0
 80026a8:	6079      	str	r1, [r7, #4]
 80026aa:	2100      	movs	r1, #0
 80026ac:	60f9      	str	r1, [r7, #12]
 80026ae:	2100      	movs	r1, #0
 80026b0:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 80026b2:	2100      	movs	r1, #0
 80026b4:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80026b6:	4952      	ldr	r1, [pc, #328]	; (8002800 <HAL_RCC_GetSysClockFreq+0x160>)
 80026b8:	6889      	ldr	r1, [r1, #8]
 80026ba:	f001 010c 	and.w	r1, r1, #12
 80026be:	2908      	cmp	r1, #8
 80026c0:	d00d      	beq.n	80026de <HAL_RCC_GetSysClockFreq+0x3e>
 80026c2:	2908      	cmp	r1, #8
 80026c4:	f200 8094 	bhi.w	80027f0 <HAL_RCC_GetSysClockFreq+0x150>
 80026c8:	2900      	cmp	r1, #0
 80026ca:	d002      	beq.n	80026d2 <HAL_RCC_GetSysClockFreq+0x32>
 80026cc:	2904      	cmp	r1, #4
 80026ce:	d003      	beq.n	80026d8 <HAL_RCC_GetSysClockFreq+0x38>
 80026d0:	e08e      	b.n	80027f0 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80026d2:	4b4c      	ldr	r3, [pc, #304]	; (8002804 <HAL_RCC_GetSysClockFreq+0x164>)
 80026d4:	60bb      	str	r3, [r7, #8]
      break;
 80026d6:	e08e      	b.n	80027f6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80026d8:	4b4b      	ldr	r3, [pc, #300]	; (8002808 <HAL_RCC_GetSysClockFreq+0x168>)
 80026da:	60bb      	str	r3, [r7, #8]
      break;
 80026dc:	e08b      	b.n	80027f6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80026de:	4948      	ldr	r1, [pc, #288]	; (8002800 <HAL_RCC_GetSysClockFreq+0x160>)
 80026e0:	6849      	ldr	r1, [r1, #4]
 80026e2:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80026e6:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80026e8:	4945      	ldr	r1, [pc, #276]	; (8002800 <HAL_RCC_GetSysClockFreq+0x160>)
 80026ea:	6849      	ldr	r1, [r1, #4]
 80026ec:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80026f0:	2900      	cmp	r1, #0
 80026f2:	d024      	beq.n	800273e <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026f4:	4942      	ldr	r1, [pc, #264]	; (8002800 <HAL_RCC_GetSysClockFreq+0x160>)
 80026f6:	6849      	ldr	r1, [r1, #4]
 80026f8:	0989      	lsrs	r1, r1, #6
 80026fa:	4608      	mov	r0, r1
 80026fc:	f04f 0100 	mov.w	r1, #0
 8002700:	f240 14ff 	movw	r4, #511	; 0x1ff
 8002704:	f04f 0500 	mov.w	r5, #0
 8002708:	ea00 0204 	and.w	r2, r0, r4
 800270c:	ea01 0305 	and.w	r3, r1, r5
 8002710:	493d      	ldr	r1, [pc, #244]	; (8002808 <HAL_RCC_GetSysClockFreq+0x168>)
 8002712:	fb01 f003 	mul.w	r0, r1, r3
 8002716:	2100      	movs	r1, #0
 8002718:	fb01 f102 	mul.w	r1, r1, r2
 800271c:	1844      	adds	r4, r0, r1
 800271e:	493a      	ldr	r1, [pc, #232]	; (8002808 <HAL_RCC_GetSysClockFreq+0x168>)
 8002720:	fba2 0101 	umull	r0, r1, r2, r1
 8002724:	1863      	adds	r3, r4, r1
 8002726:	4619      	mov	r1, r3
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	461a      	mov	r2, r3
 800272c:	f04f 0300 	mov.w	r3, #0
 8002730:	f7fe fa08 	bl	8000b44 <__aeabi_uldivmod>
 8002734:	4602      	mov	r2, r0
 8002736:	460b      	mov	r3, r1
 8002738:	4613      	mov	r3, r2
 800273a:	60fb      	str	r3, [r7, #12]
 800273c:	e04a      	b.n	80027d4 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800273e:	4b30      	ldr	r3, [pc, #192]	; (8002800 <HAL_RCC_GetSysClockFreq+0x160>)
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	099b      	lsrs	r3, r3, #6
 8002744:	461a      	mov	r2, r3
 8002746:	f04f 0300 	mov.w	r3, #0
 800274a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800274e:	f04f 0100 	mov.w	r1, #0
 8002752:	ea02 0400 	and.w	r4, r2, r0
 8002756:	ea03 0501 	and.w	r5, r3, r1
 800275a:	4620      	mov	r0, r4
 800275c:	4629      	mov	r1, r5
 800275e:	f04f 0200 	mov.w	r2, #0
 8002762:	f04f 0300 	mov.w	r3, #0
 8002766:	014b      	lsls	r3, r1, #5
 8002768:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800276c:	0142      	lsls	r2, r0, #5
 800276e:	4610      	mov	r0, r2
 8002770:	4619      	mov	r1, r3
 8002772:	1b00      	subs	r0, r0, r4
 8002774:	eb61 0105 	sbc.w	r1, r1, r5
 8002778:	f04f 0200 	mov.w	r2, #0
 800277c:	f04f 0300 	mov.w	r3, #0
 8002780:	018b      	lsls	r3, r1, #6
 8002782:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002786:	0182      	lsls	r2, r0, #6
 8002788:	1a12      	subs	r2, r2, r0
 800278a:	eb63 0301 	sbc.w	r3, r3, r1
 800278e:	f04f 0000 	mov.w	r0, #0
 8002792:	f04f 0100 	mov.w	r1, #0
 8002796:	00d9      	lsls	r1, r3, #3
 8002798:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800279c:	00d0      	lsls	r0, r2, #3
 800279e:	4602      	mov	r2, r0
 80027a0:	460b      	mov	r3, r1
 80027a2:	1912      	adds	r2, r2, r4
 80027a4:	eb45 0303 	adc.w	r3, r5, r3
 80027a8:	f04f 0000 	mov.w	r0, #0
 80027ac:	f04f 0100 	mov.w	r1, #0
 80027b0:	0299      	lsls	r1, r3, #10
 80027b2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80027b6:	0290      	lsls	r0, r2, #10
 80027b8:	4602      	mov	r2, r0
 80027ba:	460b      	mov	r3, r1
 80027bc:	4610      	mov	r0, r2
 80027be:	4619      	mov	r1, r3
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	461a      	mov	r2, r3
 80027c4:	f04f 0300 	mov.w	r3, #0
 80027c8:	f7fe f9bc 	bl	8000b44 <__aeabi_uldivmod>
 80027cc:	4602      	mov	r2, r0
 80027ce:	460b      	mov	r3, r1
 80027d0:	4613      	mov	r3, r2
 80027d2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80027d4:	4b0a      	ldr	r3, [pc, #40]	; (8002800 <HAL_RCC_GetSysClockFreq+0x160>)
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	0c1b      	lsrs	r3, r3, #16
 80027da:	f003 0303 	and.w	r3, r3, #3
 80027de:	3301      	adds	r3, #1
 80027e0:	005b      	lsls	r3, r3, #1
 80027e2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80027e4:	68fa      	ldr	r2, [r7, #12]
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80027ec:	60bb      	str	r3, [r7, #8]
      break;
 80027ee:	e002      	b.n	80027f6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80027f0:	4b04      	ldr	r3, [pc, #16]	; (8002804 <HAL_RCC_GetSysClockFreq+0x164>)
 80027f2:	60bb      	str	r3, [r7, #8]
      break;
 80027f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027f6:	68bb      	ldr	r3, [r7, #8]
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	3710      	adds	r7, #16
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bdb0      	pop	{r4, r5, r7, pc}
 8002800:	40023800 	.word	0x40023800
 8002804:	00f42400 	.word	0x00f42400
 8002808:	017d7840 	.word	0x017d7840

0800280c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800280c:	b480      	push	{r7}
 800280e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002810:	4b03      	ldr	r3, [pc, #12]	; (8002820 <HAL_RCC_GetHCLKFreq+0x14>)
 8002812:	681b      	ldr	r3, [r3, #0]
}
 8002814:	4618      	mov	r0, r3
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr
 800281e:	bf00      	nop
 8002820:	20000094 	.word	0x20000094

08002824 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002828:	f7ff fff0 	bl	800280c <HAL_RCC_GetHCLKFreq>
 800282c:	4602      	mov	r2, r0
 800282e:	4b05      	ldr	r3, [pc, #20]	; (8002844 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	0a9b      	lsrs	r3, r3, #10
 8002834:	f003 0307 	and.w	r3, r3, #7
 8002838:	4903      	ldr	r1, [pc, #12]	; (8002848 <HAL_RCC_GetPCLK1Freq+0x24>)
 800283a:	5ccb      	ldrb	r3, [r1, r3]
 800283c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002840:	4618      	mov	r0, r3
 8002842:	bd80      	pop	{r7, pc}
 8002844:	40023800 	.word	0x40023800
 8002848:	080052d0 	.word	0x080052d0

0800284c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002850:	f7ff ffdc 	bl	800280c <HAL_RCC_GetHCLKFreq>
 8002854:	4602      	mov	r2, r0
 8002856:	4b05      	ldr	r3, [pc, #20]	; (800286c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	0b5b      	lsrs	r3, r3, #13
 800285c:	f003 0307 	and.w	r3, r3, #7
 8002860:	4903      	ldr	r1, [pc, #12]	; (8002870 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002862:	5ccb      	ldrb	r3, [r1, r3]
 8002864:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002868:	4618      	mov	r0, r3
 800286a:	bd80      	pop	{r7, pc}
 800286c:	40023800 	.word	0x40023800
 8002870:	080052d0 	.word	0x080052d0

08002874 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b088      	sub	sp, #32
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800287c:	2300      	movs	r3, #0
 800287e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002880:	2300      	movs	r3, #0
 8002882:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002884:	2300      	movs	r3, #0
 8002886:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002888:	2300      	movs	r3, #0
 800288a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800288c:	2300      	movs	r3, #0
 800288e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 0301 	and.w	r3, r3, #1
 8002898:	2b00      	cmp	r3, #0
 800289a:	d012      	beq.n	80028c2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800289c:	4b69      	ldr	r3, [pc, #420]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	4a68      	ldr	r2, [pc, #416]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028a2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80028a6:	6093      	str	r3, [r2, #8]
 80028a8:	4b66      	ldr	r3, [pc, #408]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028aa:	689a      	ldr	r2, [r3, #8]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028b0:	4964      	ldr	r1, [pc, #400]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028b2:	4313      	orrs	r3, r2
 80028b4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d101      	bne.n	80028c2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80028be:	2301      	movs	r3, #1
 80028c0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d017      	beq.n	80028fe <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80028ce:	4b5d      	ldr	r3, [pc, #372]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80028d4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028dc:	4959      	ldr	r1, [pc, #356]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028de:	4313      	orrs	r3, r2
 80028e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80028ec:	d101      	bne.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80028ee:	2301      	movs	r3, #1
 80028f0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d101      	bne.n	80028fe <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80028fa:	2301      	movs	r3, #1
 80028fc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002906:	2b00      	cmp	r3, #0
 8002908:	d017      	beq.n	800293a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800290a:	4b4e      	ldr	r3, [pc, #312]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800290c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002910:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002918:	494a      	ldr	r1, [pc, #296]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800291a:	4313      	orrs	r3, r2
 800291c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002924:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002928:	d101      	bne.n	800292e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800292a:	2301      	movs	r3, #1
 800292c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002932:	2b00      	cmp	r3, #0
 8002934:	d101      	bne.n	800293a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002936:	2301      	movs	r3, #1
 8002938:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002942:	2b00      	cmp	r3, #0
 8002944:	d001      	beq.n	800294a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002946:	2301      	movs	r3, #1
 8002948:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 0320 	and.w	r3, r3, #32
 8002952:	2b00      	cmp	r3, #0
 8002954:	f000 808b 	beq.w	8002a6e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002958:	4b3a      	ldr	r3, [pc, #232]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800295a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295c:	4a39      	ldr	r2, [pc, #228]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800295e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002962:	6413      	str	r3, [r2, #64]	; 0x40
 8002964:	4b37      	ldr	r3, [pc, #220]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002968:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800296c:	60bb      	str	r3, [r7, #8]
 800296e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002970:	4b35      	ldr	r3, [pc, #212]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a34      	ldr	r2, [pc, #208]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002976:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800297a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800297c:	f7fe ffb4 	bl	80018e8 <HAL_GetTick>
 8002980:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002982:	e008      	b.n	8002996 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002984:	f7fe ffb0 	bl	80018e8 <HAL_GetTick>
 8002988:	4602      	mov	r2, r0
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	1ad3      	subs	r3, r2, r3
 800298e:	2b64      	cmp	r3, #100	; 0x64
 8002990:	d901      	bls.n	8002996 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002992:	2303      	movs	r3, #3
 8002994:	e357      	b.n	8003046 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002996:	4b2c      	ldr	r3, [pc, #176]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d0f0      	beq.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80029a2:	4b28      	ldr	r3, [pc, #160]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029aa:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d035      	beq.n	8002a1e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029ba:	693a      	ldr	r2, [r7, #16]
 80029bc:	429a      	cmp	r2, r3
 80029be:	d02e      	beq.n	8002a1e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80029c0:	4b20      	ldr	r3, [pc, #128]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029c8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80029ca:	4b1e      	ldr	r3, [pc, #120]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029ce:	4a1d      	ldr	r2, [pc, #116]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029d4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80029d6:	4b1b      	ldr	r3, [pc, #108]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029da:	4a1a      	ldr	r2, [pc, #104]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029e0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80029e2:	4a18      	ldr	r2, [pc, #96]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80029e8:	4b16      	ldr	r3, [pc, #88]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029ec:	f003 0301 	and.w	r3, r3, #1
 80029f0:	2b01      	cmp	r3, #1
 80029f2:	d114      	bne.n	8002a1e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029f4:	f7fe ff78 	bl	80018e8 <HAL_GetTick>
 80029f8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029fa:	e00a      	b.n	8002a12 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029fc:	f7fe ff74 	bl	80018e8 <HAL_GetTick>
 8002a00:	4602      	mov	r2, r0
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	1ad3      	subs	r3, r2, r3
 8002a06:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d901      	bls.n	8002a12 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002a0e:	2303      	movs	r3, #3
 8002a10:	e319      	b.n	8003046 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a12:	4b0c      	ldr	r3, [pc, #48]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a16:	f003 0302 	and.w	r3, r3, #2
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d0ee      	beq.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a26:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002a2a:	d111      	bne.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002a2c:	4b05      	ldr	r3, [pc, #20]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002a38:	4b04      	ldr	r3, [pc, #16]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002a3a:	400b      	ands	r3, r1
 8002a3c:	4901      	ldr	r1, [pc, #4]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	608b      	str	r3, [r1, #8]
 8002a42:	e00b      	b.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002a44:	40023800 	.word	0x40023800
 8002a48:	40007000 	.word	0x40007000
 8002a4c:	0ffffcff 	.word	0x0ffffcff
 8002a50:	4bb1      	ldr	r3, [pc, #708]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	4ab0      	ldr	r2, [pc, #704]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002a56:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002a5a:	6093      	str	r3, [r2, #8]
 8002a5c:	4bae      	ldr	r3, [pc, #696]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002a5e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a68:	49ab      	ldr	r1, [pc, #684]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 0310 	and.w	r3, r3, #16
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d010      	beq.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002a7a:	4ba7      	ldr	r3, [pc, #668]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002a7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a80:	4aa5      	ldr	r2, [pc, #660]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002a82:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a86:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002a8a:	4ba3      	ldr	r3, [pc, #652]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002a8c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a94:	49a0      	ldr	r1, [pc, #640]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002a96:	4313      	orrs	r3, r2
 8002a98:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d00a      	beq.n	8002abe <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002aa8:	4b9b      	ldr	r3, [pc, #620]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002aaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aae:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ab6:	4998      	ldr	r1, [pc, #608]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d00a      	beq.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002aca:	4b93      	ldr	r3, [pc, #588]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002acc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ad0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ad8:	498f      	ldr	r1, [pc, #572]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002ada:	4313      	orrs	r3, r2
 8002adc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d00a      	beq.n	8002b02 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002aec:	4b8a      	ldr	r3, [pc, #552]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002aee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002af2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002afa:	4987      	ldr	r1, [pc, #540]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002afc:	4313      	orrs	r3, r2
 8002afe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d00a      	beq.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002b0e:	4b82      	ldr	r3, [pc, #520]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002b10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b14:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b1c:	497e      	ldr	r1, [pc, #504]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d00a      	beq.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b30:	4b79      	ldr	r3, [pc, #484]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002b32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b36:	f023 0203 	bic.w	r2, r3, #3
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b3e:	4976      	ldr	r1, [pc, #472]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002b40:	4313      	orrs	r3, r2
 8002b42:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d00a      	beq.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002b52:	4b71      	ldr	r3, [pc, #452]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002b54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b58:	f023 020c 	bic.w	r2, r3, #12
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b60:	496d      	ldr	r1, [pc, #436]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002b62:	4313      	orrs	r3, r2
 8002b64:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d00a      	beq.n	8002b8a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002b74:	4b68      	ldr	r3, [pc, #416]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002b76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b7a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b82:	4965      	ldr	r1, [pc, #404]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002b84:	4313      	orrs	r3, r2
 8002b86:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d00a      	beq.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002b96:	4b60      	ldr	r3, [pc, #384]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002b98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b9c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ba4:	495c      	ldr	r1, [pc, #368]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d00a      	beq.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002bb8:	4b57      	ldr	r3, [pc, #348]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002bba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bbe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bc6:	4954      	ldr	r1, [pc, #336]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d00a      	beq.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002bda:	4b4f      	ldr	r3, [pc, #316]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002bdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002be0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002be8:	494b      	ldr	r1, [pc, #300]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002bea:	4313      	orrs	r3, r2
 8002bec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d00a      	beq.n	8002c12 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002bfc:	4b46      	ldr	r3, [pc, #280]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002bfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c02:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c0a:	4943      	ldr	r1, [pc, #268]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d00a      	beq.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002c1e:	4b3e      	ldr	r3, [pc, #248]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002c20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c24:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c2c:	493a      	ldr	r1, [pc, #232]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d00a      	beq.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002c40:	4b35      	ldr	r3, [pc, #212]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002c42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c46:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c4e:	4932      	ldr	r1, [pc, #200]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002c50:	4313      	orrs	r3, r2
 8002c52:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d011      	beq.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002c62:	4b2d      	ldr	r3, [pc, #180]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002c64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c68:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c70:	4929      	ldr	r1, [pc, #164]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002c72:	4313      	orrs	r3, r2
 8002c74:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c7c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c80:	d101      	bne.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002c82:	2301      	movs	r3, #1
 8002c84:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f003 0308 	and.w	r3, r3, #8
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d001      	beq.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002c92:	2301      	movs	r3, #1
 8002c94:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d00a      	beq.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002ca2:	4b1d      	ldr	r3, [pc, #116]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002ca4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ca8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cb0:	4919      	ldr	r1, [pc, #100]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d00b      	beq.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002cc4:	4b14      	ldr	r3, [pc, #80]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002cc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cca:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002cd4:	4910      	ldr	r1, [pc, #64]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002cdc:	69fb      	ldr	r3, [r7, #28]
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	d006      	beq.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	f000 80d9 	beq.w	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002cf0:	4b09      	ldr	r3, [pc, #36]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a08      	ldr	r2, [pc, #32]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002cf6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002cfa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cfc:	f7fe fdf4 	bl	80018e8 <HAL_GetTick>
 8002d00:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002d02:	e00b      	b.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002d04:	f7fe fdf0 	bl	80018e8 <HAL_GetTick>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	1ad3      	subs	r3, r2, r3
 8002d0e:	2b64      	cmp	r3, #100	; 0x64
 8002d10:	d904      	bls.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002d12:	2303      	movs	r3, #3
 8002d14:	e197      	b.n	8003046 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8002d16:	bf00      	nop
 8002d18:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002d1c:	4b6c      	ldr	r3, [pc, #432]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d1ed      	bne.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f003 0301 	and.w	r3, r3, #1
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d021      	beq.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d11d      	bne.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002d3c:	4b64      	ldr	r3, [pc, #400]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d42:	0c1b      	lsrs	r3, r3, #16
 8002d44:	f003 0303 	and.w	r3, r3, #3
 8002d48:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002d4a:	4b61      	ldr	r3, [pc, #388]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d50:	0e1b      	lsrs	r3, r3, #24
 8002d52:	f003 030f 	and.w	r3, r3, #15
 8002d56:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	019a      	lsls	r2, r3, #6
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	041b      	lsls	r3, r3, #16
 8002d62:	431a      	orrs	r2, r3
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	061b      	lsls	r3, r3, #24
 8002d68:	431a      	orrs	r2, r3
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	071b      	lsls	r3, r3, #28
 8002d70:	4957      	ldr	r1, [pc, #348]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d72:	4313      	orrs	r3, r2
 8002d74:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d004      	beq.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d88:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d8c:	d00a      	beq.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d02e      	beq.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d9e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002da2:	d129      	bne.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002da4:	4b4a      	ldr	r3, [pc, #296]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002da6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002daa:	0c1b      	lsrs	r3, r3, #16
 8002dac:	f003 0303 	and.w	r3, r3, #3
 8002db0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002db2:	4b47      	ldr	r3, [pc, #284]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002db4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002db8:	0f1b      	lsrs	r3, r3, #28
 8002dba:	f003 0307 	and.w	r3, r3, #7
 8002dbe:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	019a      	lsls	r2, r3, #6
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	041b      	lsls	r3, r3, #16
 8002dca:	431a      	orrs	r2, r3
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	68db      	ldr	r3, [r3, #12]
 8002dd0:	061b      	lsls	r3, r3, #24
 8002dd2:	431a      	orrs	r2, r3
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	071b      	lsls	r3, r3, #28
 8002dd8:	493d      	ldr	r1, [pc, #244]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002de0:	4b3b      	ldr	r3, [pc, #236]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002de2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002de6:	f023 021f 	bic.w	r2, r3, #31
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dee:	3b01      	subs	r3, #1
 8002df0:	4937      	ldr	r1, [pc, #220]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002df2:	4313      	orrs	r3, r2
 8002df4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d01d      	beq.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002e04:	4b32      	ldr	r3, [pc, #200]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e0a:	0e1b      	lsrs	r3, r3, #24
 8002e0c:	f003 030f 	and.w	r3, r3, #15
 8002e10:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002e12:	4b2f      	ldr	r3, [pc, #188]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e18:	0f1b      	lsrs	r3, r3, #28
 8002e1a:	f003 0307 	and.w	r3, r3, #7
 8002e1e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	019a      	lsls	r2, r3, #6
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	691b      	ldr	r3, [r3, #16]
 8002e2a:	041b      	lsls	r3, r3, #16
 8002e2c:	431a      	orrs	r2, r3
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	061b      	lsls	r3, r3, #24
 8002e32:	431a      	orrs	r2, r3
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	071b      	lsls	r3, r3, #28
 8002e38:	4925      	ldr	r1, [pc, #148]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d011      	beq.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	019a      	lsls	r2, r3, #6
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	691b      	ldr	r3, [r3, #16]
 8002e56:	041b      	lsls	r3, r3, #16
 8002e58:	431a      	orrs	r2, r3
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	68db      	ldr	r3, [r3, #12]
 8002e5e:	061b      	lsls	r3, r3, #24
 8002e60:	431a      	orrs	r2, r3
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	071b      	lsls	r3, r3, #28
 8002e68:	4919      	ldr	r1, [pc, #100]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002e70:	4b17      	ldr	r3, [pc, #92]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a16      	ldr	r2, [pc, #88]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e76:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002e7a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e7c:	f7fe fd34 	bl	80018e8 <HAL_GetTick>
 8002e80:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002e82:	e008      	b.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002e84:	f7fe fd30 	bl	80018e8 <HAL_GetTick>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	1ad3      	subs	r3, r2, r3
 8002e8e:	2b64      	cmp	r3, #100	; 0x64
 8002e90:	d901      	bls.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002e92:	2303      	movs	r3, #3
 8002e94:	e0d7      	b.n	8003046 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002e96:	4b0e      	ldr	r3, [pc, #56]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d0f0      	beq.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002ea2:	69bb      	ldr	r3, [r7, #24]
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	f040 80cd 	bne.w	8003044 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002eaa:	4b09      	ldr	r3, [pc, #36]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a08      	ldr	r2, [pc, #32]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002eb0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002eb4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002eb6:	f7fe fd17 	bl	80018e8 <HAL_GetTick>
 8002eba:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002ebc:	e00a      	b.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002ebe:	f7fe fd13 	bl	80018e8 <HAL_GetTick>
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	1ad3      	subs	r3, r2, r3
 8002ec8:	2b64      	cmp	r3, #100	; 0x64
 8002eca:	d903      	bls.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002ecc:	2303      	movs	r3, #3
 8002ece:	e0ba      	b.n	8003046 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8002ed0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002ed4:	4b5e      	ldr	r3, [pc, #376]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002edc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ee0:	d0ed      	beq.n	8002ebe <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d003      	beq.n	8002ef6 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d009      	beq.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d02e      	beq.n	8002f60 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d12a      	bne.n	8002f60 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002f0a:	4b51      	ldr	r3, [pc, #324]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002f0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f10:	0c1b      	lsrs	r3, r3, #16
 8002f12:	f003 0303 	and.w	r3, r3, #3
 8002f16:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002f18:	4b4d      	ldr	r3, [pc, #308]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002f1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f1e:	0f1b      	lsrs	r3, r3, #28
 8002f20:	f003 0307 	and.w	r3, r3, #7
 8002f24:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	695b      	ldr	r3, [r3, #20]
 8002f2a:	019a      	lsls	r2, r3, #6
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	041b      	lsls	r3, r3, #16
 8002f30:	431a      	orrs	r2, r3
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	699b      	ldr	r3, [r3, #24]
 8002f36:	061b      	lsls	r3, r3, #24
 8002f38:	431a      	orrs	r2, r3
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	071b      	lsls	r3, r3, #28
 8002f3e:	4944      	ldr	r1, [pc, #272]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002f40:	4313      	orrs	r3, r2
 8002f42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002f46:	4b42      	ldr	r3, [pc, #264]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002f48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f4c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f54:	3b01      	subs	r3, #1
 8002f56:	021b      	lsls	r3, r3, #8
 8002f58:	493d      	ldr	r1, [pc, #244]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d022      	beq.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f70:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f74:	d11d      	bne.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002f76:	4b36      	ldr	r3, [pc, #216]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002f78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f7c:	0e1b      	lsrs	r3, r3, #24
 8002f7e:	f003 030f 	and.w	r3, r3, #15
 8002f82:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002f84:	4b32      	ldr	r3, [pc, #200]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002f86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f8a:	0f1b      	lsrs	r3, r3, #28
 8002f8c:	f003 0307 	and.w	r3, r3, #7
 8002f90:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	695b      	ldr	r3, [r3, #20]
 8002f96:	019a      	lsls	r2, r3, #6
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6a1b      	ldr	r3, [r3, #32]
 8002f9c:	041b      	lsls	r3, r3, #16
 8002f9e:	431a      	orrs	r2, r3
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	061b      	lsls	r3, r3, #24
 8002fa4:	431a      	orrs	r2, r3
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	071b      	lsls	r3, r3, #28
 8002faa:	4929      	ldr	r1, [pc, #164]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002fac:	4313      	orrs	r3, r2
 8002fae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 0308 	and.w	r3, r3, #8
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d028      	beq.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002fbe:	4b24      	ldr	r3, [pc, #144]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002fc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fc4:	0e1b      	lsrs	r3, r3, #24
 8002fc6:	f003 030f 	and.w	r3, r3, #15
 8002fca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002fcc:	4b20      	ldr	r3, [pc, #128]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fd2:	0c1b      	lsrs	r3, r3, #16
 8002fd4:	f003 0303 	and.w	r3, r3, #3
 8002fd8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	695b      	ldr	r3, [r3, #20]
 8002fde:	019a      	lsls	r2, r3, #6
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	041b      	lsls	r3, r3, #16
 8002fe4:	431a      	orrs	r2, r3
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	061b      	lsls	r3, r3, #24
 8002fea:	431a      	orrs	r2, r3
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	69db      	ldr	r3, [r3, #28]
 8002ff0:	071b      	lsls	r3, r3, #28
 8002ff2:	4917      	ldr	r1, [pc, #92]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002ffa:	4b15      	ldr	r3, [pc, #84]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002ffc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003000:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003008:	4911      	ldr	r1, [pc, #68]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800300a:	4313      	orrs	r3, r2
 800300c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003010:	4b0f      	ldr	r3, [pc, #60]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a0e      	ldr	r2, [pc, #56]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003016:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800301a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800301c:	f7fe fc64 	bl	80018e8 <HAL_GetTick>
 8003020:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003022:	e008      	b.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003024:	f7fe fc60 	bl	80018e8 <HAL_GetTick>
 8003028:	4602      	mov	r2, r0
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	2b64      	cmp	r3, #100	; 0x64
 8003030:	d901      	bls.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003032:	2303      	movs	r3, #3
 8003034:	e007      	b.n	8003046 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003036:	4b06      	ldr	r3, [pc, #24]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800303e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003042:	d1ef      	bne.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8003044:	2300      	movs	r3, #0
}
 8003046:	4618      	mov	r0, r3
 8003048:	3720      	adds	r7, #32
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}
 800304e:	bf00      	nop
 8003050:	40023800 	.word	0x40023800

08003054 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b082      	sub	sp, #8
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d101      	bne.n	8003066 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e049      	b.n	80030fa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800306c:	b2db      	uxtb	r3, r3
 800306e:	2b00      	cmp	r3, #0
 8003070:	d106      	bne.n	8003080 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2200      	movs	r2, #0
 8003076:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	f7fe fb04 	bl	8001688 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2202      	movs	r2, #2
 8003084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	3304      	adds	r3, #4
 8003090:	4619      	mov	r1, r3
 8003092:	4610      	mov	r0, r2
 8003094:	f000 fabc 	bl	8003610 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2201      	movs	r2, #1
 800309c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2201      	movs	r2, #1
 80030a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2201      	movs	r2, #1
 80030ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2201      	movs	r2, #1
 80030b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2201      	movs	r2, #1
 80030bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2201      	movs	r2, #1
 80030c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2201      	movs	r2, #1
 80030cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2201      	movs	r2, #1
 80030d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2201      	movs	r2, #1
 80030dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2201      	movs	r2, #1
 80030e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2201      	movs	r2, #1
 80030ec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2201      	movs	r2, #1
 80030f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80030f8:	2300      	movs	r3, #0
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	3708      	adds	r7, #8
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}
	...

08003104 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003104:	b480      	push	{r7}
 8003106:	b085      	sub	sp, #20
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003112:	b2db      	uxtb	r3, r3
 8003114:	2b01      	cmp	r3, #1
 8003116:	d001      	beq.n	800311c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	e054      	b.n	80031c6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2202      	movs	r2, #2
 8003120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	68da      	ldr	r2, [r3, #12]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f042 0201 	orr.w	r2, r2, #1
 8003132:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a26      	ldr	r2, [pc, #152]	; (80031d4 <HAL_TIM_Base_Start_IT+0xd0>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d022      	beq.n	8003184 <HAL_TIM_Base_Start_IT+0x80>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003146:	d01d      	beq.n	8003184 <HAL_TIM_Base_Start_IT+0x80>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a22      	ldr	r2, [pc, #136]	; (80031d8 <HAL_TIM_Base_Start_IT+0xd4>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d018      	beq.n	8003184 <HAL_TIM_Base_Start_IT+0x80>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a21      	ldr	r2, [pc, #132]	; (80031dc <HAL_TIM_Base_Start_IT+0xd8>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d013      	beq.n	8003184 <HAL_TIM_Base_Start_IT+0x80>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a1f      	ldr	r2, [pc, #124]	; (80031e0 <HAL_TIM_Base_Start_IT+0xdc>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d00e      	beq.n	8003184 <HAL_TIM_Base_Start_IT+0x80>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a1e      	ldr	r2, [pc, #120]	; (80031e4 <HAL_TIM_Base_Start_IT+0xe0>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d009      	beq.n	8003184 <HAL_TIM_Base_Start_IT+0x80>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a1c      	ldr	r2, [pc, #112]	; (80031e8 <HAL_TIM_Base_Start_IT+0xe4>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d004      	beq.n	8003184 <HAL_TIM_Base_Start_IT+0x80>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a1b      	ldr	r2, [pc, #108]	; (80031ec <HAL_TIM_Base_Start_IT+0xe8>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d115      	bne.n	80031b0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	689a      	ldr	r2, [r3, #8]
 800318a:	4b19      	ldr	r3, [pc, #100]	; (80031f0 <HAL_TIM_Base_Start_IT+0xec>)
 800318c:	4013      	ands	r3, r2
 800318e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2b06      	cmp	r3, #6
 8003194:	d015      	beq.n	80031c2 <HAL_TIM_Base_Start_IT+0xbe>
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800319c:	d011      	beq.n	80031c2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f042 0201 	orr.w	r2, r2, #1
 80031ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031ae:	e008      	b.n	80031c2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f042 0201 	orr.w	r2, r2, #1
 80031be:	601a      	str	r2, [r3, #0]
 80031c0:	e000      	b.n	80031c4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031c2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80031c4:	2300      	movs	r3, #0
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	3714      	adds	r7, #20
 80031ca:	46bd      	mov	sp, r7
 80031cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d0:	4770      	bx	lr
 80031d2:	bf00      	nop
 80031d4:	40010000 	.word	0x40010000
 80031d8:	40000400 	.word	0x40000400
 80031dc:	40000800 	.word	0x40000800
 80031e0:	40000c00 	.word	0x40000c00
 80031e4:	40010400 	.word	0x40010400
 80031e8:	40014000 	.word	0x40014000
 80031ec:	40001800 	.word	0x40001800
 80031f0:	00010007 	.word	0x00010007

080031f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b082      	sub	sp, #8
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	691b      	ldr	r3, [r3, #16]
 8003202:	f003 0302 	and.w	r3, r3, #2
 8003206:	2b02      	cmp	r3, #2
 8003208:	d122      	bne.n	8003250 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	68db      	ldr	r3, [r3, #12]
 8003210:	f003 0302 	and.w	r3, r3, #2
 8003214:	2b02      	cmp	r3, #2
 8003216:	d11b      	bne.n	8003250 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f06f 0202 	mvn.w	r2, #2
 8003220:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2201      	movs	r2, #1
 8003226:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	699b      	ldr	r3, [r3, #24]
 800322e:	f003 0303 	and.w	r3, r3, #3
 8003232:	2b00      	cmp	r3, #0
 8003234:	d003      	beq.n	800323e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	f000 f9cc 	bl	80035d4 <HAL_TIM_IC_CaptureCallback>
 800323c:	e005      	b.n	800324a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	f000 f9be 	bl	80035c0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003244:	6878      	ldr	r0, [r7, #4]
 8003246:	f000 f9cf 	bl	80035e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2200      	movs	r2, #0
 800324e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	691b      	ldr	r3, [r3, #16]
 8003256:	f003 0304 	and.w	r3, r3, #4
 800325a:	2b04      	cmp	r3, #4
 800325c:	d122      	bne.n	80032a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	68db      	ldr	r3, [r3, #12]
 8003264:	f003 0304 	and.w	r3, r3, #4
 8003268:	2b04      	cmp	r3, #4
 800326a:	d11b      	bne.n	80032a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f06f 0204 	mvn.w	r2, #4
 8003274:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2202      	movs	r2, #2
 800327a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	699b      	ldr	r3, [r3, #24]
 8003282:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003286:	2b00      	cmp	r3, #0
 8003288:	d003      	beq.n	8003292 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	f000 f9a2 	bl	80035d4 <HAL_TIM_IC_CaptureCallback>
 8003290:	e005      	b.n	800329e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003292:	6878      	ldr	r0, [r7, #4]
 8003294:	f000 f994 	bl	80035c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003298:	6878      	ldr	r0, [r7, #4]
 800329a:	f000 f9a5 	bl	80035e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2200      	movs	r2, #0
 80032a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	691b      	ldr	r3, [r3, #16]
 80032aa:	f003 0308 	and.w	r3, r3, #8
 80032ae:	2b08      	cmp	r3, #8
 80032b0:	d122      	bne.n	80032f8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	68db      	ldr	r3, [r3, #12]
 80032b8:	f003 0308 	and.w	r3, r3, #8
 80032bc:	2b08      	cmp	r3, #8
 80032be:	d11b      	bne.n	80032f8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f06f 0208 	mvn.w	r2, #8
 80032c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2204      	movs	r2, #4
 80032ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	69db      	ldr	r3, [r3, #28]
 80032d6:	f003 0303 	and.w	r3, r3, #3
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d003      	beq.n	80032e6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	f000 f978 	bl	80035d4 <HAL_TIM_IC_CaptureCallback>
 80032e4:	e005      	b.n	80032f2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	f000 f96a 	bl	80035c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032ec:	6878      	ldr	r0, [r7, #4]
 80032ee:	f000 f97b 	bl	80035e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2200      	movs	r2, #0
 80032f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	691b      	ldr	r3, [r3, #16]
 80032fe:	f003 0310 	and.w	r3, r3, #16
 8003302:	2b10      	cmp	r3, #16
 8003304:	d122      	bne.n	800334c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	68db      	ldr	r3, [r3, #12]
 800330c:	f003 0310 	and.w	r3, r3, #16
 8003310:	2b10      	cmp	r3, #16
 8003312:	d11b      	bne.n	800334c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f06f 0210 	mvn.w	r2, #16
 800331c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2208      	movs	r2, #8
 8003322:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	69db      	ldr	r3, [r3, #28]
 800332a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800332e:	2b00      	cmp	r3, #0
 8003330:	d003      	beq.n	800333a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	f000 f94e 	bl	80035d4 <HAL_TIM_IC_CaptureCallback>
 8003338:	e005      	b.n	8003346 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800333a:	6878      	ldr	r0, [r7, #4]
 800333c:	f000 f940 	bl	80035c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003340:	6878      	ldr	r0, [r7, #4]
 8003342:	f000 f951 	bl	80035e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2200      	movs	r2, #0
 800334a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	691b      	ldr	r3, [r3, #16]
 8003352:	f003 0301 	and.w	r3, r3, #1
 8003356:	2b01      	cmp	r3, #1
 8003358:	d10e      	bne.n	8003378 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	68db      	ldr	r3, [r3, #12]
 8003360:	f003 0301 	and.w	r3, r3, #1
 8003364:	2b01      	cmp	r3, #1
 8003366:	d107      	bne.n	8003378 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f06f 0201 	mvn.w	r2, #1
 8003370:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	f7fd fe94 	bl	80010a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	691b      	ldr	r3, [r3, #16]
 800337e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003382:	2b80      	cmp	r3, #128	; 0x80
 8003384:	d10e      	bne.n	80033a4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	68db      	ldr	r3, [r3, #12]
 800338c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003390:	2b80      	cmp	r3, #128	; 0x80
 8003392:	d107      	bne.n	80033a4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800339c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	f000 fb08 	bl	80039b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	691b      	ldr	r3, [r3, #16]
 80033aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033b2:	d10e      	bne.n	80033d2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	68db      	ldr	r3, [r3, #12]
 80033ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033be:	2b80      	cmp	r3, #128	; 0x80
 80033c0:	d107      	bne.n	80033d2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80033ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80033cc:	6878      	ldr	r0, [r7, #4]
 80033ce:	f000 fafb 	bl	80039c8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	691b      	ldr	r3, [r3, #16]
 80033d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033dc:	2b40      	cmp	r3, #64	; 0x40
 80033de:	d10e      	bne.n	80033fe <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	68db      	ldr	r3, [r3, #12]
 80033e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033ea:	2b40      	cmp	r3, #64	; 0x40
 80033ec:	d107      	bne.n	80033fe <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80033f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80033f8:	6878      	ldr	r0, [r7, #4]
 80033fa:	f000 f8ff 	bl	80035fc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	691b      	ldr	r3, [r3, #16]
 8003404:	f003 0320 	and.w	r3, r3, #32
 8003408:	2b20      	cmp	r3, #32
 800340a:	d10e      	bne.n	800342a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	68db      	ldr	r3, [r3, #12]
 8003412:	f003 0320 	and.w	r3, r3, #32
 8003416:	2b20      	cmp	r3, #32
 8003418:	d107      	bne.n	800342a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f06f 0220 	mvn.w	r2, #32
 8003422:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003424:	6878      	ldr	r0, [r7, #4]
 8003426:	f000 fabb 	bl	80039a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800342a:	bf00      	nop
 800342c:	3708      	adds	r7, #8
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}
	...

08003434 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b084      	sub	sp, #16
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
 800343c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003444:	2b01      	cmp	r3, #1
 8003446:	d101      	bne.n	800344c <HAL_TIM_ConfigClockSource+0x18>
 8003448:	2302      	movs	r3, #2
 800344a:	e0b3      	b.n	80035b4 <HAL_TIM_ConfigClockSource+0x180>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2201      	movs	r2, #1
 8003450:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2202      	movs	r2, #2
 8003458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003464:	68fa      	ldr	r2, [r7, #12]
 8003466:	4b55      	ldr	r3, [pc, #340]	; (80035bc <HAL_TIM_ConfigClockSource+0x188>)
 8003468:	4013      	ands	r3, r2
 800346a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003472:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	68fa      	ldr	r2, [r7, #12]
 800347a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003484:	d03e      	beq.n	8003504 <HAL_TIM_ConfigClockSource+0xd0>
 8003486:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800348a:	f200 8087 	bhi.w	800359c <HAL_TIM_ConfigClockSource+0x168>
 800348e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003492:	f000 8085 	beq.w	80035a0 <HAL_TIM_ConfigClockSource+0x16c>
 8003496:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800349a:	d87f      	bhi.n	800359c <HAL_TIM_ConfigClockSource+0x168>
 800349c:	2b70      	cmp	r3, #112	; 0x70
 800349e:	d01a      	beq.n	80034d6 <HAL_TIM_ConfigClockSource+0xa2>
 80034a0:	2b70      	cmp	r3, #112	; 0x70
 80034a2:	d87b      	bhi.n	800359c <HAL_TIM_ConfigClockSource+0x168>
 80034a4:	2b60      	cmp	r3, #96	; 0x60
 80034a6:	d050      	beq.n	800354a <HAL_TIM_ConfigClockSource+0x116>
 80034a8:	2b60      	cmp	r3, #96	; 0x60
 80034aa:	d877      	bhi.n	800359c <HAL_TIM_ConfigClockSource+0x168>
 80034ac:	2b50      	cmp	r3, #80	; 0x50
 80034ae:	d03c      	beq.n	800352a <HAL_TIM_ConfigClockSource+0xf6>
 80034b0:	2b50      	cmp	r3, #80	; 0x50
 80034b2:	d873      	bhi.n	800359c <HAL_TIM_ConfigClockSource+0x168>
 80034b4:	2b40      	cmp	r3, #64	; 0x40
 80034b6:	d058      	beq.n	800356a <HAL_TIM_ConfigClockSource+0x136>
 80034b8:	2b40      	cmp	r3, #64	; 0x40
 80034ba:	d86f      	bhi.n	800359c <HAL_TIM_ConfigClockSource+0x168>
 80034bc:	2b30      	cmp	r3, #48	; 0x30
 80034be:	d064      	beq.n	800358a <HAL_TIM_ConfigClockSource+0x156>
 80034c0:	2b30      	cmp	r3, #48	; 0x30
 80034c2:	d86b      	bhi.n	800359c <HAL_TIM_ConfigClockSource+0x168>
 80034c4:	2b20      	cmp	r3, #32
 80034c6:	d060      	beq.n	800358a <HAL_TIM_ConfigClockSource+0x156>
 80034c8:	2b20      	cmp	r3, #32
 80034ca:	d867      	bhi.n	800359c <HAL_TIM_ConfigClockSource+0x168>
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d05c      	beq.n	800358a <HAL_TIM_ConfigClockSource+0x156>
 80034d0:	2b10      	cmp	r3, #16
 80034d2:	d05a      	beq.n	800358a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80034d4:	e062      	b.n	800359c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6818      	ldr	r0, [r3, #0]
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	6899      	ldr	r1, [r3, #8]
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	685a      	ldr	r2, [r3, #4]
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	68db      	ldr	r3, [r3, #12]
 80034e6:	f000 f9ad 	bl	8003844 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80034f8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	68fa      	ldr	r2, [r7, #12]
 8003500:	609a      	str	r2, [r3, #8]
      break;
 8003502:	e04e      	b.n	80035a2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6818      	ldr	r0, [r3, #0]
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	6899      	ldr	r1, [r3, #8]
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	685a      	ldr	r2, [r3, #4]
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	68db      	ldr	r3, [r3, #12]
 8003514:	f000 f996 	bl	8003844 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	689a      	ldr	r2, [r3, #8]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003526:	609a      	str	r2, [r3, #8]
      break;
 8003528:	e03b      	b.n	80035a2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6818      	ldr	r0, [r3, #0]
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	6859      	ldr	r1, [r3, #4]
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	68db      	ldr	r3, [r3, #12]
 8003536:	461a      	mov	r2, r3
 8003538:	f000 f90a 	bl	8003750 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	2150      	movs	r1, #80	; 0x50
 8003542:	4618      	mov	r0, r3
 8003544:	f000 f963 	bl	800380e <TIM_ITRx_SetConfig>
      break;
 8003548:	e02b      	b.n	80035a2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6818      	ldr	r0, [r3, #0]
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	6859      	ldr	r1, [r3, #4]
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	68db      	ldr	r3, [r3, #12]
 8003556:	461a      	mov	r2, r3
 8003558:	f000 f929 	bl	80037ae <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	2160      	movs	r1, #96	; 0x60
 8003562:	4618      	mov	r0, r3
 8003564:	f000 f953 	bl	800380e <TIM_ITRx_SetConfig>
      break;
 8003568:	e01b      	b.n	80035a2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6818      	ldr	r0, [r3, #0]
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	6859      	ldr	r1, [r3, #4]
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	68db      	ldr	r3, [r3, #12]
 8003576:	461a      	mov	r2, r3
 8003578:	f000 f8ea 	bl	8003750 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	2140      	movs	r1, #64	; 0x40
 8003582:	4618      	mov	r0, r3
 8003584:	f000 f943 	bl	800380e <TIM_ITRx_SetConfig>
      break;
 8003588:	e00b      	b.n	80035a2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4619      	mov	r1, r3
 8003594:	4610      	mov	r0, r2
 8003596:	f000 f93a 	bl	800380e <TIM_ITRx_SetConfig>
        break;
 800359a:	e002      	b.n	80035a2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800359c:	bf00      	nop
 800359e:	e000      	b.n	80035a2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80035a0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2201      	movs	r2, #1
 80035a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2200      	movs	r2, #0
 80035ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80035b2:	2300      	movs	r3, #0
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	3710      	adds	r7, #16
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd80      	pop	{r7, pc}
 80035bc:	fffeff88 	.word	0xfffeff88

080035c0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b083      	sub	sp, #12
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80035c8:	bf00      	nop
 80035ca:	370c      	adds	r7, #12
 80035cc:	46bd      	mov	sp, r7
 80035ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d2:	4770      	bx	lr

080035d4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b083      	sub	sp, #12
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80035dc:	bf00      	nop
 80035de:	370c      	adds	r7, #12
 80035e0:	46bd      	mov	sp, r7
 80035e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e6:	4770      	bx	lr

080035e8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b083      	sub	sp, #12
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80035f0:	bf00      	nop
 80035f2:	370c      	adds	r7, #12
 80035f4:	46bd      	mov	sp, r7
 80035f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fa:	4770      	bx	lr

080035fc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b083      	sub	sp, #12
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003604:	bf00      	nop
 8003606:	370c      	adds	r7, #12
 8003608:	46bd      	mov	sp, r7
 800360a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360e:	4770      	bx	lr

08003610 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003610:	b480      	push	{r7}
 8003612:	b085      	sub	sp, #20
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
 8003618:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	4a40      	ldr	r2, [pc, #256]	; (8003724 <TIM_Base_SetConfig+0x114>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d013      	beq.n	8003650 <TIM_Base_SetConfig+0x40>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800362e:	d00f      	beq.n	8003650 <TIM_Base_SetConfig+0x40>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	4a3d      	ldr	r2, [pc, #244]	; (8003728 <TIM_Base_SetConfig+0x118>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d00b      	beq.n	8003650 <TIM_Base_SetConfig+0x40>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	4a3c      	ldr	r2, [pc, #240]	; (800372c <TIM_Base_SetConfig+0x11c>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d007      	beq.n	8003650 <TIM_Base_SetConfig+0x40>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	4a3b      	ldr	r2, [pc, #236]	; (8003730 <TIM_Base_SetConfig+0x120>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d003      	beq.n	8003650 <TIM_Base_SetConfig+0x40>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	4a3a      	ldr	r2, [pc, #232]	; (8003734 <TIM_Base_SetConfig+0x124>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d108      	bne.n	8003662 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003656:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	68fa      	ldr	r2, [r7, #12]
 800365e:	4313      	orrs	r3, r2
 8003660:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	4a2f      	ldr	r2, [pc, #188]	; (8003724 <TIM_Base_SetConfig+0x114>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d02b      	beq.n	80036c2 <TIM_Base_SetConfig+0xb2>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003670:	d027      	beq.n	80036c2 <TIM_Base_SetConfig+0xb2>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	4a2c      	ldr	r2, [pc, #176]	; (8003728 <TIM_Base_SetConfig+0x118>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d023      	beq.n	80036c2 <TIM_Base_SetConfig+0xb2>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	4a2b      	ldr	r2, [pc, #172]	; (800372c <TIM_Base_SetConfig+0x11c>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d01f      	beq.n	80036c2 <TIM_Base_SetConfig+0xb2>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	4a2a      	ldr	r2, [pc, #168]	; (8003730 <TIM_Base_SetConfig+0x120>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d01b      	beq.n	80036c2 <TIM_Base_SetConfig+0xb2>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	4a29      	ldr	r2, [pc, #164]	; (8003734 <TIM_Base_SetConfig+0x124>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d017      	beq.n	80036c2 <TIM_Base_SetConfig+0xb2>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	4a28      	ldr	r2, [pc, #160]	; (8003738 <TIM_Base_SetConfig+0x128>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d013      	beq.n	80036c2 <TIM_Base_SetConfig+0xb2>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	4a27      	ldr	r2, [pc, #156]	; (800373c <TIM_Base_SetConfig+0x12c>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d00f      	beq.n	80036c2 <TIM_Base_SetConfig+0xb2>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	4a26      	ldr	r2, [pc, #152]	; (8003740 <TIM_Base_SetConfig+0x130>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d00b      	beq.n	80036c2 <TIM_Base_SetConfig+0xb2>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	4a25      	ldr	r2, [pc, #148]	; (8003744 <TIM_Base_SetConfig+0x134>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d007      	beq.n	80036c2 <TIM_Base_SetConfig+0xb2>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	4a24      	ldr	r2, [pc, #144]	; (8003748 <TIM_Base_SetConfig+0x138>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d003      	beq.n	80036c2 <TIM_Base_SetConfig+0xb2>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	4a23      	ldr	r2, [pc, #140]	; (800374c <TIM_Base_SetConfig+0x13c>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d108      	bne.n	80036d4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	68db      	ldr	r3, [r3, #12]
 80036ce:	68fa      	ldr	r2, [r7, #12]
 80036d0:	4313      	orrs	r3, r2
 80036d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	695b      	ldr	r3, [r3, #20]
 80036de:	4313      	orrs	r3, r2
 80036e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	68fa      	ldr	r2, [r7, #12]
 80036e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	689a      	ldr	r2, [r3, #8]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	681a      	ldr	r2, [r3, #0]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	4a0a      	ldr	r2, [pc, #40]	; (8003724 <TIM_Base_SetConfig+0x114>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d003      	beq.n	8003708 <TIM_Base_SetConfig+0xf8>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	4a0c      	ldr	r2, [pc, #48]	; (8003734 <TIM_Base_SetConfig+0x124>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d103      	bne.n	8003710 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	691a      	ldr	r2, [r3, #16]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2201      	movs	r2, #1
 8003714:	615a      	str	r2, [r3, #20]
}
 8003716:	bf00      	nop
 8003718:	3714      	adds	r7, #20
 800371a:	46bd      	mov	sp, r7
 800371c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003720:	4770      	bx	lr
 8003722:	bf00      	nop
 8003724:	40010000 	.word	0x40010000
 8003728:	40000400 	.word	0x40000400
 800372c:	40000800 	.word	0x40000800
 8003730:	40000c00 	.word	0x40000c00
 8003734:	40010400 	.word	0x40010400
 8003738:	40014000 	.word	0x40014000
 800373c:	40014400 	.word	0x40014400
 8003740:	40014800 	.word	0x40014800
 8003744:	40001800 	.word	0x40001800
 8003748:	40001c00 	.word	0x40001c00
 800374c:	40002000 	.word	0x40002000

08003750 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003750:	b480      	push	{r7}
 8003752:	b087      	sub	sp, #28
 8003754:	af00      	add	r7, sp, #0
 8003756:	60f8      	str	r0, [r7, #12]
 8003758:	60b9      	str	r1, [r7, #8]
 800375a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	6a1b      	ldr	r3, [r3, #32]
 8003760:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	6a1b      	ldr	r3, [r3, #32]
 8003766:	f023 0201 	bic.w	r2, r3, #1
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	699b      	ldr	r3, [r3, #24]
 8003772:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800377a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	011b      	lsls	r3, r3, #4
 8003780:	693a      	ldr	r2, [r7, #16]
 8003782:	4313      	orrs	r3, r2
 8003784:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	f023 030a 	bic.w	r3, r3, #10
 800378c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800378e:	697a      	ldr	r2, [r7, #20]
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	4313      	orrs	r3, r2
 8003794:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	693a      	ldr	r2, [r7, #16]
 800379a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	697a      	ldr	r2, [r7, #20]
 80037a0:	621a      	str	r2, [r3, #32]
}
 80037a2:	bf00      	nop
 80037a4:	371c      	adds	r7, #28
 80037a6:	46bd      	mov	sp, r7
 80037a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ac:	4770      	bx	lr

080037ae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80037ae:	b480      	push	{r7}
 80037b0:	b087      	sub	sp, #28
 80037b2:	af00      	add	r7, sp, #0
 80037b4:	60f8      	str	r0, [r7, #12]
 80037b6:	60b9      	str	r1, [r7, #8]
 80037b8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	6a1b      	ldr	r3, [r3, #32]
 80037be:	f023 0210 	bic.w	r2, r3, #16
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	699b      	ldr	r3, [r3, #24]
 80037ca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	6a1b      	ldr	r3, [r3, #32]
 80037d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80037d8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	031b      	lsls	r3, r3, #12
 80037de:	697a      	ldr	r2, [r7, #20]
 80037e0:	4313      	orrs	r3, r2
 80037e2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80037ea:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	011b      	lsls	r3, r3, #4
 80037f0:	693a      	ldr	r2, [r7, #16]
 80037f2:	4313      	orrs	r3, r2
 80037f4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	697a      	ldr	r2, [r7, #20]
 80037fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	693a      	ldr	r2, [r7, #16]
 8003800:	621a      	str	r2, [r3, #32]
}
 8003802:	bf00      	nop
 8003804:	371c      	adds	r7, #28
 8003806:	46bd      	mov	sp, r7
 8003808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380c:	4770      	bx	lr

0800380e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800380e:	b480      	push	{r7}
 8003810:	b085      	sub	sp, #20
 8003812:	af00      	add	r7, sp, #0
 8003814:	6078      	str	r0, [r7, #4]
 8003816:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003824:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003826:	683a      	ldr	r2, [r7, #0]
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	4313      	orrs	r3, r2
 800382c:	f043 0307 	orr.w	r3, r3, #7
 8003830:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	68fa      	ldr	r2, [r7, #12]
 8003836:	609a      	str	r2, [r3, #8]
}
 8003838:	bf00      	nop
 800383a:	3714      	adds	r7, #20
 800383c:	46bd      	mov	sp, r7
 800383e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003842:	4770      	bx	lr

08003844 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003844:	b480      	push	{r7}
 8003846:	b087      	sub	sp, #28
 8003848:	af00      	add	r7, sp, #0
 800384a:	60f8      	str	r0, [r7, #12]
 800384c:	60b9      	str	r1, [r7, #8]
 800384e:	607a      	str	r2, [r7, #4]
 8003850:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800385e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	021a      	lsls	r2, r3, #8
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	431a      	orrs	r2, r3
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	4313      	orrs	r3, r2
 800386c:	697a      	ldr	r2, [r7, #20]
 800386e:	4313      	orrs	r3, r2
 8003870:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	697a      	ldr	r2, [r7, #20]
 8003876:	609a      	str	r2, [r3, #8]
}
 8003878:	bf00      	nop
 800387a:	371c      	adds	r7, #28
 800387c:	46bd      	mov	sp, r7
 800387e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003882:	4770      	bx	lr

08003884 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003884:	b480      	push	{r7}
 8003886:	b085      	sub	sp, #20
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
 800388c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003894:	2b01      	cmp	r3, #1
 8003896:	d101      	bne.n	800389c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003898:	2302      	movs	r3, #2
 800389a:	e06d      	b.n	8003978 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2201      	movs	r2, #1
 80038a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2202      	movs	r2, #2
 80038a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	689b      	ldr	r3, [r3, #8]
 80038ba:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a30      	ldr	r2, [pc, #192]	; (8003984 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d004      	beq.n	80038d0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a2f      	ldr	r2, [pc, #188]	; (8003988 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d108      	bne.n	80038e2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80038d6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	68fa      	ldr	r2, [r7, #12]
 80038de:	4313      	orrs	r3, r2
 80038e0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038e8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	68fa      	ldr	r2, [r7, #12]
 80038f0:	4313      	orrs	r3, r2
 80038f2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	68fa      	ldr	r2, [r7, #12]
 80038fa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a20      	ldr	r2, [pc, #128]	; (8003984 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d022      	beq.n	800394c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800390e:	d01d      	beq.n	800394c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a1d      	ldr	r2, [pc, #116]	; (800398c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d018      	beq.n	800394c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a1c      	ldr	r2, [pc, #112]	; (8003990 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d013      	beq.n	800394c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a1a      	ldr	r2, [pc, #104]	; (8003994 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d00e      	beq.n	800394c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a15      	ldr	r2, [pc, #84]	; (8003988 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d009      	beq.n	800394c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a16      	ldr	r2, [pc, #88]	; (8003998 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d004      	beq.n	800394c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a15      	ldr	r2, [pc, #84]	; (800399c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d10c      	bne.n	8003966 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003952:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	68ba      	ldr	r2, [r7, #8]
 800395a:	4313      	orrs	r3, r2
 800395c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	68ba      	ldr	r2, [r7, #8]
 8003964:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2201      	movs	r2, #1
 800396a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2200      	movs	r2, #0
 8003972:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003976:	2300      	movs	r3, #0
}
 8003978:	4618      	mov	r0, r3
 800397a:	3714      	adds	r7, #20
 800397c:	46bd      	mov	sp, r7
 800397e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003982:	4770      	bx	lr
 8003984:	40010000 	.word	0x40010000
 8003988:	40010400 	.word	0x40010400
 800398c:	40000400 	.word	0x40000400
 8003990:	40000800 	.word	0x40000800
 8003994:	40000c00 	.word	0x40000c00
 8003998:	40014000 	.word	0x40014000
 800399c:	40001800 	.word	0x40001800

080039a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b083      	sub	sp, #12
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80039a8:	bf00      	nop
 80039aa:	370c      	adds	r7, #12
 80039ac:	46bd      	mov	sp, r7
 80039ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b2:	4770      	bx	lr

080039b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b083      	sub	sp, #12
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80039bc:	bf00      	nop
 80039be:	370c      	adds	r7, #12
 80039c0:	46bd      	mov	sp, r7
 80039c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c6:	4770      	bx	lr

080039c8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b083      	sub	sp, #12
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80039d0:	bf00      	nop
 80039d2:	370c      	adds	r7, #12
 80039d4:	46bd      	mov	sp, r7
 80039d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039da:	4770      	bx	lr

080039dc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b082      	sub	sp, #8
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d101      	bne.n	80039ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	e040      	b.n	8003a70 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d106      	bne.n	8003a04 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2200      	movs	r2, #0
 80039fa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	f7fd fe66 	bl	80016d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2224      	movs	r2, #36	; 0x24
 8003a08:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	681a      	ldr	r2, [r3, #0]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f022 0201 	bic.w	r2, r2, #1
 8003a18:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	f000 f82c 	bl	8003a78 <UART_SetConfig>
 8003a20:	4603      	mov	r3, r0
 8003a22:	2b01      	cmp	r3, #1
 8003a24:	d101      	bne.n	8003a2a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	e022      	b.n	8003a70 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d002      	beq.n	8003a38 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	f000 fa82 	bl	8003f3c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	685a      	ldr	r2, [r3, #4]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003a46:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	689a      	ldr	r2, [r3, #8]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003a56:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	681a      	ldr	r2, [r3, #0]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f042 0201 	orr.w	r2, r2, #1
 8003a66:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003a68:	6878      	ldr	r0, [r7, #4]
 8003a6a:	f000 fb09 	bl	8004080 <UART_CheckIdleState>
 8003a6e:	4603      	mov	r3, r0
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	3708      	adds	r7, #8
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}

08003a78 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b088      	sub	sp, #32
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003a80:	2300      	movs	r3, #0
 8003a82:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	689a      	ldr	r2, [r3, #8]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	691b      	ldr	r3, [r3, #16]
 8003a8c:	431a      	orrs	r2, r3
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	695b      	ldr	r3, [r3, #20]
 8003a92:	431a      	orrs	r2, r3
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	69db      	ldr	r3, [r3, #28]
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	4ba7      	ldr	r3, [pc, #668]	; (8003d40 <UART_SetConfig+0x2c8>)
 8003aa4:	4013      	ands	r3, r2
 8003aa6:	687a      	ldr	r2, [r7, #4]
 8003aa8:	6812      	ldr	r2, [r2, #0]
 8003aaa:	6979      	ldr	r1, [r7, #20]
 8003aac:	430b      	orrs	r3, r1
 8003aae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	68da      	ldr	r2, [r3, #12]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	430a      	orrs	r2, r1
 8003ac4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	699b      	ldr	r3, [r3, #24]
 8003aca:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6a1b      	ldr	r3, [r3, #32]
 8003ad0:	697a      	ldr	r2, [r7, #20]
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	697a      	ldr	r2, [r7, #20]
 8003ae6:	430a      	orrs	r2, r1
 8003ae8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a95      	ldr	r2, [pc, #596]	; (8003d44 <UART_SetConfig+0x2cc>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d120      	bne.n	8003b36 <UART_SetConfig+0xbe>
 8003af4:	4b94      	ldr	r3, [pc, #592]	; (8003d48 <UART_SetConfig+0x2d0>)
 8003af6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003afa:	f003 0303 	and.w	r3, r3, #3
 8003afe:	2b03      	cmp	r3, #3
 8003b00:	d816      	bhi.n	8003b30 <UART_SetConfig+0xb8>
 8003b02:	a201      	add	r2, pc, #4	; (adr r2, 8003b08 <UART_SetConfig+0x90>)
 8003b04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b08:	08003b19 	.word	0x08003b19
 8003b0c:	08003b25 	.word	0x08003b25
 8003b10:	08003b1f 	.word	0x08003b1f
 8003b14:	08003b2b 	.word	0x08003b2b
 8003b18:	2301      	movs	r3, #1
 8003b1a:	77fb      	strb	r3, [r7, #31]
 8003b1c:	e14f      	b.n	8003dbe <UART_SetConfig+0x346>
 8003b1e:	2302      	movs	r3, #2
 8003b20:	77fb      	strb	r3, [r7, #31]
 8003b22:	e14c      	b.n	8003dbe <UART_SetConfig+0x346>
 8003b24:	2304      	movs	r3, #4
 8003b26:	77fb      	strb	r3, [r7, #31]
 8003b28:	e149      	b.n	8003dbe <UART_SetConfig+0x346>
 8003b2a:	2308      	movs	r3, #8
 8003b2c:	77fb      	strb	r3, [r7, #31]
 8003b2e:	e146      	b.n	8003dbe <UART_SetConfig+0x346>
 8003b30:	2310      	movs	r3, #16
 8003b32:	77fb      	strb	r3, [r7, #31]
 8003b34:	e143      	b.n	8003dbe <UART_SetConfig+0x346>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a84      	ldr	r2, [pc, #528]	; (8003d4c <UART_SetConfig+0x2d4>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d132      	bne.n	8003ba6 <UART_SetConfig+0x12e>
 8003b40:	4b81      	ldr	r3, [pc, #516]	; (8003d48 <UART_SetConfig+0x2d0>)
 8003b42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b46:	f003 030c 	and.w	r3, r3, #12
 8003b4a:	2b0c      	cmp	r3, #12
 8003b4c:	d828      	bhi.n	8003ba0 <UART_SetConfig+0x128>
 8003b4e:	a201      	add	r2, pc, #4	; (adr r2, 8003b54 <UART_SetConfig+0xdc>)
 8003b50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b54:	08003b89 	.word	0x08003b89
 8003b58:	08003ba1 	.word	0x08003ba1
 8003b5c:	08003ba1 	.word	0x08003ba1
 8003b60:	08003ba1 	.word	0x08003ba1
 8003b64:	08003b95 	.word	0x08003b95
 8003b68:	08003ba1 	.word	0x08003ba1
 8003b6c:	08003ba1 	.word	0x08003ba1
 8003b70:	08003ba1 	.word	0x08003ba1
 8003b74:	08003b8f 	.word	0x08003b8f
 8003b78:	08003ba1 	.word	0x08003ba1
 8003b7c:	08003ba1 	.word	0x08003ba1
 8003b80:	08003ba1 	.word	0x08003ba1
 8003b84:	08003b9b 	.word	0x08003b9b
 8003b88:	2300      	movs	r3, #0
 8003b8a:	77fb      	strb	r3, [r7, #31]
 8003b8c:	e117      	b.n	8003dbe <UART_SetConfig+0x346>
 8003b8e:	2302      	movs	r3, #2
 8003b90:	77fb      	strb	r3, [r7, #31]
 8003b92:	e114      	b.n	8003dbe <UART_SetConfig+0x346>
 8003b94:	2304      	movs	r3, #4
 8003b96:	77fb      	strb	r3, [r7, #31]
 8003b98:	e111      	b.n	8003dbe <UART_SetConfig+0x346>
 8003b9a:	2308      	movs	r3, #8
 8003b9c:	77fb      	strb	r3, [r7, #31]
 8003b9e:	e10e      	b.n	8003dbe <UART_SetConfig+0x346>
 8003ba0:	2310      	movs	r3, #16
 8003ba2:	77fb      	strb	r3, [r7, #31]
 8003ba4:	e10b      	b.n	8003dbe <UART_SetConfig+0x346>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a69      	ldr	r2, [pc, #420]	; (8003d50 <UART_SetConfig+0x2d8>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d120      	bne.n	8003bf2 <UART_SetConfig+0x17a>
 8003bb0:	4b65      	ldr	r3, [pc, #404]	; (8003d48 <UART_SetConfig+0x2d0>)
 8003bb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bb6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003bba:	2b30      	cmp	r3, #48	; 0x30
 8003bbc:	d013      	beq.n	8003be6 <UART_SetConfig+0x16e>
 8003bbe:	2b30      	cmp	r3, #48	; 0x30
 8003bc0:	d814      	bhi.n	8003bec <UART_SetConfig+0x174>
 8003bc2:	2b20      	cmp	r3, #32
 8003bc4:	d009      	beq.n	8003bda <UART_SetConfig+0x162>
 8003bc6:	2b20      	cmp	r3, #32
 8003bc8:	d810      	bhi.n	8003bec <UART_SetConfig+0x174>
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d002      	beq.n	8003bd4 <UART_SetConfig+0x15c>
 8003bce:	2b10      	cmp	r3, #16
 8003bd0:	d006      	beq.n	8003be0 <UART_SetConfig+0x168>
 8003bd2:	e00b      	b.n	8003bec <UART_SetConfig+0x174>
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	77fb      	strb	r3, [r7, #31]
 8003bd8:	e0f1      	b.n	8003dbe <UART_SetConfig+0x346>
 8003bda:	2302      	movs	r3, #2
 8003bdc:	77fb      	strb	r3, [r7, #31]
 8003bde:	e0ee      	b.n	8003dbe <UART_SetConfig+0x346>
 8003be0:	2304      	movs	r3, #4
 8003be2:	77fb      	strb	r3, [r7, #31]
 8003be4:	e0eb      	b.n	8003dbe <UART_SetConfig+0x346>
 8003be6:	2308      	movs	r3, #8
 8003be8:	77fb      	strb	r3, [r7, #31]
 8003bea:	e0e8      	b.n	8003dbe <UART_SetConfig+0x346>
 8003bec:	2310      	movs	r3, #16
 8003bee:	77fb      	strb	r3, [r7, #31]
 8003bf0:	e0e5      	b.n	8003dbe <UART_SetConfig+0x346>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a57      	ldr	r2, [pc, #348]	; (8003d54 <UART_SetConfig+0x2dc>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d120      	bne.n	8003c3e <UART_SetConfig+0x1c6>
 8003bfc:	4b52      	ldr	r3, [pc, #328]	; (8003d48 <UART_SetConfig+0x2d0>)
 8003bfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c02:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003c06:	2bc0      	cmp	r3, #192	; 0xc0
 8003c08:	d013      	beq.n	8003c32 <UART_SetConfig+0x1ba>
 8003c0a:	2bc0      	cmp	r3, #192	; 0xc0
 8003c0c:	d814      	bhi.n	8003c38 <UART_SetConfig+0x1c0>
 8003c0e:	2b80      	cmp	r3, #128	; 0x80
 8003c10:	d009      	beq.n	8003c26 <UART_SetConfig+0x1ae>
 8003c12:	2b80      	cmp	r3, #128	; 0x80
 8003c14:	d810      	bhi.n	8003c38 <UART_SetConfig+0x1c0>
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d002      	beq.n	8003c20 <UART_SetConfig+0x1a8>
 8003c1a:	2b40      	cmp	r3, #64	; 0x40
 8003c1c:	d006      	beq.n	8003c2c <UART_SetConfig+0x1b4>
 8003c1e:	e00b      	b.n	8003c38 <UART_SetConfig+0x1c0>
 8003c20:	2300      	movs	r3, #0
 8003c22:	77fb      	strb	r3, [r7, #31]
 8003c24:	e0cb      	b.n	8003dbe <UART_SetConfig+0x346>
 8003c26:	2302      	movs	r3, #2
 8003c28:	77fb      	strb	r3, [r7, #31]
 8003c2a:	e0c8      	b.n	8003dbe <UART_SetConfig+0x346>
 8003c2c:	2304      	movs	r3, #4
 8003c2e:	77fb      	strb	r3, [r7, #31]
 8003c30:	e0c5      	b.n	8003dbe <UART_SetConfig+0x346>
 8003c32:	2308      	movs	r3, #8
 8003c34:	77fb      	strb	r3, [r7, #31]
 8003c36:	e0c2      	b.n	8003dbe <UART_SetConfig+0x346>
 8003c38:	2310      	movs	r3, #16
 8003c3a:	77fb      	strb	r3, [r7, #31]
 8003c3c:	e0bf      	b.n	8003dbe <UART_SetConfig+0x346>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a45      	ldr	r2, [pc, #276]	; (8003d58 <UART_SetConfig+0x2e0>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d125      	bne.n	8003c94 <UART_SetConfig+0x21c>
 8003c48:	4b3f      	ldr	r3, [pc, #252]	; (8003d48 <UART_SetConfig+0x2d0>)
 8003c4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c52:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c56:	d017      	beq.n	8003c88 <UART_SetConfig+0x210>
 8003c58:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c5c:	d817      	bhi.n	8003c8e <UART_SetConfig+0x216>
 8003c5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c62:	d00b      	beq.n	8003c7c <UART_SetConfig+0x204>
 8003c64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c68:	d811      	bhi.n	8003c8e <UART_SetConfig+0x216>
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d003      	beq.n	8003c76 <UART_SetConfig+0x1fe>
 8003c6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c72:	d006      	beq.n	8003c82 <UART_SetConfig+0x20a>
 8003c74:	e00b      	b.n	8003c8e <UART_SetConfig+0x216>
 8003c76:	2300      	movs	r3, #0
 8003c78:	77fb      	strb	r3, [r7, #31]
 8003c7a:	e0a0      	b.n	8003dbe <UART_SetConfig+0x346>
 8003c7c:	2302      	movs	r3, #2
 8003c7e:	77fb      	strb	r3, [r7, #31]
 8003c80:	e09d      	b.n	8003dbe <UART_SetConfig+0x346>
 8003c82:	2304      	movs	r3, #4
 8003c84:	77fb      	strb	r3, [r7, #31]
 8003c86:	e09a      	b.n	8003dbe <UART_SetConfig+0x346>
 8003c88:	2308      	movs	r3, #8
 8003c8a:	77fb      	strb	r3, [r7, #31]
 8003c8c:	e097      	b.n	8003dbe <UART_SetConfig+0x346>
 8003c8e:	2310      	movs	r3, #16
 8003c90:	77fb      	strb	r3, [r7, #31]
 8003c92:	e094      	b.n	8003dbe <UART_SetConfig+0x346>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a30      	ldr	r2, [pc, #192]	; (8003d5c <UART_SetConfig+0x2e4>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d125      	bne.n	8003cea <UART_SetConfig+0x272>
 8003c9e:	4b2a      	ldr	r3, [pc, #168]	; (8003d48 <UART_SetConfig+0x2d0>)
 8003ca0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ca4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003ca8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003cac:	d017      	beq.n	8003cde <UART_SetConfig+0x266>
 8003cae:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003cb2:	d817      	bhi.n	8003ce4 <UART_SetConfig+0x26c>
 8003cb4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003cb8:	d00b      	beq.n	8003cd2 <UART_SetConfig+0x25a>
 8003cba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003cbe:	d811      	bhi.n	8003ce4 <UART_SetConfig+0x26c>
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d003      	beq.n	8003ccc <UART_SetConfig+0x254>
 8003cc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cc8:	d006      	beq.n	8003cd8 <UART_SetConfig+0x260>
 8003cca:	e00b      	b.n	8003ce4 <UART_SetConfig+0x26c>
 8003ccc:	2301      	movs	r3, #1
 8003cce:	77fb      	strb	r3, [r7, #31]
 8003cd0:	e075      	b.n	8003dbe <UART_SetConfig+0x346>
 8003cd2:	2302      	movs	r3, #2
 8003cd4:	77fb      	strb	r3, [r7, #31]
 8003cd6:	e072      	b.n	8003dbe <UART_SetConfig+0x346>
 8003cd8:	2304      	movs	r3, #4
 8003cda:	77fb      	strb	r3, [r7, #31]
 8003cdc:	e06f      	b.n	8003dbe <UART_SetConfig+0x346>
 8003cde:	2308      	movs	r3, #8
 8003ce0:	77fb      	strb	r3, [r7, #31]
 8003ce2:	e06c      	b.n	8003dbe <UART_SetConfig+0x346>
 8003ce4:	2310      	movs	r3, #16
 8003ce6:	77fb      	strb	r3, [r7, #31]
 8003ce8:	e069      	b.n	8003dbe <UART_SetConfig+0x346>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a1c      	ldr	r2, [pc, #112]	; (8003d60 <UART_SetConfig+0x2e8>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d137      	bne.n	8003d64 <UART_SetConfig+0x2ec>
 8003cf4:	4b14      	ldr	r3, [pc, #80]	; (8003d48 <UART_SetConfig+0x2d0>)
 8003cf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cfa:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003cfe:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003d02:	d017      	beq.n	8003d34 <UART_SetConfig+0x2bc>
 8003d04:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003d08:	d817      	bhi.n	8003d3a <UART_SetConfig+0x2c2>
 8003d0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d0e:	d00b      	beq.n	8003d28 <UART_SetConfig+0x2b0>
 8003d10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d14:	d811      	bhi.n	8003d3a <UART_SetConfig+0x2c2>
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d003      	beq.n	8003d22 <UART_SetConfig+0x2aa>
 8003d1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d1e:	d006      	beq.n	8003d2e <UART_SetConfig+0x2b6>
 8003d20:	e00b      	b.n	8003d3a <UART_SetConfig+0x2c2>
 8003d22:	2300      	movs	r3, #0
 8003d24:	77fb      	strb	r3, [r7, #31]
 8003d26:	e04a      	b.n	8003dbe <UART_SetConfig+0x346>
 8003d28:	2302      	movs	r3, #2
 8003d2a:	77fb      	strb	r3, [r7, #31]
 8003d2c:	e047      	b.n	8003dbe <UART_SetConfig+0x346>
 8003d2e:	2304      	movs	r3, #4
 8003d30:	77fb      	strb	r3, [r7, #31]
 8003d32:	e044      	b.n	8003dbe <UART_SetConfig+0x346>
 8003d34:	2308      	movs	r3, #8
 8003d36:	77fb      	strb	r3, [r7, #31]
 8003d38:	e041      	b.n	8003dbe <UART_SetConfig+0x346>
 8003d3a:	2310      	movs	r3, #16
 8003d3c:	77fb      	strb	r3, [r7, #31]
 8003d3e:	e03e      	b.n	8003dbe <UART_SetConfig+0x346>
 8003d40:	efff69f3 	.word	0xefff69f3
 8003d44:	40011000 	.word	0x40011000
 8003d48:	40023800 	.word	0x40023800
 8003d4c:	40004400 	.word	0x40004400
 8003d50:	40004800 	.word	0x40004800
 8003d54:	40004c00 	.word	0x40004c00
 8003d58:	40005000 	.word	0x40005000
 8003d5c:	40011400 	.word	0x40011400
 8003d60:	40007800 	.word	0x40007800
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a71      	ldr	r2, [pc, #452]	; (8003f30 <UART_SetConfig+0x4b8>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d125      	bne.n	8003dba <UART_SetConfig+0x342>
 8003d6e:	4b71      	ldr	r3, [pc, #452]	; (8003f34 <UART_SetConfig+0x4bc>)
 8003d70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d74:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003d78:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003d7c:	d017      	beq.n	8003dae <UART_SetConfig+0x336>
 8003d7e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003d82:	d817      	bhi.n	8003db4 <UART_SetConfig+0x33c>
 8003d84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d88:	d00b      	beq.n	8003da2 <UART_SetConfig+0x32a>
 8003d8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d8e:	d811      	bhi.n	8003db4 <UART_SetConfig+0x33c>
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d003      	beq.n	8003d9c <UART_SetConfig+0x324>
 8003d94:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d98:	d006      	beq.n	8003da8 <UART_SetConfig+0x330>
 8003d9a:	e00b      	b.n	8003db4 <UART_SetConfig+0x33c>
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	77fb      	strb	r3, [r7, #31]
 8003da0:	e00d      	b.n	8003dbe <UART_SetConfig+0x346>
 8003da2:	2302      	movs	r3, #2
 8003da4:	77fb      	strb	r3, [r7, #31]
 8003da6:	e00a      	b.n	8003dbe <UART_SetConfig+0x346>
 8003da8:	2304      	movs	r3, #4
 8003daa:	77fb      	strb	r3, [r7, #31]
 8003dac:	e007      	b.n	8003dbe <UART_SetConfig+0x346>
 8003dae:	2308      	movs	r3, #8
 8003db0:	77fb      	strb	r3, [r7, #31]
 8003db2:	e004      	b.n	8003dbe <UART_SetConfig+0x346>
 8003db4:	2310      	movs	r3, #16
 8003db6:	77fb      	strb	r3, [r7, #31]
 8003db8:	e001      	b.n	8003dbe <UART_SetConfig+0x346>
 8003dba:	2310      	movs	r3, #16
 8003dbc:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	69db      	ldr	r3, [r3, #28]
 8003dc2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003dc6:	d15b      	bne.n	8003e80 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8003dc8:	7ffb      	ldrb	r3, [r7, #31]
 8003dca:	2b08      	cmp	r3, #8
 8003dcc:	d827      	bhi.n	8003e1e <UART_SetConfig+0x3a6>
 8003dce:	a201      	add	r2, pc, #4	; (adr r2, 8003dd4 <UART_SetConfig+0x35c>)
 8003dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dd4:	08003df9 	.word	0x08003df9
 8003dd8:	08003e01 	.word	0x08003e01
 8003ddc:	08003e09 	.word	0x08003e09
 8003de0:	08003e1f 	.word	0x08003e1f
 8003de4:	08003e0f 	.word	0x08003e0f
 8003de8:	08003e1f 	.word	0x08003e1f
 8003dec:	08003e1f 	.word	0x08003e1f
 8003df0:	08003e1f 	.word	0x08003e1f
 8003df4:	08003e17 	.word	0x08003e17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003df8:	f7fe fd14 	bl	8002824 <HAL_RCC_GetPCLK1Freq>
 8003dfc:	61b8      	str	r0, [r7, #24]
        break;
 8003dfe:	e013      	b.n	8003e28 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e00:	f7fe fd24 	bl	800284c <HAL_RCC_GetPCLK2Freq>
 8003e04:	61b8      	str	r0, [r7, #24]
        break;
 8003e06:	e00f      	b.n	8003e28 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e08:	4b4b      	ldr	r3, [pc, #300]	; (8003f38 <UART_SetConfig+0x4c0>)
 8003e0a:	61bb      	str	r3, [r7, #24]
        break;
 8003e0c:	e00c      	b.n	8003e28 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e0e:	f7fe fc47 	bl	80026a0 <HAL_RCC_GetSysClockFreq>
 8003e12:	61b8      	str	r0, [r7, #24]
        break;
 8003e14:	e008      	b.n	8003e28 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e1a:	61bb      	str	r3, [r7, #24]
        break;
 8003e1c:	e004      	b.n	8003e28 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	77bb      	strb	r3, [r7, #30]
        break;
 8003e26:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003e28:	69bb      	ldr	r3, [r7, #24]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d074      	beq.n	8003f18 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003e2e:	69bb      	ldr	r3, [r7, #24]
 8003e30:	005a      	lsls	r2, r3, #1
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	085b      	lsrs	r3, r3, #1
 8003e38:	441a      	add	r2, r3
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e42:	b29b      	uxth	r3, r3
 8003e44:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e46:	693b      	ldr	r3, [r7, #16]
 8003e48:	2b0f      	cmp	r3, #15
 8003e4a:	d916      	bls.n	8003e7a <UART_SetConfig+0x402>
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e52:	d212      	bcs.n	8003e7a <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	b29b      	uxth	r3, r3
 8003e58:	f023 030f 	bic.w	r3, r3, #15
 8003e5c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	085b      	lsrs	r3, r3, #1
 8003e62:	b29b      	uxth	r3, r3
 8003e64:	f003 0307 	and.w	r3, r3, #7
 8003e68:	b29a      	uxth	r2, r3
 8003e6a:	89fb      	ldrh	r3, [r7, #14]
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	89fa      	ldrh	r2, [r7, #14]
 8003e76:	60da      	str	r2, [r3, #12]
 8003e78:	e04e      	b.n	8003f18 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	77bb      	strb	r3, [r7, #30]
 8003e7e:	e04b      	b.n	8003f18 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003e80:	7ffb      	ldrb	r3, [r7, #31]
 8003e82:	2b08      	cmp	r3, #8
 8003e84:	d827      	bhi.n	8003ed6 <UART_SetConfig+0x45e>
 8003e86:	a201      	add	r2, pc, #4	; (adr r2, 8003e8c <UART_SetConfig+0x414>)
 8003e88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e8c:	08003eb1 	.word	0x08003eb1
 8003e90:	08003eb9 	.word	0x08003eb9
 8003e94:	08003ec1 	.word	0x08003ec1
 8003e98:	08003ed7 	.word	0x08003ed7
 8003e9c:	08003ec7 	.word	0x08003ec7
 8003ea0:	08003ed7 	.word	0x08003ed7
 8003ea4:	08003ed7 	.word	0x08003ed7
 8003ea8:	08003ed7 	.word	0x08003ed7
 8003eac:	08003ecf 	.word	0x08003ecf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003eb0:	f7fe fcb8 	bl	8002824 <HAL_RCC_GetPCLK1Freq>
 8003eb4:	61b8      	str	r0, [r7, #24]
        break;
 8003eb6:	e013      	b.n	8003ee0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003eb8:	f7fe fcc8 	bl	800284c <HAL_RCC_GetPCLK2Freq>
 8003ebc:	61b8      	str	r0, [r7, #24]
        break;
 8003ebe:	e00f      	b.n	8003ee0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ec0:	4b1d      	ldr	r3, [pc, #116]	; (8003f38 <UART_SetConfig+0x4c0>)
 8003ec2:	61bb      	str	r3, [r7, #24]
        break;
 8003ec4:	e00c      	b.n	8003ee0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ec6:	f7fe fbeb 	bl	80026a0 <HAL_RCC_GetSysClockFreq>
 8003eca:	61b8      	str	r0, [r7, #24]
        break;
 8003ecc:	e008      	b.n	8003ee0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ece:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ed2:	61bb      	str	r3, [r7, #24]
        break;
 8003ed4:	e004      	b.n	8003ee0 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	77bb      	strb	r3, [r7, #30]
        break;
 8003ede:	bf00      	nop
    }

    if (pclk != 0U)
 8003ee0:	69bb      	ldr	r3, [r7, #24]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d018      	beq.n	8003f18 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	085a      	lsrs	r2, r3, #1
 8003eec:	69bb      	ldr	r3, [r7, #24]
 8003eee:	441a      	add	r2, r3
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ef8:	b29b      	uxth	r3, r3
 8003efa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	2b0f      	cmp	r3, #15
 8003f00:	d908      	bls.n	8003f14 <UART_SetConfig+0x49c>
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f08:	d204      	bcs.n	8003f14 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	693a      	ldr	r2, [r7, #16]
 8003f10:	60da      	str	r2, [r3, #12]
 8003f12:	e001      	b.n	8003f18 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8003f14:	2301      	movs	r3, #1
 8003f16:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2200      	movs	r2, #0
 8003f22:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003f24:	7fbb      	ldrb	r3, [r7, #30]
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	3720      	adds	r7, #32
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}
 8003f2e:	bf00      	nop
 8003f30:	40007c00 	.word	0x40007c00
 8003f34:	40023800 	.word	0x40023800
 8003f38:	00f42400 	.word	0x00f42400

08003f3c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b083      	sub	sp, #12
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f48:	f003 0301 	and.w	r3, r3, #1
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d00a      	beq.n	8003f66 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	430a      	orrs	r2, r1
 8003f64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f6a:	f003 0302 	and.w	r3, r3, #2
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d00a      	beq.n	8003f88 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	430a      	orrs	r2, r1
 8003f86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f8c:	f003 0304 	and.w	r3, r3, #4
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d00a      	beq.n	8003faa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	430a      	orrs	r2, r1
 8003fa8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fae:	f003 0308 	and.w	r3, r3, #8
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d00a      	beq.n	8003fcc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	430a      	orrs	r2, r1
 8003fca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd0:	f003 0310 	and.w	r3, r3, #16
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d00a      	beq.n	8003fee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	430a      	orrs	r2, r1
 8003fec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff2:	f003 0320 	and.w	r3, r3, #32
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d00a      	beq.n	8004010 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	430a      	orrs	r2, r1
 800400e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004014:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004018:	2b00      	cmp	r3, #0
 800401a:	d01a      	beq.n	8004052 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	430a      	orrs	r2, r1
 8004030:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004036:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800403a:	d10a      	bne.n	8004052 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	430a      	orrs	r2, r1
 8004050:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004056:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800405a:	2b00      	cmp	r3, #0
 800405c:	d00a      	beq.n	8004074 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	430a      	orrs	r2, r1
 8004072:	605a      	str	r2, [r3, #4]
  }
}
 8004074:	bf00      	nop
 8004076:	370c      	adds	r7, #12
 8004078:	46bd      	mov	sp, r7
 800407a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407e:	4770      	bx	lr

08004080 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b086      	sub	sp, #24
 8004084:	af02      	add	r7, sp, #8
 8004086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2200      	movs	r2, #0
 800408c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004090:	f7fd fc2a 	bl	80018e8 <HAL_GetTick>
 8004094:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f003 0308 	and.w	r3, r3, #8
 80040a0:	2b08      	cmp	r3, #8
 80040a2:	d10e      	bne.n	80040c2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80040a4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80040a8:	9300      	str	r3, [sp, #0]
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2200      	movs	r2, #0
 80040ae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80040b2:	6878      	ldr	r0, [r7, #4]
 80040b4:	f000 f817 	bl	80040e6 <UART_WaitOnFlagUntilTimeout>
 80040b8:	4603      	mov	r3, r0
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d001      	beq.n	80040c2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80040be:	2303      	movs	r3, #3
 80040c0:	e00d      	b.n	80040de <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2220      	movs	r2, #32
 80040c6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2220      	movs	r2, #32
 80040cc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2200      	movs	r2, #0
 80040d2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2200      	movs	r2, #0
 80040d8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80040dc:	2300      	movs	r3, #0
}
 80040de:	4618      	mov	r0, r3
 80040e0:	3710      	adds	r7, #16
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}

080040e6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80040e6:	b580      	push	{r7, lr}
 80040e8:	b084      	sub	sp, #16
 80040ea:	af00      	add	r7, sp, #0
 80040ec:	60f8      	str	r0, [r7, #12]
 80040ee:	60b9      	str	r1, [r7, #8]
 80040f0:	603b      	str	r3, [r7, #0]
 80040f2:	4613      	mov	r3, r2
 80040f4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040f6:	e05e      	b.n	80041b6 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040f8:	69bb      	ldr	r3, [r7, #24]
 80040fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040fe:	d05a      	beq.n	80041b6 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004100:	f7fd fbf2 	bl	80018e8 <HAL_GetTick>
 8004104:	4602      	mov	r2, r0
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	1ad3      	subs	r3, r2, r3
 800410a:	69ba      	ldr	r2, [r7, #24]
 800410c:	429a      	cmp	r2, r3
 800410e:	d302      	bcc.n	8004116 <UART_WaitOnFlagUntilTimeout+0x30>
 8004110:	69bb      	ldr	r3, [r7, #24]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d11b      	bne.n	800414e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004124:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	689a      	ldr	r2, [r3, #8]
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f022 0201 	bic.w	r2, r2, #1
 8004134:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2220      	movs	r2, #32
 800413a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2220      	movs	r2, #32
 8004140:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	2200      	movs	r2, #0
 8004146:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800414a:	2303      	movs	r3, #3
 800414c:	e043      	b.n	80041d6 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f003 0304 	and.w	r3, r3, #4
 8004158:	2b00      	cmp	r3, #0
 800415a:	d02c      	beq.n	80041b6 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	69db      	ldr	r3, [r3, #28]
 8004162:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004166:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800416a:	d124      	bne.n	80041b6 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004174:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	681a      	ldr	r2, [r3, #0]
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004184:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	689a      	ldr	r2, [r3, #8]
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f022 0201 	bic.w	r2, r2, #1
 8004194:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	2220      	movs	r2, #32
 800419a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	2220      	movs	r2, #32
 80041a0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	2220      	movs	r2, #32
 80041a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	2200      	movs	r2, #0
 80041ae:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80041b2:	2303      	movs	r3, #3
 80041b4:	e00f      	b.n	80041d6 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	69da      	ldr	r2, [r3, #28]
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	4013      	ands	r3, r2
 80041c0:	68ba      	ldr	r2, [r7, #8]
 80041c2:	429a      	cmp	r2, r3
 80041c4:	bf0c      	ite	eq
 80041c6:	2301      	moveq	r3, #1
 80041c8:	2300      	movne	r3, #0
 80041ca:	b2db      	uxtb	r3, r3
 80041cc:	461a      	mov	r2, r3
 80041ce:	79fb      	ldrb	r3, [r7, #7]
 80041d0:	429a      	cmp	r2, r3
 80041d2:	d091      	beq.n	80040f8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80041d4:	2300      	movs	r3, #0
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	3710      	adds	r7, #16
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}
	...

080041e0 <__libc_init_array>:
 80041e0:	b570      	push	{r4, r5, r6, lr}
 80041e2:	4d0d      	ldr	r5, [pc, #52]	; (8004218 <__libc_init_array+0x38>)
 80041e4:	4c0d      	ldr	r4, [pc, #52]	; (800421c <__libc_init_array+0x3c>)
 80041e6:	1b64      	subs	r4, r4, r5
 80041e8:	10a4      	asrs	r4, r4, #2
 80041ea:	2600      	movs	r6, #0
 80041ec:	42a6      	cmp	r6, r4
 80041ee:	d109      	bne.n	8004204 <__libc_init_array+0x24>
 80041f0:	4d0b      	ldr	r5, [pc, #44]	; (8004220 <__libc_init_array+0x40>)
 80041f2:	4c0c      	ldr	r4, [pc, #48]	; (8004224 <__libc_init_array+0x44>)
 80041f4:	f001 f856 	bl	80052a4 <_init>
 80041f8:	1b64      	subs	r4, r4, r5
 80041fa:	10a4      	asrs	r4, r4, #2
 80041fc:	2600      	movs	r6, #0
 80041fe:	42a6      	cmp	r6, r4
 8004200:	d105      	bne.n	800420e <__libc_init_array+0x2e>
 8004202:	bd70      	pop	{r4, r5, r6, pc}
 8004204:	f855 3b04 	ldr.w	r3, [r5], #4
 8004208:	4798      	blx	r3
 800420a:	3601      	adds	r6, #1
 800420c:	e7ee      	b.n	80041ec <__libc_init_array+0xc>
 800420e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004212:	4798      	blx	r3
 8004214:	3601      	adds	r6, #1
 8004216:	e7f2      	b.n	80041fe <__libc_init_array+0x1e>
 8004218:	080054b8 	.word	0x080054b8
 800421c:	080054b8 	.word	0x080054b8
 8004220:	080054b8 	.word	0x080054b8
 8004224:	080054bc 	.word	0x080054bc

08004228 <memset>:
 8004228:	4402      	add	r2, r0
 800422a:	4603      	mov	r3, r0
 800422c:	4293      	cmp	r3, r2
 800422e:	d100      	bne.n	8004232 <memset+0xa>
 8004230:	4770      	bx	lr
 8004232:	f803 1b01 	strb.w	r1, [r3], #1
 8004236:	e7f9      	b.n	800422c <memset+0x4>

08004238 <sin>:
 8004238:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800423a:	ec53 2b10 	vmov	r2, r3, d0
 800423e:	4826      	ldr	r0, [pc, #152]	; (80042d8 <sin+0xa0>)
 8004240:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004244:	4281      	cmp	r1, r0
 8004246:	dc07      	bgt.n	8004258 <sin+0x20>
 8004248:	ed9f 1b21 	vldr	d1, [pc, #132]	; 80042d0 <sin+0x98>
 800424c:	2000      	movs	r0, #0
 800424e:	f000 fe5b 	bl	8004f08 <__kernel_sin>
 8004252:	ec51 0b10 	vmov	r0, r1, d0
 8004256:	e007      	b.n	8004268 <sin+0x30>
 8004258:	4820      	ldr	r0, [pc, #128]	; (80042dc <sin+0xa4>)
 800425a:	4281      	cmp	r1, r0
 800425c:	dd09      	ble.n	8004272 <sin+0x3a>
 800425e:	ee10 0a10 	vmov	r0, s0
 8004262:	4619      	mov	r1, r3
 8004264:	f7fb ffd4 	bl	8000210 <__aeabi_dsub>
 8004268:	ec41 0b10 	vmov	d0, r0, r1
 800426c:	b005      	add	sp, #20
 800426e:	f85d fb04 	ldr.w	pc, [sp], #4
 8004272:	4668      	mov	r0, sp
 8004274:	f000 f834 	bl	80042e0 <__ieee754_rem_pio2>
 8004278:	f000 0003 	and.w	r0, r0, #3
 800427c:	2801      	cmp	r0, #1
 800427e:	d008      	beq.n	8004292 <sin+0x5a>
 8004280:	2802      	cmp	r0, #2
 8004282:	d00d      	beq.n	80042a0 <sin+0x68>
 8004284:	b9d0      	cbnz	r0, 80042bc <sin+0x84>
 8004286:	ed9d 1b02 	vldr	d1, [sp, #8]
 800428a:	ed9d 0b00 	vldr	d0, [sp]
 800428e:	2001      	movs	r0, #1
 8004290:	e7dd      	b.n	800424e <sin+0x16>
 8004292:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004296:	ed9d 0b00 	vldr	d0, [sp]
 800429a:	f000 fa2d 	bl	80046f8 <__kernel_cos>
 800429e:	e7d8      	b.n	8004252 <sin+0x1a>
 80042a0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80042a4:	ed9d 0b00 	vldr	d0, [sp]
 80042a8:	2001      	movs	r0, #1
 80042aa:	f000 fe2d 	bl	8004f08 <__kernel_sin>
 80042ae:	ec53 2b10 	vmov	r2, r3, d0
 80042b2:	ee10 0a10 	vmov	r0, s0
 80042b6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80042ba:	e7d5      	b.n	8004268 <sin+0x30>
 80042bc:	ed9d 1b02 	vldr	d1, [sp, #8]
 80042c0:	ed9d 0b00 	vldr	d0, [sp]
 80042c4:	f000 fa18 	bl	80046f8 <__kernel_cos>
 80042c8:	e7f1      	b.n	80042ae <sin+0x76>
 80042ca:	bf00      	nop
 80042cc:	f3af 8000 	nop.w
	...
 80042d8:	3fe921fb 	.word	0x3fe921fb
 80042dc:	7fefffff 	.word	0x7fefffff

080042e0 <__ieee754_rem_pio2>:
 80042e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042e4:	ed2d 8b02 	vpush	{d8}
 80042e8:	ec55 4b10 	vmov	r4, r5, d0
 80042ec:	4bca      	ldr	r3, [pc, #808]	; (8004618 <__ieee754_rem_pio2+0x338>)
 80042ee:	b08b      	sub	sp, #44	; 0x2c
 80042f0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 80042f4:	4598      	cmp	r8, r3
 80042f6:	4682      	mov	sl, r0
 80042f8:	9502      	str	r5, [sp, #8]
 80042fa:	dc08      	bgt.n	800430e <__ieee754_rem_pio2+0x2e>
 80042fc:	2200      	movs	r2, #0
 80042fe:	2300      	movs	r3, #0
 8004300:	ed80 0b00 	vstr	d0, [r0]
 8004304:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8004308:	f04f 0b00 	mov.w	fp, #0
 800430c:	e028      	b.n	8004360 <__ieee754_rem_pio2+0x80>
 800430e:	4bc3      	ldr	r3, [pc, #780]	; (800461c <__ieee754_rem_pio2+0x33c>)
 8004310:	4598      	cmp	r8, r3
 8004312:	dc78      	bgt.n	8004406 <__ieee754_rem_pio2+0x126>
 8004314:	9b02      	ldr	r3, [sp, #8]
 8004316:	4ec2      	ldr	r6, [pc, #776]	; (8004620 <__ieee754_rem_pio2+0x340>)
 8004318:	2b00      	cmp	r3, #0
 800431a:	ee10 0a10 	vmov	r0, s0
 800431e:	a3b0      	add	r3, pc, #704	; (adr r3, 80045e0 <__ieee754_rem_pio2+0x300>)
 8004320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004324:	4629      	mov	r1, r5
 8004326:	dd39      	ble.n	800439c <__ieee754_rem_pio2+0xbc>
 8004328:	f7fb ff72 	bl	8000210 <__aeabi_dsub>
 800432c:	45b0      	cmp	r8, r6
 800432e:	4604      	mov	r4, r0
 8004330:	460d      	mov	r5, r1
 8004332:	d01b      	beq.n	800436c <__ieee754_rem_pio2+0x8c>
 8004334:	a3ac      	add	r3, pc, #688	; (adr r3, 80045e8 <__ieee754_rem_pio2+0x308>)
 8004336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800433a:	f7fb ff69 	bl	8000210 <__aeabi_dsub>
 800433e:	4602      	mov	r2, r0
 8004340:	460b      	mov	r3, r1
 8004342:	e9ca 2300 	strd	r2, r3, [sl]
 8004346:	4620      	mov	r0, r4
 8004348:	4629      	mov	r1, r5
 800434a:	f7fb ff61 	bl	8000210 <__aeabi_dsub>
 800434e:	a3a6      	add	r3, pc, #664	; (adr r3, 80045e8 <__ieee754_rem_pio2+0x308>)
 8004350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004354:	f7fb ff5c 	bl	8000210 <__aeabi_dsub>
 8004358:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800435c:	f04f 0b01 	mov.w	fp, #1
 8004360:	4658      	mov	r0, fp
 8004362:	b00b      	add	sp, #44	; 0x2c
 8004364:	ecbd 8b02 	vpop	{d8}
 8004368:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800436c:	a3a0      	add	r3, pc, #640	; (adr r3, 80045f0 <__ieee754_rem_pio2+0x310>)
 800436e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004372:	f7fb ff4d 	bl	8000210 <__aeabi_dsub>
 8004376:	a3a0      	add	r3, pc, #640	; (adr r3, 80045f8 <__ieee754_rem_pio2+0x318>)
 8004378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800437c:	4604      	mov	r4, r0
 800437e:	460d      	mov	r5, r1
 8004380:	f7fb ff46 	bl	8000210 <__aeabi_dsub>
 8004384:	4602      	mov	r2, r0
 8004386:	460b      	mov	r3, r1
 8004388:	e9ca 2300 	strd	r2, r3, [sl]
 800438c:	4620      	mov	r0, r4
 800438e:	4629      	mov	r1, r5
 8004390:	f7fb ff3e 	bl	8000210 <__aeabi_dsub>
 8004394:	a398      	add	r3, pc, #608	; (adr r3, 80045f8 <__ieee754_rem_pio2+0x318>)
 8004396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800439a:	e7db      	b.n	8004354 <__ieee754_rem_pio2+0x74>
 800439c:	f7fb ff3a 	bl	8000214 <__adddf3>
 80043a0:	45b0      	cmp	r8, r6
 80043a2:	4604      	mov	r4, r0
 80043a4:	460d      	mov	r5, r1
 80043a6:	d016      	beq.n	80043d6 <__ieee754_rem_pio2+0xf6>
 80043a8:	a38f      	add	r3, pc, #572	; (adr r3, 80045e8 <__ieee754_rem_pio2+0x308>)
 80043aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043ae:	f7fb ff31 	bl	8000214 <__adddf3>
 80043b2:	4602      	mov	r2, r0
 80043b4:	460b      	mov	r3, r1
 80043b6:	e9ca 2300 	strd	r2, r3, [sl]
 80043ba:	4620      	mov	r0, r4
 80043bc:	4629      	mov	r1, r5
 80043be:	f7fb ff27 	bl	8000210 <__aeabi_dsub>
 80043c2:	a389      	add	r3, pc, #548	; (adr r3, 80045e8 <__ieee754_rem_pio2+0x308>)
 80043c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043c8:	f7fb ff24 	bl	8000214 <__adddf3>
 80043cc:	f04f 3bff 	mov.w	fp, #4294967295
 80043d0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80043d4:	e7c4      	b.n	8004360 <__ieee754_rem_pio2+0x80>
 80043d6:	a386      	add	r3, pc, #536	; (adr r3, 80045f0 <__ieee754_rem_pio2+0x310>)
 80043d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043dc:	f7fb ff1a 	bl	8000214 <__adddf3>
 80043e0:	a385      	add	r3, pc, #532	; (adr r3, 80045f8 <__ieee754_rem_pio2+0x318>)
 80043e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043e6:	4604      	mov	r4, r0
 80043e8:	460d      	mov	r5, r1
 80043ea:	f7fb ff13 	bl	8000214 <__adddf3>
 80043ee:	4602      	mov	r2, r0
 80043f0:	460b      	mov	r3, r1
 80043f2:	e9ca 2300 	strd	r2, r3, [sl]
 80043f6:	4620      	mov	r0, r4
 80043f8:	4629      	mov	r1, r5
 80043fa:	f7fb ff09 	bl	8000210 <__aeabi_dsub>
 80043fe:	a37e      	add	r3, pc, #504	; (adr r3, 80045f8 <__ieee754_rem_pio2+0x318>)
 8004400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004404:	e7e0      	b.n	80043c8 <__ieee754_rem_pio2+0xe8>
 8004406:	4b87      	ldr	r3, [pc, #540]	; (8004624 <__ieee754_rem_pio2+0x344>)
 8004408:	4598      	cmp	r8, r3
 800440a:	f300 80d9 	bgt.w	80045c0 <__ieee754_rem_pio2+0x2e0>
 800440e:	f000 fe39 	bl	8005084 <fabs>
 8004412:	ec55 4b10 	vmov	r4, r5, d0
 8004416:	ee10 0a10 	vmov	r0, s0
 800441a:	a379      	add	r3, pc, #484	; (adr r3, 8004600 <__ieee754_rem_pio2+0x320>)
 800441c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004420:	4629      	mov	r1, r5
 8004422:	f7fc f8ad 	bl	8000580 <__aeabi_dmul>
 8004426:	4b80      	ldr	r3, [pc, #512]	; (8004628 <__ieee754_rem_pio2+0x348>)
 8004428:	2200      	movs	r2, #0
 800442a:	f7fb fef3 	bl	8000214 <__adddf3>
 800442e:	f7fc fb41 	bl	8000ab4 <__aeabi_d2iz>
 8004432:	4683      	mov	fp, r0
 8004434:	f7fc f83a 	bl	80004ac <__aeabi_i2d>
 8004438:	4602      	mov	r2, r0
 800443a:	460b      	mov	r3, r1
 800443c:	ec43 2b18 	vmov	d8, r2, r3
 8004440:	a367      	add	r3, pc, #412	; (adr r3, 80045e0 <__ieee754_rem_pio2+0x300>)
 8004442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004446:	f7fc f89b 	bl	8000580 <__aeabi_dmul>
 800444a:	4602      	mov	r2, r0
 800444c:	460b      	mov	r3, r1
 800444e:	4620      	mov	r0, r4
 8004450:	4629      	mov	r1, r5
 8004452:	f7fb fedd 	bl	8000210 <__aeabi_dsub>
 8004456:	a364      	add	r3, pc, #400	; (adr r3, 80045e8 <__ieee754_rem_pio2+0x308>)
 8004458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800445c:	4606      	mov	r6, r0
 800445e:	460f      	mov	r7, r1
 8004460:	ec51 0b18 	vmov	r0, r1, d8
 8004464:	f7fc f88c 	bl	8000580 <__aeabi_dmul>
 8004468:	f1bb 0f1f 	cmp.w	fp, #31
 800446c:	4604      	mov	r4, r0
 800446e:	460d      	mov	r5, r1
 8004470:	dc0d      	bgt.n	800448e <__ieee754_rem_pio2+0x1ae>
 8004472:	4b6e      	ldr	r3, [pc, #440]	; (800462c <__ieee754_rem_pio2+0x34c>)
 8004474:	f10b 32ff 	add.w	r2, fp, #4294967295
 8004478:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800447c:	4543      	cmp	r3, r8
 800447e:	d006      	beq.n	800448e <__ieee754_rem_pio2+0x1ae>
 8004480:	4622      	mov	r2, r4
 8004482:	462b      	mov	r3, r5
 8004484:	4630      	mov	r0, r6
 8004486:	4639      	mov	r1, r7
 8004488:	f7fb fec2 	bl	8000210 <__aeabi_dsub>
 800448c:	e00f      	b.n	80044ae <__ieee754_rem_pio2+0x1ce>
 800448e:	462b      	mov	r3, r5
 8004490:	4622      	mov	r2, r4
 8004492:	4630      	mov	r0, r6
 8004494:	4639      	mov	r1, r7
 8004496:	f7fb febb 	bl	8000210 <__aeabi_dsub>
 800449a:	ea4f 5328 	mov.w	r3, r8, asr #20
 800449e:	9303      	str	r3, [sp, #12]
 80044a0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80044a4:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 80044a8:	f1b8 0f10 	cmp.w	r8, #16
 80044ac:	dc02      	bgt.n	80044b4 <__ieee754_rem_pio2+0x1d4>
 80044ae:	e9ca 0100 	strd	r0, r1, [sl]
 80044b2:	e039      	b.n	8004528 <__ieee754_rem_pio2+0x248>
 80044b4:	a34e      	add	r3, pc, #312	; (adr r3, 80045f0 <__ieee754_rem_pio2+0x310>)
 80044b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044ba:	ec51 0b18 	vmov	r0, r1, d8
 80044be:	f7fc f85f 	bl	8000580 <__aeabi_dmul>
 80044c2:	4604      	mov	r4, r0
 80044c4:	460d      	mov	r5, r1
 80044c6:	4602      	mov	r2, r0
 80044c8:	460b      	mov	r3, r1
 80044ca:	4630      	mov	r0, r6
 80044cc:	4639      	mov	r1, r7
 80044ce:	f7fb fe9f 	bl	8000210 <__aeabi_dsub>
 80044d2:	4602      	mov	r2, r0
 80044d4:	460b      	mov	r3, r1
 80044d6:	4680      	mov	r8, r0
 80044d8:	4689      	mov	r9, r1
 80044da:	4630      	mov	r0, r6
 80044dc:	4639      	mov	r1, r7
 80044de:	f7fb fe97 	bl	8000210 <__aeabi_dsub>
 80044e2:	4622      	mov	r2, r4
 80044e4:	462b      	mov	r3, r5
 80044e6:	f7fb fe93 	bl	8000210 <__aeabi_dsub>
 80044ea:	a343      	add	r3, pc, #268	; (adr r3, 80045f8 <__ieee754_rem_pio2+0x318>)
 80044ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044f0:	4604      	mov	r4, r0
 80044f2:	460d      	mov	r5, r1
 80044f4:	ec51 0b18 	vmov	r0, r1, d8
 80044f8:	f7fc f842 	bl	8000580 <__aeabi_dmul>
 80044fc:	4622      	mov	r2, r4
 80044fe:	462b      	mov	r3, r5
 8004500:	f7fb fe86 	bl	8000210 <__aeabi_dsub>
 8004504:	4602      	mov	r2, r0
 8004506:	460b      	mov	r3, r1
 8004508:	4604      	mov	r4, r0
 800450a:	460d      	mov	r5, r1
 800450c:	4640      	mov	r0, r8
 800450e:	4649      	mov	r1, r9
 8004510:	f7fb fe7e 	bl	8000210 <__aeabi_dsub>
 8004514:	9a03      	ldr	r2, [sp, #12]
 8004516:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800451a:	1ad3      	subs	r3, r2, r3
 800451c:	2b31      	cmp	r3, #49	; 0x31
 800451e:	dc24      	bgt.n	800456a <__ieee754_rem_pio2+0x28a>
 8004520:	e9ca 0100 	strd	r0, r1, [sl]
 8004524:	4646      	mov	r6, r8
 8004526:	464f      	mov	r7, r9
 8004528:	e9da 8900 	ldrd	r8, r9, [sl]
 800452c:	4630      	mov	r0, r6
 800452e:	4642      	mov	r2, r8
 8004530:	464b      	mov	r3, r9
 8004532:	4639      	mov	r1, r7
 8004534:	f7fb fe6c 	bl	8000210 <__aeabi_dsub>
 8004538:	462b      	mov	r3, r5
 800453a:	4622      	mov	r2, r4
 800453c:	f7fb fe68 	bl	8000210 <__aeabi_dsub>
 8004540:	9b02      	ldr	r3, [sp, #8]
 8004542:	2b00      	cmp	r3, #0
 8004544:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8004548:	f6bf af0a 	bge.w	8004360 <__ieee754_rem_pio2+0x80>
 800454c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8004550:	f8ca 3004 	str.w	r3, [sl, #4]
 8004554:	f8ca 8000 	str.w	r8, [sl]
 8004558:	f8ca 0008 	str.w	r0, [sl, #8]
 800455c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004560:	f8ca 300c 	str.w	r3, [sl, #12]
 8004564:	f1cb 0b00 	rsb	fp, fp, #0
 8004568:	e6fa      	b.n	8004360 <__ieee754_rem_pio2+0x80>
 800456a:	a327      	add	r3, pc, #156	; (adr r3, 8004608 <__ieee754_rem_pio2+0x328>)
 800456c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004570:	ec51 0b18 	vmov	r0, r1, d8
 8004574:	f7fc f804 	bl	8000580 <__aeabi_dmul>
 8004578:	4604      	mov	r4, r0
 800457a:	460d      	mov	r5, r1
 800457c:	4602      	mov	r2, r0
 800457e:	460b      	mov	r3, r1
 8004580:	4640      	mov	r0, r8
 8004582:	4649      	mov	r1, r9
 8004584:	f7fb fe44 	bl	8000210 <__aeabi_dsub>
 8004588:	4602      	mov	r2, r0
 800458a:	460b      	mov	r3, r1
 800458c:	4606      	mov	r6, r0
 800458e:	460f      	mov	r7, r1
 8004590:	4640      	mov	r0, r8
 8004592:	4649      	mov	r1, r9
 8004594:	f7fb fe3c 	bl	8000210 <__aeabi_dsub>
 8004598:	4622      	mov	r2, r4
 800459a:	462b      	mov	r3, r5
 800459c:	f7fb fe38 	bl	8000210 <__aeabi_dsub>
 80045a0:	a31b      	add	r3, pc, #108	; (adr r3, 8004610 <__ieee754_rem_pio2+0x330>)
 80045a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045a6:	4604      	mov	r4, r0
 80045a8:	460d      	mov	r5, r1
 80045aa:	ec51 0b18 	vmov	r0, r1, d8
 80045ae:	f7fb ffe7 	bl	8000580 <__aeabi_dmul>
 80045b2:	4622      	mov	r2, r4
 80045b4:	462b      	mov	r3, r5
 80045b6:	f7fb fe2b 	bl	8000210 <__aeabi_dsub>
 80045ba:	4604      	mov	r4, r0
 80045bc:	460d      	mov	r5, r1
 80045be:	e75f      	b.n	8004480 <__ieee754_rem_pio2+0x1a0>
 80045c0:	4b1b      	ldr	r3, [pc, #108]	; (8004630 <__ieee754_rem_pio2+0x350>)
 80045c2:	4598      	cmp	r8, r3
 80045c4:	dd36      	ble.n	8004634 <__ieee754_rem_pio2+0x354>
 80045c6:	ee10 2a10 	vmov	r2, s0
 80045ca:	462b      	mov	r3, r5
 80045cc:	4620      	mov	r0, r4
 80045ce:	4629      	mov	r1, r5
 80045d0:	f7fb fe1e 	bl	8000210 <__aeabi_dsub>
 80045d4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80045d8:	e9ca 0100 	strd	r0, r1, [sl]
 80045dc:	e694      	b.n	8004308 <__ieee754_rem_pio2+0x28>
 80045de:	bf00      	nop
 80045e0:	54400000 	.word	0x54400000
 80045e4:	3ff921fb 	.word	0x3ff921fb
 80045e8:	1a626331 	.word	0x1a626331
 80045ec:	3dd0b461 	.word	0x3dd0b461
 80045f0:	1a600000 	.word	0x1a600000
 80045f4:	3dd0b461 	.word	0x3dd0b461
 80045f8:	2e037073 	.word	0x2e037073
 80045fc:	3ba3198a 	.word	0x3ba3198a
 8004600:	6dc9c883 	.word	0x6dc9c883
 8004604:	3fe45f30 	.word	0x3fe45f30
 8004608:	2e000000 	.word	0x2e000000
 800460c:	3ba3198a 	.word	0x3ba3198a
 8004610:	252049c1 	.word	0x252049c1
 8004614:	397b839a 	.word	0x397b839a
 8004618:	3fe921fb 	.word	0x3fe921fb
 800461c:	4002d97b 	.word	0x4002d97b
 8004620:	3ff921fb 	.word	0x3ff921fb
 8004624:	413921fb 	.word	0x413921fb
 8004628:	3fe00000 	.word	0x3fe00000
 800462c:	080052d8 	.word	0x080052d8
 8004630:	7fefffff 	.word	0x7fefffff
 8004634:	ea4f 5428 	mov.w	r4, r8, asr #20
 8004638:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800463c:	ee10 0a10 	vmov	r0, s0
 8004640:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8004644:	ee10 6a10 	vmov	r6, s0
 8004648:	460f      	mov	r7, r1
 800464a:	f7fc fa33 	bl	8000ab4 <__aeabi_d2iz>
 800464e:	f7fb ff2d 	bl	80004ac <__aeabi_i2d>
 8004652:	4602      	mov	r2, r0
 8004654:	460b      	mov	r3, r1
 8004656:	4630      	mov	r0, r6
 8004658:	4639      	mov	r1, r7
 800465a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800465e:	f7fb fdd7 	bl	8000210 <__aeabi_dsub>
 8004662:	4b22      	ldr	r3, [pc, #136]	; (80046ec <__ieee754_rem_pio2+0x40c>)
 8004664:	2200      	movs	r2, #0
 8004666:	f7fb ff8b 	bl	8000580 <__aeabi_dmul>
 800466a:	460f      	mov	r7, r1
 800466c:	4606      	mov	r6, r0
 800466e:	f7fc fa21 	bl	8000ab4 <__aeabi_d2iz>
 8004672:	f7fb ff1b 	bl	80004ac <__aeabi_i2d>
 8004676:	4602      	mov	r2, r0
 8004678:	460b      	mov	r3, r1
 800467a:	4630      	mov	r0, r6
 800467c:	4639      	mov	r1, r7
 800467e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004682:	f7fb fdc5 	bl	8000210 <__aeabi_dsub>
 8004686:	4b19      	ldr	r3, [pc, #100]	; (80046ec <__ieee754_rem_pio2+0x40c>)
 8004688:	2200      	movs	r2, #0
 800468a:	f7fb ff79 	bl	8000580 <__aeabi_dmul>
 800468e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8004692:	ad04      	add	r5, sp, #16
 8004694:	f04f 0803 	mov.w	r8, #3
 8004698:	46a9      	mov	r9, r5
 800469a:	2600      	movs	r6, #0
 800469c:	2700      	movs	r7, #0
 800469e:	4632      	mov	r2, r6
 80046a0:	463b      	mov	r3, r7
 80046a2:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 80046a6:	46c3      	mov	fp, r8
 80046a8:	3d08      	subs	r5, #8
 80046aa:	f108 38ff 	add.w	r8, r8, #4294967295
 80046ae:	f7fc f9cf 	bl	8000a50 <__aeabi_dcmpeq>
 80046b2:	2800      	cmp	r0, #0
 80046b4:	d1f3      	bne.n	800469e <__ieee754_rem_pio2+0x3be>
 80046b6:	4b0e      	ldr	r3, [pc, #56]	; (80046f0 <__ieee754_rem_pio2+0x410>)
 80046b8:	9301      	str	r3, [sp, #4]
 80046ba:	2302      	movs	r3, #2
 80046bc:	9300      	str	r3, [sp, #0]
 80046be:	4622      	mov	r2, r4
 80046c0:	465b      	mov	r3, fp
 80046c2:	4651      	mov	r1, sl
 80046c4:	4648      	mov	r0, r9
 80046c6:	f000 f8df 	bl	8004888 <__kernel_rem_pio2>
 80046ca:	9b02      	ldr	r3, [sp, #8]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	4683      	mov	fp, r0
 80046d0:	f6bf ae46 	bge.w	8004360 <__ieee754_rem_pio2+0x80>
 80046d4:	f8da 3004 	ldr.w	r3, [sl, #4]
 80046d8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80046dc:	f8ca 3004 	str.w	r3, [sl, #4]
 80046e0:	f8da 300c 	ldr.w	r3, [sl, #12]
 80046e4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80046e8:	e73a      	b.n	8004560 <__ieee754_rem_pio2+0x280>
 80046ea:	bf00      	nop
 80046ec:	41700000 	.word	0x41700000
 80046f0:	08005358 	.word	0x08005358
 80046f4:	00000000 	.word	0x00000000

080046f8 <__kernel_cos>:
 80046f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046fc:	ec57 6b10 	vmov	r6, r7, d0
 8004700:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8004704:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8004708:	ed8d 1b00 	vstr	d1, [sp]
 800470c:	da07      	bge.n	800471e <__kernel_cos+0x26>
 800470e:	ee10 0a10 	vmov	r0, s0
 8004712:	4639      	mov	r1, r7
 8004714:	f7fc f9ce 	bl	8000ab4 <__aeabi_d2iz>
 8004718:	2800      	cmp	r0, #0
 800471a:	f000 8088 	beq.w	800482e <__kernel_cos+0x136>
 800471e:	4632      	mov	r2, r6
 8004720:	463b      	mov	r3, r7
 8004722:	4630      	mov	r0, r6
 8004724:	4639      	mov	r1, r7
 8004726:	f7fb ff2b 	bl	8000580 <__aeabi_dmul>
 800472a:	4b51      	ldr	r3, [pc, #324]	; (8004870 <__kernel_cos+0x178>)
 800472c:	2200      	movs	r2, #0
 800472e:	4604      	mov	r4, r0
 8004730:	460d      	mov	r5, r1
 8004732:	f7fb ff25 	bl	8000580 <__aeabi_dmul>
 8004736:	a340      	add	r3, pc, #256	; (adr r3, 8004838 <__kernel_cos+0x140>)
 8004738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800473c:	4682      	mov	sl, r0
 800473e:	468b      	mov	fp, r1
 8004740:	4620      	mov	r0, r4
 8004742:	4629      	mov	r1, r5
 8004744:	f7fb ff1c 	bl	8000580 <__aeabi_dmul>
 8004748:	a33d      	add	r3, pc, #244	; (adr r3, 8004840 <__kernel_cos+0x148>)
 800474a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800474e:	f7fb fd61 	bl	8000214 <__adddf3>
 8004752:	4622      	mov	r2, r4
 8004754:	462b      	mov	r3, r5
 8004756:	f7fb ff13 	bl	8000580 <__aeabi_dmul>
 800475a:	a33b      	add	r3, pc, #236	; (adr r3, 8004848 <__kernel_cos+0x150>)
 800475c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004760:	f7fb fd56 	bl	8000210 <__aeabi_dsub>
 8004764:	4622      	mov	r2, r4
 8004766:	462b      	mov	r3, r5
 8004768:	f7fb ff0a 	bl	8000580 <__aeabi_dmul>
 800476c:	a338      	add	r3, pc, #224	; (adr r3, 8004850 <__kernel_cos+0x158>)
 800476e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004772:	f7fb fd4f 	bl	8000214 <__adddf3>
 8004776:	4622      	mov	r2, r4
 8004778:	462b      	mov	r3, r5
 800477a:	f7fb ff01 	bl	8000580 <__aeabi_dmul>
 800477e:	a336      	add	r3, pc, #216	; (adr r3, 8004858 <__kernel_cos+0x160>)
 8004780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004784:	f7fb fd44 	bl	8000210 <__aeabi_dsub>
 8004788:	4622      	mov	r2, r4
 800478a:	462b      	mov	r3, r5
 800478c:	f7fb fef8 	bl	8000580 <__aeabi_dmul>
 8004790:	a333      	add	r3, pc, #204	; (adr r3, 8004860 <__kernel_cos+0x168>)
 8004792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004796:	f7fb fd3d 	bl	8000214 <__adddf3>
 800479a:	4622      	mov	r2, r4
 800479c:	462b      	mov	r3, r5
 800479e:	f7fb feef 	bl	8000580 <__aeabi_dmul>
 80047a2:	4622      	mov	r2, r4
 80047a4:	462b      	mov	r3, r5
 80047a6:	f7fb feeb 	bl	8000580 <__aeabi_dmul>
 80047aa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80047ae:	4604      	mov	r4, r0
 80047b0:	460d      	mov	r5, r1
 80047b2:	4630      	mov	r0, r6
 80047b4:	4639      	mov	r1, r7
 80047b6:	f7fb fee3 	bl	8000580 <__aeabi_dmul>
 80047ba:	460b      	mov	r3, r1
 80047bc:	4602      	mov	r2, r0
 80047be:	4629      	mov	r1, r5
 80047c0:	4620      	mov	r0, r4
 80047c2:	f7fb fd25 	bl	8000210 <__aeabi_dsub>
 80047c6:	4b2b      	ldr	r3, [pc, #172]	; (8004874 <__kernel_cos+0x17c>)
 80047c8:	4598      	cmp	r8, r3
 80047ca:	4606      	mov	r6, r0
 80047cc:	460f      	mov	r7, r1
 80047ce:	dc10      	bgt.n	80047f2 <__kernel_cos+0xfa>
 80047d0:	4602      	mov	r2, r0
 80047d2:	460b      	mov	r3, r1
 80047d4:	4650      	mov	r0, sl
 80047d6:	4659      	mov	r1, fp
 80047d8:	f7fb fd1a 	bl	8000210 <__aeabi_dsub>
 80047dc:	460b      	mov	r3, r1
 80047de:	4926      	ldr	r1, [pc, #152]	; (8004878 <__kernel_cos+0x180>)
 80047e0:	4602      	mov	r2, r0
 80047e2:	2000      	movs	r0, #0
 80047e4:	f7fb fd14 	bl	8000210 <__aeabi_dsub>
 80047e8:	ec41 0b10 	vmov	d0, r0, r1
 80047ec:	b003      	add	sp, #12
 80047ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047f2:	4b22      	ldr	r3, [pc, #136]	; (800487c <__kernel_cos+0x184>)
 80047f4:	4920      	ldr	r1, [pc, #128]	; (8004878 <__kernel_cos+0x180>)
 80047f6:	4598      	cmp	r8, r3
 80047f8:	bfcc      	ite	gt
 80047fa:	4d21      	ldrgt	r5, [pc, #132]	; (8004880 <__kernel_cos+0x188>)
 80047fc:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8004800:	2400      	movs	r4, #0
 8004802:	4622      	mov	r2, r4
 8004804:	462b      	mov	r3, r5
 8004806:	2000      	movs	r0, #0
 8004808:	f7fb fd02 	bl	8000210 <__aeabi_dsub>
 800480c:	4622      	mov	r2, r4
 800480e:	4680      	mov	r8, r0
 8004810:	4689      	mov	r9, r1
 8004812:	462b      	mov	r3, r5
 8004814:	4650      	mov	r0, sl
 8004816:	4659      	mov	r1, fp
 8004818:	f7fb fcfa 	bl	8000210 <__aeabi_dsub>
 800481c:	4632      	mov	r2, r6
 800481e:	463b      	mov	r3, r7
 8004820:	f7fb fcf6 	bl	8000210 <__aeabi_dsub>
 8004824:	4602      	mov	r2, r0
 8004826:	460b      	mov	r3, r1
 8004828:	4640      	mov	r0, r8
 800482a:	4649      	mov	r1, r9
 800482c:	e7da      	b.n	80047e4 <__kernel_cos+0xec>
 800482e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8004868 <__kernel_cos+0x170>
 8004832:	e7db      	b.n	80047ec <__kernel_cos+0xf4>
 8004834:	f3af 8000 	nop.w
 8004838:	be8838d4 	.word	0xbe8838d4
 800483c:	bda8fae9 	.word	0xbda8fae9
 8004840:	bdb4b1c4 	.word	0xbdb4b1c4
 8004844:	3e21ee9e 	.word	0x3e21ee9e
 8004848:	809c52ad 	.word	0x809c52ad
 800484c:	3e927e4f 	.word	0x3e927e4f
 8004850:	19cb1590 	.word	0x19cb1590
 8004854:	3efa01a0 	.word	0x3efa01a0
 8004858:	16c15177 	.word	0x16c15177
 800485c:	3f56c16c 	.word	0x3f56c16c
 8004860:	5555554c 	.word	0x5555554c
 8004864:	3fa55555 	.word	0x3fa55555
 8004868:	00000000 	.word	0x00000000
 800486c:	3ff00000 	.word	0x3ff00000
 8004870:	3fe00000 	.word	0x3fe00000
 8004874:	3fd33332 	.word	0x3fd33332
 8004878:	3ff00000 	.word	0x3ff00000
 800487c:	3fe90000 	.word	0x3fe90000
 8004880:	3fd20000 	.word	0x3fd20000
 8004884:	00000000 	.word	0x00000000

08004888 <__kernel_rem_pio2>:
 8004888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800488c:	ed2d 8b02 	vpush	{d8}
 8004890:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8004894:	f112 0f14 	cmn.w	r2, #20
 8004898:	9308      	str	r3, [sp, #32]
 800489a:	9101      	str	r1, [sp, #4]
 800489c:	4bc6      	ldr	r3, [pc, #792]	; (8004bb8 <__kernel_rem_pio2+0x330>)
 800489e:	99a4      	ldr	r1, [sp, #656]	; 0x290
 80048a0:	9009      	str	r0, [sp, #36]	; 0x24
 80048a2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80048a6:	9304      	str	r3, [sp, #16]
 80048a8:	9b08      	ldr	r3, [sp, #32]
 80048aa:	f103 33ff 	add.w	r3, r3, #4294967295
 80048ae:	bfa8      	it	ge
 80048b0:	1ed4      	subge	r4, r2, #3
 80048b2:	9306      	str	r3, [sp, #24]
 80048b4:	bfb2      	itee	lt
 80048b6:	2400      	movlt	r4, #0
 80048b8:	2318      	movge	r3, #24
 80048ba:	fb94 f4f3 	sdivge	r4, r4, r3
 80048be:	f06f 0317 	mvn.w	r3, #23
 80048c2:	fb04 3303 	mla	r3, r4, r3, r3
 80048c6:	eb03 0a02 	add.w	sl, r3, r2
 80048ca:	9b04      	ldr	r3, [sp, #16]
 80048cc:	9a06      	ldr	r2, [sp, #24]
 80048ce:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8004ba8 <__kernel_rem_pio2+0x320>
 80048d2:	eb03 0802 	add.w	r8, r3, r2
 80048d6:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80048d8:	1aa7      	subs	r7, r4, r2
 80048da:	ae20      	add	r6, sp, #128	; 0x80
 80048dc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80048e0:	2500      	movs	r5, #0
 80048e2:	4545      	cmp	r5, r8
 80048e4:	dd18      	ble.n	8004918 <__kernel_rem_pio2+0x90>
 80048e6:	9b08      	ldr	r3, [sp, #32]
 80048e8:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80048ec:	aa20      	add	r2, sp, #128	; 0x80
 80048ee:	ed9f 8bae 	vldr	d8, [pc, #696]	; 8004ba8 <__kernel_rem_pio2+0x320>
 80048f2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80048f6:	f1c3 0301 	rsb	r3, r3, #1
 80048fa:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 80048fe:	9307      	str	r3, [sp, #28]
 8004900:	9b07      	ldr	r3, [sp, #28]
 8004902:	9a04      	ldr	r2, [sp, #16]
 8004904:	4443      	add	r3, r8
 8004906:	429a      	cmp	r2, r3
 8004908:	db2f      	blt.n	800496a <__kernel_rem_pio2+0xe2>
 800490a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800490e:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8004912:	462f      	mov	r7, r5
 8004914:	2600      	movs	r6, #0
 8004916:	e01b      	b.n	8004950 <__kernel_rem_pio2+0xc8>
 8004918:	42ef      	cmn	r7, r5
 800491a:	d407      	bmi.n	800492c <__kernel_rem_pio2+0xa4>
 800491c:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8004920:	f7fb fdc4 	bl	80004ac <__aeabi_i2d>
 8004924:	e8e6 0102 	strd	r0, r1, [r6], #8
 8004928:	3501      	adds	r5, #1
 800492a:	e7da      	b.n	80048e2 <__kernel_rem_pio2+0x5a>
 800492c:	ec51 0b18 	vmov	r0, r1, d8
 8004930:	e7f8      	b.n	8004924 <__kernel_rem_pio2+0x9c>
 8004932:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004936:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800493a:	f7fb fe21 	bl	8000580 <__aeabi_dmul>
 800493e:	4602      	mov	r2, r0
 8004940:	460b      	mov	r3, r1
 8004942:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004946:	f7fb fc65 	bl	8000214 <__adddf3>
 800494a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800494e:	3601      	adds	r6, #1
 8004950:	9b06      	ldr	r3, [sp, #24]
 8004952:	429e      	cmp	r6, r3
 8004954:	f1a7 0708 	sub.w	r7, r7, #8
 8004958:	ddeb      	ble.n	8004932 <__kernel_rem_pio2+0xaa>
 800495a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800495e:	3508      	adds	r5, #8
 8004960:	ecab 7b02 	vstmia	fp!, {d7}
 8004964:	f108 0801 	add.w	r8, r8, #1
 8004968:	e7ca      	b.n	8004900 <__kernel_rem_pio2+0x78>
 800496a:	9b04      	ldr	r3, [sp, #16]
 800496c:	aa0c      	add	r2, sp, #48	; 0x30
 800496e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004972:	930b      	str	r3, [sp, #44]	; 0x2c
 8004974:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8004976:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800497a:	9c04      	ldr	r4, [sp, #16]
 800497c:	930a      	str	r3, [sp, #40]	; 0x28
 800497e:	ab98      	add	r3, sp, #608	; 0x260
 8004980:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004984:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8004988:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 800498c:	f8cd b008 	str.w	fp, [sp, #8]
 8004990:	4625      	mov	r5, r4
 8004992:	2d00      	cmp	r5, #0
 8004994:	dc78      	bgt.n	8004a88 <__kernel_rem_pio2+0x200>
 8004996:	ec47 6b10 	vmov	d0, r6, r7
 800499a:	4650      	mov	r0, sl
 800499c:	f000 fbfc 	bl	8005198 <scalbn>
 80049a0:	ec57 6b10 	vmov	r6, r7, d0
 80049a4:	2200      	movs	r2, #0
 80049a6:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80049aa:	ee10 0a10 	vmov	r0, s0
 80049ae:	4639      	mov	r1, r7
 80049b0:	f7fb fde6 	bl	8000580 <__aeabi_dmul>
 80049b4:	ec41 0b10 	vmov	d0, r0, r1
 80049b8:	f000 fb6e 	bl	8005098 <floor>
 80049bc:	4b7f      	ldr	r3, [pc, #508]	; (8004bbc <__kernel_rem_pio2+0x334>)
 80049be:	ec51 0b10 	vmov	r0, r1, d0
 80049c2:	2200      	movs	r2, #0
 80049c4:	f7fb fddc 	bl	8000580 <__aeabi_dmul>
 80049c8:	4602      	mov	r2, r0
 80049ca:	460b      	mov	r3, r1
 80049cc:	4630      	mov	r0, r6
 80049ce:	4639      	mov	r1, r7
 80049d0:	f7fb fc1e 	bl	8000210 <__aeabi_dsub>
 80049d4:	460f      	mov	r7, r1
 80049d6:	4606      	mov	r6, r0
 80049d8:	f7fc f86c 	bl	8000ab4 <__aeabi_d2iz>
 80049dc:	9007      	str	r0, [sp, #28]
 80049de:	f7fb fd65 	bl	80004ac <__aeabi_i2d>
 80049e2:	4602      	mov	r2, r0
 80049e4:	460b      	mov	r3, r1
 80049e6:	4630      	mov	r0, r6
 80049e8:	4639      	mov	r1, r7
 80049ea:	f7fb fc11 	bl	8000210 <__aeabi_dsub>
 80049ee:	f1ba 0f00 	cmp.w	sl, #0
 80049f2:	4606      	mov	r6, r0
 80049f4:	460f      	mov	r7, r1
 80049f6:	dd70      	ble.n	8004ada <__kernel_rem_pio2+0x252>
 80049f8:	1e62      	subs	r2, r4, #1
 80049fa:	ab0c      	add	r3, sp, #48	; 0x30
 80049fc:	9d07      	ldr	r5, [sp, #28]
 80049fe:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8004a02:	f1ca 0118 	rsb	r1, sl, #24
 8004a06:	fa40 f301 	asr.w	r3, r0, r1
 8004a0a:	441d      	add	r5, r3
 8004a0c:	408b      	lsls	r3, r1
 8004a0e:	1ac0      	subs	r0, r0, r3
 8004a10:	ab0c      	add	r3, sp, #48	; 0x30
 8004a12:	9507      	str	r5, [sp, #28]
 8004a14:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8004a18:	f1ca 0317 	rsb	r3, sl, #23
 8004a1c:	fa40 f303 	asr.w	r3, r0, r3
 8004a20:	9302      	str	r3, [sp, #8]
 8004a22:	9b02      	ldr	r3, [sp, #8]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	dd66      	ble.n	8004af6 <__kernel_rem_pio2+0x26e>
 8004a28:	9b07      	ldr	r3, [sp, #28]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	3301      	adds	r3, #1
 8004a2e:	9307      	str	r3, [sp, #28]
 8004a30:	4615      	mov	r5, r2
 8004a32:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8004a36:	4294      	cmp	r4, r2
 8004a38:	f300 8099 	bgt.w	8004b6e <__kernel_rem_pio2+0x2e6>
 8004a3c:	f1ba 0f00 	cmp.w	sl, #0
 8004a40:	dd07      	ble.n	8004a52 <__kernel_rem_pio2+0x1ca>
 8004a42:	f1ba 0f01 	cmp.w	sl, #1
 8004a46:	f000 80a5 	beq.w	8004b94 <__kernel_rem_pio2+0x30c>
 8004a4a:	f1ba 0f02 	cmp.w	sl, #2
 8004a4e:	f000 80c1 	beq.w	8004bd4 <__kernel_rem_pio2+0x34c>
 8004a52:	9b02      	ldr	r3, [sp, #8]
 8004a54:	2b02      	cmp	r3, #2
 8004a56:	d14e      	bne.n	8004af6 <__kernel_rem_pio2+0x26e>
 8004a58:	4632      	mov	r2, r6
 8004a5a:	463b      	mov	r3, r7
 8004a5c:	4958      	ldr	r1, [pc, #352]	; (8004bc0 <__kernel_rem_pio2+0x338>)
 8004a5e:	2000      	movs	r0, #0
 8004a60:	f7fb fbd6 	bl	8000210 <__aeabi_dsub>
 8004a64:	4606      	mov	r6, r0
 8004a66:	460f      	mov	r7, r1
 8004a68:	2d00      	cmp	r5, #0
 8004a6a:	d044      	beq.n	8004af6 <__kernel_rem_pio2+0x26e>
 8004a6c:	4650      	mov	r0, sl
 8004a6e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8004bb0 <__kernel_rem_pio2+0x328>
 8004a72:	f000 fb91 	bl	8005198 <scalbn>
 8004a76:	4630      	mov	r0, r6
 8004a78:	4639      	mov	r1, r7
 8004a7a:	ec53 2b10 	vmov	r2, r3, d0
 8004a7e:	f7fb fbc7 	bl	8000210 <__aeabi_dsub>
 8004a82:	4606      	mov	r6, r0
 8004a84:	460f      	mov	r7, r1
 8004a86:	e036      	b.n	8004af6 <__kernel_rem_pio2+0x26e>
 8004a88:	4b4e      	ldr	r3, [pc, #312]	; (8004bc4 <__kernel_rem_pio2+0x33c>)
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	4630      	mov	r0, r6
 8004a8e:	4639      	mov	r1, r7
 8004a90:	f7fb fd76 	bl	8000580 <__aeabi_dmul>
 8004a94:	f7fc f80e 	bl	8000ab4 <__aeabi_d2iz>
 8004a98:	f7fb fd08 	bl	80004ac <__aeabi_i2d>
 8004a9c:	4b4a      	ldr	r3, [pc, #296]	; (8004bc8 <__kernel_rem_pio2+0x340>)
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	4680      	mov	r8, r0
 8004aa2:	4689      	mov	r9, r1
 8004aa4:	f7fb fd6c 	bl	8000580 <__aeabi_dmul>
 8004aa8:	4602      	mov	r2, r0
 8004aaa:	460b      	mov	r3, r1
 8004aac:	4630      	mov	r0, r6
 8004aae:	4639      	mov	r1, r7
 8004ab0:	f7fb fbae 	bl	8000210 <__aeabi_dsub>
 8004ab4:	f7fb fffe 	bl	8000ab4 <__aeabi_d2iz>
 8004ab8:	9b02      	ldr	r3, [sp, #8]
 8004aba:	f843 0b04 	str.w	r0, [r3], #4
 8004abe:	3d01      	subs	r5, #1
 8004ac0:	9302      	str	r3, [sp, #8]
 8004ac2:	ab70      	add	r3, sp, #448	; 0x1c0
 8004ac4:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8004ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004acc:	4640      	mov	r0, r8
 8004ace:	4649      	mov	r1, r9
 8004ad0:	f7fb fba0 	bl	8000214 <__adddf3>
 8004ad4:	4606      	mov	r6, r0
 8004ad6:	460f      	mov	r7, r1
 8004ad8:	e75b      	b.n	8004992 <__kernel_rem_pio2+0x10a>
 8004ada:	d105      	bne.n	8004ae8 <__kernel_rem_pio2+0x260>
 8004adc:	1e63      	subs	r3, r4, #1
 8004ade:	aa0c      	add	r2, sp, #48	; 0x30
 8004ae0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004ae4:	15c3      	asrs	r3, r0, #23
 8004ae6:	e79b      	b.n	8004a20 <__kernel_rem_pio2+0x198>
 8004ae8:	4b38      	ldr	r3, [pc, #224]	; (8004bcc <__kernel_rem_pio2+0x344>)
 8004aea:	2200      	movs	r2, #0
 8004aec:	f7fb ffce 	bl	8000a8c <__aeabi_dcmpge>
 8004af0:	2800      	cmp	r0, #0
 8004af2:	d139      	bne.n	8004b68 <__kernel_rem_pio2+0x2e0>
 8004af4:	9002      	str	r0, [sp, #8]
 8004af6:	2200      	movs	r2, #0
 8004af8:	2300      	movs	r3, #0
 8004afa:	4630      	mov	r0, r6
 8004afc:	4639      	mov	r1, r7
 8004afe:	f7fb ffa7 	bl	8000a50 <__aeabi_dcmpeq>
 8004b02:	2800      	cmp	r0, #0
 8004b04:	f000 80b4 	beq.w	8004c70 <__kernel_rem_pio2+0x3e8>
 8004b08:	f104 3bff 	add.w	fp, r4, #4294967295
 8004b0c:	465b      	mov	r3, fp
 8004b0e:	2200      	movs	r2, #0
 8004b10:	9904      	ldr	r1, [sp, #16]
 8004b12:	428b      	cmp	r3, r1
 8004b14:	da65      	bge.n	8004be2 <__kernel_rem_pio2+0x35a>
 8004b16:	2a00      	cmp	r2, #0
 8004b18:	d07b      	beq.n	8004c12 <__kernel_rem_pio2+0x38a>
 8004b1a:	ab0c      	add	r3, sp, #48	; 0x30
 8004b1c:	f1aa 0a18 	sub.w	sl, sl, #24
 8004b20:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	f000 80a0 	beq.w	8004c6a <__kernel_rem_pio2+0x3e2>
 8004b2a:	ed9f 0b21 	vldr	d0, [pc, #132]	; 8004bb0 <__kernel_rem_pio2+0x328>
 8004b2e:	4650      	mov	r0, sl
 8004b30:	f000 fb32 	bl	8005198 <scalbn>
 8004b34:	4f23      	ldr	r7, [pc, #140]	; (8004bc4 <__kernel_rem_pio2+0x33c>)
 8004b36:	ec55 4b10 	vmov	r4, r5, d0
 8004b3a:	46d8      	mov	r8, fp
 8004b3c:	2600      	movs	r6, #0
 8004b3e:	f1b8 0f00 	cmp.w	r8, #0
 8004b42:	f280 80cf 	bge.w	8004ce4 <__kernel_rem_pio2+0x45c>
 8004b46:	ed9f 8b18 	vldr	d8, [pc, #96]	; 8004ba8 <__kernel_rem_pio2+0x320>
 8004b4a:	465f      	mov	r7, fp
 8004b4c:	f04f 0800 	mov.w	r8, #0
 8004b50:	2f00      	cmp	r7, #0
 8004b52:	f2c0 80fd 	blt.w	8004d50 <__kernel_rem_pio2+0x4c8>
 8004b56:	ab70      	add	r3, sp, #448	; 0x1c0
 8004b58:	f8df a074 	ldr.w	sl, [pc, #116]	; 8004bd0 <__kernel_rem_pio2+0x348>
 8004b5c:	ec55 4b18 	vmov	r4, r5, d8
 8004b60:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 8004b64:	2600      	movs	r6, #0
 8004b66:	e0e5      	b.n	8004d34 <__kernel_rem_pio2+0x4ac>
 8004b68:	2302      	movs	r3, #2
 8004b6a:	9302      	str	r3, [sp, #8]
 8004b6c:	e75c      	b.n	8004a28 <__kernel_rem_pio2+0x1a0>
 8004b6e:	f8db 3000 	ldr.w	r3, [fp]
 8004b72:	b955      	cbnz	r5, 8004b8a <__kernel_rem_pio2+0x302>
 8004b74:	b123      	cbz	r3, 8004b80 <__kernel_rem_pio2+0x2f8>
 8004b76:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8004b7a:	f8cb 3000 	str.w	r3, [fp]
 8004b7e:	2301      	movs	r3, #1
 8004b80:	3201      	adds	r2, #1
 8004b82:	f10b 0b04 	add.w	fp, fp, #4
 8004b86:	461d      	mov	r5, r3
 8004b88:	e755      	b.n	8004a36 <__kernel_rem_pio2+0x1ae>
 8004b8a:	1acb      	subs	r3, r1, r3
 8004b8c:	f8cb 3000 	str.w	r3, [fp]
 8004b90:	462b      	mov	r3, r5
 8004b92:	e7f5      	b.n	8004b80 <__kernel_rem_pio2+0x2f8>
 8004b94:	1e62      	subs	r2, r4, #1
 8004b96:	ab0c      	add	r3, sp, #48	; 0x30
 8004b98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b9c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8004ba0:	a90c      	add	r1, sp, #48	; 0x30
 8004ba2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8004ba6:	e754      	b.n	8004a52 <__kernel_rem_pio2+0x1ca>
	...
 8004bb4:	3ff00000 	.word	0x3ff00000
 8004bb8:	080054a0 	.word	0x080054a0
 8004bbc:	40200000 	.word	0x40200000
 8004bc0:	3ff00000 	.word	0x3ff00000
 8004bc4:	3e700000 	.word	0x3e700000
 8004bc8:	41700000 	.word	0x41700000
 8004bcc:	3fe00000 	.word	0x3fe00000
 8004bd0:	08005460 	.word	0x08005460
 8004bd4:	1e62      	subs	r2, r4, #1
 8004bd6:	ab0c      	add	r3, sp, #48	; 0x30
 8004bd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004bdc:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8004be0:	e7de      	b.n	8004ba0 <__kernel_rem_pio2+0x318>
 8004be2:	a90c      	add	r1, sp, #48	; 0x30
 8004be4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8004be8:	3b01      	subs	r3, #1
 8004bea:	430a      	orrs	r2, r1
 8004bec:	e790      	b.n	8004b10 <__kernel_rem_pio2+0x288>
 8004bee:	3301      	adds	r3, #1
 8004bf0:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8004bf4:	2900      	cmp	r1, #0
 8004bf6:	d0fa      	beq.n	8004bee <__kernel_rem_pio2+0x366>
 8004bf8:	9a08      	ldr	r2, [sp, #32]
 8004bfa:	18e3      	adds	r3, r4, r3
 8004bfc:	18a6      	adds	r6, r4, r2
 8004bfe:	aa20      	add	r2, sp, #128	; 0x80
 8004c00:	1c65      	adds	r5, r4, #1
 8004c02:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8004c06:	9302      	str	r3, [sp, #8]
 8004c08:	9b02      	ldr	r3, [sp, #8]
 8004c0a:	42ab      	cmp	r3, r5
 8004c0c:	da04      	bge.n	8004c18 <__kernel_rem_pio2+0x390>
 8004c0e:	461c      	mov	r4, r3
 8004c10:	e6b5      	b.n	800497e <__kernel_rem_pio2+0xf6>
 8004c12:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004c14:	2301      	movs	r3, #1
 8004c16:	e7eb      	b.n	8004bf0 <__kernel_rem_pio2+0x368>
 8004c18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c1a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004c1e:	f7fb fc45 	bl	80004ac <__aeabi_i2d>
 8004c22:	e8e6 0102 	strd	r0, r1, [r6], #8
 8004c26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c28:	46b3      	mov	fp, r6
 8004c2a:	461c      	mov	r4, r3
 8004c2c:	2700      	movs	r7, #0
 8004c2e:	f04f 0800 	mov.w	r8, #0
 8004c32:	f04f 0900 	mov.w	r9, #0
 8004c36:	9b06      	ldr	r3, [sp, #24]
 8004c38:	429f      	cmp	r7, r3
 8004c3a:	dd06      	ble.n	8004c4a <__kernel_rem_pio2+0x3c2>
 8004c3c:	ab70      	add	r3, sp, #448	; 0x1c0
 8004c3e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8004c42:	e9c3 8900 	strd	r8, r9, [r3]
 8004c46:	3501      	adds	r5, #1
 8004c48:	e7de      	b.n	8004c08 <__kernel_rem_pio2+0x380>
 8004c4a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8004c4e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8004c52:	f7fb fc95 	bl	8000580 <__aeabi_dmul>
 8004c56:	4602      	mov	r2, r0
 8004c58:	460b      	mov	r3, r1
 8004c5a:	4640      	mov	r0, r8
 8004c5c:	4649      	mov	r1, r9
 8004c5e:	f7fb fad9 	bl	8000214 <__adddf3>
 8004c62:	3701      	adds	r7, #1
 8004c64:	4680      	mov	r8, r0
 8004c66:	4689      	mov	r9, r1
 8004c68:	e7e5      	b.n	8004c36 <__kernel_rem_pio2+0x3ae>
 8004c6a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004c6e:	e754      	b.n	8004b1a <__kernel_rem_pio2+0x292>
 8004c70:	ec47 6b10 	vmov	d0, r6, r7
 8004c74:	f1ca 0000 	rsb	r0, sl, #0
 8004c78:	f000 fa8e 	bl	8005198 <scalbn>
 8004c7c:	ec57 6b10 	vmov	r6, r7, d0
 8004c80:	4b9f      	ldr	r3, [pc, #636]	; (8004f00 <__kernel_rem_pio2+0x678>)
 8004c82:	ee10 0a10 	vmov	r0, s0
 8004c86:	2200      	movs	r2, #0
 8004c88:	4639      	mov	r1, r7
 8004c8a:	f7fb feff 	bl	8000a8c <__aeabi_dcmpge>
 8004c8e:	b300      	cbz	r0, 8004cd2 <__kernel_rem_pio2+0x44a>
 8004c90:	4b9c      	ldr	r3, [pc, #624]	; (8004f04 <__kernel_rem_pio2+0x67c>)
 8004c92:	2200      	movs	r2, #0
 8004c94:	4630      	mov	r0, r6
 8004c96:	4639      	mov	r1, r7
 8004c98:	f7fb fc72 	bl	8000580 <__aeabi_dmul>
 8004c9c:	f7fb ff0a 	bl	8000ab4 <__aeabi_d2iz>
 8004ca0:	4605      	mov	r5, r0
 8004ca2:	f7fb fc03 	bl	80004ac <__aeabi_i2d>
 8004ca6:	4b96      	ldr	r3, [pc, #600]	; (8004f00 <__kernel_rem_pio2+0x678>)
 8004ca8:	2200      	movs	r2, #0
 8004caa:	f7fb fc69 	bl	8000580 <__aeabi_dmul>
 8004cae:	460b      	mov	r3, r1
 8004cb0:	4602      	mov	r2, r0
 8004cb2:	4639      	mov	r1, r7
 8004cb4:	4630      	mov	r0, r6
 8004cb6:	f7fb faab 	bl	8000210 <__aeabi_dsub>
 8004cba:	f7fb fefb 	bl	8000ab4 <__aeabi_d2iz>
 8004cbe:	f104 0b01 	add.w	fp, r4, #1
 8004cc2:	ab0c      	add	r3, sp, #48	; 0x30
 8004cc4:	f10a 0a18 	add.w	sl, sl, #24
 8004cc8:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8004ccc:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 8004cd0:	e72b      	b.n	8004b2a <__kernel_rem_pio2+0x2a2>
 8004cd2:	4630      	mov	r0, r6
 8004cd4:	4639      	mov	r1, r7
 8004cd6:	f7fb feed 	bl	8000ab4 <__aeabi_d2iz>
 8004cda:	ab0c      	add	r3, sp, #48	; 0x30
 8004cdc:	46a3      	mov	fp, r4
 8004cde:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8004ce2:	e722      	b.n	8004b2a <__kernel_rem_pio2+0x2a2>
 8004ce4:	ab70      	add	r3, sp, #448	; 0x1c0
 8004ce6:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 8004cea:	ab0c      	add	r3, sp, #48	; 0x30
 8004cec:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8004cf0:	f7fb fbdc 	bl	80004ac <__aeabi_i2d>
 8004cf4:	4622      	mov	r2, r4
 8004cf6:	462b      	mov	r3, r5
 8004cf8:	f7fb fc42 	bl	8000580 <__aeabi_dmul>
 8004cfc:	4632      	mov	r2, r6
 8004cfe:	e9c9 0100 	strd	r0, r1, [r9]
 8004d02:	463b      	mov	r3, r7
 8004d04:	4620      	mov	r0, r4
 8004d06:	4629      	mov	r1, r5
 8004d08:	f7fb fc3a 	bl	8000580 <__aeabi_dmul>
 8004d0c:	f108 38ff 	add.w	r8, r8, #4294967295
 8004d10:	4604      	mov	r4, r0
 8004d12:	460d      	mov	r5, r1
 8004d14:	e713      	b.n	8004b3e <__kernel_rem_pio2+0x2b6>
 8004d16:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8004d1a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8004d1e:	f7fb fc2f 	bl	8000580 <__aeabi_dmul>
 8004d22:	4602      	mov	r2, r0
 8004d24:	460b      	mov	r3, r1
 8004d26:	4620      	mov	r0, r4
 8004d28:	4629      	mov	r1, r5
 8004d2a:	f7fb fa73 	bl	8000214 <__adddf3>
 8004d2e:	3601      	adds	r6, #1
 8004d30:	4604      	mov	r4, r0
 8004d32:	460d      	mov	r5, r1
 8004d34:	9b04      	ldr	r3, [sp, #16]
 8004d36:	429e      	cmp	r6, r3
 8004d38:	dc01      	bgt.n	8004d3e <__kernel_rem_pio2+0x4b6>
 8004d3a:	45b0      	cmp	r8, r6
 8004d3c:	daeb      	bge.n	8004d16 <__kernel_rem_pio2+0x48e>
 8004d3e:	ab48      	add	r3, sp, #288	; 0x120
 8004d40:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8004d44:	e9c3 4500 	strd	r4, r5, [r3]
 8004d48:	3f01      	subs	r7, #1
 8004d4a:	f108 0801 	add.w	r8, r8, #1
 8004d4e:	e6ff      	b.n	8004b50 <__kernel_rem_pio2+0x2c8>
 8004d50:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8004d52:	2b02      	cmp	r3, #2
 8004d54:	dc0b      	bgt.n	8004d6e <__kernel_rem_pio2+0x4e6>
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	dc6e      	bgt.n	8004e38 <__kernel_rem_pio2+0x5b0>
 8004d5a:	d045      	beq.n	8004de8 <__kernel_rem_pio2+0x560>
 8004d5c:	9b07      	ldr	r3, [sp, #28]
 8004d5e:	f003 0007 	and.w	r0, r3, #7
 8004d62:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8004d66:	ecbd 8b02 	vpop	{d8}
 8004d6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d6e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8004d70:	2b03      	cmp	r3, #3
 8004d72:	d1f3      	bne.n	8004d5c <__kernel_rem_pio2+0x4d4>
 8004d74:	ab48      	add	r3, sp, #288	; 0x120
 8004d76:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 8004d7a:	46d0      	mov	r8, sl
 8004d7c:	46d9      	mov	r9, fp
 8004d7e:	f1b9 0f00 	cmp.w	r9, #0
 8004d82:	f1a8 0808 	sub.w	r8, r8, #8
 8004d86:	dc64      	bgt.n	8004e52 <__kernel_rem_pio2+0x5ca>
 8004d88:	465c      	mov	r4, fp
 8004d8a:	2c01      	cmp	r4, #1
 8004d8c:	f1aa 0a08 	sub.w	sl, sl, #8
 8004d90:	dc7e      	bgt.n	8004e90 <__kernel_rem_pio2+0x608>
 8004d92:	2000      	movs	r0, #0
 8004d94:	2100      	movs	r1, #0
 8004d96:	f1bb 0f01 	cmp.w	fp, #1
 8004d9a:	f300 8097 	bgt.w	8004ecc <__kernel_rem_pio2+0x644>
 8004d9e:	9b02      	ldr	r3, [sp, #8]
 8004da0:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 8004da4:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	f040 8099 	bne.w	8004ee0 <__kernel_rem_pio2+0x658>
 8004dae:	9b01      	ldr	r3, [sp, #4]
 8004db0:	e9c3 5600 	strd	r5, r6, [r3]
 8004db4:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8004db8:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8004dbc:	e7ce      	b.n	8004d5c <__kernel_rem_pio2+0x4d4>
 8004dbe:	ab48      	add	r3, sp, #288	; 0x120
 8004dc0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8004dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dc8:	f7fb fa24 	bl	8000214 <__adddf3>
 8004dcc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004dd0:	f1bb 0f00 	cmp.w	fp, #0
 8004dd4:	daf3      	bge.n	8004dbe <__kernel_rem_pio2+0x536>
 8004dd6:	9b02      	ldr	r3, [sp, #8]
 8004dd8:	b113      	cbz	r3, 8004de0 <__kernel_rem_pio2+0x558>
 8004dda:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004dde:	4619      	mov	r1, r3
 8004de0:	9b01      	ldr	r3, [sp, #4]
 8004de2:	e9c3 0100 	strd	r0, r1, [r3]
 8004de6:	e7b9      	b.n	8004d5c <__kernel_rem_pio2+0x4d4>
 8004de8:	2000      	movs	r0, #0
 8004dea:	2100      	movs	r1, #0
 8004dec:	e7f0      	b.n	8004dd0 <__kernel_rem_pio2+0x548>
 8004dee:	ab48      	add	r3, sp, #288	; 0x120
 8004df0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004df8:	f7fb fa0c 	bl	8000214 <__adddf3>
 8004dfc:	3c01      	subs	r4, #1
 8004dfe:	2c00      	cmp	r4, #0
 8004e00:	daf5      	bge.n	8004dee <__kernel_rem_pio2+0x566>
 8004e02:	9b02      	ldr	r3, [sp, #8]
 8004e04:	b1e3      	cbz	r3, 8004e40 <__kernel_rem_pio2+0x5b8>
 8004e06:	4602      	mov	r2, r0
 8004e08:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004e0c:	9c01      	ldr	r4, [sp, #4]
 8004e0e:	e9c4 2300 	strd	r2, r3, [r4]
 8004e12:	4602      	mov	r2, r0
 8004e14:	460b      	mov	r3, r1
 8004e16:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8004e1a:	f7fb f9f9 	bl	8000210 <__aeabi_dsub>
 8004e1e:	ad4a      	add	r5, sp, #296	; 0x128
 8004e20:	2401      	movs	r4, #1
 8004e22:	45a3      	cmp	fp, r4
 8004e24:	da0f      	bge.n	8004e46 <__kernel_rem_pio2+0x5be>
 8004e26:	9b02      	ldr	r3, [sp, #8]
 8004e28:	b113      	cbz	r3, 8004e30 <__kernel_rem_pio2+0x5a8>
 8004e2a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004e2e:	4619      	mov	r1, r3
 8004e30:	9b01      	ldr	r3, [sp, #4]
 8004e32:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8004e36:	e791      	b.n	8004d5c <__kernel_rem_pio2+0x4d4>
 8004e38:	465c      	mov	r4, fp
 8004e3a:	2000      	movs	r0, #0
 8004e3c:	2100      	movs	r1, #0
 8004e3e:	e7de      	b.n	8004dfe <__kernel_rem_pio2+0x576>
 8004e40:	4602      	mov	r2, r0
 8004e42:	460b      	mov	r3, r1
 8004e44:	e7e2      	b.n	8004e0c <__kernel_rem_pio2+0x584>
 8004e46:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8004e4a:	f7fb f9e3 	bl	8000214 <__adddf3>
 8004e4e:	3401      	adds	r4, #1
 8004e50:	e7e7      	b.n	8004e22 <__kernel_rem_pio2+0x59a>
 8004e52:	e9d8 4500 	ldrd	r4, r5, [r8]
 8004e56:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 8004e5a:	4620      	mov	r0, r4
 8004e5c:	4632      	mov	r2, r6
 8004e5e:	463b      	mov	r3, r7
 8004e60:	4629      	mov	r1, r5
 8004e62:	f7fb f9d7 	bl	8000214 <__adddf3>
 8004e66:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004e6a:	4602      	mov	r2, r0
 8004e6c:	460b      	mov	r3, r1
 8004e6e:	4620      	mov	r0, r4
 8004e70:	4629      	mov	r1, r5
 8004e72:	f7fb f9cd 	bl	8000210 <__aeabi_dsub>
 8004e76:	4632      	mov	r2, r6
 8004e78:	463b      	mov	r3, r7
 8004e7a:	f7fb f9cb 	bl	8000214 <__adddf3>
 8004e7e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8004e82:	e9c8 0102 	strd	r0, r1, [r8, #8]
 8004e86:	ed88 7b00 	vstr	d7, [r8]
 8004e8a:	f109 39ff 	add.w	r9, r9, #4294967295
 8004e8e:	e776      	b.n	8004d7e <__kernel_rem_pio2+0x4f6>
 8004e90:	e9da 8900 	ldrd	r8, r9, [sl]
 8004e94:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8004e98:	4640      	mov	r0, r8
 8004e9a:	4632      	mov	r2, r6
 8004e9c:	463b      	mov	r3, r7
 8004e9e:	4649      	mov	r1, r9
 8004ea0:	f7fb f9b8 	bl	8000214 <__adddf3>
 8004ea4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004ea8:	4602      	mov	r2, r0
 8004eaa:	460b      	mov	r3, r1
 8004eac:	4640      	mov	r0, r8
 8004eae:	4649      	mov	r1, r9
 8004eb0:	f7fb f9ae 	bl	8000210 <__aeabi_dsub>
 8004eb4:	4632      	mov	r2, r6
 8004eb6:	463b      	mov	r3, r7
 8004eb8:	f7fb f9ac 	bl	8000214 <__adddf3>
 8004ebc:	ed9d 7b04 	vldr	d7, [sp, #16]
 8004ec0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8004ec4:	ed8a 7b00 	vstr	d7, [sl]
 8004ec8:	3c01      	subs	r4, #1
 8004eca:	e75e      	b.n	8004d8a <__kernel_rem_pio2+0x502>
 8004ecc:	ab48      	add	r3, sp, #288	; 0x120
 8004ece:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8004ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ed6:	f7fb f99d 	bl	8000214 <__adddf3>
 8004eda:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004ede:	e75a      	b.n	8004d96 <__kernel_rem_pio2+0x50e>
 8004ee0:	9b01      	ldr	r3, [sp, #4]
 8004ee2:	9a01      	ldr	r2, [sp, #4]
 8004ee4:	601d      	str	r5, [r3, #0]
 8004ee6:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8004eea:	605c      	str	r4, [r3, #4]
 8004eec:	609f      	str	r7, [r3, #8]
 8004eee:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8004ef2:	60d3      	str	r3, [r2, #12]
 8004ef4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004ef8:	6110      	str	r0, [r2, #16]
 8004efa:	6153      	str	r3, [r2, #20]
 8004efc:	e72e      	b.n	8004d5c <__kernel_rem_pio2+0x4d4>
 8004efe:	bf00      	nop
 8004f00:	41700000 	.word	0x41700000
 8004f04:	3e700000 	.word	0x3e700000

08004f08 <__kernel_sin>:
 8004f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f0c:	ed2d 8b04 	vpush	{d8-d9}
 8004f10:	eeb0 8a41 	vmov.f32	s16, s2
 8004f14:	eef0 8a61 	vmov.f32	s17, s3
 8004f18:	ec55 4b10 	vmov	r4, r5, d0
 8004f1c:	b083      	sub	sp, #12
 8004f1e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8004f22:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8004f26:	9001      	str	r0, [sp, #4]
 8004f28:	da06      	bge.n	8004f38 <__kernel_sin+0x30>
 8004f2a:	ee10 0a10 	vmov	r0, s0
 8004f2e:	4629      	mov	r1, r5
 8004f30:	f7fb fdc0 	bl	8000ab4 <__aeabi_d2iz>
 8004f34:	2800      	cmp	r0, #0
 8004f36:	d051      	beq.n	8004fdc <__kernel_sin+0xd4>
 8004f38:	4622      	mov	r2, r4
 8004f3a:	462b      	mov	r3, r5
 8004f3c:	4620      	mov	r0, r4
 8004f3e:	4629      	mov	r1, r5
 8004f40:	f7fb fb1e 	bl	8000580 <__aeabi_dmul>
 8004f44:	4682      	mov	sl, r0
 8004f46:	468b      	mov	fp, r1
 8004f48:	4602      	mov	r2, r0
 8004f4a:	460b      	mov	r3, r1
 8004f4c:	4620      	mov	r0, r4
 8004f4e:	4629      	mov	r1, r5
 8004f50:	f7fb fb16 	bl	8000580 <__aeabi_dmul>
 8004f54:	a341      	add	r3, pc, #260	; (adr r3, 800505c <__kernel_sin+0x154>)
 8004f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f5a:	4680      	mov	r8, r0
 8004f5c:	4689      	mov	r9, r1
 8004f5e:	4650      	mov	r0, sl
 8004f60:	4659      	mov	r1, fp
 8004f62:	f7fb fb0d 	bl	8000580 <__aeabi_dmul>
 8004f66:	a33f      	add	r3, pc, #252	; (adr r3, 8005064 <__kernel_sin+0x15c>)
 8004f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f6c:	f7fb f950 	bl	8000210 <__aeabi_dsub>
 8004f70:	4652      	mov	r2, sl
 8004f72:	465b      	mov	r3, fp
 8004f74:	f7fb fb04 	bl	8000580 <__aeabi_dmul>
 8004f78:	a33c      	add	r3, pc, #240	; (adr r3, 800506c <__kernel_sin+0x164>)
 8004f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f7e:	f7fb f949 	bl	8000214 <__adddf3>
 8004f82:	4652      	mov	r2, sl
 8004f84:	465b      	mov	r3, fp
 8004f86:	f7fb fafb 	bl	8000580 <__aeabi_dmul>
 8004f8a:	a33a      	add	r3, pc, #232	; (adr r3, 8005074 <__kernel_sin+0x16c>)
 8004f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f90:	f7fb f93e 	bl	8000210 <__aeabi_dsub>
 8004f94:	4652      	mov	r2, sl
 8004f96:	465b      	mov	r3, fp
 8004f98:	f7fb faf2 	bl	8000580 <__aeabi_dmul>
 8004f9c:	a337      	add	r3, pc, #220	; (adr r3, 800507c <__kernel_sin+0x174>)
 8004f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fa2:	f7fb f937 	bl	8000214 <__adddf3>
 8004fa6:	9b01      	ldr	r3, [sp, #4]
 8004fa8:	4606      	mov	r6, r0
 8004faa:	460f      	mov	r7, r1
 8004fac:	b9eb      	cbnz	r3, 8004fea <__kernel_sin+0xe2>
 8004fae:	4602      	mov	r2, r0
 8004fb0:	460b      	mov	r3, r1
 8004fb2:	4650      	mov	r0, sl
 8004fb4:	4659      	mov	r1, fp
 8004fb6:	f7fb fae3 	bl	8000580 <__aeabi_dmul>
 8004fba:	a325      	add	r3, pc, #148	; (adr r3, 8005050 <__kernel_sin+0x148>)
 8004fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fc0:	f7fb f926 	bl	8000210 <__aeabi_dsub>
 8004fc4:	4642      	mov	r2, r8
 8004fc6:	464b      	mov	r3, r9
 8004fc8:	f7fb fada 	bl	8000580 <__aeabi_dmul>
 8004fcc:	4602      	mov	r2, r0
 8004fce:	460b      	mov	r3, r1
 8004fd0:	4620      	mov	r0, r4
 8004fd2:	4629      	mov	r1, r5
 8004fd4:	f7fb f91e 	bl	8000214 <__adddf3>
 8004fd8:	4604      	mov	r4, r0
 8004fda:	460d      	mov	r5, r1
 8004fdc:	ec45 4b10 	vmov	d0, r4, r5
 8004fe0:	b003      	add	sp, #12
 8004fe2:	ecbd 8b04 	vpop	{d8-d9}
 8004fe6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fea:	4b1b      	ldr	r3, [pc, #108]	; (8005058 <__kernel_sin+0x150>)
 8004fec:	ec51 0b18 	vmov	r0, r1, d8
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	f7fb fac5 	bl	8000580 <__aeabi_dmul>
 8004ff6:	4632      	mov	r2, r6
 8004ff8:	ec41 0b19 	vmov	d9, r0, r1
 8004ffc:	463b      	mov	r3, r7
 8004ffe:	4640      	mov	r0, r8
 8005000:	4649      	mov	r1, r9
 8005002:	f7fb fabd 	bl	8000580 <__aeabi_dmul>
 8005006:	4602      	mov	r2, r0
 8005008:	460b      	mov	r3, r1
 800500a:	ec51 0b19 	vmov	r0, r1, d9
 800500e:	f7fb f8ff 	bl	8000210 <__aeabi_dsub>
 8005012:	4652      	mov	r2, sl
 8005014:	465b      	mov	r3, fp
 8005016:	f7fb fab3 	bl	8000580 <__aeabi_dmul>
 800501a:	ec53 2b18 	vmov	r2, r3, d8
 800501e:	f7fb f8f7 	bl	8000210 <__aeabi_dsub>
 8005022:	a30b      	add	r3, pc, #44	; (adr r3, 8005050 <__kernel_sin+0x148>)
 8005024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005028:	4606      	mov	r6, r0
 800502a:	460f      	mov	r7, r1
 800502c:	4640      	mov	r0, r8
 800502e:	4649      	mov	r1, r9
 8005030:	f7fb faa6 	bl	8000580 <__aeabi_dmul>
 8005034:	4602      	mov	r2, r0
 8005036:	460b      	mov	r3, r1
 8005038:	4630      	mov	r0, r6
 800503a:	4639      	mov	r1, r7
 800503c:	f7fb f8ea 	bl	8000214 <__adddf3>
 8005040:	4602      	mov	r2, r0
 8005042:	460b      	mov	r3, r1
 8005044:	4620      	mov	r0, r4
 8005046:	4629      	mov	r1, r5
 8005048:	f7fb f8e2 	bl	8000210 <__aeabi_dsub>
 800504c:	e7c4      	b.n	8004fd8 <__kernel_sin+0xd0>
 800504e:	bf00      	nop
 8005050:	55555549 	.word	0x55555549
 8005054:	3fc55555 	.word	0x3fc55555
 8005058:	3fe00000 	.word	0x3fe00000
 800505c:	5acfd57c 	.word	0x5acfd57c
 8005060:	3de5d93a 	.word	0x3de5d93a
 8005064:	8a2b9ceb 	.word	0x8a2b9ceb
 8005068:	3e5ae5e6 	.word	0x3e5ae5e6
 800506c:	57b1fe7d 	.word	0x57b1fe7d
 8005070:	3ec71de3 	.word	0x3ec71de3
 8005074:	19c161d5 	.word	0x19c161d5
 8005078:	3f2a01a0 	.word	0x3f2a01a0
 800507c:	1110f8a6 	.word	0x1110f8a6
 8005080:	3f811111 	.word	0x3f811111

08005084 <fabs>:
 8005084:	ec51 0b10 	vmov	r0, r1, d0
 8005088:	ee10 2a10 	vmov	r2, s0
 800508c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005090:	ec43 2b10 	vmov	d0, r2, r3
 8005094:	4770      	bx	lr
	...

08005098 <floor>:
 8005098:	ec51 0b10 	vmov	r0, r1, d0
 800509c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050a0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80050a4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80050a8:	2e13      	cmp	r6, #19
 80050aa:	ee10 5a10 	vmov	r5, s0
 80050ae:	ee10 8a10 	vmov	r8, s0
 80050b2:	460c      	mov	r4, r1
 80050b4:	dc32      	bgt.n	800511c <floor+0x84>
 80050b6:	2e00      	cmp	r6, #0
 80050b8:	da14      	bge.n	80050e4 <floor+0x4c>
 80050ba:	a333      	add	r3, pc, #204	; (adr r3, 8005188 <floor+0xf0>)
 80050bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050c0:	f7fb f8a8 	bl	8000214 <__adddf3>
 80050c4:	2200      	movs	r2, #0
 80050c6:	2300      	movs	r3, #0
 80050c8:	f7fb fcea 	bl	8000aa0 <__aeabi_dcmpgt>
 80050cc:	b138      	cbz	r0, 80050de <floor+0x46>
 80050ce:	2c00      	cmp	r4, #0
 80050d0:	da57      	bge.n	8005182 <floor+0xea>
 80050d2:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80050d6:	431d      	orrs	r5, r3
 80050d8:	d001      	beq.n	80050de <floor+0x46>
 80050da:	4c2d      	ldr	r4, [pc, #180]	; (8005190 <floor+0xf8>)
 80050dc:	2500      	movs	r5, #0
 80050de:	4621      	mov	r1, r4
 80050e0:	4628      	mov	r0, r5
 80050e2:	e025      	b.n	8005130 <floor+0x98>
 80050e4:	4f2b      	ldr	r7, [pc, #172]	; (8005194 <floor+0xfc>)
 80050e6:	4137      	asrs	r7, r6
 80050e8:	ea01 0307 	and.w	r3, r1, r7
 80050ec:	4303      	orrs	r3, r0
 80050ee:	d01f      	beq.n	8005130 <floor+0x98>
 80050f0:	a325      	add	r3, pc, #148	; (adr r3, 8005188 <floor+0xf0>)
 80050f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050f6:	f7fb f88d 	bl	8000214 <__adddf3>
 80050fa:	2200      	movs	r2, #0
 80050fc:	2300      	movs	r3, #0
 80050fe:	f7fb fccf 	bl	8000aa0 <__aeabi_dcmpgt>
 8005102:	2800      	cmp	r0, #0
 8005104:	d0eb      	beq.n	80050de <floor+0x46>
 8005106:	2c00      	cmp	r4, #0
 8005108:	bfbe      	ittt	lt
 800510a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800510e:	fa43 f606 	asrlt.w	r6, r3, r6
 8005112:	19a4      	addlt	r4, r4, r6
 8005114:	ea24 0407 	bic.w	r4, r4, r7
 8005118:	2500      	movs	r5, #0
 800511a:	e7e0      	b.n	80050de <floor+0x46>
 800511c:	2e33      	cmp	r6, #51	; 0x33
 800511e:	dd0b      	ble.n	8005138 <floor+0xa0>
 8005120:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8005124:	d104      	bne.n	8005130 <floor+0x98>
 8005126:	ee10 2a10 	vmov	r2, s0
 800512a:	460b      	mov	r3, r1
 800512c:	f7fb f872 	bl	8000214 <__adddf3>
 8005130:	ec41 0b10 	vmov	d0, r0, r1
 8005134:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005138:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800513c:	f04f 33ff 	mov.w	r3, #4294967295
 8005140:	fa23 f707 	lsr.w	r7, r3, r7
 8005144:	4207      	tst	r7, r0
 8005146:	d0f3      	beq.n	8005130 <floor+0x98>
 8005148:	a30f      	add	r3, pc, #60	; (adr r3, 8005188 <floor+0xf0>)
 800514a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800514e:	f7fb f861 	bl	8000214 <__adddf3>
 8005152:	2200      	movs	r2, #0
 8005154:	2300      	movs	r3, #0
 8005156:	f7fb fca3 	bl	8000aa0 <__aeabi_dcmpgt>
 800515a:	2800      	cmp	r0, #0
 800515c:	d0bf      	beq.n	80050de <floor+0x46>
 800515e:	2c00      	cmp	r4, #0
 8005160:	da02      	bge.n	8005168 <floor+0xd0>
 8005162:	2e14      	cmp	r6, #20
 8005164:	d103      	bne.n	800516e <floor+0xd6>
 8005166:	3401      	adds	r4, #1
 8005168:	ea25 0507 	bic.w	r5, r5, r7
 800516c:	e7b7      	b.n	80050de <floor+0x46>
 800516e:	2301      	movs	r3, #1
 8005170:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8005174:	fa03 f606 	lsl.w	r6, r3, r6
 8005178:	4435      	add	r5, r6
 800517a:	4545      	cmp	r5, r8
 800517c:	bf38      	it	cc
 800517e:	18e4      	addcc	r4, r4, r3
 8005180:	e7f2      	b.n	8005168 <floor+0xd0>
 8005182:	2500      	movs	r5, #0
 8005184:	462c      	mov	r4, r5
 8005186:	e7aa      	b.n	80050de <floor+0x46>
 8005188:	8800759c 	.word	0x8800759c
 800518c:	7e37e43c 	.word	0x7e37e43c
 8005190:	bff00000 	.word	0xbff00000
 8005194:	000fffff 	.word	0x000fffff

08005198 <scalbn>:
 8005198:	b570      	push	{r4, r5, r6, lr}
 800519a:	ec55 4b10 	vmov	r4, r5, d0
 800519e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80051a2:	4606      	mov	r6, r0
 80051a4:	462b      	mov	r3, r5
 80051a6:	b99a      	cbnz	r2, 80051d0 <scalbn+0x38>
 80051a8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80051ac:	4323      	orrs	r3, r4
 80051ae:	d036      	beq.n	800521e <scalbn+0x86>
 80051b0:	4b39      	ldr	r3, [pc, #228]	; (8005298 <scalbn+0x100>)
 80051b2:	4629      	mov	r1, r5
 80051b4:	ee10 0a10 	vmov	r0, s0
 80051b8:	2200      	movs	r2, #0
 80051ba:	f7fb f9e1 	bl	8000580 <__aeabi_dmul>
 80051be:	4b37      	ldr	r3, [pc, #220]	; (800529c <scalbn+0x104>)
 80051c0:	429e      	cmp	r6, r3
 80051c2:	4604      	mov	r4, r0
 80051c4:	460d      	mov	r5, r1
 80051c6:	da10      	bge.n	80051ea <scalbn+0x52>
 80051c8:	a32b      	add	r3, pc, #172	; (adr r3, 8005278 <scalbn+0xe0>)
 80051ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051ce:	e03a      	b.n	8005246 <scalbn+0xae>
 80051d0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80051d4:	428a      	cmp	r2, r1
 80051d6:	d10c      	bne.n	80051f2 <scalbn+0x5a>
 80051d8:	ee10 2a10 	vmov	r2, s0
 80051dc:	4620      	mov	r0, r4
 80051de:	4629      	mov	r1, r5
 80051e0:	f7fb f818 	bl	8000214 <__adddf3>
 80051e4:	4604      	mov	r4, r0
 80051e6:	460d      	mov	r5, r1
 80051e8:	e019      	b.n	800521e <scalbn+0x86>
 80051ea:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80051ee:	460b      	mov	r3, r1
 80051f0:	3a36      	subs	r2, #54	; 0x36
 80051f2:	4432      	add	r2, r6
 80051f4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80051f8:	428a      	cmp	r2, r1
 80051fa:	dd08      	ble.n	800520e <scalbn+0x76>
 80051fc:	2d00      	cmp	r5, #0
 80051fe:	a120      	add	r1, pc, #128	; (adr r1, 8005280 <scalbn+0xe8>)
 8005200:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005204:	da1c      	bge.n	8005240 <scalbn+0xa8>
 8005206:	a120      	add	r1, pc, #128	; (adr r1, 8005288 <scalbn+0xf0>)
 8005208:	e9d1 0100 	ldrd	r0, r1, [r1]
 800520c:	e018      	b.n	8005240 <scalbn+0xa8>
 800520e:	2a00      	cmp	r2, #0
 8005210:	dd08      	ble.n	8005224 <scalbn+0x8c>
 8005212:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005216:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800521a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800521e:	ec45 4b10 	vmov	d0, r4, r5
 8005222:	bd70      	pop	{r4, r5, r6, pc}
 8005224:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8005228:	da19      	bge.n	800525e <scalbn+0xc6>
 800522a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800522e:	429e      	cmp	r6, r3
 8005230:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8005234:	dd0a      	ble.n	800524c <scalbn+0xb4>
 8005236:	a112      	add	r1, pc, #72	; (adr r1, 8005280 <scalbn+0xe8>)
 8005238:	e9d1 0100 	ldrd	r0, r1, [r1]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d1e2      	bne.n	8005206 <scalbn+0x6e>
 8005240:	a30f      	add	r3, pc, #60	; (adr r3, 8005280 <scalbn+0xe8>)
 8005242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005246:	f7fb f99b 	bl	8000580 <__aeabi_dmul>
 800524a:	e7cb      	b.n	80051e4 <scalbn+0x4c>
 800524c:	a10a      	add	r1, pc, #40	; (adr r1, 8005278 <scalbn+0xe0>)
 800524e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d0b8      	beq.n	80051c8 <scalbn+0x30>
 8005256:	a10e      	add	r1, pc, #56	; (adr r1, 8005290 <scalbn+0xf8>)
 8005258:	e9d1 0100 	ldrd	r0, r1, [r1]
 800525c:	e7b4      	b.n	80051c8 <scalbn+0x30>
 800525e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005262:	3236      	adds	r2, #54	; 0x36
 8005264:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005268:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800526c:	4620      	mov	r0, r4
 800526e:	4b0c      	ldr	r3, [pc, #48]	; (80052a0 <scalbn+0x108>)
 8005270:	2200      	movs	r2, #0
 8005272:	e7e8      	b.n	8005246 <scalbn+0xae>
 8005274:	f3af 8000 	nop.w
 8005278:	c2f8f359 	.word	0xc2f8f359
 800527c:	01a56e1f 	.word	0x01a56e1f
 8005280:	8800759c 	.word	0x8800759c
 8005284:	7e37e43c 	.word	0x7e37e43c
 8005288:	8800759c 	.word	0x8800759c
 800528c:	fe37e43c 	.word	0xfe37e43c
 8005290:	c2f8f359 	.word	0xc2f8f359
 8005294:	81a56e1f 	.word	0x81a56e1f
 8005298:	43500000 	.word	0x43500000
 800529c:	ffff3cb0 	.word	0xffff3cb0
 80052a0:	3c900000 	.word	0x3c900000

080052a4 <_init>:
 80052a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052a6:	bf00      	nop
 80052a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052aa:	bc08      	pop	{r3}
 80052ac:	469e      	mov	lr, r3
 80052ae:	4770      	bx	lr

080052b0 <_fini>:
 80052b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052b2:	bf00      	nop
 80052b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052b6:	bc08      	pop	{r3}
 80052b8:	469e      	mov	lr, r3
 80052ba:	4770      	bx	lr
