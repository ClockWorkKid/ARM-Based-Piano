
DAC_Custom.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000070ec  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000208  080072b8  080072b8  000172b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080074c0  080074c0  000200a0  2**0
                  CONTENTS
  4 .ARM          00000008  080074c0  080074c0  000174c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080074c8  080074c8  000200a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080074c8  080074c8  000174c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080074cc  080074cc  000174cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  20000000  080074d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004924  200000a0  08007570  000200a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200049c4  08007570  000249c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015068  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ac2  00000000  00000000  00035138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001120  00000000  00000000  00037c00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001008  00000000  00000000  00038d20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027967  00000000  00000000  00039d28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013d0d  00000000  00000000  0006168f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f4a00  00000000  00000000  0007539c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00169d9c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b1c  00000000  00000000  00169df0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	200000a0 	.word	0x200000a0
 80001e4:	00000000 	.word	0x00000000
 80001e8:	0800729c 	.word	0x0800729c

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	200000a4 	.word	0x200000a4
 8000204:	0800729c 	.word	0x0800729c

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__gedf2>:
 80009a4:	f04f 3cff 	mov.w	ip, #4294967295
 80009a8:	e006      	b.n	80009b8 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__ledf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	e002      	b.n	80009b8 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__cmpdf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ce:	d01b      	beq.n	8000a08 <__cmpdf2+0x54>
 80009d0:	b001      	add	sp, #4
 80009d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009d6:	bf0c      	ite	eq
 80009d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009dc:	ea91 0f03 	teqne	r1, r3
 80009e0:	bf02      	ittt	eq
 80009e2:	ea90 0f02 	teqeq	r0, r2
 80009e6:	2000      	moveq	r0, #0
 80009e8:	4770      	bxeq	lr
 80009ea:	f110 0f00 	cmn.w	r0, #0
 80009ee:	ea91 0f03 	teq	r1, r3
 80009f2:	bf58      	it	pl
 80009f4:	4299      	cmppl	r1, r3
 80009f6:	bf08      	it	eq
 80009f8:	4290      	cmpeq	r0, r2
 80009fa:	bf2c      	ite	cs
 80009fc:	17d8      	asrcs	r0, r3, #31
 80009fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a02:	f040 0001 	orr.w	r0, r0, #1
 8000a06:	4770      	bx	lr
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__cmpdf2+0x64>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d107      	bne.n	8000a28 <__cmpdf2+0x74>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d1d6      	bne.n	80009d0 <__cmpdf2+0x1c>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d0d3      	beq.n	80009d0 <__cmpdf2+0x1c>
 8000a28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdrcmple>:
 8000a30:	4684      	mov	ip, r0
 8000a32:	4610      	mov	r0, r2
 8000a34:	4662      	mov	r2, ip
 8000a36:	468c      	mov	ip, r1
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4663      	mov	r3, ip
 8000a3c:	e000      	b.n	8000a40 <__aeabi_cdcmpeq>
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdcmpeq>:
 8000a40:	b501      	push	{r0, lr}
 8000a42:	f7ff ffb7 	bl	80009b4 <__cmpdf2>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	bf48      	it	mi
 8000a4a:	f110 0f00 	cmnmi.w	r0, #0
 8000a4e:	bd01      	pop	{r0, pc}

08000a50 <__aeabi_dcmpeq>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff fff4 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a58:	bf0c      	ite	eq
 8000a5a:	2001      	moveq	r0, #1
 8000a5c:	2000      	movne	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmplt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffea 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmple>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffe0 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpge>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffce 	bl	8000a30 <__aeabi_cdrcmple>
 8000a94:	bf94      	ite	ls
 8000a96:	2001      	movls	r0, #1
 8000a98:	2000      	movhi	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpgt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffc4 	bl	8000a30 <__aeabi_cdrcmple>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_d2iz>:
 8000ab4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000abc:	d215      	bcs.n	8000aea <__aeabi_d2iz+0x36>
 8000abe:	d511      	bpl.n	8000ae4 <__aeabi_d2iz+0x30>
 8000ac0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac8:	d912      	bls.n	8000af0 <__aeabi_d2iz+0x3c>
 8000aca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ace:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ad2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	fa23 f002 	lsr.w	r0, r3, r2
 8000ade:	bf18      	it	ne
 8000ae0:	4240      	negne	r0, r0
 8000ae2:	4770      	bx	lr
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aee:	d105      	bne.n	8000afc <__aeabi_d2iz+0x48>
 8000af0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af4:	bf08      	it	eq
 8000af6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000afa:	4770      	bx	lr
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop

08000b04 <__aeabi_d2uiz>:
 8000b04:	004a      	lsls	r2, r1, #1
 8000b06:	d211      	bcs.n	8000b2c <__aeabi_d2uiz+0x28>
 8000b08:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b0c:	d211      	bcs.n	8000b32 <__aeabi_d2uiz+0x2e>
 8000b0e:	d50d      	bpl.n	8000b2c <__aeabi_d2uiz+0x28>
 8000b10:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b14:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b18:	d40e      	bmi.n	8000b38 <__aeabi_d2uiz+0x34>
 8000b1a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b22:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b26:	fa23 f002 	lsr.w	r0, r3, r2
 8000b2a:	4770      	bx	lr
 8000b2c:	f04f 0000 	mov.w	r0, #0
 8000b30:	4770      	bx	lr
 8000b32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b36:	d102      	bne.n	8000b3e <__aeabi_d2uiz+0x3a>
 8000b38:	f04f 30ff 	mov.w	r0, #4294967295
 8000b3c:	4770      	bx	lr
 8000b3e:	f04f 0000 	mov.w	r0, #0
 8000b42:	4770      	bx	lr

08000b44 <__aeabi_uldivmod>:
 8000b44:	b953      	cbnz	r3, 8000b5c <__aeabi_uldivmod+0x18>
 8000b46:	b94a      	cbnz	r2, 8000b5c <__aeabi_uldivmod+0x18>
 8000b48:	2900      	cmp	r1, #0
 8000b4a:	bf08      	it	eq
 8000b4c:	2800      	cmpeq	r0, #0
 8000b4e:	bf1c      	itt	ne
 8000b50:	f04f 31ff 	movne.w	r1, #4294967295
 8000b54:	f04f 30ff 	movne.w	r0, #4294967295
 8000b58:	f000 b96e 	b.w	8000e38 <__aeabi_idiv0>
 8000b5c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b60:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b64:	f000 f806 	bl	8000b74 <__udivmoddi4>
 8000b68:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b70:	b004      	add	sp, #16
 8000b72:	4770      	bx	lr

08000b74 <__udivmoddi4>:
 8000b74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b78:	9d08      	ldr	r5, [sp, #32]
 8000b7a:	4604      	mov	r4, r0
 8000b7c:	468c      	mov	ip, r1
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	f040 8083 	bne.w	8000c8a <__udivmoddi4+0x116>
 8000b84:	428a      	cmp	r2, r1
 8000b86:	4617      	mov	r7, r2
 8000b88:	d947      	bls.n	8000c1a <__udivmoddi4+0xa6>
 8000b8a:	fab2 f282 	clz	r2, r2
 8000b8e:	b142      	cbz	r2, 8000ba2 <__udivmoddi4+0x2e>
 8000b90:	f1c2 0020 	rsb	r0, r2, #32
 8000b94:	fa24 f000 	lsr.w	r0, r4, r0
 8000b98:	4091      	lsls	r1, r2
 8000b9a:	4097      	lsls	r7, r2
 8000b9c:	ea40 0c01 	orr.w	ip, r0, r1
 8000ba0:	4094      	lsls	r4, r2
 8000ba2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000ba6:	0c23      	lsrs	r3, r4, #16
 8000ba8:	fbbc f6f8 	udiv	r6, ip, r8
 8000bac:	fa1f fe87 	uxth.w	lr, r7
 8000bb0:	fb08 c116 	mls	r1, r8, r6, ip
 8000bb4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bb8:	fb06 f10e 	mul.w	r1, r6, lr
 8000bbc:	4299      	cmp	r1, r3
 8000bbe:	d909      	bls.n	8000bd4 <__udivmoddi4+0x60>
 8000bc0:	18fb      	adds	r3, r7, r3
 8000bc2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000bc6:	f080 8119 	bcs.w	8000dfc <__udivmoddi4+0x288>
 8000bca:	4299      	cmp	r1, r3
 8000bcc:	f240 8116 	bls.w	8000dfc <__udivmoddi4+0x288>
 8000bd0:	3e02      	subs	r6, #2
 8000bd2:	443b      	add	r3, r7
 8000bd4:	1a5b      	subs	r3, r3, r1
 8000bd6:	b2a4      	uxth	r4, r4
 8000bd8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bdc:	fb08 3310 	mls	r3, r8, r0, r3
 8000be0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000be4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000be8:	45a6      	cmp	lr, r4
 8000bea:	d909      	bls.n	8000c00 <__udivmoddi4+0x8c>
 8000bec:	193c      	adds	r4, r7, r4
 8000bee:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bf2:	f080 8105 	bcs.w	8000e00 <__udivmoddi4+0x28c>
 8000bf6:	45a6      	cmp	lr, r4
 8000bf8:	f240 8102 	bls.w	8000e00 <__udivmoddi4+0x28c>
 8000bfc:	3802      	subs	r0, #2
 8000bfe:	443c      	add	r4, r7
 8000c00:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c04:	eba4 040e 	sub.w	r4, r4, lr
 8000c08:	2600      	movs	r6, #0
 8000c0a:	b11d      	cbz	r5, 8000c14 <__udivmoddi4+0xa0>
 8000c0c:	40d4      	lsrs	r4, r2
 8000c0e:	2300      	movs	r3, #0
 8000c10:	e9c5 4300 	strd	r4, r3, [r5]
 8000c14:	4631      	mov	r1, r6
 8000c16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c1a:	b902      	cbnz	r2, 8000c1e <__udivmoddi4+0xaa>
 8000c1c:	deff      	udf	#255	; 0xff
 8000c1e:	fab2 f282 	clz	r2, r2
 8000c22:	2a00      	cmp	r2, #0
 8000c24:	d150      	bne.n	8000cc8 <__udivmoddi4+0x154>
 8000c26:	1bcb      	subs	r3, r1, r7
 8000c28:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c2c:	fa1f f887 	uxth.w	r8, r7
 8000c30:	2601      	movs	r6, #1
 8000c32:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c36:	0c21      	lsrs	r1, r4, #16
 8000c38:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c3c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c40:	fb08 f30c 	mul.w	r3, r8, ip
 8000c44:	428b      	cmp	r3, r1
 8000c46:	d907      	bls.n	8000c58 <__udivmoddi4+0xe4>
 8000c48:	1879      	adds	r1, r7, r1
 8000c4a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c4e:	d202      	bcs.n	8000c56 <__udivmoddi4+0xe2>
 8000c50:	428b      	cmp	r3, r1
 8000c52:	f200 80e9 	bhi.w	8000e28 <__udivmoddi4+0x2b4>
 8000c56:	4684      	mov	ip, r0
 8000c58:	1ac9      	subs	r1, r1, r3
 8000c5a:	b2a3      	uxth	r3, r4
 8000c5c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c60:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c64:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000c68:	fb08 f800 	mul.w	r8, r8, r0
 8000c6c:	45a0      	cmp	r8, r4
 8000c6e:	d907      	bls.n	8000c80 <__udivmoddi4+0x10c>
 8000c70:	193c      	adds	r4, r7, r4
 8000c72:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c76:	d202      	bcs.n	8000c7e <__udivmoddi4+0x10a>
 8000c78:	45a0      	cmp	r8, r4
 8000c7a:	f200 80d9 	bhi.w	8000e30 <__udivmoddi4+0x2bc>
 8000c7e:	4618      	mov	r0, r3
 8000c80:	eba4 0408 	sub.w	r4, r4, r8
 8000c84:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c88:	e7bf      	b.n	8000c0a <__udivmoddi4+0x96>
 8000c8a:	428b      	cmp	r3, r1
 8000c8c:	d909      	bls.n	8000ca2 <__udivmoddi4+0x12e>
 8000c8e:	2d00      	cmp	r5, #0
 8000c90:	f000 80b1 	beq.w	8000df6 <__udivmoddi4+0x282>
 8000c94:	2600      	movs	r6, #0
 8000c96:	e9c5 0100 	strd	r0, r1, [r5]
 8000c9a:	4630      	mov	r0, r6
 8000c9c:	4631      	mov	r1, r6
 8000c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca2:	fab3 f683 	clz	r6, r3
 8000ca6:	2e00      	cmp	r6, #0
 8000ca8:	d14a      	bne.n	8000d40 <__udivmoddi4+0x1cc>
 8000caa:	428b      	cmp	r3, r1
 8000cac:	d302      	bcc.n	8000cb4 <__udivmoddi4+0x140>
 8000cae:	4282      	cmp	r2, r0
 8000cb0:	f200 80b8 	bhi.w	8000e24 <__udivmoddi4+0x2b0>
 8000cb4:	1a84      	subs	r4, r0, r2
 8000cb6:	eb61 0103 	sbc.w	r1, r1, r3
 8000cba:	2001      	movs	r0, #1
 8000cbc:	468c      	mov	ip, r1
 8000cbe:	2d00      	cmp	r5, #0
 8000cc0:	d0a8      	beq.n	8000c14 <__udivmoddi4+0xa0>
 8000cc2:	e9c5 4c00 	strd	r4, ip, [r5]
 8000cc6:	e7a5      	b.n	8000c14 <__udivmoddi4+0xa0>
 8000cc8:	f1c2 0320 	rsb	r3, r2, #32
 8000ccc:	fa20 f603 	lsr.w	r6, r0, r3
 8000cd0:	4097      	lsls	r7, r2
 8000cd2:	fa01 f002 	lsl.w	r0, r1, r2
 8000cd6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cda:	40d9      	lsrs	r1, r3
 8000cdc:	4330      	orrs	r0, r6
 8000cde:	0c03      	lsrs	r3, r0, #16
 8000ce0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ce4:	fa1f f887 	uxth.w	r8, r7
 8000ce8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000cec:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cf0:	fb06 f108 	mul.w	r1, r6, r8
 8000cf4:	4299      	cmp	r1, r3
 8000cf6:	fa04 f402 	lsl.w	r4, r4, r2
 8000cfa:	d909      	bls.n	8000d10 <__udivmoddi4+0x19c>
 8000cfc:	18fb      	adds	r3, r7, r3
 8000cfe:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d02:	f080 808d 	bcs.w	8000e20 <__udivmoddi4+0x2ac>
 8000d06:	4299      	cmp	r1, r3
 8000d08:	f240 808a 	bls.w	8000e20 <__udivmoddi4+0x2ac>
 8000d0c:	3e02      	subs	r6, #2
 8000d0e:	443b      	add	r3, r7
 8000d10:	1a5b      	subs	r3, r3, r1
 8000d12:	b281      	uxth	r1, r0
 8000d14:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d18:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d1c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d20:	fb00 f308 	mul.w	r3, r0, r8
 8000d24:	428b      	cmp	r3, r1
 8000d26:	d907      	bls.n	8000d38 <__udivmoddi4+0x1c4>
 8000d28:	1879      	adds	r1, r7, r1
 8000d2a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d2e:	d273      	bcs.n	8000e18 <__udivmoddi4+0x2a4>
 8000d30:	428b      	cmp	r3, r1
 8000d32:	d971      	bls.n	8000e18 <__udivmoddi4+0x2a4>
 8000d34:	3802      	subs	r0, #2
 8000d36:	4439      	add	r1, r7
 8000d38:	1acb      	subs	r3, r1, r3
 8000d3a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d3e:	e778      	b.n	8000c32 <__udivmoddi4+0xbe>
 8000d40:	f1c6 0c20 	rsb	ip, r6, #32
 8000d44:	fa03 f406 	lsl.w	r4, r3, r6
 8000d48:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d4c:	431c      	orrs	r4, r3
 8000d4e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d52:	fa01 f306 	lsl.w	r3, r1, r6
 8000d56:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d5a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000d5e:	431f      	orrs	r7, r3
 8000d60:	0c3b      	lsrs	r3, r7, #16
 8000d62:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d66:	fa1f f884 	uxth.w	r8, r4
 8000d6a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d6e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d72:	fb09 fa08 	mul.w	sl, r9, r8
 8000d76:	458a      	cmp	sl, r1
 8000d78:	fa02 f206 	lsl.w	r2, r2, r6
 8000d7c:	fa00 f306 	lsl.w	r3, r0, r6
 8000d80:	d908      	bls.n	8000d94 <__udivmoddi4+0x220>
 8000d82:	1861      	adds	r1, r4, r1
 8000d84:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d88:	d248      	bcs.n	8000e1c <__udivmoddi4+0x2a8>
 8000d8a:	458a      	cmp	sl, r1
 8000d8c:	d946      	bls.n	8000e1c <__udivmoddi4+0x2a8>
 8000d8e:	f1a9 0902 	sub.w	r9, r9, #2
 8000d92:	4421      	add	r1, r4
 8000d94:	eba1 010a 	sub.w	r1, r1, sl
 8000d98:	b2bf      	uxth	r7, r7
 8000d9a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d9e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000da2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000da6:	fb00 f808 	mul.w	r8, r0, r8
 8000daa:	45b8      	cmp	r8, r7
 8000dac:	d907      	bls.n	8000dbe <__udivmoddi4+0x24a>
 8000dae:	19e7      	adds	r7, r4, r7
 8000db0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000db4:	d22e      	bcs.n	8000e14 <__udivmoddi4+0x2a0>
 8000db6:	45b8      	cmp	r8, r7
 8000db8:	d92c      	bls.n	8000e14 <__udivmoddi4+0x2a0>
 8000dba:	3802      	subs	r0, #2
 8000dbc:	4427      	add	r7, r4
 8000dbe:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dc2:	eba7 0708 	sub.w	r7, r7, r8
 8000dc6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dca:	454f      	cmp	r7, r9
 8000dcc:	46c6      	mov	lr, r8
 8000dce:	4649      	mov	r1, r9
 8000dd0:	d31a      	bcc.n	8000e08 <__udivmoddi4+0x294>
 8000dd2:	d017      	beq.n	8000e04 <__udivmoddi4+0x290>
 8000dd4:	b15d      	cbz	r5, 8000dee <__udivmoddi4+0x27a>
 8000dd6:	ebb3 020e 	subs.w	r2, r3, lr
 8000dda:	eb67 0701 	sbc.w	r7, r7, r1
 8000dde:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000de2:	40f2      	lsrs	r2, r6
 8000de4:	ea4c 0202 	orr.w	r2, ip, r2
 8000de8:	40f7      	lsrs	r7, r6
 8000dea:	e9c5 2700 	strd	r2, r7, [r5]
 8000dee:	2600      	movs	r6, #0
 8000df0:	4631      	mov	r1, r6
 8000df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df6:	462e      	mov	r6, r5
 8000df8:	4628      	mov	r0, r5
 8000dfa:	e70b      	b.n	8000c14 <__udivmoddi4+0xa0>
 8000dfc:	4606      	mov	r6, r0
 8000dfe:	e6e9      	b.n	8000bd4 <__udivmoddi4+0x60>
 8000e00:	4618      	mov	r0, r3
 8000e02:	e6fd      	b.n	8000c00 <__udivmoddi4+0x8c>
 8000e04:	4543      	cmp	r3, r8
 8000e06:	d2e5      	bcs.n	8000dd4 <__udivmoddi4+0x260>
 8000e08:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e0c:	eb69 0104 	sbc.w	r1, r9, r4
 8000e10:	3801      	subs	r0, #1
 8000e12:	e7df      	b.n	8000dd4 <__udivmoddi4+0x260>
 8000e14:	4608      	mov	r0, r1
 8000e16:	e7d2      	b.n	8000dbe <__udivmoddi4+0x24a>
 8000e18:	4660      	mov	r0, ip
 8000e1a:	e78d      	b.n	8000d38 <__udivmoddi4+0x1c4>
 8000e1c:	4681      	mov	r9, r0
 8000e1e:	e7b9      	b.n	8000d94 <__udivmoddi4+0x220>
 8000e20:	4666      	mov	r6, ip
 8000e22:	e775      	b.n	8000d10 <__udivmoddi4+0x19c>
 8000e24:	4630      	mov	r0, r6
 8000e26:	e74a      	b.n	8000cbe <__udivmoddi4+0x14a>
 8000e28:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e2c:	4439      	add	r1, r7
 8000e2e:	e713      	b.n	8000c58 <__udivmoddi4+0xe4>
 8000e30:	3802      	subs	r0, #2
 8000e32:	443c      	add	r4, r7
 8000e34:	e724      	b.n	8000c80 <__udivmoddi4+0x10c>
 8000e36:	bf00      	nop

08000e38 <__aeabi_idiv0>:
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop

08000e3c <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000e40:	f3bf 8f4f 	dsb	sy
}
 8000e44:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e46:	f3bf 8f6f 	isb	sy
}
 8000e4a:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000e4c:	4b0d      	ldr	r3, [pc, #52]	; (8000e84 <SCB_EnableICache+0x48>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000e54:	f3bf 8f4f 	dsb	sy
}
 8000e58:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e5a:	f3bf 8f6f 	isb	sy
}
 8000e5e:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000e60:	4b08      	ldr	r3, [pc, #32]	; (8000e84 <SCB_EnableICache+0x48>)
 8000e62:	695b      	ldr	r3, [r3, #20]
 8000e64:	4a07      	ldr	r2, [pc, #28]	; (8000e84 <SCB_EnableICache+0x48>)
 8000e66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e6a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000e6c:	f3bf 8f4f 	dsb	sy
}
 8000e70:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e72:	f3bf 8f6f 	isb	sy
}
 8000e76:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000e78:	bf00      	nop
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop
 8000e84:	e000ed00 	.word	0xe000ed00

08000e88 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b085      	sub	sp, #20
 8000e8c:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000e8e:	4b1f      	ldr	r3, [pc, #124]	; (8000f0c <SCB_EnableDCache+0x84>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000e96:	f3bf 8f4f 	dsb	sy
}
 8000e9a:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000e9c:	4b1b      	ldr	r3, [pc, #108]	; (8000f0c <SCB_EnableDCache+0x84>)
 8000e9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000ea2:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	0b5b      	lsrs	r3, r3, #13
 8000ea8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000eac:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	08db      	lsrs	r3, r3, #3
 8000eb2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000eb6:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	015a      	lsls	r2, r3, #5
 8000ebc:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000ec0:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000ec2:	68ba      	ldr	r2, [r7, #8]
 8000ec4:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000ec6:	4911      	ldr	r1, [pc, #68]	; (8000f0c <SCB_EnableDCache+0x84>)
 8000ec8:	4313      	orrs	r3, r2
 8000eca:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000ece:	68bb      	ldr	r3, [r7, #8]
 8000ed0:	1e5a      	subs	r2, r3, #1
 8000ed2:	60ba      	str	r2, [r7, #8]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d1ef      	bne.n	8000eb8 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	1e5a      	subs	r2, r3, #1
 8000edc:	60fa      	str	r2, [r7, #12]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d1e5      	bne.n	8000eae <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8000ee2:	f3bf 8f4f 	dsb	sy
}
 8000ee6:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000ee8:	4b08      	ldr	r3, [pc, #32]	; (8000f0c <SCB_EnableDCache+0x84>)
 8000eea:	695b      	ldr	r3, [r3, #20]
 8000eec:	4a07      	ldr	r2, [pc, #28]	; (8000f0c <SCB_EnableDCache+0x84>)
 8000eee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ef2:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000ef4:	f3bf 8f4f 	dsb	sy
}
 8000ef8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000efa:	f3bf 8f6f 	isb	sy
}
 8000efe:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000f00:	bf00      	nop
 8000f02:	3714      	adds	r7, #20
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr
 8000f0c:	e000ed00 	.word	0xe000ed00

08000f10 <DAC_OUTPUT>:
pin2	PG6
pin1	PC6
pin0	PC7
*/

void DAC_OUTPUT(){
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOI, GPIO_PIN_3, !!(DAC_REG & (1<<7)));
 8000f14:	4b37      	ldr	r3, [pc, #220]	; (8000ff4 <DAC_OUTPUT+0xe4>)
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	b25b      	sxtb	r3, r3
 8000f1a:	b2db      	uxtb	r3, r3
 8000f1c:	09db      	lsrs	r3, r3, #7
 8000f1e:	b2db      	uxtb	r3, r3
 8000f20:	461a      	mov	r2, r3
 8000f22:	2108      	movs	r1, #8
 8000f24:	4834      	ldr	r0, [pc, #208]	; (8000ff8 <DAC_OUTPUT+0xe8>)
 8000f26:	f001 f90f 	bl	8002148 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOH, GPIO_PIN_6, !!(DAC_REG & (1<<6)));
 8000f2a:	4b32      	ldr	r3, [pc, #200]	; (8000ff4 <DAC_OUTPUT+0xe4>)
 8000f2c:	781b      	ldrb	r3, [r3, #0]
 8000f2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	bf14      	ite	ne
 8000f36:	2301      	movne	r3, #1
 8000f38:	2300      	moveq	r3, #0
 8000f3a:	b2db      	uxtb	r3, r3
 8000f3c:	461a      	mov	r2, r3
 8000f3e:	2140      	movs	r1, #64	; 0x40
 8000f40:	482e      	ldr	r0, [pc, #184]	; (8000ffc <DAC_OUTPUT+0xec>)
 8000f42:	f001 f901 	bl	8002148 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, !!(DAC_REG & (1<<5)));
 8000f46:	4b2b      	ldr	r3, [pc, #172]	; (8000ff4 <DAC_OUTPUT+0xe4>)
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	f003 0320 	and.w	r3, r3, #32
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	bf14      	ite	ne
 8000f52:	2301      	movne	r3, #1
 8000f54:	2300      	moveq	r3, #0
 8000f56:	b2db      	uxtb	r3, r3
 8000f58:	461a      	mov	r2, r3
 8000f5a:	2101      	movs	r1, #1
 8000f5c:	4826      	ldr	r0, [pc, #152]	; (8000ff8 <DAC_OUTPUT+0xe8>)
 8000f5e:	f001 f8f3 	bl	8002148 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7, !!(DAC_REG & (1<<4)));
 8000f62:	4b24      	ldr	r3, [pc, #144]	; (8000ff4 <DAC_OUTPUT+0xe4>)
 8000f64:	781b      	ldrb	r3, [r3, #0]
 8000f66:	f003 0310 	and.w	r3, r3, #16
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	bf14      	ite	ne
 8000f6e:	2301      	movne	r3, #1
 8000f70:	2300      	moveq	r3, #0
 8000f72:	b2db      	uxtb	r3, r3
 8000f74:	461a      	mov	r2, r3
 8000f76:	2180      	movs	r1, #128	; 0x80
 8000f78:	4821      	ldr	r0, [pc, #132]	; (8001000 <DAC_OUTPUT+0xf0>)
 8000f7a:	f001 f8e5 	bl	8002148 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, !!(DAC_REG & (1<<3)));
 8000f7e:	4b1d      	ldr	r3, [pc, #116]	; (8000ff4 <DAC_OUTPUT+0xe4>)
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	f003 0308 	and.w	r3, r3, #8
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	bf14      	ite	ne
 8000f8a:	2301      	movne	r3, #1
 8000f8c:	2300      	moveq	r3, #0
 8000f8e:	b2db      	uxtb	r3, r3
 8000f90:	461a      	mov	r2, r3
 8000f92:	2110      	movs	r1, #16
 8000f94:	481b      	ldr	r0, [pc, #108]	; (8001004 <DAC_OUTPUT+0xf4>)
 8000f96:	f001 f8d7 	bl	8002148 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, !!(DAC_REG & (1<<2)));
 8000f9a:	4b16      	ldr	r3, [pc, #88]	; (8000ff4 <DAC_OUTPUT+0xe4>)
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	f003 0304 	and.w	r3, r3, #4
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	bf14      	ite	ne
 8000fa6:	2301      	movne	r3, #1
 8000fa8:	2300      	moveq	r3, #0
 8000faa:	b2db      	uxtb	r3, r3
 8000fac:	461a      	mov	r2, r3
 8000fae:	2140      	movs	r1, #64	; 0x40
 8000fb0:	4813      	ldr	r0, [pc, #76]	; (8001000 <DAC_OUTPUT+0xf0>)
 8000fb2:	f001 f8c9 	bl	8002148 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, !!(DAC_REG & (1<<1)));
 8000fb6:	4b0f      	ldr	r3, [pc, #60]	; (8000ff4 <DAC_OUTPUT+0xe4>)
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	f003 0302 	and.w	r3, r3, #2
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	bf14      	ite	ne
 8000fc2:	2301      	movne	r3, #1
 8000fc4:	2300      	moveq	r3, #0
 8000fc6:	b2db      	uxtb	r3, r3
 8000fc8:	461a      	mov	r2, r3
 8000fca:	2140      	movs	r1, #64	; 0x40
 8000fcc:	480e      	ldr	r0, [pc, #56]	; (8001008 <DAC_OUTPUT+0xf8>)
 8000fce:	f001 f8bb 	bl	8002148 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, !!(DAC_REG & (1<<0)));
 8000fd2:	4b08      	ldr	r3, [pc, #32]	; (8000ff4 <DAC_OUTPUT+0xe4>)
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	f003 0301 	and.w	r3, r3, #1
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	bf14      	ite	ne
 8000fde:	2301      	movne	r3, #1
 8000fe0:	2300      	moveq	r3, #0
 8000fe2:	b2db      	uxtb	r3, r3
 8000fe4:	461a      	mov	r2, r3
 8000fe6:	2180      	movs	r1, #128	; 0x80
 8000fe8:	4807      	ldr	r0, [pc, #28]	; (8001008 <DAC_OUTPUT+0xf8>)
 8000fea:	f001 f8ad 	bl	8002148 <HAL_GPIO_WritePin>
}
 8000fee:	bf00      	nop
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	2000015d 	.word	0x2000015d
 8000ff8:	40022000 	.word	0x40022000
 8000ffc:	40021c00 	.word	0x40021c00
 8001000:	40021800 	.word	0x40021800
 8001004:	40020400 	.word	0x40020400
 8001008:	40020800 	.word	0x40020800

0800100c <keyboard_update>:
IDP[2] A2 PF9		INF[2] pin10 PA8
IDP[3] A3 PF8		INF[3] pin11 PB15
IDP[4] A4 PF7		INF[4] pin12 PB14
IDP[5] A5 PF6		INF[5] pin13 PI1
*/
void keyboard_update(){
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
	key_ID[0] = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8001010:	2101      	movs	r1, #1
 8001012:	4851      	ldr	r0, [pc, #324]	; (8001158 <keyboard_update+0x14c>)
 8001014:	f001 f880 	bl	8002118 <HAL_GPIO_ReadPin>
 8001018:	4603      	mov	r3, r0
 800101a:	461a      	mov	r2, r3
 800101c:	4b4f      	ldr	r3, [pc, #316]	; (800115c <keyboard_update+0x150>)
 800101e:	701a      	strb	r2, [r3, #0]
	key_ID[1] = HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_10);
 8001020:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001024:	484e      	ldr	r0, [pc, #312]	; (8001160 <keyboard_update+0x154>)
 8001026:	f001 f877 	bl	8002118 <HAL_GPIO_ReadPin>
 800102a:	4603      	mov	r3, r0
 800102c:	461a      	mov	r2, r3
 800102e:	4b4b      	ldr	r3, [pc, #300]	; (800115c <keyboard_update+0x150>)
 8001030:	705a      	strb	r2, [r3, #1]
	key_ID[2] = HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_9);
 8001032:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001036:	484a      	ldr	r0, [pc, #296]	; (8001160 <keyboard_update+0x154>)
 8001038:	f001 f86e 	bl	8002118 <HAL_GPIO_ReadPin>
 800103c:	4603      	mov	r3, r0
 800103e:	461a      	mov	r2, r3
 8001040:	4b46      	ldr	r3, [pc, #280]	; (800115c <keyboard_update+0x150>)
 8001042:	709a      	strb	r2, [r3, #2]
	key_ID[3] = HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_8);
 8001044:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001048:	4845      	ldr	r0, [pc, #276]	; (8001160 <keyboard_update+0x154>)
 800104a:	f001 f865 	bl	8002118 <HAL_GPIO_ReadPin>
 800104e:	4603      	mov	r3, r0
 8001050:	461a      	mov	r2, r3
 8001052:	4b42      	ldr	r3, [pc, #264]	; (800115c <keyboard_update+0x150>)
 8001054:	70da      	strb	r2, [r3, #3]
	key_ID[4] = HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_7);
 8001056:	2180      	movs	r1, #128	; 0x80
 8001058:	4841      	ldr	r0, [pc, #260]	; (8001160 <keyboard_update+0x154>)
 800105a:	f001 f85d 	bl	8002118 <HAL_GPIO_ReadPin>
 800105e:	4603      	mov	r3, r0
 8001060:	461a      	mov	r2, r3
 8001062:	4b3e      	ldr	r3, [pc, #248]	; (800115c <keyboard_update+0x150>)
 8001064:	711a      	strb	r2, [r3, #4]
	key_ID[5] = HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_6);
 8001066:	2140      	movs	r1, #64	; 0x40
 8001068:	483d      	ldr	r0, [pc, #244]	; (8001160 <keyboard_update+0x154>)
 800106a:	f001 f855 	bl	8002118 <HAL_GPIO_ReadPin>
 800106e:	4603      	mov	r3, r0
 8001070:	461a      	mov	r2, r3
 8001072:	4b3a      	ldr	r3, [pc, #232]	; (800115c <keyboard_update+0x150>)
 8001074:	715a      	strb	r2, [r3, #5]

	key_info[0] = HAL_GPIO_ReadPin(GPIOI, GPIO_PIN_2);
 8001076:	2104      	movs	r1, #4
 8001078:	483a      	ldr	r0, [pc, #232]	; (8001164 <keyboard_update+0x158>)
 800107a:	f001 f84d 	bl	8002118 <HAL_GPIO_ReadPin>
 800107e:	4603      	mov	r3, r0
 8001080:	461a      	mov	r2, r3
 8001082:	4b39      	ldr	r3, [pc, #228]	; (8001168 <keyboard_update+0x15c>)
 8001084:	701a      	strb	r2, [r3, #0]
	key_info[1] = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15);
 8001086:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800108a:	4833      	ldr	r0, [pc, #204]	; (8001158 <keyboard_update+0x14c>)
 800108c:	f001 f844 	bl	8002118 <HAL_GPIO_ReadPin>
 8001090:	4603      	mov	r3, r0
 8001092:	461a      	mov	r2, r3
 8001094:	4b34      	ldr	r3, [pc, #208]	; (8001168 <keyboard_update+0x15c>)
 8001096:	705a      	strb	r2, [r3, #1]
//	key_info[2] = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8);
//	key_info[3] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15);
//	key_info[4] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14);
//	key_info[5] = HAL_GPIO_ReadPin(GPIOI, GPIO_PIN_1);

	current_key = (key_ID[5]<<5) + (key_ID[4]<<4) + (key_ID[3]<<3) + (key_ID[2]<<2) + (key_ID[1]<<1) + (key_ID[0]<<0);
 8001098:	4b30      	ldr	r3, [pc, #192]	; (800115c <keyboard_update+0x150>)
 800109a:	795b      	ldrb	r3, [r3, #5]
 800109c:	015b      	lsls	r3, r3, #5
 800109e:	b2da      	uxtb	r2, r3
 80010a0:	4b2e      	ldr	r3, [pc, #184]	; (800115c <keyboard_update+0x150>)
 80010a2:	791b      	ldrb	r3, [r3, #4]
 80010a4:	011b      	lsls	r3, r3, #4
 80010a6:	b2db      	uxtb	r3, r3
 80010a8:	4413      	add	r3, r2
 80010aa:	b2da      	uxtb	r2, r3
 80010ac:	4b2b      	ldr	r3, [pc, #172]	; (800115c <keyboard_update+0x150>)
 80010ae:	78db      	ldrb	r3, [r3, #3]
 80010b0:	00db      	lsls	r3, r3, #3
 80010b2:	b2db      	uxtb	r3, r3
 80010b4:	4413      	add	r3, r2
 80010b6:	b2da      	uxtb	r2, r3
 80010b8:	4b28      	ldr	r3, [pc, #160]	; (800115c <keyboard_update+0x150>)
 80010ba:	789b      	ldrb	r3, [r3, #2]
 80010bc:	009b      	lsls	r3, r3, #2
 80010be:	b2db      	uxtb	r3, r3
 80010c0:	4413      	add	r3, r2
 80010c2:	b2da      	uxtb	r2, r3
 80010c4:	4b25      	ldr	r3, [pc, #148]	; (800115c <keyboard_update+0x150>)
 80010c6:	785b      	ldrb	r3, [r3, #1]
 80010c8:	005b      	lsls	r3, r3, #1
 80010ca:	b2db      	uxtb	r3, r3
 80010cc:	4413      	add	r3, r2
 80010ce:	b2da      	uxtb	r2, r3
 80010d0:	4b22      	ldr	r3, [pc, #136]	; (800115c <keyboard_update+0x150>)
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	4413      	add	r3, r2
 80010d6:	b2da      	uxtb	r2, r3
 80010d8:	4b24      	ldr	r3, [pc, #144]	; (800116c <keyboard_update+0x160>)
 80010da:	701a      	strb	r2, [r3, #0]
	current_info = key_info[0] + 2*key_info[1];		// 2 for key press, 1 for key release, 0 for nothing
 80010dc:	4b22      	ldr	r3, [pc, #136]	; (8001168 <keyboard_update+0x15c>)
 80010de:	781a      	ldrb	r2, [r3, #0]
 80010e0:	4b21      	ldr	r3, [pc, #132]	; (8001168 <keyboard_update+0x15c>)
 80010e2:	785b      	ldrb	r3, [r3, #1]
 80010e4:	005b      	lsls	r3, r3, #1
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	4413      	add	r3, r2
 80010ea:	b2da      	uxtb	r2, r3
 80010ec:	4b20      	ldr	r3, [pc, #128]	; (8001170 <keyboard_update+0x164>)
 80010ee:	701a      	strb	r2, [r3, #0]

	if (current_key != prev_key || current_info != prev_info) // some state was changed
 80010f0:	4b1e      	ldr	r3, [pc, #120]	; (800116c <keyboard_update+0x160>)
 80010f2:	781a      	ldrb	r2, [r3, #0]
 80010f4:	4b1f      	ldr	r3, [pc, #124]	; (8001174 <keyboard_update+0x168>)
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	429a      	cmp	r2, r3
 80010fa:	d105      	bne.n	8001108 <keyboard_update+0xfc>
 80010fc:	4b1c      	ldr	r3, [pc, #112]	; (8001170 <keyboard_update+0x164>)
 80010fe:	781a      	ldrb	r2, [r3, #0]
 8001100:	4b1d      	ldr	r3, [pc, #116]	; (8001178 <keyboard_update+0x16c>)
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	429a      	cmp	r2, r3
 8001106:	d024      	beq.n	8001152 <keyboard_update+0x146>
	{
		if (current_info == 1 && current_key>=0 && current_key<=35){
 8001108:	4b19      	ldr	r3, [pc, #100]	; (8001170 <keyboard_update+0x164>)
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	2b01      	cmp	r3, #1
 800110e:	d10a      	bne.n	8001126 <keyboard_update+0x11a>
 8001110:	4b16      	ldr	r3, [pc, #88]	; (800116c <keyboard_update+0x160>)
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	2b23      	cmp	r3, #35	; 0x23
 8001116:	d806      	bhi.n	8001126 <keyboard_update+0x11a>
			keys_status[current_key] = 0;
 8001118:	4b14      	ldr	r3, [pc, #80]	; (800116c <keyboard_update+0x160>)
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	461a      	mov	r2, r3
 800111e:	4b17      	ldr	r3, [pc, #92]	; (800117c <keyboard_update+0x170>)
 8001120:	2100      	movs	r1, #0
 8001122:	5499      	strb	r1, [r3, r2]
 8001124:	e00d      	b.n	8001142 <keyboard_update+0x136>
		}
		else if (current_info == 2 && current_key>=0 && current_key<=35){
 8001126:	4b12      	ldr	r3, [pc, #72]	; (8001170 <keyboard_update+0x164>)
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	2b02      	cmp	r3, #2
 800112c:	d109      	bne.n	8001142 <keyboard_update+0x136>
 800112e:	4b0f      	ldr	r3, [pc, #60]	; (800116c <keyboard_update+0x160>)
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	2b23      	cmp	r3, #35	; 0x23
 8001134:	d805      	bhi.n	8001142 <keyboard_update+0x136>
			keys_status[current_key] = 1;
 8001136:	4b0d      	ldr	r3, [pc, #52]	; (800116c <keyboard_update+0x160>)
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	461a      	mov	r2, r3
 800113c:	4b0f      	ldr	r3, [pc, #60]	; (800117c <keyboard_update+0x170>)
 800113e:	2101      	movs	r1, #1
 8001140:	5499      	strb	r1, [r3, r2]
		}
		prev_key = current_key;
 8001142:	4b0a      	ldr	r3, [pc, #40]	; (800116c <keyboard_update+0x160>)
 8001144:	781a      	ldrb	r2, [r3, #0]
 8001146:	4b0b      	ldr	r3, [pc, #44]	; (8001174 <keyboard_update+0x168>)
 8001148:	701a      	strb	r2, [r3, #0]
		prev_info = current_info;
 800114a:	4b09      	ldr	r3, [pc, #36]	; (8001170 <keyboard_update+0x164>)
 800114c:	781a      	ldrb	r2, [r3, #0]
 800114e:	4b0a      	ldr	r3, [pc, #40]	; (8001178 <keyboard_update+0x16c>)
 8001150:	701a      	strb	r2, [r3, #0]

	}

}
 8001152:	bf00      	nop
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	40020000 	.word	0x40020000
 800115c:	2000454c 	.word	0x2000454c
 8001160:	40021400 	.word	0x40021400
 8001164:	40022000 	.word	0x40022000
 8001168:	2000406c 	.word	0x2000406c
 800116c:	2000015c 	.word	0x2000015c
 8001170:	200000d4 	.word	0x200000d4
 8001174:	200000c8 	.word	0x200000c8
 8001178:	20004068 	.word	0x20004068
 800117c:	200042a8 	.word	0x200042a8

08001180 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001180:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001184:	b084      	sub	sp, #16
 8001186:	af00      	add	r7, sp, #0
 8001188:	6078      	str	r0, [r7, #4]

	int idx;
	n++;
 800118a:	4b45      	ldr	r3, [pc, #276]	; (80012a0 <HAL_TIM_PeriodElapsedCallback+0x120>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	3301      	adds	r3, #1
 8001190:	4a43      	ldr	r2, [pc, #268]	; (80012a0 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8001192:	6013      	str	r3, [r2, #0]
	DAC_REG = 0;
 8001194:	4b43      	ldr	r3, [pc, #268]	; (80012a4 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8001196:	2200      	movs	r2, #0
 8001198:	701a      	strb	r2, [r3, #0]
	for (idx=0; idx<36; idx++){
 800119a:	2300      	movs	r3, #0
 800119c:	60fb      	str	r3, [r7, #12]
 800119e:	e071      	b.n	8001284 <HAL_TIM_PeriodElapsedCallback+0x104>
		if (keys_status[idx]){
 80011a0:	4a41      	ldr	r2, [pc, #260]	; (80012a8 <HAL_TIM_PeriodElapsedCallback+0x128>)
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	4413      	add	r3, r2
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d068      	beq.n	800127e <HAL_TIM_PeriodElapsedCallback+0xfe>
			DAC_REG += 64*(sin(2*PI*baseF[idx]*2*(float)n/Fs) + 1);
 80011ac:	4b3d      	ldr	r3, [pc, #244]	; (80012a4 <HAL_TIM_PeriodElapsedCallback+0x124>)
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	4618      	mov	r0, r3
 80011b2:	f7ff f97b 	bl	80004ac <__aeabi_i2d>
 80011b6:	4604      	mov	r4, r0
 80011b8:	460d      	mov	r5, r1
 80011ba:	4a3c      	ldr	r2, [pc, #240]	; (80012ac <HAL_TIM_PeriodElapsedCallback+0x12c>)
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	009b      	lsls	r3, r3, #2
 80011c0:	4413      	add	r3, r2
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4618      	mov	r0, r3
 80011c6:	f7ff f983 	bl	80004d0 <__aeabi_f2d>
 80011ca:	a333      	add	r3, pc, #204	; (adr r3, 8001298 <HAL_TIM_PeriodElapsedCallback+0x118>)
 80011cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011d0:	f7ff f9d6 	bl	8000580 <__aeabi_dmul>
 80011d4:	4602      	mov	r2, r0
 80011d6:	460b      	mov	r3, r1
 80011d8:	4610      	mov	r0, r2
 80011da:	4619      	mov	r1, r3
 80011dc:	4602      	mov	r2, r0
 80011de:	460b      	mov	r3, r1
 80011e0:	f7ff f818 	bl	8000214 <__adddf3>
 80011e4:	4602      	mov	r2, r0
 80011e6:	460b      	mov	r3, r1
 80011e8:	4690      	mov	r8, r2
 80011ea:	4699      	mov	r9, r3
 80011ec:	4b2c      	ldr	r3, [pc, #176]	; (80012a0 <HAL_TIM_PeriodElapsedCallback+0x120>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	ee07 3a90 	vmov	s15, r3
 80011f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011f8:	ee17 0a90 	vmov	r0, s15
 80011fc:	f7ff f968 	bl	80004d0 <__aeabi_f2d>
 8001200:	4602      	mov	r2, r0
 8001202:	460b      	mov	r3, r1
 8001204:	4640      	mov	r0, r8
 8001206:	4649      	mov	r1, r9
 8001208:	f7ff f9ba 	bl	8000580 <__aeabi_dmul>
 800120c:	4602      	mov	r2, r0
 800120e:	460b      	mov	r3, r1
 8001210:	4690      	mov	r8, r2
 8001212:	4699      	mov	r9, r3
 8001214:	4b26      	ldr	r3, [pc, #152]	; (80012b0 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4618      	mov	r0, r3
 800121a:	f7ff f937 	bl	800048c <__aeabi_ui2d>
 800121e:	4602      	mov	r2, r0
 8001220:	460b      	mov	r3, r1
 8001222:	4640      	mov	r0, r8
 8001224:	4649      	mov	r1, r9
 8001226:	f7ff fad5 	bl	80007d4 <__aeabi_ddiv>
 800122a:	4602      	mov	r2, r0
 800122c:	460b      	mov	r3, r1
 800122e:	ec43 2b17 	vmov	d7, r2, r3
 8001232:	eeb0 0a47 	vmov.f32	s0, s14
 8001236:	eef0 0a67 	vmov.f32	s1, s15
 800123a:	f004 fff9 	bl	8006230 <sin>
 800123e:	ec51 0b10 	vmov	r0, r1, d0
 8001242:	f04f 0200 	mov.w	r2, #0
 8001246:	4b1b      	ldr	r3, [pc, #108]	; (80012b4 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8001248:	f7fe ffe4 	bl	8000214 <__adddf3>
 800124c:	4602      	mov	r2, r0
 800124e:	460b      	mov	r3, r1
 8001250:	4610      	mov	r0, r2
 8001252:	4619      	mov	r1, r3
 8001254:	f04f 0200 	mov.w	r2, #0
 8001258:	4b17      	ldr	r3, [pc, #92]	; (80012b8 <HAL_TIM_PeriodElapsedCallback+0x138>)
 800125a:	f7ff f991 	bl	8000580 <__aeabi_dmul>
 800125e:	4602      	mov	r2, r0
 8001260:	460b      	mov	r3, r1
 8001262:	4620      	mov	r0, r4
 8001264:	4629      	mov	r1, r5
 8001266:	f7fe ffd5 	bl	8000214 <__adddf3>
 800126a:	4602      	mov	r2, r0
 800126c:	460b      	mov	r3, r1
 800126e:	4610      	mov	r0, r2
 8001270:	4619      	mov	r1, r3
 8001272:	f7ff fc47 	bl	8000b04 <__aeabi_d2uiz>
 8001276:	4603      	mov	r3, r0
 8001278:	b2da      	uxtb	r2, r3
 800127a:	4b0a      	ldr	r3, [pc, #40]	; (80012a4 <HAL_TIM_PeriodElapsedCallback+0x124>)
 800127c:	701a      	strb	r2, [r3, #0]
	for (idx=0; idx<36; idx++){
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	3301      	adds	r3, #1
 8001282:	60fb      	str	r3, [r7, #12]
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	2b23      	cmp	r3, #35	; 0x23
 8001288:	dd8a      	ble.n	80011a0 <HAL_TIM_PeriodElapsedCallback+0x20>
		}
	}

	DAC_OUTPUT();
 800128a:	f7ff fe41 	bl	8000f10 <DAC_OUTPUT>

}
 800128e:	bf00      	nop
 8001290:	3710      	adds	r7, #16
 8001292:	46bd      	mov	sp, r7
 8001294:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001298:	54411744 	.word	0x54411744
 800129c:	401921fb 	.word	0x401921fb
 80012a0:	200000cc 	.word	0x200000cc
 80012a4:	2000015d 	.word	0x2000015d
 80012a8:	200042a8 	.word	0x200042a8
 80012ac:	20000004 	.word	0x20000004
 80012b0:	20000000 	.word	0x20000000
 80012b4:	3ff00000 	.word	0x3ff00000
 80012b8:	40500000 	.word	0x40500000

080012bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 80012c0:	f7ff fdbc 	bl	8000e3c <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 80012c4:	f7ff fde0 	bl	8000e88 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012c8:	f000 fbd8 	bl	8001a7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012cc:	f000 f812 	bl	80012f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012d0:	f000 f950 	bl	8001574 <MX_GPIO_Init>
  MX_TIM2_Init();
 80012d4:	f000 f8d2 	bl	800147c <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80012d8:	f000 f91c 	bl	8001514 <MX_USART1_UART_Init>
  MX_SDMMC1_SD_Init();
 80012dc:	f000 f8ae 	bl	800143c <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 80012e0:	f004 fd8c 	bl	8005dfc <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim2);	// initialize counter interrupt
 80012e4:	4802      	ldr	r0, [pc, #8]	; (80012f0 <main+0x34>)
 80012e6:	f002 ffe7 	bl	80042b8 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  keyboard_update();
 80012ea:	f7ff fe8f 	bl	800100c <keyboard_update>
 80012ee:	e7fc      	b.n	80012ea <main+0x2e>
 80012f0:	200042cc 	.word	0x200042cc

080012f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b0b4      	sub	sp, #208	; 0xd0
 80012f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012fa:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80012fe:	2230      	movs	r2, #48	; 0x30
 8001300:	2100      	movs	r1, #0
 8001302:	4618      	mov	r0, r3
 8001304:	f004 ff8a 	bl	800621c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001308:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800130c:	2200      	movs	r2, #0
 800130e:	601a      	str	r2, [r3, #0]
 8001310:	605a      	str	r2, [r3, #4]
 8001312:	609a      	str	r2, [r3, #8]
 8001314:	60da      	str	r2, [r3, #12]
 8001316:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001318:	f107 0308 	add.w	r3, r7, #8
 800131c:	2284      	movs	r2, #132	; 0x84
 800131e:	2100      	movs	r1, #0
 8001320:	4618      	mov	r0, r3
 8001322:	f004 ff7b 	bl	800621c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001326:	4b42      	ldr	r3, [pc, #264]	; (8001430 <SystemClock_Config+0x13c>)
 8001328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132a:	4a41      	ldr	r2, [pc, #260]	; (8001430 <SystemClock_Config+0x13c>)
 800132c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001330:	6413      	str	r3, [r2, #64]	; 0x40
 8001332:	4b3f      	ldr	r3, [pc, #252]	; (8001430 <SystemClock_Config+0x13c>)
 8001334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001336:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800133a:	607b      	str	r3, [r7, #4]
 800133c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800133e:	4b3d      	ldr	r3, [pc, #244]	; (8001434 <SystemClock_Config+0x140>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4a3c      	ldr	r2, [pc, #240]	; (8001434 <SystemClock_Config+0x140>)
 8001344:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001348:	6013      	str	r3, [r2, #0]
 800134a:	4b3a      	ldr	r3, [pc, #232]	; (8001434 <SystemClock_Config+0x140>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001352:	603b      	str	r3, [r7, #0]
 8001354:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001356:	2301      	movs	r3, #1
 8001358:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800135c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001360:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001364:	2302      	movs	r3, #2
 8001366:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800136a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800136e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 12;
 8001372:	230c      	movs	r3, #12
 8001374:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001378:	23c0      	movs	r3, #192	; 0xc0
 800137a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800137e:	2302      	movs	r3, #2
 8001380:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8001384:	2309      	movs	r3, #9
 8001386:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800138a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800138e:	4618      	mov	r0, r3
 8001390:	f000 ff44 	bl	800221c <HAL_RCC_OscConfig>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800139a:	f000 f9fd 	bl	8001798 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800139e:	f000 feed 	bl	800217c <HAL_PWREx_EnableOverDrive>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80013a8:	f000 f9f6 	bl	8001798 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013ac:	230f      	movs	r3, #15
 80013ae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013b2:	2302      	movs	r3, #2
 80013b4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013b8:	2300      	movs	r3, #0
 80013ba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80013be:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80013c2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80013c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013ca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80013ce:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80013d2:	2106      	movs	r1, #6
 80013d4:	4618      	mov	r0, r3
 80013d6:	f001 f9c5 	bl	8002764 <HAL_RCC_ClockConfig>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <SystemClock_Config+0xf0>
  {
    Error_Handler();
 80013e0:	f000 f9da 	bl	8001798 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_SDMMC1
 80013e4:	4b14      	ldr	r3, [pc, #80]	; (8001438 <SystemClock_Config+0x144>)
 80013e6:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 80013e8:	2332      	movs	r3, #50	; 0x32
 80013ea:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 80013ec:	2305      	movs	r3, #5
 80013ee:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 80013f0:	2302      	movs	r3, #2
 80013f2:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV4;
 80013f4:	2301      	movs	r3, #1
 80013f6:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 80013f8:	2301      	movs	r3, #1
 80013fa:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80013fc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001400:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001402:	2300      	movs	r3, #0
 8001404:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8001406:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800140a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 800140e:	2300      	movs	r3, #0
 8001410:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001414:	f107 0308 	add.w	r3, r7, #8
 8001418:	4618      	mov	r0, r3
 800141a:	f001 fb79 	bl	8002b10 <HAL_RCCEx_PeriphCLKConfig>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <SystemClock_Config+0x134>
  {
    Error_Handler();
 8001424:	f000 f9b8 	bl	8001798 <Error_Handler>
  }
}
 8001428:	bf00      	nop
 800142a:	37d0      	adds	r7, #208	; 0xd0
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	40023800 	.word	0x40023800
 8001434:	40007000 	.word	0x40007000
 8001438:	00a00040 	.word	0x00a00040

0800143c <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8001440:	4b0c      	ldr	r3, [pc, #48]	; (8001474 <MX_SDMMC1_SD_Init+0x38>)
 8001442:	4a0d      	ldr	r2, [pc, #52]	; (8001478 <MX_SDMMC1_SD_Init+0x3c>)
 8001444:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001446:	4b0b      	ldr	r3, [pc, #44]	; (8001474 <MX_SDMMC1_SD_Init+0x38>)
 8001448:	2200      	movs	r2, #0
 800144a:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 800144c:	4b09      	ldr	r3, [pc, #36]	; (8001474 <MX_SDMMC1_SD_Init+0x38>)
 800144e:	2200      	movs	r2, #0
 8001450:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001452:	4b08      	ldr	r3, [pc, #32]	; (8001474 <MX_SDMMC1_SD_Init+0x38>)
 8001454:	2200      	movs	r2, #0
 8001456:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8001458:	4b06      	ldr	r3, [pc, #24]	; (8001474 <MX_SDMMC1_SD_Init+0x38>)
 800145a:	2200      	movs	r2, #0
 800145c:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800145e:	4b05      	ldr	r3, [pc, #20]	; (8001474 <MX_SDMMC1_SD_Init+0x38>)
 8001460:	2200      	movs	r2, #0
 8001462:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8001464:	4b03      	ldr	r3, [pc, #12]	; (8001474 <MX_SDMMC1_SD_Init+0x38>)
 8001466:	2200      	movs	r2, #0
 8001468:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 800146a:	bf00      	nop
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr
 8001474:	200000d8 	.word	0x200000d8
 8001478:	40012c00 	.word	0x40012c00

0800147c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b088      	sub	sp, #32
 8001480:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001482:	f107 0310 	add.w	r3, r7, #16
 8001486:	2200      	movs	r2, #0
 8001488:	601a      	str	r2, [r3, #0]
 800148a:	605a      	str	r2, [r3, #4]
 800148c:	609a      	str	r2, [r3, #8]
 800148e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001490:	1d3b      	adds	r3, r7, #4
 8001492:	2200      	movs	r2, #0
 8001494:	601a      	str	r2, [r3, #0]
 8001496:	605a      	str	r2, [r3, #4]
 8001498:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800149a:	4b1d      	ldr	r3, [pc, #116]	; (8001510 <MX_TIM2_Init+0x94>)
 800149c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014a0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100;
 80014a2:	4b1b      	ldr	r3, [pc, #108]	; (8001510 <MX_TIM2_Init+0x94>)
 80014a4:	2264      	movs	r2, #100	; 0x64
 80014a6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014a8:	4b19      	ldr	r3, [pc, #100]	; (8001510 <MX_TIM2_Init+0x94>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 124;
 80014ae:	4b18      	ldr	r3, [pc, #96]	; (8001510 <MX_TIM2_Init+0x94>)
 80014b0:	227c      	movs	r2, #124	; 0x7c
 80014b2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014b4:	4b16      	ldr	r3, [pc, #88]	; (8001510 <MX_TIM2_Init+0x94>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014ba:	4b15      	ldr	r3, [pc, #84]	; (8001510 <MX_TIM2_Init+0x94>)
 80014bc:	2200      	movs	r2, #0
 80014be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80014c0:	4813      	ldr	r0, [pc, #76]	; (8001510 <MX_TIM2_Init+0x94>)
 80014c2:	f002 fea1 	bl	8004208 <HAL_TIM_Base_Init>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80014cc:	f000 f964 	bl	8001798 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014d4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80014d6:	f107 0310 	add.w	r3, r7, #16
 80014da:	4619      	mov	r1, r3
 80014dc:	480c      	ldr	r0, [pc, #48]	; (8001510 <MX_TIM2_Init+0x94>)
 80014de:	f003 f883 	bl	80045e8 <HAL_TIM_ConfigClockSource>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d001      	beq.n	80014ec <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80014e8:	f000 f956 	bl	8001798 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80014ec:	2320      	movs	r3, #32
 80014ee:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014f0:	2300      	movs	r3, #0
 80014f2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80014f4:	1d3b      	adds	r3, r7, #4
 80014f6:	4619      	mov	r1, r3
 80014f8:	4805      	ldr	r0, [pc, #20]	; (8001510 <MX_TIM2_Init+0x94>)
 80014fa:	f003 fa9d 	bl	8004a38 <HAL_TIMEx_MasterConfigSynchronization>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d001      	beq.n	8001508 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001504:	f000 f948 	bl	8001798 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001508:	bf00      	nop
 800150a:	3720      	adds	r7, #32
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	200042cc 	.word	0x200042cc

08001514 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001518:	4b14      	ldr	r3, [pc, #80]	; (800156c <MX_USART1_UART_Init+0x58>)
 800151a:	4a15      	ldr	r2, [pc, #84]	; (8001570 <MX_USART1_UART_Init+0x5c>)
 800151c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800151e:	4b13      	ldr	r3, [pc, #76]	; (800156c <MX_USART1_UART_Init+0x58>)
 8001520:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001524:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001526:	4b11      	ldr	r3, [pc, #68]	; (800156c <MX_USART1_UART_Init+0x58>)
 8001528:	2200      	movs	r2, #0
 800152a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800152c:	4b0f      	ldr	r3, [pc, #60]	; (800156c <MX_USART1_UART_Init+0x58>)
 800152e:	2200      	movs	r2, #0
 8001530:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001532:	4b0e      	ldr	r3, [pc, #56]	; (800156c <MX_USART1_UART_Init+0x58>)
 8001534:	2200      	movs	r2, #0
 8001536:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001538:	4b0c      	ldr	r3, [pc, #48]	; (800156c <MX_USART1_UART_Init+0x58>)
 800153a:	220c      	movs	r2, #12
 800153c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800153e:	4b0b      	ldr	r3, [pc, #44]	; (800156c <MX_USART1_UART_Init+0x58>)
 8001540:	2200      	movs	r2, #0
 8001542:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001544:	4b09      	ldr	r3, [pc, #36]	; (800156c <MX_USART1_UART_Init+0x58>)
 8001546:	2200      	movs	r2, #0
 8001548:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800154a:	4b08      	ldr	r3, [pc, #32]	; (800156c <MX_USART1_UART_Init+0x58>)
 800154c:	2200      	movs	r2, #0
 800154e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001550:	4b06      	ldr	r3, [pc, #24]	; (800156c <MX_USART1_UART_Init+0x58>)
 8001552:	2200      	movs	r2, #0
 8001554:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001556:	4805      	ldr	r0, [pc, #20]	; (800156c <MX_USART1_UART_Init+0x58>)
 8001558:	f003 fb1a 	bl	8004b90 <HAL_UART_Init>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001562:	f000 f919 	bl	8001798 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001566:	bf00      	nop
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	20003fe4 	.word	0x20003fe4
 8001570:	40011000 	.word	0x40011000

08001574 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b08e      	sub	sp, #56	; 0x38
 8001578:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800157a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800157e:	2200      	movs	r2, #0
 8001580:	601a      	str	r2, [r3, #0]
 8001582:	605a      	str	r2, [r3, #4]
 8001584:	609a      	str	r2, [r3, #8]
 8001586:	60da      	str	r2, [r3, #12]
 8001588:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800158a:	4b7b      	ldr	r3, [pc, #492]	; (8001778 <MX_GPIO_Init+0x204>)
 800158c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158e:	4a7a      	ldr	r2, [pc, #488]	; (8001778 <MX_GPIO_Init+0x204>)
 8001590:	f043 0302 	orr.w	r3, r3, #2
 8001594:	6313      	str	r3, [r2, #48]	; 0x30
 8001596:	4b78      	ldr	r3, [pc, #480]	; (8001778 <MX_GPIO_Init+0x204>)
 8001598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159a:	f003 0302 	and.w	r3, r3, #2
 800159e:	623b      	str	r3, [r7, #32]
 80015a0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015a2:	4b75      	ldr	r3, [pc, #468]	; (8001778 <MX_GPIO_Init+0x204>)
 80015a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a6:	4a74      	ldr	r2, [pc, #464]	; (8001778 <MX_GPIO_Init+0x204>)
 80015a8:	f043 0304 	orr.w	r3, r3, #4
 80015ac:	6313      	str	r3, [r2, #48]	; 0x30
 80015ae:	4b72      	ldr	r3, [pc, #456]	; (8001778 <MX_GPIO_Init+0x204>)
 80015b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b2:	f003 0304 	and.w	r3, r3, #4
 80015b6:	61fb      	str	r3, [r7, #28]
 80015b8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ba:	4b6f      	ldr	r3, [pc, #444]	; (8001778 <MX_GPIO_Init+0x204>)
 80015bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015be:	4a6e      	ldr	r2, [pc, #440]	; (8001778 <MX_GPIO_Init+0x204>)
 80015c0:	f043 0301 	orr.w	r3, r3, #1
 80015c4:	6313      	str	r3, [r2, #48]	; 0x30
 80015c6:	4b6c      	ldr	r3, [pc, #432]	; (8001778 <MX_GPIO_Init+0x204>)
 80015c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ca:	f003 0301 	and.w	r3, r3, #1
 80015ce:	61bb      	str	r3, [r7, #24]
 80015d0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80015d2:	4b69      	ldr	r3, [pc, #420]	; (8001778 <MX_GPIO_Init+0x204>)
 80015d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d6:	4a68      	ldr	r2, [pc, #416]	; (8001778 <MX_GPIO_Init+0x204>)
 80015d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015dc:	6313      	str	r3, [r2, #48]	; 0x30
 80015de:	4b66      	ldr	r3, [pc, #408]	; (8001778 <MX_GPIO_Init+0x204>)
 80015e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015e6:	617b      	str	r3, [r7, #20]
 80015e8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015ea:	4b63      	ldr	r3, [pc, #396]	; (8001778 <MX_GPIO_Init+0x204>)
 80015ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ee:	4a62      	ldr	r2, [pc, #392]	; (8001778 <MX_GPIO_Init+0x204>)
 80015f0:	f043 0308 	orr.w	r3, r3, #8
 80015f4:	6313      	str	r3, [r2, #48]	; 0x30
 80015f6:	4b60      	ldr	r3, [pc, #384]	; (8001778 <MX_GPIO_Init+0x204>)
 80015f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fa:	f003 0308 	and.w	r3, r3, #8
 80015fe:	613b      	str	r3, [r7, #16]
 8001600:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001602:	4b5d      	ldr	r3, [pc, #372]	; (8001778 <MX_GPIO_Init+0x204>)
 8001604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001606:	4a5c      	ldr	r2, [pc, #368]	; (8001778 <MX_GPIO_Init+0x204>)
 8001608:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800160c:	6313      	str	r3, [r2, #48]	; 0x30
 800160e:	4b5a      	ldr	r3, [pc, #360]	; (8001778 <MX_GPIO_Init+0x204>)
 8001610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001612:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001616:	60fb      	str	r3, [r7, #12]
 8001618:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800161a:	4b57      	ldr	r3, [pc, #348]	; (8001778 <MX_GPIO_Init+0x204>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161e:	4a56      	ldr	r2, [pc, #344]	; (8001778 <MX_GPIO_Init+0x204>)
 8001620:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001624:	6313      	str	r3, [r2, #48]	; 0x30
 8001626:	4b54      	ldr	r3, [pc, #336]	; (8001778 <MX_GPIO_Init+0x204>)
 8001628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800162e:	60bb      	str	r3, [r7, #8]
 8001630:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001632:	4b51      	ldr	r3, [pc, #324]	; (8001778 <MX_GPIO_Init+0x204>)
 8001634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001636:	4a50      	ldr	r2, [pc, #320]	; (8001778 <MX_GPIO_Init+0x204>)
 8001638:	f043 0320 	orr.w	r3, r3, #32
 800163c:	6313      	str	r3, [r2, #48]	; 0x30
 800163e:	4b4e      	ldr	r3, [pc, #312]	; (8001778 <MX_GPIO_Init+0x204>)
 8001640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001642:	f003 0320 	and.w	r3, r3, #32
 8001646:	607b      	str	r3, [r7, #4]
 8001648:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 800164a:	2200      	movs	r2, #0
 800164c:	2110      	movs	r1, #16
 800164e:	484b      	ldr	r0, [pc, #300]	; (800177c <MX_GPIO_Init+0x208>)
 8001650:	f000 fd7a 	bl	8002148 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_3|GPIO_PIN_0, GPIO_PIN_RESET);
 8001654:	2200      	movs	r2, #0
 8001656:	2109      	movs	r1, #9
 8001658:	4849      	ldr	r0, [pc, #292]	; (8001780 <MX_GPIO_Init+0x20c>)
 800165a:	f000 fd75 	bl	8002148 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7|GPIO_PIN_6, GPIO_PIN_RESET);
 800165e:	2200      	movs	r2, #0
 8001660:	21c0      	movs	r1, #192	; 0xc0
 8001662:	4848      	ldr	r0, [pc, #288]	; (8001784 <MX_GPIO_Init+0x210>)
 8001664:	f000 fd70 	bl	8002148 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7|GPIO_PIN_6, GPIO_PIN_RESET);
 8001668:	2200      	movs	r2, #0
 800166a:	21c0      	movs	r1, #192	; 0xc0
 800166c:	4846      	ldr	r0, [pc, #280]	; (8001788 <MX_GPIO_Init+0x214>)
 800166e:	f000 fd6b 	bl	8002148 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_6, GPIO_PIN_RESET);
 8001672:	2200      	movs	r2, #0
 8001674:	2140      	movs	r1, #64	; 0x40
 8001676:	4845      	ldr	r0, [pc, #276]	; (800178c <MX_GPIO_Init+0x218>)
 8001678:	f000 fd66 	bl	8002148 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800167c:	2310      	movs	r3, #16
 800167e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001680:	2301      	movs	r3, #1
 8001682:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001684:	2300      	movs	r3, #0
 8001686:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001688:	2300      	movs	r3, #0
 800168a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800168c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001690:	4619      	mov	r1, r3
 8001692:	483a      	ldr	r0, [pc, #232]	; (800177c <MX_GPIO_Init+0x208>)
 8001694:	f000 fb94 	bl	8001dc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA15 PA8 PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_0;
 8001698:	f248 1301 	movw	r3, #33025	; 0x8101
 800169c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800169e:	2300      	movs	r3, #0
 80016a0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a2:	2300      	movs	r3, #0
 80016a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016aa:	4619      	mov	r1, r3
 80016ac:	4838      	ldr	r0, [pc, #224]	; (8001790 <MX_GPIO_Init+0x21c>)
 80016ae:	f000 fb87 	bl	8001dc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PI3 PI0 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_0;
 80016b2:	2309      	movs	r3, #9
 80016b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016b6:	2301      	movs	r3, #1
 80016b8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ba:	2300      	movs	r3, #0
 80016bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016be:	2300      	movs	r3, #0
 80016c0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80016c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016c6:	4619      	mov	r1, r3
 80016c8:	482d      	ldr	r0, [pc, #180]	; (8001780 <MX_GPIO_Init+0x20c>)
 80016ca:	f000 fb79 	bl	8001dc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PI2 PI1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1;
 80016ce:	2306      	movs	r3, #6
 80016d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016d2:	2300      	movs	r3, #0
 80016d4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d6:	2300      	movs	r3, #0
 80016d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80016da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016de:	4619      	mov	r1, r3
 80016e0:	4827      	ldr	r0, [pc, #156]	; (8001780 <MX_GPIO_Init+0x20c>)
 80016e2:	f000 fb6d 	bl	8001dc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC7 PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 80016e6:	23c0      	movs	r3, #192	; 0xc0
 80016e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ea:	2301      	movs	r3, #1
 80016ec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ee:	2300      	movs	r3, #0
 80016f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f2:	2300      	movs	r3, #0
 80016f4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016fa:	4619      	mov	r1, r3
 80016fc:	4821      	ldr	r0, [pc, #132]	; (8001784 <MX_GPIO_Init+0x210>)
 80016fe:	f000 fb5f 	bl	8001dc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG7 PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8001702:	23c0      	movs	r3, #192	; 0xc0
 8001704:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001706:	2301      	movs	r3, #1
 8001708:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170a:	2300      	movs	r3, #0
 800170c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800170e:	2300      	movs	r3, #0
 8001710:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001712:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001716:	4619      	mov	r1, r3
 8001718:	481b      	ldr	r0, [pc, #108]	; (8001788 <MX_GPIO_Init+0x214>)
 800171a:	f000 fb51 	bl	8001dc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF7 PF6 PF10 PF9
                           PF8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_10|GPIO_PIN_9
 800171e:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8001722:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001724:	2300      	movs	r3, #0
 8001726:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001728:	2300      	movs	r3, #0
 800172a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800172c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001730:	4619      	mov	r1, r3
 8001732:	4818      	ldr	r0, [pc, #96]	; (8001794 <MX_GPIO_Init+0x220>)
 8001734:	f000 fb44 	bl	8001dc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001738:	2340      	movs	r3, #64	; 0x40
 800173a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800173c:	2301      	movs	r3, #1
 800173e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001740:	2300      	movs	r3, #0
 8001742:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001744:	2300      	movs	r3, #0
 8001746:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001748:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800174c:	4619      	mov	r1, r3
 800174e:	480f      	ldr	r0, [pc, #60]	; (800178c <MX_GPIO_Init+0x218>)
 8001750:	f000 fb36 	bl	8001dc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001754:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001758:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800175a:	2300      	movs	r3, #0
 800175c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175e:	2300      	movs	r3, #0
 8001760:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001762:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001766:	4619      	mov	r1, r3
 8001768:	4804      	ldr	r0, [pc, #16]	; (800177c <MX_GPIO_Init+0x208>)
 800176a:	f000 fb29 	bl	8001dc0 <HAL_GPIO_Init>

}
 800176e:	bf00      	nop
 8001770:	3738      	adds	r7, #56	; 0x38
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	40023800 	.word	0x40023800
 800177c:	40020400 	.word	0x40020400
 8001780:	40022000 	.word	0x40022000
 8001784:	40020800 	.word	0x40020800
 8001788:	40021800 	.word	0x40021800
 800178c:	40021c00 	.word	0x40021c00
 8001790:	40020000 	.word	0x40020000
 8001794:	40021400 	.word	0x40021400

08001798 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800179c:	b672      	cpsid	i
}
 800179e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017a0:	e7fe      	b.n	80017a0 <Error_Handler+0x8>
	...

080017a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80017aa:	4b12      	ldr	r3, [pc, #72]	; (80017f4 <HAL_MspInit+0x50>)
 80017ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ae:	4a11      	ldr	r2, [pc, #68]	; (80017f4 <HAL_MspInit+0x50>)
 80017b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017b4:	6413      	str	r3, [r2, #64]	; 0x40
 80017b6:	4b0f      	ldr	r3, [pc, #60]	; (80017f4 <HAL_MspInit+0x50>)
 80017b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017be:	607b      	str	r3, [r7, #4]
 80017c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017c2:	4b0c      	ldr	r3, [pc, #48]	; (80017f4 <HAL_MspInit+0x50>)
 80017c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017c6:	4a0b      	ldr	r2, [pc, #44]	; (80017f4 <HAL_MspInit+0x50>)
 80017c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017cc:	6453      	str	r3, [r2, #68]	; 0x44
 80017ce:	4b09      	ldr	r3, [pc, #36]	; (80017f4 <HAL_MspInit+0x50>)
 80017d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017d6:	603b      	str	r3, [r7, #0]
 80017d8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80017da:	2200      	movs	r2, #0
 80017dc:	2100      	movs	r1, #0
 80017de:	2005      	movs	r0, #5
 80017e0:	f000 fab7 	bl	8001d52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80017e4:	2005      	movs	r0, #5
 80017e6:	f000 fad0 	bl	8001d8a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017ea:	bf00      	nop
 80017ec:	3708      	adds	r7, #8
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	40023800 	.word	0x40023800

080017f8 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b08a      	sub	sp, #40	; 0x28
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001800:	f107 0314 	add.w	r3, r7, #20
 8001804:	2200      	movs	r2, #0
 8001806:	601a      	str	r2, [r3, #0]
 8001808:	605a      	str	r2, [r3, #4]
 800180a:	609a      	str	r2, [r3, #8]
 800180c:	60da      	str	r2, [r3, #12]
 800180e:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a25      	ldr	r2, [pc, #148]	; (80018ac <HAL_SD_MspInit+0xb4>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d144      	bne.n	80018a4 <HAL_SD_MspInit+0xac>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800181a:	4b25      	ldr	r3, [pc, #148]	; (80018b0 <HAL_SD_MspInit+0xb8>)
 800181c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800181e:	4a24      	ldr	r2, [pc, #144]	; (80018b0 <HAL_SD_MspInit+0xb8>)
 8001820:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001824:	6453      	str	r3, [r2, #68]	; 0x44
 8001826:	4b22      	ldr	r3, [pc, #136]	; (80018b0 <HAL_SD_MspInit+0xb8>)
 8001828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800182a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800182e:	613b      	str	r3, [r7, #16]
 8001830:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001832:	4b1f      	ldr	r3, [pc, #124]	; (80018b0 <HAL_SD_MspInit+0xb8>)
 8001834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001836:	4a1e      	ldr	r2, [pc, #120]	; (80018b0 <HAL_SD_MspInit+0xb8>)
 8001838:	f043 0304 	orr.w	r3, r3, #4
 800183c:	6313      	str	r3, [r2, #48]	; 0x30
 800183e:	4b1c      	ldr	r3, [pc, #112]	; (80018b0 <HAL_SD_MspInit+0xb8>)
 8001840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001842:	f003 0304 	and.w	r3, r3, #4
 8001846:	60fb      	str	r3, [r7, #12]
 8001848:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800184a:	4b19      	ldr	r3, [pc, #100]	; (80018b0 <HAL_SD_MspInit+0xb8>)
 800184c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184e:	4a18      	ldr	r2, [pc, #96]	; (80018b0 <HAL_SD_MspInit+0xb8>)
 8001850:	f043 0308 	orr.w	r3, r3, #8
 8001854:	6313      	str	r3, [r2, #48]	; 0x30
 8001856:	4b16      	ldr	r3, [pc, #88]	; (80018b0 <HAL_SD_MspInit+0xb8>)
 8001858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185a:	f003 0308 	and.w	r3, r3, #8
 800185e:	60bb      	str	r3, [r7, #8]
 8001860:	68bb      	ldr	r3, [r7, #8]
    /**SDMMC1 GPIO Configuration
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_8;
 8001862:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 8001866:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001868:	2302      	movs	r3, #2
 800186a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186c:	2300      	movs	r3, #0
 800186e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001870:	2303      	movs	r3, #3
 8001872:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001874:	230c      	movs	r3, #12
 8001876:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001878:	f107 0314 	add.w	r3, r7, #20
 800187c:	4619      	mov	r1, r3
 800187e:	480d      	ldr	r0, [pc, #52]	; (80018b4 <HAL_SD_MspInit+0xbc>)
 8001880:	f000 fa9e 	bl	8001dc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001884:	2304      	movs	r3, #4
 8001886:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001888:	2302      	movs	r3, #2
 800188a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188c:	2300      	movs	r3, #0
 800188e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001890:	2303      	movs	r3, #3
 8001892:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001894:	230c      	movs	r3, #12
 8001896:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001898:	f107 0314 	add.w	r3, r7, #20
 800189c:	4619      	mov	r1, r3
 800189e:	4806      	ldr	r0, [pc, #24]	; (80018b8 <HAL_SD_MspInit+0xc0>)
 80018a0:	f000 fa8e 	bl	8001dc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 80018a4:	bf00      	nop
 80018a6:	3728      	adds	r7, #40	; 0x28
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	40012c00 	.word	0x40012c00
 80018b0:	40023800 	.word	0x40023800
 80018b4:	40020800 	.word	0x40020800
 80018b8:	40020c00 	.word	0x40020c00

080018bc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b084      	sub	sp, #16
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018cc:	d113      	bne.n	80018f6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80018ce:	4b0c      	ldr	r3, [pc, #48]	; (8001900 <HAL_TIM_Base_MspInit+0x44>)
 80018d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d2:	4a0b      	ldr	r2, [pc, #44]	; (8001900 <HAL_TIM_Base_MspInit+0x44>)
 80018d4:	f043 0301 	orr.w	r3, r3, #1
 80018d8:	6413      	str	r3, [r2, #64]	; 0x40
 80018da:	4b09      	ldr	r3, [pc, #36]	; (8001900 <HAL_TIM_Base_MspInit+0x44>)
 80018dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018de:	f003 0301 	and.w	r3, r3, #1
 80018e2:	60fb      	str	r3, [r7, #12]
 80018e4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80018e6:	2200      	movs	r2, #0
 80018e8:	2100      	movs	r1, #0
 80018ea:	201c      	movs	r0, #28
 80018ec:	f000 fa31 	bl	8001d52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80018f0:	201c      	movs	r0, #28
 80018f2:	f000 fa4a 	bl	8001d8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80018f6:	bf00      	nop
 80018f8:	3710      	adds	r7, #16
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	40023800 	.word	0x40023800

08001904 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b08a      	sub	sp, #40	; 0x28
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800190c:	f107 0314 	add.w	r3, r7, #20
 8001910:	2200      	movs	r2, #0
 8001912:	601a      	str	r2, [r3, #0]
 8001914:	605a      	str	r2, [r3, #4]
 8001916:	609a      	str	r2, [r3, #8]
 8001918:	60da      	str	r2, [r3, #12]
 800191a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a17      	ldr	r2, [pc, #92]	; (8001980 <HAL_UART_MspInit+0x7c>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d127      	bne.n	8001976 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001926:	4b17      	ldr	r3, [pc, #92]	; (8001984 <HAL_UART_MspInit+0x80>)
 8001928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800192a:	4a16      	ldr	r2, [pc, #88]	; (8001984 <HAL_UART_MspInit+0x80>)
 800192c:	f043 0310 	orr.w	r3, r3, #16
 8001930:	6453      	str	r3, [r2, #68]	; 0x44
 8001932:	4b14      	ldr	r3, [pc, #80]	; (8001984 <HAL_UART_MspInit+0x80>)
 8001934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001936:	f003 0310 	and.w	r3, r3, #16
 800193a:	613b      	str	r3, [r7, #16]
 800193c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800193e:	4b11      	ldr	r3, [pc, #68]	; (8001984 <HAL_UART_MspInit+0x80>)
 8001940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001942:	4a10      	ldr	r2, [pc, #64]	; (8001984 <HAL_UART_MspInit+0x80>)
 8001944:	f043 0302 	orr.w	r3, r3, #2
 8001948:	6313      	str	r3, [r2, #48]	; 0x30
 800194a:	4b0e      	ldr	r3, [pc, #56]	; (8001984 <HAL_UART_MspInit+0x80>)
 800194c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194e:	f003 0302 	and.w	r3, r3, #2
 8001952:	60fb      	str	r3, [r7, #12]
 8001954:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8001956:	23c0      	movs	r3, #192	; 0xc0
 8001958:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800195a:	2302      	movs	r3, #2
 800195c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195e:	2300      	movs	r3, #0
 8001960:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001962:	2303      	movs	r3, #3
 8001964:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001966:	2307      	movs	r3, #7
 8001968:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800196a:	f107 0314 	add.w	r3, r7, #20
 800196e:	4619      	mov	r1, r3
 8001970:	4805      	ldr	r0, [pc, #20]	; (8001988 <HAL_UART_MspInit+0x84>)
 8001972:	f000 fa25 	bl	8001dc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001976:	bf00      	nop
 8001978:	3728      	adds	r7, #40	; 0x28
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	40011000 	.word	0x40011000
 8001984:	40023800 	.word	0x40023800
 8001988:	40020400 	.word	0x40020400

0800198c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001990:	e7fe      	b.n	8001990 <NMI_Handler+0x4>

08001992 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001992:	b480      	push	{r7}
 8001994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001996:	e7fe      	b.n	8001996 <HardFault_Handler+0x4>

08001998 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800199c:	e7fe      	b.n	800199c <MemManage_Handler+0x4>

0800199e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800199e:	b480      	push	{r7}
 80019a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019a2:	e7fe      	b.n	80019a2 <BusFault_Handler+0x4>

080019a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019a8:	e7fe      	b.n	80019a8 <UsageFault_Handler+0x4>

080019aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019aa:	b480      	push	{r7}
 80019ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019ae:	bf00      	nop
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr

080019b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019bc:	bf00      	nop
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr

080019c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019c6:	b480      	push	{r7}
 80019c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019ca:	bf00      	nop
 80019cc:	46bd      	mov	sp, r7
 80019ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d2:	4770      	bx	lr

080019d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019d8:	f000 f89c 	bl	8001b14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019dc:	bf00      	nop
 80019de:	bd80      	pop	{r7, pc}

080019e0 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80019e4:	bf00      	nop
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr
	...

080019f0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80019f4:	4802      	ldr	r0, [pc, #8]	; (8001a00 <TIM2_IRQHandler+0x10>)
 80019f6:	f002 fcd7 	bl	80043a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80019fa:	bf00      	nop
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	200042cc 	.word	0x200042cc

08001a04 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a08:	4b06      	ldr	r3, [pc, #24]	; (8001a24 <SystemInit+0x20>)
 8001a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a0e:	4a05      	ldr	r2, [pc, #20]	; (8001a24 <SystemInit+0x20>)
 8001a10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a18:	bf00      	nop
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop
 8001a24:	e000ed00 	.word	0xe000ed00

08001a28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001a28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a60 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a2c:	480d      	ldr	r0, [pc, #52]	; (8001a64 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001a2e:	490e      	ldr	r1, [pc, #56]	; (8001a68 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001a30:	4a0e      	ldr	r2, [pc, #56]	; (8001a6c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a34:	e002      	b.n	8001a3c <LoopCopyDataInit>

08001a36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a3a:	3304      	adds	r3, #4

08001a3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a40:	d3f9      	bcc.n	8001a36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a42:	4a0b      	ldr	r2, [pc, #44]	; (8001a70 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001a44:	4c0b      	ldr	r4, [pc, #44]	; (8001a74 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001a46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a48:	e001      	b.n	8001a4e <LoopFillZerobss>

08001a4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a4c:	3204      	adds	r2, #4

08001a4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a50:	d3fb      	bcc.n	8001a4a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001a52:	f7ff ffd7 	bl	8001a04 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a56:	f004 fbbd 	bl	80061d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a5a:	f7ff fc2f 	bl	80012bc <main>
  bx  lr    
 8001a5e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001a60:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001a64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a68:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 8001a6c:	080074d0 	.word	0x080074d0
  ldr r2, =_sbss
 8001a70:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 8001a74:	200049c4 	.word	0x200049c4

08001a78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a78:	e7fe      	b.n	8001a78 <ADC_IRQHandler>
	...

08001a7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
 8001a80:	4b0b      	ldr	r3, [pc, #44]	; (8001ab0 <HAL_Init+0x34>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a0a      	ldr	r2, [pc, #40]	; (8001ab0 <HAL_Init+0x34>)
 8001a86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a8a:	6013      	str	r3, [r2, #0]
#endif /* ART_ACCLERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a8c:	4b08      	ldr	r3, [pc, #32]	; (8001ab0 <HAL_Init+0x34>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a07      	ldr	r2, [pc, #28]	; (8001ab0 <HAL_Init+0x34>)
 8001a92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a96:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a98:	2003      	movs	r0, #3
 8001a9a:	f000 f94f 	bl	8001d3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a9e:	2000      	movs	r0, #0
 8001aa0:	f000 f808 	bl	8001ab4 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001aa4:	f7ff fe7e 	bl	80017a4 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001aa8:	2300      	movs	r3, #0
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	40023c00 	.word	0x40023c00

08001ab4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001abc:	4b12      	ldr	r3, [pc, #72]	; (8001b08 <HAL_InitTick+0x54>)
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	4b12      	ldr	r3, [pc, #72]	; (8001b0c <HAL_InitTick+0x58>)
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001aca:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ace:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f000 f967 	bl	8001da6 <HAL_SYSTICK_Config>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d001      	beq.n	8001ae2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e00e      	b.n	8001b00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2b0f      	cmp	r3, #15
 8001ae6:	d80a      	bhi.n	8001afe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ae8:	2200      	movs	r2, #0
 8001aea:	6879      	ldr	r1, [r7, #4]
 8001aec:	f04f 30ff 	mov.w	r0, #4294967295
 8001af0:	f000 f92f 	bl	8001d52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001af4:	4a06      	ldr	r2, [pc, #24]	; (8001b10 <HAL_InitTick+0x5c>)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001afa:	2300      	movs	r3, #0
 8001afc:	e000      	b.n	8001b00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	3708      	adds	r7, #8
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	20000094 	.word	0x20000094
 8001b0c:	2000009c 	.word	0x2000009c
 8001b10:	20000098 	.word	0x20000098

08001b14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b18:	4b06      	ldr	r3, [pc, #24]	; (8001b34 <HAL_IncTick+0x20>)
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	461a      	mov	r2, r3
 8001b1e:	4b06      	ldr	r3, [pc, #24]	; (8001b38 <HAL_IncTick+0x24>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4413      	add	r3, r2
 8001b24:	4a04      	ldr	r2, [pc, #16]	; (8001b38 <HAL_IncTick+0x24>)
 8001b26:	6013      	str	r3, [r2, #0]
}
 8001b28:	bf00      	nop
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr
 8001b32:	bf00      	nop
 8001b34:	2000009c 	.word	0x2000009c
 8001b38:	20004554 	.word	0x20004554

08001b3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0
  return uwTick;
 8001b40:	4b03      	ldr	r3, [pc, #12]	; (8001b50 <HAL_GetTick+0x14>)
 8001b42:	681b      	ldr	r3, [r3, #0]
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop
 8001b50:	20004554 	.word	0x20004554

08001b54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b084      	sub	sp, #16
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b5c:	f7ff ffee 	bl	8001b3c <HAL_GetTick>
 8001b60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b6c:	d005      	beq.n	8001b7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b6e:	4b0a      	ldr	r3, [pc, #40]	; (8001b98 <HAL_Delay+0x44>)
 8001b70:	781b      	ldrb	r3, [r3, #0]
 8001b72:	461a      	mov	r2, r3
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	4413      	add	r3, r2
 8001b78:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b7a:	bf00      	nop
 8001b7c:	f7ff ffde 	bl	8001b3c <HAL_GetTick>
 8001b80:	4602      	mov	r2, r0
 8001b82:	68bb      	ldr	r3, [r7, #8]
 8001b84:	1ad3      	subs	r3, r2, r3
 8001b86:	68fa      	ldr	r2, [r7, #12]
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	d8f7      	bhi.n	8001b7c <HAL_Delay+0x28>
  {
  }
}
 8001b8c:	bf00      	nop
 8001b8e:	bf00      	nop
 8001b90:	3710      	adds	r7, #16
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	2000009c 	.word	0x2000009c

08001b9c <__NVIC_SetPriorityGrouping>:
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b085      	sub	sp, #20
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	f003 0307 	and.w	r3, r3, #7
 8001baa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bac:	4b0b      	ldr	r3, [pc, #44]	; (8001bdc <__NVIC_SetPriorityGrouping+0x40>)
 8001bae:	68db      	ldr	r3, [r3, #12]
 8001bb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bb2:	68ba      	ldr	r2, [r7, #8]
 8001bb4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bb8:	4013      	ands	r3, r2
 8001bba:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001bc4:	4b06      	ldr	r3, [pc, #24]	; (8001be0 <__NVIC_SetPriorityGrouping+0x44>)
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bca:	4a04      	ldr	r2, [pc, #16]	; (8001bdc <__NVIC_SetPriorityGrouping+0x40>)
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	60d3      	str	r3, [r2, #12]
}
 8001bd0:	bf00      	nop
 8001bd2:	3714      	adds	r7, #20
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr
 8001bdc:	e000ed00 	.word	0xe000ed00
 8001be0:	05fa0000 	.word	0x05fa0000

08001be4 <__NVIC_GetPriorityGrouping>:
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001be8:	4b04      	ldr	r3, [pc, #16]	; (8001bfc <__NVIC_GetPriorityGrouping+0x18>)
 8001bea:	68db      	ldr	r3, [r3, #12]
 8001bec:	0a1b      	lsrs	r3, r3, #8
 8001bee:	f003 0307 	and.w	r3, r3, #7
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr
 8001bfc:	e000ed00 	.word	0xe000ed00

08001c00 <__NVIC_EnableIRQ>:
{
 8001c00:	b480      	push	{r7}
 8001c02:	b083      	sub	sp, #12
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	4603      	mov	r3, r0
 8001c08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	db0b      	blt.n	8001c2a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c12:	79fb      	ldrb	r3, [r7, #7]
 8001c14:	f003 021f 	and.w	r2, r3, #31
 8001c18:	4907      	ldr	r1, [pc, #28]	; (8001c38 <__NVIC_EnableIRQ+0x38>)
 8001c1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c1e:	095b      	lsrs	r3, r3, #5
 8001c20:	2001      	movs	r0, #1
 8001c22:	fa00 f202 	lsl.w	r2, r0, r2
 8001c26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001c2a:	bf00      	nop
 8001c2c:	370c      	adds	r7, #12
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr
 8001c36:	bf00      	nop
 8001c38:	e000e100 	.word	0xe000e100

08001c3c <__NVIC_SetPriority>:
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b083      	sub	sp, #12
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	4603      	mov	r3, r0
 8001c44:	6039      	str	r1, [r7, #0]
 8001c46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	db0a      	blt.n	8001c66 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	b2da      	uxtb	r2, r3
 8001c54:	490c      	ldr	r1, [pc, #48]	; (8001c88 <__NVIC_SetPriority+0x4c>)
 8001c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c5a:	0112      	lsls	r2, r2, #4
 8001c5c:	b2d2      	uxtb	r2, r2
 8001c5e:	440b      	add	r3, r1
 8001c60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001c64:	e00a      	b.n	8001c7c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	b2da      	uxtb	r2, r3
 8001c6a:	4908      	ldr	r1, [pc, #32]	; (8001c8c <__NVIC_SetPriority+0x50>)
 8001c6c:	79fb      	ldrb	r3, [r7, #7]
 8001c6e:	f003 030f 	and.w	r3, r3, #15
 8001c72:	3b04      	subs	r3, #4
 8001c74:	0112      	lsls	r2, r2, #4
 8001c76:	b2d2      	uxtb	r2, r2
 8001c78:	440b      	add	r3, r1
 8001c7a:	761a      	strb	r2, [r3, #24]
}
 8001c7c:	bf00      	nop
 8001c7e:	370c      	adds	r7, #12
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr
 8001c88:	e000e100 	.word	0xe000e100
 8001c8c:	e000ed00 	.word	0xe000ed00

08001c90 <NVIC_EncodePriority>:
{
 8001c90:	b480      	push	{r7}
 8001c92:	b089      	sub	sp, #36	; 0x24
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	60f8      	str	r0, [r7, #12]
 8001c98:	60b9      	str	r1, [r7, #8]
 8001c9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	f003 0307 	and.w	r3, r3, #7
 8001ca2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ca4:	69fb      	ldr	r3, [r7, #28]
 8001ca6:	f1c3 0307 	rsb	r3, r3, #7
 8001caa:	2b04      	cmp	r3, #4
 8001cac:	bf28      	it	cs
 8001cae:	2304      	movcs	r3, #4
 8001cb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	3304      	adds	r3, #4
 8001cb6:	2b06      	cmp	r3, #6
 8001cb8:	d902      	bls.n	8001cc0 <NVIC_EncodePriority+0x30>
 8001cba:	69fb      	ldr	r3, [r7, #28]
 8001cbc:	3b03      	subs	r3, #3
 8001cbe:	e000      	b.n	8001cc2 <NVIC_EncodePriority+0x32>
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cc4:	f04f 32ff 	mov.w	r2, #4294967295
 8001cc8:	69bb      	ldr	r3, [r7, #24]
 8001cca:	fa02 f303 	lsl.w	r3, r2, r3
 8001cce:	43da      	mvns	r2, r3
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	401a      	ands	r2, r3
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cd8:	f04f 31ff 	mov.w	r1, #4294967295
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	fa01 f303 	lsl.w	r3, r1, r3
 8001ce2:	43d9      	mvns	r1, r3
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ce8:	4313      	orrs	r3, r2
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3724      	adds	r7, #36	; 0x24
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr
	...

08001cf8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	3b01      	subs	r3, #1
 8001d04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d08:	d301      	bcc.n	8001d0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e00f      	b.n	8001d2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d0e:	4a0a      	ldr	r2, [pc, #40]	; (8001d38 <SysTick_Config+0x40>)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	3b01      	subs	r3, #1
 8001d14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d16:	210f      	movs	r1, #15
 8001d18:	f04f 30ff 	mov.w	r0, #4294967295
 8001d1c:	f7ff ff8e 	bl	8001c3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d20:	4b05      	ldr	r3, [pc, #20]	; (8001d38 <SysTick_Config+0x40>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d26:	4b04      	ldr	r3, [pc, #16]	; (8001d38 <SysTick_Config+0x40>)
 8001d28:	2207      	movs	r2, #7
 8001d2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d2c:	2300      	movs	r3, #0
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3708      	adds	r7, #8
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	e000e010 	.word	0xe000e010

08001d3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b082      	sub	sp, #8
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d44:	6878      	ldr	r0, [r7, #4]
 8001d46:	f7ff ff29 	bl	8001b9c <__NVIC_SetPriorityGrouping>
}
 8001d4a:	bf00      	nop
 8001d4c:	3708      	adds	r7, #8
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}

08001d52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d52:	b580      	push	{r7, lr}
 8001d54:	b086      	sub	sp, #24
 8001d56:	af00      	add	r7, sp, #0
 8001d58:	4603      	mov	r3, r0
 8001d5a:	60b9      	str	r1, [r7, #8]
 8001d5c:	607a      	str	r2, [r7, #4]
 8001d5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001d60:	2300      	movs	r3, #0
 8001d62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d64:	f7ff ff3e 	bl	8001be4 <__NVIC_GetPriorityGrouping>
 8001d68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d6a:	687a      	ldr	r2, [r7, #4]
 8001d6c:	68b9      	ldr	r1, [r7, #8]
 8001d6e:	6978      	ldr	r0, [r7, #20]
 8001d70:	f7ff ff8e 	bl	8001c90 <NVIC_EncodePriority>
 8001d74:	4602      	mov	r2, r0
 8001d76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d7a:	4611      	mov	r1, r2
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f7ff ff5d 	bl	8001c3c <__NVIC_SetPriority>
}
 8001d82:	bf00      	nop
 8001d84:	3718      	adds	r7, #24
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}

08001d8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d8a:	b580      	push	{r7, lr}
 8001d8c:	b082      	sub	sp, #8
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	4603      	mov	r3, r0
 8001d92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f7ff ff31 	bl	8001c00 <__NVIC_EnableIRQ>
}
 8001d9e:	bf00      	nop
 8001da0:	3708      	adds	r7, #8
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}

08001da6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001da6:	b580      	push	{r7, lr}
 8001da8:	b082      	sub	sp, #8
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	f7ff ffa2 	bl	8001cf8 <SysTick_Config>
 8001db4:	4603      	mov	r3, r0
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3708      	adds	r7, #8
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
	...

08001dc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b089      	sub	sp, #36	; 0x24
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
 8001dc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001dda:	2300      	movs	r3, #0
 8001ddc:	61fb      	str	r3, [r7, #28]
 8001dde:	e175      	b.n	80020cc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001de0:	2201      	movs	r2, #1
 8001de2:	69fb      	ldr	r3, [r7, #28]
 8001de4:	fa02 f303 	lsl.w	r3, r2, r3
 8001de8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	697a      	ldr	r2, [r7, #20]
 8001df0:	4013      	ands	r3, r2
 8001df2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001df4:	693a      	ldr	r2, [r7, #16]
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	f040 8164 	bne.w	80020c6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	d00b      	beq.n	8001e1e <HAL_GPIO_Init+0x5e>
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	2b02      	cmp	r3, #2
 8001e0c:	d007      	beq.n	8001e1e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e12:	2b11      	cmp	r3, #17
 8001e14:	d003      	beq.n	8001e1e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	2b12      	cmp	r3, #18
 8001e1c:	d130      	bne.n	8001e80 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001e24:	69fb      	ldr	r3, [r7, #28]
 8001e26:	005b      	lsls	r3, r3, #1
 8001e28:	2203      	movs	r2, #3
 8001e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2e:	43db      	mvns	r3, r3
 8001e30:	69ba      	ldr	r2, [r7, #24]
 8001e32:	4013      	ands	r3, r2
 8001e34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	68da      	ldr	r2, [r3, #12]
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	005b      	lsls	r3, r3, #1
 8001e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e42:	69ba      	ldr	r2, [r7, #24]
 8001e44:	4313      	orrs	r3, r2
 8001e46:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	69ba      	ldr	r2, [r7, #24]
 8001e4c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e54:	2201      	movs	r2, #1
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5c:	43db      	mvns	r3, r3
 8001e5e:	69ba      	ldr	r2, [r7, #24]
 8001e60:	4013      	ands	r3, r2
 8001e62:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	091b      	lsrs	r3, r3, #4
 8001e6a:	f003 0201 	and.w	r2, r3, #1
 8001e6e:	69fb      	ldr	r3, [r7, #28]
 8001e70:	fa02 f303 	lsl.w	r3, r2, r3
 8001e74:	69ba      	ldr	r2, [r7, #24]
 8001e76:	4313      	orrs	r3, r2
 8001e78:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	69ba      	ldr	r2, [r7, #24]
 8001e7e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001e86:	69fb      	ldr	r3, [r7, #28]
 8001e88:	005b      	lsls	r3, r3, #1
 8001e8a:	2203      	movs	r2, #3
 8001e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e90:	43db      	mvns	r3, r3
 8001e92:	69ba      	ldr	r2, [r7, #24]
 8001e94:	4013      	ands	r3, r2
 8001e96:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	689a      	ldr	r2, [r3, #8]
 8001e9c:	69fb      	ldr	r3, [r7, #28]
 8001e9e:	005b      	lsls	r3, r3, #1
 8001ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea4:	69ba      	ldr	r2, [r7, #24]
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	69ba      	ldr	r2, [r7, #24]
 8001eae:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	2b02      	cmp	r3, #2
 8001eb6:	d003      	beq.n	8001ec0 <HAL_GPIO_Init+0x100>
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	2b12      	cmp	r3, #18
 8001ebe:	d123      	bne.n	8001f08 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001ec0:	69fb      	ldr	r3, [r7, #28]
 8001ec2:	08da      	lsrs	r2, r3, #3
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	3208      	adds	r2, #8
 8001ec8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ecc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001ece:	69fb      	ldr	r3, [r7, #28]
 8001ed0:	f003 0307 	and.w	r3, r3, #7
 8001ed4:	009b      	lsls	r3, r3, #2
 8001ed6:	220f      	movs	r2, #15
 8001ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8001edc:	43db      	mvns	r3, r3
 8001ede:	69ba      	ldr	r2, [r7, #24]
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	691a      	ldr	r2, [r3, #16]
 8001ee8:	69fb      	ldr	r3, [r7, #28]
 8001eea:	f003 0307 	and.w	r3, r3, #7
 8001eee:	009b      	lsls	r3, r3, #2
 8001ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef4:	69ba      	ldr	r2, [r7, #24]
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001efa:	69fb      	ldr	r3, [r7, #28]
 8001efc:	08da      	lsrs	r2, r3, #3
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	3208      	adds	r2, #8
 8001f02:	69b9      	ldr	r1, [r7, #24]
 8001f04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	005b      	lsls	r3, r3, #1
 8001f12:	2203      	movs	r2, #3
 8001f14:	fa02 f303 	lsl.w	r3, r2, r3
 8001f18:	43db      	mvns	r3, r3
 8001f1a:	69ba      	ldr	r2, [r7, #24]
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	f003 0203 	and.w	r2, r3, #3
 8001f28:	69fb      	ldr	r3, [r7, #28]
 8001f2a:	005b      	lsls	r3, r3, #1
 8001f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f30:	69ba      	ldr	r2, [r7, #24]
 8001f32:	4313      	orrs	r3, r2
 8001f34:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	69ba      	ldr	r2, [r7, #24]
 8001f3a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	f000 80be 	beq.w	80020c6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f4a:	4b66      	ldr	r3, [pc, #408]	; (80020e4 <HAL_GPIO_Init+0x324>)
 8001f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f4e:	4a65      	ldr	r2, [pc, #404]	; (80020e4 <HAL_GPIO_Init+0x324>)
 8001f50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f54:	6453      	str	r3, [r2, #68]	; 0x44
 8001f56:	4b63      	ldr	r3, [pc, #396]	; (80020e4 <HAL_GPIO_Init+0x324>)
 8001f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f5e:	60fb      	str	r3, [r7, #12]
 8001f60:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001f62:	4a61      	ldr	r2, [pc, #388]	; (80020e8 <HAL_GPIO_Init+0x328>)
 8001f64:	69fb      	ldr	r3, [r7, #28]
 8001f66:	089b      	lsrs	r3, r3, #2
 8001f68:	3302      	adds	r3, #2
 8001f6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001f70:	69fb      	ldr	r3, [r7, #28]
 8001f72:	f003 0303 	and.w	r3, r3, #3
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	220f      	movs	r2, #15
 8001f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7e:	43db      	mvns	r3, r3
 8001f80:	69ba      	ldr	r2, [r7, #24]
 8001f82:	4013      	ands	r3, r2
 8001f84:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	4a58      	ldr	r2, [pc, #352]	; (80020ec <HAL_GPIO_Init+0x32c>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d037      	beq.n	8001ffe <HAL_GPIO_Init+0x23e>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	4a57      	ldr	r2, [pc, #348]	; (80020f0 <HAL_GPIO_Init+0x330>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d031      	beq.n	8001ffa <HAL_GPIO_Init+0x23a>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	4a56      	ldr	r2, [pc, #344]	; (80020f4 <HAL_GPIO_Init+0x334>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d02b      	beq.n	8001ff6 <HAL_GPIO_Init+0x236>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	4a55      	ldr	r2, [pc, #340]	; (80020f8 <HAL_GPIO_Init+0x338>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d025      	beq.n	8001ff2 <HAL_GPIO_Init+0x232>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	4a54      	ldr	r2, [pc, #336]	; (80020fc <HAL_GPIO_Init+0x33c>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d01f      	beq.n	8001fee <HAL_GPIO_Init+0x22e>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4a53      	ldr	r2, [pc, #332]	; (8002100 <HAL_GPIO_Init+0x340>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d019      	beq.n	8001fea <HAL_GPIO_Init+0x22a>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	4a52      	ldr	r2, [pc, #328]	; (8002104 <HAL_GPIO_Init+0x344>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d013      	beq.n	8001fe6 <HAL_GPIO_Init+0x226>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	4a51      	ldr	r2, [pc, #324]	; (8002108 <HAL_GPIO_Init+0x348>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d00d      	beq.n	8001fe2 <HAL_GPIO_Init+0x222>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4a50      	ldr	r2, [pc, #320]	; (800210c <HAL_GPIO_Init+0x34c>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d007      	beq.n	8001fde <HAL_GPIO_Init+0x21e>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	4a4f      	ldr	r2, [pc, #316]	; (8002110 <HAL_GPIO_Init+0x350>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d101      	bne.n	8001fda <HAL_GPIO_Init+0x21a>
 8001fd6:	2309      	movs	r3, #9
 8001fd8:	e012      	b.n	8002000 <HAL_GPIO_Init+0x240>
 8001fda:	230a      	movs	r3, #10
 8001fdc:	e010      	b.n	8002000 <HAL_GPIO_Init+0x240>
 8001fde:	2308      	movs	r3, #8
 8001fe0:	e00e      	b.n	8002000 <HAL_GPIO_Init+0x240>
 8001fe2:	2307      	movs	r3, #7
 8001fe4:	e00c      	b.n	8002000 <HAL_GPIO_Init+0x240>
 8001fe6:	2306      	movs	r3, #6
 8001fe8:	e00a      	b.n	8002000 <HAL_GPIO_Init+0x240>
 8001fea:	2305      	movs	r3, #5
 8001fec:	e008      	b.n	8002000 <HAL_GPIO_Init+0x240>
 8001fee:	2304      	movs	r3, #4
 8001ff0:	e006      	b.n	8002000 <HAL_GPIO_Init+0x240>
 8001ff2:	2303      	movs	r3, #3
 8001ff4:	e004      	b.n	8002000 <HAL_GPIO_Init+0x240>
 8001ff6:	2302      	movs	r3, #2
 8001ff8:	e002      	b.n	8002000 <HAL_GPIO_Init+0x240>
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e000      	b.n	8002000 <HAL_GPIO_Init+0x240>
 8001ffe:	2300      	movs	r3, #0
 8002000:	69fa      	ldr	r2, [r7, #28]
 8002002:	f002 0203 	and.w	r2, r2, #3
 8002006:	0092      	lsls	r2, r2, #2
 8002008:	4093      	lsls	r3, r2
 800200a:	69ba      	ldr	r2, [r7, #24]
 800200c:	4313      	orrs	r3, r2
 800200e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002010:	4935      	ldr	r1, [pc, #212]	; (80020e8 <HAL_GPIO_Init+0x328>)
 8002012:	69fb      	ldr	r3, [r7, #28]
 8002014:	089b      	lsrs	r3, r3, #2
 8002016:	3302      	adds	r3, #2
 8002018:	69ba      	ldr	r2, [r7, #24]
 800201a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800201e:	4b3d      	ldr	r3, [pc, #244]	; (8002114 <HAL_GPIO_Init+0x354>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	43db      	mvns	r3, r3
 8002028:	69ba      	ldr	r2, [r7, #24]
 800202a:	4013      	ands	r3, r2
 800202c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002036:	2b00      	cmp	r3, #0
 8002038:	d003      	beq.n	8002042 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800203a:	69ba      	ldr	r2, [r7, #24]
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	4313      	orrs	r3, r2
 8002040:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002042:	4a34      	ldr	r2, [pc, #208]	; (8002114 <HAL_GPIO_Init+0x354>)
 8002044:	69bb      	ldr	r3, [r7, #24]
 8002046:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002048:	4b32      	ldr	r3, [pc, #200]	; (8002114 <HAL_GPIO_Init+0x354>)
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	43db      	mvns	r3, r3
 8002052:	69ba      	ldr	r2, [r7, #24]
 8002054:	4013      	ands	r3, r2
 8002056:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002060:	2b00      	cmp	r3, #0
 8002062:	d003      	beq.n	800206c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002064:	69ba      	ldr	r2, [r7, #24]
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	4313      	orrs	r3, r2
 800206a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800206c:	4a29      	ldr	r2, [pc, #164]	; (8002114 <HAL_GPIO_Init+0x354>)
 800206e:	69bb      	ldr	r3, [r7, #24]
 8002070:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002072:	4b28      	ldr	r3, [pc, #160]	; (8002114 <HAL_GPIO_Init+0x354>)
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	43db      	mvns	r3, r3
 800207c:	69ba      	ldr	r2, [r7, #24]
 800207e:	4013      	ands	r3, r2
 8002080:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800208a:	2b00      	cmp	r3, #0
 800208c:	d003      	beq.n	8002096 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800208e:	69ba      	ldr	r2, [r7, #24]
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	4313      	orrs	r3, r2
 8002094:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002096:	4a1f      	ldr	r2, [pc, #124]	; (8002114 <HAL_GPIO_Init+0x354>)
 8002098:	69bb      	ldr	r3, [r7, #24]
 800209a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800209c:	4b1d      	ldr	r3, [pc, #116]	; (8002114 <HAL_GPIO_Init+0x354>)
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	43db      	mvns	r3, r3
 80020a6:	69ba      	ldr	r2, [r7, #24]
 80020a8:	4013      	ands	r3, r2
 80020aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d003      	beq.n	80020c0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80020b8:	69ba      	ldr	r2, [r7, #24]
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	4313      	orrs	r3, r2
 80020be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80020c0:	4a14      	ldr	r2, [pc, #80]	; (8002114 <HAL_GPIO_Init+0x354>)
 80020c2:	69bb      	ldr	r3, [r7, #24]
 80020c4:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80020c6:	69fb      	ldr	r3, [r7, #28]
 80020c8:	3301      	adds	r3, #1
 80020ca:	61fb      	str	r3, [r7, #28]
 80020cc:	69fb      	ldr	r3, [r7, #28]
 80020ce:	2b0f      	cmp	r3, #15
 80020d0:	f67f ae86 	bls.w	8001de0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80020d4:	bf00      	nop
 80020d6:	bf00      	nop
 80020d8:	3724      	adds	r7, #36	; 0x24
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr
 80020e2:	bf00      	nop
 80020e4:	40023800 	.word	0x40023800
 80020e8:	40013800 	.word	0x40013800
 80020ec:	40020000 	.word	0x40020000
 80020f0:	40020400 	.word	0x40020400
 80020f4:	40020800 	.word	0x40020800
 80020f8:	40020c00 	.word	0x40020c00
 80020fc:	40021000 	.word	0x40021000
 8002100:	40021400 	.word	0x40021400
 8002104:	40021800 	.word	0x40021800
 8002108:	40021c00 	.word	0x40021c00
 800210c:	40022000 	.word	0x40022000
 8002110:	40022400 	.word	0x40022400
 8002114:	40013c00 	.word	0x40013c00

08002118 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002118:	b480      	push	{r7}
 800211a:	b085      	sub	sp, #20
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
 8002120:	460b      	mov	r3, r1
 8002122:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	691a      	ldr	r2, [r3, #16]
 8002128:	887b      	ldrh	r3, [r7, #2]
 800212a:	4013      	ands	r3, r2
 800212c:	2b00      	cmp	r3, #0
 800212e:	d002      	beq.n	8002136 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002130:	2301      	movs	r3, #1
 8002132:	73fb      	strb	r3, [r7, #15]
 8002134:	e001      	b.n	800213a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002136:	2300      	movs	r3, #0
 8002138:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800213a:	7bfb      	ldrb	r3, [r7, #15]
}
 800213c:	4618      	mov	r0, r3
 800213e:	3714      	adds	r7, #20
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr

08002148 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002148:	b480      	push	{r7}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
 8002150:	460b      	mov	r3, r1
 8002152:	807b      	strh	r3, [r7, #2]
 8002154:	4613      	mov	r3, r2
 8002156:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002158:	787b      	ldrb	r3, [r7, #1]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d003      	beq.n	8002166 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800215e:	887a      	ldrh	r2, [r7, #2]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002164:	e003      	b.n	800216e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002166:	887b      	ldrh	r3, [r7, #2]
 8002168:	041a      	lsls	r2, r3, #16
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	619a      	str	r2, [r3, #24]
}
 800216e:	bf00      	nop
 8002170:	370c      	adds	r7, #12
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr
	...

0800217c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b082      	sub	sp, #8
 8002180:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002182:	2300      	movs	r3, #0
 8002184:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002186:	4b23      	ldr	r3, [pc, #140]	; (8002214 <HAL_PWREx_EnableOverDrive+0x98>)
 8002188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218a:	4a22      	ldr	r2, [pc, #136]	; (8002214 <HAL_PWREx_EnableOverDrive+0x98>)
 800218c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002190:	6413      	str	r3, [r2, #64]	; 0x40
 8002192:	4b20      	ldr	r3, [pc, #128]	; (8002214 <HAL_PWREx_EnableOverDrive+0x98>)
 8002194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002196:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800219a:	603b      	str	r3, [r7, #0]
 800219c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800219e:	4b1e      	ldr	r3, [pc, #120]	; (8002218 <HAL_PWREx_EnableOverDrive+0x9c>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a1d      	ldr	r2, [pc, #116]	; (8002218 <HAL_PWREx_EnableOverDrive+0x9c>)
 80021a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021a8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80021aa:	f7ff fcc7 	bl	8001b3c <HAL_GetTick>
 80021ae:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80021b0:	e009      	b.n	80021c6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80021b2:	f7ff fcc3 	bl	8001b3c <HAL_GetTick>
 80021b6:	4602      	mov	r2, r0
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	1ad3      	subs	r3, r2, r3
 80021bc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80021c0:	d901      	bls.n	80021c6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80021c2:	2303      	movs	r3, #3
 80021c4:	e022      	b.n	800220c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80021c6:	4b14      	ldr	r3, [pc, #80]	; (8002218 <HAL_PWREx_EnableOverDrive+0x9c>)
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021d2:	d1ee      	bne.n	80021b2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80021d4:	4b10      	ldr	r3, [pc, #64]	; (8002218 <HAL_PWREx_EnableOverDrive+0x9c>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a0f      	ldr	r2, [pc, #60]	; (8002218 <HAL_PWREx_EnableOverDrive+0x9c>)
 80021da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021de:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80021e0:	f7ff fcac 	bl	8001b3c <HAL_GetTick>
 80021e4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80021e6:	e009      	b.n	80021fc <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80021e8:	f7ff fca8 	bl	8001b3c <HAL_GetTick>
 80021ec:	4602      	mov	r2, r0
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	1ad3      	subs	r3, r2, r3
 80021f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80021f6:	d901      	bls.n	80021fc <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80021f8:	2303      	movs	r3, #3
 80021fa:	e007      	b.n	800220c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80021fc:	4b06      	ldr	r3, [pc, #24]	; (8002218 <HAL_PWREx_EnableOverDrive+0x9c>)
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002204:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002208:	d1ee      	bne.n	80021e8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800220a:	2300      	movs	r3, #0
}
 800220c:	4618      	mov	r0, r3
 800220e:	3708      	adds	r7, #8
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}
 8002214:	40023800 	.word	0x40023800
 8002218:	40007000 	.word	0x40007000

0800221c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b086      	sub	sp, #24
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002224:	2300      	movs	r3, #0
 8002226:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d101      	bne.n	8002232 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	e291      	b.n	8002756 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 0301 	and.w	r3, r3, #1
 800223a:	2b00      	cmp	r3, #0
 800223c:	f000 8087 	beq.w	800234e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002240:	4b96      	ldr	r3, [pc, #600]	; (800249c <HAL_RCC_OscConfig+0x280>)
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	f003 030c 	and.w	r3, r3, #12
 8002248:	2b04      	cmp	r3, #4
 800224a:	d00c      	beq.n	8002266 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800224c:	4b93      	ldr	r3, [pc, #588]	; (800249c <HAL_RCC_OscConfig+0x280>)
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	f003 030c 	and.w	r3, r3, #12
 8002254:	2b08      	cmp	r3, #8
 8002256:	d112      	bne.n	800227e <HAL_RCC_OscConfig+0x62>
 8002258:	4b90      	ldr	r3, [pc, #576]	; (800249c <HAL_RCC_OscConfig+0x280>)
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002260:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002264:	d10b      	bne.n	800227e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002266:	4b8d      	ldr	r3, [pc, #564]	; (800249c <HAL_RCC_OscConfig+0x280>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800226e:	2b00      	cmp	r3, #0
 8002270:	d06c      	beq.n	800234c <HAL_RCC_OscConfig+0x130>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d168      	bne.n	800234c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e26b      	b.n	8002756 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002286:	d106      	bne.n	8002296 <HAL_RCC_OscConfig+0x7a>
 8002288:	4b84      	ldr	r3, [pc, #528]	; (800249c <HAL_RCC_OscConfig+0x280>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a83      	ldr	r2, [pc, #524]	; (800249c <HAL_RCC_OscConfig+0x280>)
 800228e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002292:	6013      	str	r3, [r2, #0]
 8002294:	e02e      	b.n	80022f4 <HAL_RCC_OscConfig+0xd8>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d10c      	bne.n	80022b8 <HAL_RCC_OscConfig+0x9c>
 800229e:	4b7f      	ldr	r3, [pc, #508]	; (800249c <HAL_RCC_OscConfig+0x280>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a7e      	ldr	r2, [pc, #504]	; (800249c <HAL_RCC_OscConfig+0x280>)
 80022a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022a8:	6013      	str	r3, [r2, #0]
 80022aa:	4b7c      	ldr	r3, [pc, #496]	; (800249c <HAL_RCC_OscConfig+0x280>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a7b      	ldr	r2, [pc, #492]	; (800249c <HAL_RCC_OscConfig+0x280>)
 80022b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022b4:	6013      	str	r3, [r2, #0]
 80022b6:	e01d      	b.n	80022f4 <HAL_RCC_OscConfig+0xd8>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022c0:	d10c      	bne.n	80022dc <HAL_RCC_OscConfig+0xc0>
 80022c2:	4b76      	ldr	r3, [pc, #472]	; (800249c <HAL_RCC_OscConfig+0x280>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a75      	ldr	r2, [pc, #468]	; (800249c <HAL_RCC_OscConfig+0x280>)
 80022c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022cc:	6013      	str	r3, [r2, #0]
 80022ce:	4b73      	ldr	r3, [pc, #460]	; (800249c <HAL_RCC_OscConfig+0x280>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a72      	ldr	r2, [pc, #456]	; (800249c <HAL_RCC_OscConfig+0x280>)
 80022d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022d8:	6013      	str	r3, [r2, #0]
 80022da:	e00b      	b.n	80022f4 <HAL_RCC_OscConfig+0xd8>
 80022dc:	4b6f      	ldr	r3, [pc, #444]	; (800249c <HAL_RCC_OscConfig+0x280>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a6e      	ldr	r2, [pc, #440]	; (800249c <HAL_RCC_OscConfig+0x280>)
 80022e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022e6:	6013      	str	r3, [r2, #0]
 80022e8:	4b6c      	ldr	r3, [pc, #432]	; (800249c <HAL_RCC_OscConfig+0x280>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a6b      	ldr	r2, [pc, #428]	; (800249c <HAL_RCC_OscConfig+0x280>)
 80022ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d013      	beq.n	8002324 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022fc:	f7ff fc1e 	bl	8001b3c <HAL_GetTick>
 8002300:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002302:	e008      	b.n	8002316 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002304:	f7ff fc1a 	bl	8001b3c <HAL_GetTick>
 8002308:	4602      	mov	r2, r0
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	2b64      	cmp	r3, #100	; 0x64
 8002310:	d901      	bls.n	8002316 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002312:	2303      	movs	r3, #3
 8002314:	e21f      	b.n	8002756 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002316:	4b61      	ldr	r3, [pc, #388]	; (800249c <HAL_RCC_OscConfig+0x280>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800231e:	2b00      	cmp	r3, #0
 8002320:	d0f0      	beq.n	8002304 <HAL_RCC_OscConfig+0xe8>
 8002322:	e014      	b.n	800234e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002324:	f7ff fc0a 	bl	8001b3c <HAL_GetTick>
 8002328:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800232a:	e008      	b.n	800233e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800232c:	f7ff fc06 	bl	8001b3c <HAL_GetTick>
 8002330:	4602      	mov	r2, r0
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	1ad3      	subs	r3, r2, r3
 8002336:	2b64      	cmp	r3, #100	; 0x64
 8002338:	d901      	bls.n	800233e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800233a:	2303      	movs	r3, #3
 800233c:	e20b      	b.n	8002756 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800233e:	4b57      	ldr	r3, [pc, #348]	; (800249c <HAL_RCC_OscConfig+0x280>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002346:	2b00      	cmp	r3, #0
 8002348:	d1f0      	bne.n	800232c <HAL_RCC_OscConfig+0x110>
 800234a:	e000      	b.n	800234e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800234c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 0302 	and.w	r3, r3, #2
 8002356:	2b00      	cmp	r3, #0
 8002358:	d069      	beq.n	800242e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800235a:	4b50      	ldr	r3, [pc, #320]	; (800249c <HAL_RCC_OscConfig+0x280>)
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	f003 030c 	and.w	r3, r3, #12
 8002362:	2b00      	cmp	r3, #0
 8002364:	d00b      	beq.n	800237e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002366:	4b4d      	ldr	r3, [pc, #308]	; (800249c <HAL_RCC_OscConfig+0x280>)
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	f003 030c 	and.w	r3, r3, #12
 800236e:	2b08      	cmp	r3, #8
 8002370:	d11c      	bne.n	80023ac <HAL_RCC_OscConfig+0x190>
 8002372:	4b4a      	ldr	r3, [pc, #296]	; (800249c <HAL_RCC_OscConfig+0x280>)
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800237a:	2b00      	cmp	r3, #0
 800237c:	d116      	bne.n	80023ac <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800237e:	4b47      	ldr	r3, [pc, #284]	; (800249c <HAL_RCC_OscConfig+0x280>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 0302 	and.w	r3, r3, #2
 8002386:	2b00      	cmp	r3, #0
 8002388:	d005      	beq.n	8002396 <HAL_RCC_OscConfig+0x17a>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	68db      	ldr	r3, [r3, #12]
 800238e:	2b01      	cmp	r3, #1
 8002390:	d001      	beq.n	8002396 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e1df      	b.n	8002756 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002396:	4b41      	ldr	r3, [pc, #260]	; (800249c <HAL_RCC_OscConfig+0x280>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	691b      	ldr	r3, [r3, #16]
 80023a2:	00db      	lsls	r3, r3, #3
 80023a4:	493d      	ldr	r1, [pc, #244]	; (800249c <HAL_RCC_OscConfig+0x280>)
 80023a6:	4313      	orrs	r3, r2
 80023a8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023aa:	e040      	b.n	800242e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	68db      	ldr	r3, [r3, #12]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d023      	beq.n	80023fc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023b4:	4b39      	ldr	r3, [pc, #228]	; (800249c <HAL_RCC_OscConfig+0x280>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a38      	ldr	r2, [pc, #224]	; (800249c <HAL_RCC_OscConfig+0x280>)
 80023ba:	f043 0301 	orr.w	r3, r3, #1
 80023be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023c0:	f7ff fbbc 	bl	8001b3c <HAL_GetTick>
 80023c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023c6:	e008      	b.n	80023da <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023c8:	f7ff fbb8 	bl	8001b3c <HAL_GetTick>
 80023cc:	4602      	mov	r2, r0
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	1ad3      	subs	r3, r2, r3
 80023d2:	2b02      	cmp	r3, #2
 80023d4:	d901      	bls.n	80023da <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80023d6:	2303      	movs	r3, #3
 80023d8:	e1bd      	b.n	8002756 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023da:	4b30      	ldr	r3, [pc, #192]	; (800249c <HAL_RCC_OscConfig+0x280>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 0302 	and.w	r3, r3, #2
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d0f0      	beq.n	80023c8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023e6:	4b2d      	ldr	r3, [pc, #180]	; (800249c <HAL_RCC_OscConfig+0x280>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	691b      	ldr	r3, [r3, #16]
 80023f2:	00db      	lsls	r3, r3, #3
 80023f4:	4929      	ldr	r1, [pc, #164]	; (800249c <HAL_RCC_OscConfig+0x280>)
 80023f6:	4313      	orrs	r3, r2
 80023f8:	600b      	str	r3, [r1, #0]
 80023fa:	e018      	b.n	800242e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023fc:	4b27      	ldr	r3, [pc, #156]	; (800249c <HAL_RCC_OscConfig+0x280>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a26      	ldr	r2, [pc, #152]	; (800249c <HAL_RCC_OscConfig+0x280>)
 8002402:	f023 0301 	bic.w	r3, r3, #1
 8002406:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002408:	f7ff fb98 	bl	8001b3c <HAL_GetTick>
 800240c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800240e:	e008      	b.n	8002422 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002410:	f7ff fb94 	bl	8001b3c <HAL_GetTick>
 8002414:	4602      	mov	r2, r0
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	2b02      	cmp	r3, #2
 800241c:	d901      	bls.n	8002422 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800241e:	2303      	movs	r3, #3
 8002420:	e199      	b.n	8002756 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002422:	4b1e      	ldr	r3, [pc, #120]	; (800249c <HAL_RCC_OscConfig+0x280>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 0302 	and.w	r3, r3, #2
 800242a:	2b00      	cmp	r3, #0
 800242c:	d1f0      	bne.n	8002410 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 0308 	and.w	r3, r3, #8
 8002436:	2b00      	cmp	r3, #0
 8002438:	d038      	beq.n	80024ac <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	695b      	ldr	r3, [r3, #20]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d019      	beq.n	8002476 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002442:	4b16      	ldr	r3, [pc, #88]	; (800249c <HAL_RCC_OscConfig+0x280>)
 8002444:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002446:	4a15      	ldr	r2, [pc, #84]	; (800249c <HAL_RCC_OscConfig+0x280>)
 8002448:	f043 0301 	orr.w	r3, r3, #1
 800244c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800244e:	f7ff fb75 	bl	8001b3c <HAL_GetTick>
 8002452:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002454:	e008      	b.n	8002468 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002456:	f7ff fb71 	bl	8001b3c <HAL_GetTick>
 800245a:	4602      	mov	r2, r0
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	1ad3      	subs	r3, r2, r3
 8002460:	2b02      	cmp	r3, #2
 8002462:	d901      	bls.n	8002468 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002464:	2303      	movs	r3, #3
 8002466:	e176      	b.n	8002756 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002468:	4b0c      	ldr	r3, [pc, #48]	; (800249c <HAL_RCC_OscConfig+0x280>)
 800246a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800246c:	f003 0302 	and.w	r3, r3, #2
 8002470:	2b00      	cmp	r3, #0
 8002472:	d0f0      	beq.n	8002456 <HAL_RCC_OscConfig+0x23a>
 8002474:	e01a      	b.n	80024ac <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002476:	4b09      	ldr	r3, [pc, #36]	; (800249c <HAL_RCC_OscConfig+0x280>)
 8002478:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800247a:	4a08      	ldr	r2, [pc, #32]	; (800249c <HAL_RCC_OscConfig+0x280>)
 800247c:	f023 0301 	bic.w	r3, r3, #1
 8002480:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002482:	f7ff fb5b 	bl	8001b3c <HAL_GetTick>
 8002486:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002488:	e00a      	b.n	80024a0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800248a:	f7ff fb57 	bl	8001b3c <HAL_GetTick>
 800248e:	4602      	mov	r2, r0
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	1ad3      	subs	r3, r2, r3
 8002494:	2b02      	cmp	r3, #2
 8002496:	d903      	bls.n	80024a0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002498:	2303      	movs	r3, #3
 800249a:	e15c      	b.n	8002756 <HAL_RCC_OscConfig+0x53a>
 800249c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024a0:	4b91      	ldr	r3, [pc, #580]	; (80026e8 <HAL_RCC_OscConfig+0x4cc>)
 80024a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024a4:	f003 0302 	and.w	r3, r3, #2
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d1ee      	bne.n	800248a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f003 0304 	and.w	r3, r3, #4
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	f000 80a4 	beq.w	8002602 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024ba:	4b8b      	ldr	r3, [pc, #556]	; (80026e8 <HAL_RCC_OscConfig+0x4cc>)
 80024bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d10d      	bne.n	80024e2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80024c6:	4b88      	ldr	r3, [pc, #544]	; (80026e8 <HAL_RCC_OscConfig+0x4cc>)
 80024c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ca:	4a87      	ldr	r2, [pc, #540]	; (80026e8 <HAL_RCC_OscConfig+0x4cc>)
 80024cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024d0:	6413      	str	r3, [r2, #64]	; 0x40
 80024d2:	4b85      	ldr	r3, [pc, #532]	; (80026e8 <HAL_RCC_OscConfig+0x4cc>)
 80024d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024da:	60bb      	str	r3, [r7, #8]
 80024dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024de:	2301      	movs	r3, #1
 80024e0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024e2:	4b82      	ldr	r3, [pc, #520]	; (80026ec <HAL_RCC_OscConfig+0x4d0>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d118      	bne.n	8002520 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80024ee:	4b7f      	ldr	r3, [pc, #508]	; (80026ec <HAL_RCC_OscConfig+0x4d0>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a7e      	ldr	r2, [pc, #504]	; (80026ec <HAL_RCC_OscConfig+0x4d0>)
 80024f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024fa:	f7ff fb1f 	bl	8001b3c <HAL_GetTick>
 80024fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002500:	e008      	b.n	8002514 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002502:	f7ff fb1b 	bl	8001b3c <HAL_GetTick>
 8002506:	4602      	mov	r2, r0
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	1ad3      	subs	r3, r2, r3
 800250c:	2b64      	cmp	r3, #100	; 0x64
 800250e:	d901      	bls.n	8002514 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002510:	2303      	movs	r3, #3
 8002512:	e120      	b.n	8002756 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002514:	4b75      	ldr	r3, [pc, #468]	; (80026ec <HAL_RCC_OscConfig+0x4d0>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800251c:	2b00      	cmp	r3, #0
 800251e:	d0f0      	beq.n	8002502 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	2b01      	cmp	r3, #1
 8002526:	d106      	bne.n	8002536 <HAL_RCC_OscConfig+0x31a>
 8002528:	4b6f      	ldr	r3, [pc, #444]	; (80026e8 <HAL_RCC_OscConfig+0x4cc>)
 800252a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800252c:	4a6e      	ldr	r2, [pc, #440]	; (80026e8 <HAL_RCC_OscConfig+0x4cc>)
 800252e:	f043 0301 	orr.w	r3, r3, #1
 8002532:	6713      	str	r3, [r2, #112]	; 0x70
 8002534:	e02d      	b.n	8002592 <HAL_RCC_OscConfig+0x376>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d10c      	bne.n	8002558 <HAL_RCC_OscConfig+0x33c>
 800253e:	4b6a      	ldr	r3, [pc, #424]	; (80026e8 <HAL_RCC_OscConfig+0x4cc>)
 8002540:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002542:	4a69      	ldr	r2, [pc, #420]	; (80026e8 <HAL_RCC_OscConfig+0x4cc>)
 8002544:	f023 0301 	bic.w	r3, r3, #1
 8002548:	6713      	str	r3, [r2, #112]	; 0x70
 800254a:	4b67      	ldr	r3, [pc, #412]	; (80026e8 <HAL_RCC_OscConfig+0x4cc>)
 800254c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800254e:	4a66      	ldr	r2, [pc, #408]	; (80026e8 <HAL_RCC_OscConfig+0x4cc>)
 8002550:	f023 0304 	bic.w	r3, r3, #4
 8002554:	6713      	str	r3, [r2, #112]	; 0x70
 8002556:	e01c      	b.n	8002592 <HAL_RCC_OscConfig+0x376>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	2b05      	cmp	r3, #5
 800255e:	d10c      	bne.n	800257a <HAL_RCC_OscConfig+0x35e>
 8002560:	4b61      	ldr	r3, [pc, #388]	; (80026e8 <HAL_RCC_OscConfig+0x4cc>)
 8002562:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002564:	4a60      	ldr	r2, [pc, #384]	; (80026e8 <HAL_RCC_OscConfig+0x4cc>)
 8002566:	f043 0304 	orr.w	r3, r3, #4
 800256a:	6713      	str	r3, [r2, #112]	; 0x70
 800256c:	4b5e      	ldr	r3, [pc, #376]	; (80026e8 <HAL_RCC_OscConfig+0x4cc>)
 800256e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002570:	4a5d      	ldr	r2, [pc, #372]	; (80026e8 <HAL_RCC_OscConfig+0x4cc>)
 8002572:	f043 0301 	orr.w	r3, r3, #1
 8002576:	6713      	str	r3, [r2, #112]	; 0x70
 8002578:	e00b      	b.n	8002592 <HAL_RCC_OscConfig+0x376>
 800257a:	4b5b      	ldr	r3, [pc, #364]	; (80026e8 <HAL_RCC_OscConfig+0x4cc>)
 800257c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800257e:	4a5a      	ldr	r2, [pc, #360]	; (80026e8 <HAL_RCC_OscConfig+0x4cc>)
 8002580:	f023 0301 	bic.w	r3, r3, #1
 8002584:	6713      	str	r3, [r2, #112]	; 0x70
 8002586:	4b58      	ldr	r3, [pc, #352]	; (80026e8 <HAL_RCC_OscConfig+0x4cc>)
 8002588:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800258a:	4a57      	ldr	r2, [pc, #348]	; (80026e8 <HAL_RCC_OscConfig+0x4cc>)
 800258c:	f023 0304 	bic.w	r3, r3, #4
 8002590:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d015      	beq.n	80025c6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800259a:	f7ff facf 	bl	8001b3c <HAL_GetTick>
 800259e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025a0:	e00a      	b.n	80025b8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025a2:	f7ff facb 	bl	8001b3c <HAL_GetTick>
 80025a6:	4602      	mov	r2, r0
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	1ad3      	subs	r3, r2, r3
 80025ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d901      	bls.n	80025b8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80025b4:	2303      	movs	r3, #3
 80025b6:	e0ce      	b.n	8002756 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025b8:	4b4b      	ldr	r3, [pc, #300]	; (80026e8 <HAL_RCC_OscConfig+0x4cc>)
 80025ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025bc:	f003 0302 	and.w	r3, r3, #2
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d0ee      	beq.n	80025a2 <HAL_RCC_OscConfig+0x386>
 80025c4:	e014      	b.n	80025f0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025c6:	f7ff fab9 	bl	8001b3c <HAL_GetTick>
 80025ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025cc:	e00a      	b.n	80025e4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025ce:	f7ff fab5 	bl	8001b3c <HAL_GetTick>
 80025d2:	4602      	mov	r2, r0
 80025d4:	693b      	ldr	r3, [r7, #16]
 80025d6:	1ad3      	subs	r3, r2, r3
 80025d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80025dc:	4293      	cmp	r3, r2
 80025de:	d901      	bls.n	80025e4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80025e0:	2303      	movs	r3, #3
 80025e2:	e0b8      	b.n	8002756 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025e4:	4b40      	ldr	r3, [pc, #256]	; (80026e8 <HAL_RCC_OscConfig+0x4cc>)
 80025e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025e8:	f003 0302 	and.w	r3, r3, #2
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d1ee      	bne.n	80025ce <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80025f0:	7dfb      	ldrb	r3, [r7, #23]
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d105      	bne.n	8002602 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025f6:	4b3c      	ldr	r3, [pc, #240]	; (80026e8 <HAL_RCC_OscConfig+0x4cc>)
 80025f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fa:	4a3b      	ldr	r2, [pc, #236]	; (80026e8 <HAL_RCC_OscConfig+0x4cc>)
 80025fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002600:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	699b      	ldr	r3, [r3, #24]
 8002606:	2b00      	cmp	r3, #0
 8002608:	f000 80a4 	beq.w	8002754 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800260c:	4b36      	ldr	r3, [pc, #216]	; (80026e8 <HAL_RCC_OscConfig+0x4cc>)
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	f003 030c 	and.w	r3, r3, #12
 8002614:	2b08      	cmp	r3, #8
 8002616:	d06b      	beq.n	80026f0 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	699b      	ldr	r3, [r3, #24]
 800261c:	2b02      	cmp	r3, #2
 800261e:	d149      	bne.n	80026b4 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002620:	4b31      	ldr	r3, [pc, #196]	; (80026e8 <HAL_RCC_OscConfig+0x4cc>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a30      	ldr	r2, [pc, #192]	; (80026e8 <HAL_RCC_OscConfig+0x4cc>)
 8002626:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800262a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800262c:	f7ff fa86 	bl	8001b3c <HAL_GetTick>
 8002630:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002632:	e008      	b.n	8002646 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002634:	f7ff fa82 	bl	8001b3c <HAL_GetTick>
 8002638:	4602      	mov	r2, r0
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	1ad3      	subs	r3, r2, r3
 800263e:	2b02      	cmp	r3, #2
 8002640:	d901      	bls.n	8002646 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002642:	2303      	movs	r3, #3
 8002644:	e087      	b.n	8002756 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002646:	4b28      	ldr	r3, [pc, #160]	; (80026e8 <HAL_RCC_OscConfig+0x4cc>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800264e:	2b00      	cmp	r3, #0
 8002650:	d1f0      	bne.n	8002634 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	69da      	ldr	r2, [r3, #28]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6a1b      	ldr	r3, [r3, #32]
 800265a:	431a      	orrs	r2, r3
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002660:	019b      	lsls	r3, r3, #6
 8002662:	431a      	orrs	r2, r3
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002668:	085b      	lsrs	r3, r3, #1
 800266a:	3b01      	subs	r3, #1
 800266c:	041b      	lsls	r3, r3, #16
 800266e:	431a      	orrs	r2, r3
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002674:	061b      	lsls	r3, r3, #24
 8002676:	4313      	orrs	r3, r2
 8002678:	4a1b      	ldr	r2, [pc, #108]	; (80026e8 <HAL_RCC_OscConfig+0x4cc>)
 800267a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800267e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002680:	4b19      	ldr	r3, [pc, #100]	; (80026e8 <HAL_RCC_OscConfig+0x4cc>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a18      	ldr	r2, [pc, #96]	; (80026e8 <HAL_RCC_OscConfig+0x4cc>)
 8002686:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800268a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800268c:	f7ff fa56 	bl	8001b3c <HAL_GetTick>
 8002690:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002692:	e008      	b.n	80026a6 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002694:	f7ff fa52 	bl	8001b3c <HAL_GetTick>
 8002698:	4602      	mov	r2, r0
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	1ad3      	subs	r3, r2, r3
 800269e:	2b02      	cmp	r3, #2
 80026a0:	d901      	bls.n	80026a6 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80026a2:	2303      	movs	r3, #3
 80026a4:	e057      	b.n	8002756 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026a6:	4b10      	ldr	r3, [pc, #64]	; (80026e8 <HAL_RCC_OscConfig+0x4cc>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d0f0      	beq.n	8002694 <HAL_RCC_OscConfig+0x478>
 80026b2:	e04f      	b.n	8002754 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026b4:	4b0c      	ldr	r3, [pc, #48]	; (80026e8 <HAL_RCC_OscConfig+0x4cc>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a0b      	ldr	r2, [pc, #44]	; (80026e8 <HAL_RCC_OscConfig+0x4cc>)
 80026ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80026be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026c0:	f7ff fa3c 	bl	8001b3c <HAL_GetTick>
 80026c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026c6:	e008      	b.n	80026da <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026c8:	f7ff fa38 	bl	8001b3c <HAL_GetTick>
 80026cc:	4602      	mov	r2, r0
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	2b02      	cmp	r3, #2
 80026d4:	d901      	bls.n	80026da <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80026d6:	2303      	movs	r3, #3
 80026d8:	e03d      	b.n	8002756 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026da:	4b03      	ldr	r3, [pc, #12]	; (80026e8 <HAL_RCC_OscConfig+0x4cc>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d1f0      	bne.n	80026c8 <HAL_RCC_OscConfig+0x4ac>
 80026e6:	e035      	b.n	8002754 <HAL_RCC_OscConfig+0x538>
 80026e8:	40023800 	.word	0x40023800
 80026ec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80026f0:	4b1b      	ldr	r3, [pc, #108]	; (8002760 <HAL_RCC_OscConfig+0x544>)
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	699b      	ldr	r3, [r3, #24]
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	d028      	beq.n	8002750 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002708:	429a      	cmp	r2, r3
 800270a:	d121      	bne.n	8002750 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002716:	429a      	cmp	r2, r3
 8002718:	d11a      	bne.n	8002750 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800271a:	68fa      	ldr	r2, [r7, #12]
 800271c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002720:	4013      	ands	r3, r2
 8002722:	687a      	ldr	r2, [r7, #4]
 8002724:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002726:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002728:	4293      	cmp	r3, r2
 800272a:	d111      	bne.n	8002750 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002736:	085b      	lsrs	r3, r3, #1
 8002738:	3b01      	subs	r3, #1
 800273a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800273c:	429a      	cmp	r2, r3
 800273e:	d107      	bne.n	8002750 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800274a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800274c:	429a      	cmp	r2, r3
 800274e:	d001      	beq.n	8002754 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	e000      	b.n	8002756 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002754:	2300      	movs	r3, #0
}
 8002756:	4618      	mov	r0, r3
 8002758:	3718      	adds	r7, #24
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	40023800 	.word	0x40023800

08002764 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b084      	sub	sp, #16
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
 800276c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800276e:	2300      	movs	r3, #0
 8002770:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d101      	bne.n	800277c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002778:	2301      	movs	r3, #1
 800277a:	e0d0      	b.n	800291e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800277c:	4b6a      	ldr	r3, [pc, #424]	; (8002928 <HAL_RCC_ClockConfig+0x1c4>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 030f 	and.w	r3, r3, #15
 8002784:	683a      	ldr	r2, [r7, #0]
 8002786:	429a      	cmp	r2, r3
 8002788:	d910      	bls.n	80027ac <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800278a:	4b67      	ldr	r3, [pc, #412]	; (8002928 <HAL_RCC_ClockConfig+0x1c4>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f023 020f 	bic.w	r2, r3, #15
 8002792:	4965      	ldr	r1, [pc, #404]	; (8002928 <HAL_RCC_ClockConfig+0x1c4>)
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	4313      	orrs	r3, r2
 8002798:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800279a:	4b63      	ldr	r3, [pc, #396]	; (8002928 <HAL_RCC_ClockConfig+0x1c4>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 030f 	and.w	r3, r3, #15
 80027a2:	683a      	ldr	r2, [r7, #0]
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d001      	beq.n	80027ac <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80027a8:	2301      	movs	r3, #1
 80027aa:	e0b8      	b.n	800291e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f003 0302 	and.w	r3, r3, #2
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d020      	beq.n	80027fa <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f003 0304 	and.w	r3, r3, #4
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d005      	beq.n	80027d0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027c4:	4b59      	ldr	r3, [pc, #356]	; (800292c <HAL_RCC_ClockConfig+0x1c8>)
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	4a58      	ldr	r2, [pc, #352]	; (800292c <HAL_RCC_ClockConfig+0x1c8>)
 80027ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80027ce:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 0308 	and.w	r3, r3, #8
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d005      	beq.n	80027e8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027dc:	4b53      	ldr	r3, [pc, #332]	; (800292c <HAL_RCC_ClockConfig+0x1c8>)
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	4a52      	ldr	r2, [pc, #328]	; (800292c <HAL_RCC_ClockConfig+0x1c8>)
 80027e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80027e6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027e8:	4b50      	ldr	r3, [pc, #320]	; (800292c <HAL_RCC_ClockConfig+0x1c8>)
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	494d      	ldr	r1, [pc, #308]	; (800292c <HAL_RCC_ClockConfig+0x1c8>)
 80027f6:	4313      	orrs	r3, r2
 80027f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 0301 	and.w	r3, r3, #1
 8002802:	2b00      	cmp	r3, #0
 8002804:	d040      	beq.n	8002888 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	2b01      	cmp	r3, #1
 800280c:	d107      	bne.n	800281e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800280e:	4b47      	ldr	r3, [pc, #284]	; (800292c <HAL_RCC_ClockConfig+0x1c8>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002816:	2b00      	cmp	r3, #0
 8002818:	d115      	bne.n	8002846 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e07f      	b.n	800291e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	2b02      	cmp	r3, #2
 8002824:	d107      	bne.n	8002836 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002826:	4b41      	ldr	r3, [pc, #260]	; (800292c <HAL_RCC_ClockConfig+0x1c8>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800282e:	2b00      	cmp	r3, #0
 8002830:	d109      	bne.n	8002846 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e073      	b.n	800291e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002836:	4b3d      	ldr	r3, [pc, #244]	; (800292c <HAL_RCC_ClockConfig+0x1c8>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 0302 	and.w	r3, r3, #2
 800283e:	2b00      	cmp	r3, #0
 8002840:	d101      	bne.n	8002846 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	e06b      	b.n	800291e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002846:	4b39      	ldr	r3, [pc, #228]	; (800292c <HAL_RCC_ClockConfig+0x1c8>)
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	f023 0203 	bic.w	r2, r3, #3
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	4936      	ldr	r1, [pc, #216]	; (800292c <HAL_RCC_ClockConfig+0x1c8>)
 8002854:	4313      	orrs	r3, r2
 8002856:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002858:	f7ff f970 	bl	8001b3c <HAL_GetTick>
 800285c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800285e:	e00a      	b.n	8002876 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002860:	f7ff f96c 	bl	8001b3c <HAL_GetTick>
 8002864:	4602      	mov	r2, r0
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	f241 3288 	movw	r2, #5000	; 0x1388
 800286e:	4293      	cmp	r3, r2
 8002870:	d901      	bls.n	8002876 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002872:	2303      	movs	r3, #3
 8002874:	e053      	b.n	800291e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002876:	4b2d      	ldr	r3, [pc, #180]	; (800292c <HAL_RCC_ClockConfig+0x1c8>)
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	f003 020c 	and.w	r2, r3, #12
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	009b      	lsls	r3, r3, #2
 8002884:	429a      	cmp	r2, r3
 8002886:	d1eb      	bne.n	8002860 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002888:	4b27      	ldr	r3, [pc, #156]	; (8002928 <HAL_RCC_ClockConfig+0x1c4>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 030f 	and.w	r3, r3, #15
 8002890:	683a      	ldr	r2, [r7, #0]
 8002892:	429a      	cmp	r2, r3
 8002894:	d210      	bcs.n	80028b8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002896:	4b24      	ldr	r3, [pc, #144]	; (8002928 <HAL_RCC_ClockConfig+0x1c4>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f023 020f 	bic.w	r2, r3, #15
 800289e:	4922      	ldr	r1, [pc, #136]	; (8002928 <HAL_RCC_ClockConfig+0x1c4>)
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	4313      	orrs	r3, r2
 80028a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028a6:	4b20      	ldr	r3, [pc, #128]	; (8002928 <HAL_RCC_ClockConfig+0x1c4>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 030f 	and.w	r3, r3, #15
 80028ae:	683a      	ldr	r2, [r7, #0]
 80028b0:	429a      	cmp	r2, r3
 80028b2:	d001      	beq.n	80028b8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	e032      	b.n	800291e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f003 0304 	and.w	r3, r3, #4
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d008      	beq.n	80028d6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028c4:	4b19      	ldr	r3, [pc, #100]	; (800292c <HAL_RCC_ClockConfig+0x1c8>)
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	68db      	ldr	r3, [r3, #12]
 80028d0:	4916      	ldr	r1, [pc, #88]	; (800292c <HAL_RCC_ClockConfig+0x1c8>)
 80028d2:	4313      	orrs	r3, r2
 80028d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 0308 	and.w	r3, r3, #8
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d009      	beq.n	80028f6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80028e2:	4b12      	ldr	r3, [pc, #72]	; (800292c <HAL_RCC_ClockConfig+0x1c8>)
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	691b      	ldr	r3, [r3, #16]
 80028ee:	00db      	lsls	r3, r3, #3
 80028f0:	490e      	ldr	r1, [pc, #56]	; (800292c <HAL_RCC_ClockConfig+0x1c8>)
 80028f2:	4313      	orrs	r3, r2
 80028f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80028f6:	f000 f821 	bl	800293c <HAL_RCC_GetSysClockFreq>
 80028fa:	4602      	mov	r2, r0
 80028fc:	4b0b      	ldr	r3, [pc, #44]	; (800292c <HAL_RCC_ClockConfig+0x1c8>)
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	091b      	lsrs	r3, r3, #4
 8002902:	f003 030f 	and.w	r3, r3, #15
 8002906:	490a      	ldr	r1, [pc, #40]	; (8002930 <HAL_RCC_ClockConfig+0x1cc>)
 8002908:	5ccb      	ldrb	r3, [r1, r3]
 800290a:	fa22 f303 	lsr.w	r3, r2, r3
 800290e:	4a09      	ldr	r2, [pc, #36]	; (8002934 <HAL_RCC_ClockConfig+0x1d0>)
 8002910:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002912:	4b09      	ldr	r3, [pc, #36]	; (8002938 <HAL_RCC_ClockConfig+0x1d4>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4618      	mov	r0, r3
 8002918:	f7ff f8cc 	bl	8001ab4 <HAL_InitTick>

  return HAL_OK;
 800291c:	2300      	movs	r3, #0
}
 800291e:	4618      	mov	r0, r3
 8002920:	3710      	adds	r7, #16
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}
 8002926:	bf00      	nop
 8002928:	40023c00 	.word	0x40023c00
 800292c:	40023800 	.word	0x40023800
 8002930:	080072b8 	.word	0x080072b8
 8002934:	20000094 	.word	0x20000094
 8002938:	20000098 	.word	0x20000098

0800293c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800293c:	b5b0      	push	{r4, r5, r7, lr}
 800293e:	b084      	sub	sp, #16
 8002940:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002942:	2100      	movs	r1, #0
 8002944:	6079      	str	r1, [r7, #4]
 8002946:	2100      	movs	r1, #0
 8002948:	60f9      	str	r1, [r7, #12]
 800294a:	2100      	movs	r1, #0
 800294c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 800294e:	2100      	movs	r1, #0
 8002950:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002952:	4952      	ldr	r1, [pc, #328]	; (8002a9c <HAL_RCC_GetSysClockFreq+0x160>)
 8002954:	6889      	ldr	r1, [r1, #8]
 8002956:	f001 010c 	and.w	r1, r1, #12
 800295a:	2908      	cmp	r1, #8
 800295c:	d00d      	beq.n	800297a <HAL_RCC_GetSysClockFreq+0x3e>
 800295e:	2908      	cmp	r1, #8
 8002960:	f200 8094 	bhi.w	8002a8c <HAL_RCC_GetSysClockFreq+0x150>
 8002964:	2900      	cmp	r1, #0
 8002966:	d002      	beq.n	800296e <HAL_RCC_GetSysClockFreq+0x32>
 8002968:	2904      	cmp	r1, #4
 800296a:	d003      	beq.n	8002974 <HAL_RCC_GetSysClockFreq+0x38>
 800296c:	e08e      	b.n	8002a8c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800296e:	4b4c      	ldr	r3, [pc, #304]	; (8002aa0 <HAL_RCC_GetSysClockFreq+0x164>)
 8002970:	60bb      	str	r3, [r7, #8]
      break;
 8002972:	e08e      	b.n	8002a92 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002974:	4b4b      	ldr	r3, [pc, #300]	; (8002aa4 <HAL_RCC_GetSysClockFreq+0x168>)
 8002976:	60bb      	str	r3, [r7, #8]
      break;
 8002978:	e08b      	b.n	8002a92 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800297a:	4948      	ldr	r1, [pc, #288]	; (8002a9c <HAL_RCC_GetSysClockFreq+0x160>)
 800297c:	6849      	ldr	r1, [r1, #4]
 800297e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8002982:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002984:	4945      	ldr	r1, [pc, #276]	; (8002a9c <HAL_RCC_GetSysClockFreq+0x160>)
 8002986:	6849      	ldr	r1, [r1, #4]
 8002988:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800298c:	2900      	cmp	r1, #0
 800298e:	d024      	beq.n	80029da <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002990:	4942      	ldr	r1, [pc, #264]	; (8002a9c <HAL_RCC_GetSysClockFreq+0x160>)
 8002992:	6849      	ldr	r1, [r1, #4]
 8002994:	0989      	lsrs	r1, r1, #6
 8002996:	4608      	mov	r0, r1
 8002998:	f04f 0100 	mov.w	r1, #0
 800299c:	f240 14ff 	movw	r4, #511	; 0x1ff
 80029a0:	f04f 0500 	mov.w	r5, #0
 80029a4:	ea00 0204 	and.w	r2, r0, r4
 80029a8:	ea01 0305 	and.w	r3, r1, r5
 80029ac:	493d      	ldr	r1, [pc, #244]	; (8002aa4 <HAL_RCC_GetSysClockFreq+0x168>)
 80029ae:	fb01 f003 	mul.w	r0, r1, r3
 80029b2:	2100      	movs	r1, #0
 80029b4:	fb01 f102 	mul.w	r1, r1, r2
 80029b8:	1844      	adds	r4, r0, r1
 80029ba:	493a      	ldr	r1, [pc, #232]	; (8002aa4 <HAL_RCC_GetSysClockFreq+0x168>)
 80029bc:	fba2 0101 	umull	r0, r1, r2, r1
 80029c0:	1863      	adds	r3, r4, r1
 80029c2:	4619      	mov	r1, r3
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	461a      	mov	r2, r3
 80029c8:	f04f 0300 	mov.w	r3, #0
 80029cc:	f7fe f8ba 	bl	8000b44 <__aeabi_uldivmod>
 80029d0:	4602      	mov	r2, r0
 80029d2:	460b      	mov	r3, r1
 80029d4:	4613      	mov	r3, r2
 80029d6:	60fb      	str	r3, [r7, #12]
 80029d8:	e04a      	b.n	8002a70 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029da:	4b30      	ldr	r3, [pc, #192]	; (8002a9c <HAL_RCC_GetSysClockFreq+0x160>)
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	099b      	lsrs	r3, r3, #6
 80029e0:	461a      	mov	r2, r3
 80029e2:	f04f 0300 	mov.w	r3, #0
 80029e6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80029ea:	f04f 0100 	mov.w	r1, #0
 80029ee:	ea02 0400 	and.w	r4, r2, r0
 80029f2:	ea03 0501 	and.w	r5, r3, r1
 80029f6:	4620      	mov	r0, r4
 80029f8:	4629      	mov	r1, r5
 80029fa:	f04f 0200 	mov.w	r2, #0
 80029fe:	f04f 0300 	mov.w	r3, #0
 8002a02:	014b      	lsls	r3, r1, #5
 8002a04:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002a08:	0142      	lsls	r2, r0, #5
 8002a0a:	4610      	mov	r0, r2
 8002a0c:	4619      	mov	r1, r3
 8002a0e:	1b00      	subs	r0, r0, r4
 8002a10:	eb61 0105 	sbc.w	r1, r1, r5
 8002a14:	f04f 0200 	mov.w	r2, #0
 8002a18:	f04f 0300 	mov.w	r3, #0
 8002a1c:	018b      	lsls	r3, r1, #6
 8002a1e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002a22:	0182      	lsls	r2, r0, #6
 8002a24:	1a12      	subs	r2, r2, r0
 8002a26:	eb63 0301 	sbc.w	r3, r3, r1
 8002a2a:	f04f 0000 	mov.w	r0, #0
 8002a2e:	f04f 0100 	mov.w	r1, #0
 8002a32:	00d9      	lsls	r1, r3, #3
 8002a34:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002a38:	00d0      	lsls	r0, r2, #3
 8002a3a:	4602      	mov	r2, r0
 8002a3c:	460b      	mov	r3, r1
 8002a3e:	1912      	adds	r2, r2, r4
 8002a40:	eb45 0303 	adc.w	r3, r5, r3
 8002a44:	f04f 0000 	mov.w	r0, #0
 8002a48:	f04f 0100 	mov.w	r1, #0
 8002a4c:	0299      	lsls	r1, r3, #10
 8002a4e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002a52:	0290      	lsls	r0, r2, #10
 8002a54:	4602      	mov	r2, r0
 8002a56:	460b      	mov	r3, r1
 8002a58:	4610      	mov	r0, r2
 8002a5a:	4619      	mov	r1, r3
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	461a      	mov	r2, r3
 8002a60:	f04f 0300 	mov.w	r3, #0
 8002a64:	f7fe f86e 	bl	8000b44 <__aeabi_uldivmod>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	460b      	mov	r3, r1
 8002a6c:	4613      	mov	r3, r2
 8002a6e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002a70:	4b0a      	ldr	r3, [pc, #40]	; (8002a9c <HAL_RCC_GetSysClockFreq+0x160>)
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	0c1b      	lsrs	r3, r3, #16
 8002a76:	f003 0303 	and.w	r3, r3, #3
 8002a7a:	3301      	adds	r3, #1
 8002a7c:	005b      	lsls	r3, r3, #1
 8002a7e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8002a80:	68fa      	ldr	r2, [r7, #12]
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a88:	60bb      	str	r3, [r7, #8]
      break;
 8002a8a:	e002      	b.n	8002a92 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a8c:	4b04      	ldr	r3, [pc, #16]	; (8002aa0 <HAL_RCC_GetSysClockFreq+0x164>)
 8002a8e:	60bb      	str	r3, [r7, #8]
      break;
 8002a90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a92:	68bb      	ldr	r3, [r7, #8]
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	3710      	adds	r7, #16
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bdb0      	pop	{r4, r5, r7, pc}
 8002a9c:	40023800 	.word	0x40023800
 8002aa0:	00f42400 	.word	0x00f42400
 8002aa4:	017d7840 	.word	0x017d7840

08002aa8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002aac:	4b03      	ldr	r3, [pc, #12]	; (8002abc <HAL_RCC_GetHCLKFreq+0x14>)
 8002aae:	681b      	ldr	r3, [r3, #0]
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab8:	4770      	bx	lr
 8002aba:	bf00      	nop
 8002abc:	20000094 	.word	0x20000094

08002ac0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002ac4:	f7ff fff0 	bl	8002aa8 <HAL_RCC_GetHCLKFreq>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	4b05      	ldr	r3, [pc, #20]	; (8002ae0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	0a9b      	lsrs	r3, r3, #10
 8002ad0:	f003 0307 	and.w	r3, r3, #7
 8002ad4:	4903      	ldr	r1, [pc, #12]	; (8002ae4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ad6:	5ccb      	ldrb	r3, [r1, r3]
 8002ad8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	bd80      	pop	{r7, pc}
 8002ae0:	40023800 	.word	0x40023800
 8002ae4:	080072c8 	.word	0x080072c8

08002ae8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002aec:	f7ff ffdc 	bl	8002aa8 <HAL_RCC_GetHCLKFreq>
 8002af0:	4602      	mov	r2, r0
 8002af2:	4b05      	ldr	r3, [pc, #20]	; (8002b08 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	0b5b      	lsrs	r3, r3, #13
 8002af8:	f003 0307 	and.w	r3, r3, #7
 8002afc:	4903      	ldr	r1, [pc, #12]	; (8002b0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002afe:	5ccb      	ldrb	r3, [r1, r3]
 8002b00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	bd80      	pop	{r7, pc}
 8002b08:	40023800 	.word	0x40023800
 8002b0c:	080072c8 	.word	0x080072c8

08002b10 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b088      	sub	sp, #32
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002b20:	2300      	movs	r3, #0
 8002b22:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002b24:	2300      	movs	r3, #0
 8002b26:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 0301 	and.w	r3, r3, #1
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d012      	beq.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002b38:	4b69      	ldr	r3, [pc, #420]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	4a68      	ldr	r2, [pc, #416]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b3e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002b42:	6093      	str	r3, [r2, #8]
 8002b44:	4b66      	ldr	r3, [pc, #408]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b46:	689a      	ldr	r2, [r3, #8]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b4c:	4964      	ldr	r1, [pc, #400]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d101      	bne.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d017      	beq.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002b6a:	4b5d      	ldr	r3, [pc, #372]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b70:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b78:	4959      	ldr	r1, [pc, #356]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b84:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b88:	d101      	bne.n	8002b8e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d101      	bne.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002b96:	2301      	movs	r3, #1
 8002b98:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d017      	beq.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002ba6:	4b4e      	ldr	r3, [pc, #312]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ba8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002bac:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb4:	494a      	ldr	r1, [pc, #296]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002bc4:	d101      	bne.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d101      	bne.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d001      	beq.n	8002be6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002be2:	2301      	movs	r3, #1
 8002be4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 0320 	and.w	r3, r3, #32
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	f000 808b 	beq.w	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002bf4:	4b3a      	ldr	r3, [pc, #232]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf8:	4a39      	ldr	r2, [pc, #228]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bfa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bfe:	6413      	str	r3, [r2, #64]	; 0x40
 8002c00:	4b37      	ldr	r3, [pc, #220]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c08:	60bb      	str	r3, [r7, #8]
 8002c0a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002c0c:	4b35      	ldr	r3, [pc, #212]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a34      	ldr	r2, [pc, #208]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002c12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c16:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c18:	f7fe ff90 	bl	8001b3c <HAL_GetTick>
 8002c1c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002c1e:	e008      	b.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c20:	f7fe ff8c 	bl	8001b3c <HAL_GetTick>
 8002c24:	4602      	mov	r2, r0
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	1ad3      	subs	r3, r2, r3
 8002c2a:	2b64      	cmp	r3, #100	; 0x64
 8002c2c:	d901      	bls.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002c2e:	2303      	movs	r3, #3
 8002c30:	e357      	b.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002c32:	4b2c      	ldr	r3, [pc, #176]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d0f0      	beq.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002c3e:	4b28      	ldr	r3, [pc, #160]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c46:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d035      	beq.n	8002cba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c56:	693a      	ldr	r2, [r7, #16]
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d02e      	beq.n	8002cba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002c5c:	4b20      	ldr	r3, [pc, #128]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c64:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002c66:	4b1e      	ldr	r3, [pc, #120]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c6a:	4a1d      	ldr	r2, [pc, #116]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c70:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002c72:	4b1b      	ldr	r3, [pc, #108]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c76:	4a1a      	ldr	r2, [pc, #104]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c7c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002c7e:	4a18      	ldr	r2, [pc, #96]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002c84:	4b16      	ldr	r3, [pc, #88]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c88:	f003 0301 	and.w	r3, r3, #1
 8002c8c:	2b01      	cmp	r3, #1
 8002c8e:	d114      	bne.n	8002cba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c90:	f7fe ff54 	bl	8001b3c <HAL_GetTick>
 8002c94:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c96:	e00a      	b.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c98:	f7fe ff50 	bl	8001b3c <HAL_GetTick>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d901      	bls.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002caa:	2303      	movs	r3, #3
 8002cac:	e319      	b.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cae:	4b0c      	ldr	r3, [pc, #48]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cb2:	f003 0302 	and.w	r3, r3, #2
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d0ee      	beq.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cc2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002cc6:	d111      	bne.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002cc8:	4b05      	ldr	r3, [pc, #20]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002cd4:	4b04      	ldr	r3, [pc, #16]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002cd6:	400b      	ands	r3, r1
 8002cd8:	4901      	ldr	r1, [pc, #4]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	608b      	str	r3, [r1, #8]
 8002cde:	e00b      	b.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002ce0:	40023800 	.word	0x40023800
 8002ce4:	40007000 	.word	0x40007000
 8002ce8:	0ffffcff 	.word	0x0ffffcff
 8002cec:	4bb1      	ldr	r3, [pc, #708]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	4ab0      	ldr	r2, [pc, #704]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002cf2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002cf6:	6093      	str	r3, [r2, #8]
 8002cf8:	4bae      	ldr	r3, [pc, #696]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002cfa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d04:	49ab      	ldr	r1, [pc, #684]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002d06:	4313      	orrs	r3, r2
 8002d08:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 0310 	and.w	r3, r3, #16
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d010      	beq.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002d16:	4ba7      	ldr	r3, [pc, #668]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002d18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d1c:	4aa5      	ldr	r2, [pc, #660]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002d1e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d22:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002d26:	4ba3      	ldr	r3, [pc, #652]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002d28:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d30:	49a0      	ldr	r1, [pc, #640]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002d32:	4313      	orrs	r3, r2
 8002d34:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d00a      	beq.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d44:	4b9b      	ldr	r3, [pc, #620]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002d46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d4a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d52:	4998      	ldr	r1, [pc, #608]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002d54:	4313      	orrs	r3, r2
 8002d56:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d00a      	beq.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002d66:	4b93      	ldr	r3, [pc, #588]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002d68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d6c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d74:	498f      	ldr	r1, [pc, #572]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002d76:	4313      	orrs	r3, r2
 8002d78:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d00a      	beq.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002d88:	4b8a      	ldr	r3, [pc, #552]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002d8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d8e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d96:	4987      	ldr	r1, [pc, #540]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d00a      	beq.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002daa:	4b82      	ldr	r3, [pc, #520]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002dac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002db0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002db8:	497e      	ldr	r1, [pc, #504]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d00a      	beq.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002dcc:	4b79      	ldr	r3, [pc, #484]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002dce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dd2:	f023 0203 	bic.w	r2, r3, #3
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dda:	4976      	ldr	r1, [pc, #472]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d00a      	beq.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002dee:	4b71      	ldr	r3, [pc, #452]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002df0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002df4:	f023 020c 	bic.w	r2, r3, #12
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dfc:	496d      	ldr	r1, [pc, #436]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d00a      	beq.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002e10:	4b68      	ldr	r3, [pc, #416]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002e12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e16:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e1e:	4965      	ldr	r1, [pc, #404]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002e20:	4313      	orrs	r3, r2
 8002e22:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d00a      	beq.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002e32:	4b60      	ldr	r3, [pc, #384]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002e34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e38:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e40:	495c      	ldr	r1, [pc, #368]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002e42:	4313      	orrs	r3, r2
 8002e44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d00a      	beq.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002e54:	4b57      	ldr	r3, [pc, #348]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002e56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e5a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e62:	4954      	ldr	r1, [pc, #336]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002e64:	4313      	orrs	r3, r2
 8002e66:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d00a      	beq.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002e76:	4b4f      	ldr	r3, [pc, #316]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002e78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e7c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e84:	494b      	ldr	r1, [pc, #300]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002e86:	4313      	orrs	r3, r2
 8002e88:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d00a      	beq.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002e98:	4b46      	ldr	r3, [pc, #280]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002e9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e9e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ea6:	4943      	ldr	r1, [pc, #268]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d00a      	beq.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002eba:	4b3e      	ldr	r3, [pc, #248]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002ebc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ec0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ec8:	493a      	ldr	r1, [pc, #232]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d00a      	beq.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002edc:	4b35      	ldr	r3, [pc, #212]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002ede:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ee2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002eea:	4932      	ldr	r1, [pc, #200]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002eec:	4313      	orrs	r3, r2
 8002eee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d011      	beq.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002efe:	4b2d      	ldr	r3, [pc, #180]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002f00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f04:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f0c:	4929      	ldr	r1, [pc, #164]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f18:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f1c:	d101      	bne.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 0308 	and.w	r3, r3, #8
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d001      	beq.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d00a      	beq.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002f3e:	4b1d      	ldr	r3, [pc, #116]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002f40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f44:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f4c:	4919      	ldr	r1, [pc, #100]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d00b      	beq.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002f60:	4b14      	ldr	r3, [pc, #80]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002f62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f66:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f70:	4910      	ldr	r1, [pc, #64]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002f72:	4313      	orrs	r3, r2
 8002f74:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002f78:	69fb      	ldr	r3, [r7, #28]
 8002f7a:	2b01      	cmp	r3, #1
 8002f7c:	d006      	beq.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	f000 80d9 	beq.w	800313e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002f8c:	4b09      	ldr	r3, [pc, #36]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a08      	ldr	r2, [pc, #32]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002f92:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002f96:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f98:	f7fe fdd0 	bl	8001b3c <HAL_GetTick>
 8002f9c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002f9e:	e00b      	b.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002fa0:	f7fe fdcc 	bl	8001b3c <HAL_GetTick>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	1ad3      	subs	r3, r2, r3
 8002faa:	2b64      	cmp	r3, #100	; 0x64
 8002fac:	d904      	bls.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002fae:	2303      	movs	r3, #3
 8002fb0:	e197      	b.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8002fb2:	bf00      	nop
 8002fb4:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002fb8:	4b6c      	ldr	r3, [pc, #432]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d1ed      	bne.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f003 0301 	and.w	r3, r3, #1
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d021      	beq.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d11d      	bne.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002fd8:	4b64      	ldr	r3, [pc, #400]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002fda:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fde:	0c1b      	lsrs	r3, r3, #16
 8002fe0:	f003 0303 	and.w	r3, r3, #3
 8002fe4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002fe6:	4b61      	ldr	r3, [pc, #388]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002fe8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fec:	0e1b      	lsrs	r3, r3, #24
 8002fee:	f003 030f 	and.w	r3, r3, #15
 8002ff2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	019a      	lsls	r2, r3, #6
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	041b      	lsls	r3, r3, #16
 8002ffe:	431a      	orrs	r2, r3
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	061b      	lsls	r3, r3, #24
 8003004:	431a      	orrs	r2, r3
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	071b      	lsls	r3, r3, #28
 800300c:	4957      	ldr	r1, [pc, #348]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800300e:	4313      	orrs	r3, r2
 8003010:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800301c:	2b00      	cmp	r3, #0
 800301e:	d004      	beq.n	800302a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003024:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003028:	d00a      	beq.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003032:	2b00      	cmp	r3, #0
 8003034:	d02e      	beq.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800303e:	d129      	bne.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003040:	4b4a      	ldr	r3, [pc, #296]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003042:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003046:	0c1b      	lsrs	r3, r3, #16
 8003048:	f003 0303 	and.w	r3, r3, #3
 800304c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800304e:	4b47      	ldr	r3, [pc, #284]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003050:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003054:	0f1b      	lsrs	r3, r3, #28
 8003056:	f003 0307 	and.w	r3, r3, #7
 800305a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	019a      	lsls	r2, r3, #6
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	041b      	lsls	r3, r3, #16
 8003066:	431a      	orrs	r2, r3
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	68db      	ldr	r3, [r3, #12]
 800306c:	061b      	lsls	r3, r3, #24
 800306e:	431a      	orrs	r2, r3
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	071b      	lsls	r3, r3, #28
 8003074:	493d      	ldr	r1, [pc, #244]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003076:	4313      	orrs	r3, r2
 8003078:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800307c:	4b3b      	ldr	r3, [pc, #236]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800307e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003082:	f023 021f 	bic.w	r2, r3, #31
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800308a:	3b01      	subs	r3, #1
 800308c:	4937      	ldr	r1, [pc, #220]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800308e:	4313      	orrs	r3, r2
 8003090:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800309c:	2b00      	cmp	r3, #0
 800309e:	d01d      	beq.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80030a0:	4b32      	ldr	r3, [pc, #200]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80030a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030a6:	0e1b      	lsrs	r3, r3, #24
 80030a8:	f003 030f 	and.w	r3, r3, #15
 80030ac:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80030ae:	4b2f      	ldr	r3, [pc, #188]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80030b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030b4:	0f1b      	lsrs	r3, r3, #28
 80030b6:	f003 0307 	and.w	r3, r3, #7
 80030ba:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	019a      	lsls	r2, r3, #6
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	691b      	ldr	r3, [r3, #16]
 80030c6:	041b      	lsls	r3, r3, #16
 80030c8:	431a      	orrs	r2, r3
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	061b      	lsls	r3, r3, #24
 80030ce:	431a      	orrs	r2, r3
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	071b      	lsls	r3, r3, #28
 80030d4:	4925      	ldr	r1, [pc, #148]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80030d6:	4313      	orrs	r3, r2
 80030d8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d011      	beq.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	019a      	lsls	r2, r3, #6
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	691b      	ldr	r3, [r3, #16]
 80030f2:	041b      	lsls	r3, r3, #16
 80030f4:	431a      	orrs	r2, r3
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	68db      	ldr	r3, [r3, #12]
 80030fa:	061b      	lsls	r3, r3, #24
 80030fc:	431a      	orrs	r2, r3
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	071b      	lsls	r3, r3, #28
 8003104:	4919      	ldr	r1, [pc, #100]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003106:	4313      	orrs	r3, r2
 8003108:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800310c:	4b17      	ldr	r3, [pc, #92]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a16      	ldr	r2, [pc, #88]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003112:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003116:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003118:	f7fe fd10 	bl	8001b3c <HAL_GetTick>
 800311c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800311e:	e008      	b.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003120:	f7fe fd0c 	bl	8001b3c <HAL_GetTick>
 8003124:	4602      	mov	r2, r0
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	1ad3      	subs	r3, r2, r3
 800312a:	2b64      	cmp	r3, #100	; 0x64
 800312c:	d901      	bls.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800312e:	2303      	movs	r3, #3
 8003130:	e0d7      	b.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003132:	4b0e      	ldr	r3, [pc, #56]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800313a:	2b00      	cmp	r3, #0
 800313c:	d0f0      	beq.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800313e:	69bb      	ldr	r3, [r7, #24]
 8003140:	2b01      	cmp	r3, #1
 8003142:	f040 80cd 	bne.w	80032e0 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003146:	4b09      	ldr	r3, [pc, #36]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a08      	ldr	r2, [pc, #32]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800314c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003150:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003152:	f7fe fcf3 	bl	8001b3c <HAL_GetTick>
 8003156:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003158:	e00a      	b.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800315a:	f7fe fcef 	bl	8001b3c <HAL_GetTick>
 800315e:	4602      	mov	r2, r0
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	1ad3      	subs	r3, r2, r3
 8003164:	2b64      	cmp	r3, #100	; 0x64
 8003166:	d903      	bls.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003168:	2303      	movs	r3, #3
 800316a:	e0ba      	b.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800316c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003170:	4b5e      	ldr	r3, [pc, #376]	; (80032ec <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003178:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800317c:	d0ed      	beq.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003186:	2b00      	cmp	r3, #0
 8003188:	d003      	beq.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800318e:	2b00      	cmp	r3, #0
 8003190:	d009      	beq.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800319a:	2b00      	cmp	r3, #0
 800319c:	d02e      	beq.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d12a      	bne.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80031a6:	4b51      	ldr	r3, [pc, #324]	; (80032ec <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80031a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031ac:	0c1b      	lsrs	r3, r3, #16
 80031ae:	f003 0303 	and.w	r3, r3, #3
 80031b2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80031b4:	4b4d      	ldr	r3, [pc, #308]	; (80032ec <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80031b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031ba:	0f1b      	lsrs	r3, r3, #28
 80031bc:	f003 0307 	and.w	r3, r3, #7
 80031c0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	695b      	ldr	r3, [r3, #20]
 80031c6:	019a      	lsls	r2, r3, #6
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	041b      	lsls	r3, r3, #16
 80031cc:	431a      	orrs	r2, r3
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	699b      	ldr	r3, [r3, #24]
 80031d2:	061b      	lsls	r3, r3, #24
 80031d4:	431a      	orrs	r2, r3
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	071b      	lsls	r3, r3, #28
 80031da:	4944      	ldr	r1, [pc, #272]	; (80032ec <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80031dc:	4313      	orrs	r3, r2
 80031de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80031e2:	4b42      	ldr	r3, [pc, #264]	; (80032ec <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80031e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031e8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031f0:	3b01      	subs	r3, #1
 80031f2:	021b      	lsls	r3, r3, #8
 80031f4:	493d      	ldr	r1, [pc, #244]	; (80032ec <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80031f6:	4313      	orrs	r3, r2
 80031f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003204:	2b00      	cmp	r3, #0
 8003206:	d022      	beq.n	800324e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800320c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003210:	d11d      	bne.n	800324e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003212:	4b36      	ldr	r3, [pc, #216]	; (80032ec <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003214:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003218:	0e1b      	lsrs	r3, r3, #24
 800321a:	f003 030f 	and.w	r3, r3, #15
 800321e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003220:	4b32      	ldr	r3, [pc, #200]	; (80032ec <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003222:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003226:	0f1b      	lsrs	r3, r3, #28
 8003228:	f003 0307 	and.w	r3, r3, #7
 800322c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	695b      	ldr	r3, [r3, #20]
 8003232:	019a      	lsls	r2, r3, #6
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6a1b      	ldr	r3, [r3, #32]
 8003238:	041b      	lsls	r3, r3, #16
 800323a:	431a      	orrs	r2, r3
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	061b      	lsls	r3, r3, #24
 8003240:	431a      	orrs	r2, r3
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	071b      	lsls	r3, r3, #28
 8003246:	4929      	ldr	r1, [pc, #164]	; (80032ec <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003248:	4313      	orrs	r3, r2
 800324a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f003 0308 	and.w	r3, r3, #8
 8003256:	2b00      	cmp	r3, #0
 8003258:	d028      	beq.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800325a:	4b24      	ldr	r3, [pc, #144]	; (80032ec <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800325c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003260:	0e1b      	lsrs	r3, r3, #24
 8003262:	f003 030f 	and.w	r3, r3, #15
 8003266:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003268:	4b20      	ldr	r3, [pc, #128]	; (80032ec <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800326a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800326e:	0c1b      	lsrs	r3, r3, #16
 8003270:	f003 0303 	and.w	r3, r3, #3
 8003274:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	695b      	ldr	r3, [r3, #20]
 800327a:	019a      	lsls	r2, r3, #6
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	041b      	lsls	r3, r3, #16
 8003280:	431a      	orrs	r2, r3
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	061b      	lsls	r3, r3, #24
 8003286:	431a      	orrs	r2, r3
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	69db      	ldr	r3, [r3, #28]
 800328c:	071b      	lsls	r3, r3, #28
 800328e:	4917      	ldr	r1, [pc, #92]	; (80032ec <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003290:	4313      	orrs	r3, r2
 8003292:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003296:	4b15      	ldr	r3, [pc, #84]	; (80032ec <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003298:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800329c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032a4:	4911      	ldr	r1, [pc, #68]	; (80032ec <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80032a6:	4313      	orrs	r3, r2
 80032a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80032ac:	4b0f      	ldr	r3, [pc, #60]	; (80032ec <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a0e      	ldr	r2, [pc, #56]	; (80032ec <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80032b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032b8:	f7fe fc40 	bl	8001b3c <HAL_GetTick>
 80032bc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80032be:	e008      	b.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80032c0:	f7fe fc3c 	bl	8001b3c <HAL_GetTick>
 80032c4:	4602      	mov	r2, r0
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	1ad3      	subs	r3, r2, r3
 80032ca:	2b64      	cmp	r3, #100	; 0x64
 80032cc:	d901      	bls.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80032ce:	2303      	movs	r3, #3
 80032d0:	e007      	b.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80032d2:	4b06      	ldr	r3, [pc, #24]	; (80032ec <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80032da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80032de:	d1ef      	bne.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80032e0:	2300      	movs	r3, #0
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	3720      	adds	r7, #32
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}
 80032ea:	bf00      	nop
 80032ec:	40023800 	.word	0x40023800

080032f0 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b082      	sub	sp, #8
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d101      	bne.n	8003302 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e022      	b.n	8003348 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003308:	b2db      	uxtb	r3, r3
 800330a:	2b00      	cmp	r3, #0
 800330c:	d105      	bne.n	800331a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2200      	movs	r2, #0
 8003312:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8003314:	6878      	ldr	r0, [r7, #4]
 8003316:	f7fe fa6f 	bl	80017f8 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2203      	movs	r2, #3
 800331e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	f000 f814 	bl	8003350 <HAL_SD_InitCard>
 8003328:	4603      	mov	r3, r0
 800332a:	2b00      	cmp	r3, #0
 800332c:	d001      	beq.n	8003332 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e00a      	b.n	8003348 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2200      	movs	r2, #0
 8003336:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2200      	movs	r2, #0
 800333c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2201      	movs	r2, #1
 8003342:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003346:	2300      	movs	r3, #0
}
 8003348:	4618      	mov	r0, r3
 800334a:	3708      	adds	r7, #8
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}

08003350 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003350:	b5b0      	push	{r4, r5, r7, lr}
 8003352:	b08e      	sub	sp, #56	; 0x38
 8003354:	af04      	add	r7, sp, #16
 8003356:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8003358:	2300      	movs	r3, #0
 800335a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 800335c:	2300      	movs	r3, #0
 800335e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8003360:	2300      	movs	r3, #0
 8003362:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8003364:	2300      	movs	r3, #0
 8003366:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8003368:	2300      	movs	r3, #0
 800336a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800336c:	2376      	movs	r3, #118	; 0x76
 800336e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681d      	ldr	r5, [r3, #0]
 8003374:	466c      	mov	r4, sp
 8003376:	f107 0314 	add.w	r3, r7, #20
 800337a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800337e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003382:	f107 0308 	add.w	r3, r7, #8
 8003386:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003388:	4628      	mov	r0, r5
 800338a:	f002 f803 	bl	8005394 <SDMMC_Init>
 800338e:	4603      	mov	r3, r0
 8003390:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8003394:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003398:	2b00      	cmp	r3, #0
 800339a:	d001      	beq.n	80033a0 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	e056      	b.n	800344e <HAL_SD_InitCard+0xfe>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	685a      	ldr	r2, [r3, #4]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80033ae:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4618      	mov	r0, r3
 80033b6:	f002 f837 	bl	8005428 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	685a      	ldr	r2, [r3, #4]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033c8:	605a      	str	r2, [r3, #4]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	f000 fe66 	bl	800409c <SD_PowerON>
 80033d0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80033d2:	6a3b      	ldr	r3, [r7, #32]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d00b      	beq.n	80033f0 <HAL_SD_InitCard+0xa0>
  {
    hsd->State = HAL_SD_STATE_READY;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2201      	movs	r2, #1
 80033dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033e4:	6a3b      	ldr	r3, [r7, #32]
 80033e6:	431a      	orrs	r2, r3
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80033ec:	2301      	movs	r3, #1
 80033ee:	e02e      	b.n	800344e <HAL_SD_InitCard+0xfe>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80033f0:	6878      	ldr	r0, [r7, #4]
 80033f2:	f000 fd87 	bl	8003f04 <SD_InitCard>
 80033f6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80033f8:	6a3b      	ldr	r3, [r7, #32]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d00b      	beq.n	8003416 <HAL_SD_InitCard+0xc6>
  {
    hsd->State = HAL_SD_STATE_READY;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2201      	movs	r2, #1
 8003402:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800340a:	6a3b      	ldr	r3, [r7, #32]
 800340c:	431a      	orrs	r2, r3
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	e01b      	b.n	800344e <HAL_SD_InitCard+0xfe>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800341e:	4618      	mov	r0, r3
 8003420:	f002 f896 	bl	8005550 <SDMMC_CmdBlockLength>
 8003424:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003426:	6a3b      	ldr	r3, [r7, #32]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d00f      	beq.n	800344c <HAL_SD_InitCard+0xfc>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a09      	ldr	r2, [pc, #36]	; (8003458 <HAL_SD_InitCard+0x108>)
 8003432:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003438:	6a3b      	ldr	r3, [r7, #32]
 800343a:	431a      	orrs	r2, r3
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2201      	movs	r2, #1
 8003444:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8003448:	2301      	movs	r3, #1
 800344a:	e000      	b.n	800344e <HAL_SD_InitCard+0xfe>
  }

  return HAL_OK;
 800344c:	2300      	movs	r3, #0
}
 800344e:	4618      	mov	r0, r3
 8003450:	3728      	adds	r7, #40	; 0x28
 8003452:	46bd      	mov	sp, r7
 8003454:	bdb0      	pop	{r4, r5, r7, pc}
 8003456:	bf00      	nop
 8003458:	004005ff 	.word	0x004005ff

0800345c <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b092      	sub	sp, #72	; 0x48
 8003460:	af00      	add	r7, sp, #0
 8003462:	60f8      	str	r0, [r7, #12]
 8003464:	60b9      	str	r1, [r7, #8]
 8003466:	607a      	str	r2, [r7, #4]
 8003468:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800346a:	f7fe fb67 	bl	8001b3c <HAL_GetTick>
 800346e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d107      	bne.n	800348e <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003482:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e1bd      	b.n	800380a <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003494:	b2db      	uxtb	r3, r3
 8003496:	2b01      	cmp	r3, #1
 8003498:	f040 81b0 	bne.w	80037fc <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2200      	movs	r2, #0
 80034a0:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80034a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	441a      	add	r2, r3
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d907      	bls.n	80034c0 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034b4:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	e1a4      	b.n	800380a <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2203      	movs	r2, #3
 80034c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	2200      	movs	r2, #0
 80034ce:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d002      	beq.n	80034de <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 80034d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034da:	025b      	lsls	r3, r3, #9
 80034dc:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80034de:	f04f 33ff 	mov.w	r3, #4294967295
 80034e2:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	025b      	lsls	r3, r3, #9
 80034e8:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80034ea:	2390      	movs	r3, #144	; 0x90
 80034ec:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80034ee:	2302      	movs	r3, #2
 80034f0:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80034f2:	2300      	movs	r3, #0
 80034f4:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_ENABLE;
 80034f6:	2301      	movs	r3, #1
 80034f8:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f107 0214 	add.w	r2, r7, #20
 8003502:	4611      	mov	r1, r2
 8003504:	4618      	mov	r0, r3
 8003506:	f001 fff7 	bl	80054f8 <SDMMC_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	2b01      	cmp	r3, #1
 800350e:	d90a      	bls.n	8003526 <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	2202      	movs	r2, #2
 8003514:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800351c:	4618      	mov	r0, r3
 800351e:	f002 f85b 	bl	80055d8 <SDMMC_CmdReadMultiBlock>
 8003522:	6478      	str	r0, [r7, #68]	; 0x44
 8003524:	e009      	b.n	800353a <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	2201      	movs	r2, #1
 800352a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003532:	4618      	mov	r0, r3
 8003534:	f002 f82e 	bl	8005594 <SDMMC_CmdReadSingleBlock>
 8003538:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800353a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800353c:	2b00      	cmp	r3, #0
 800353e:	d012      	beq.n	8003566 <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a7a      	ldr	r2, [pc, #488]	; (8003730 <HAL_SD_ReadBlocks+0x2d4>)
 8003546:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800354c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800354e:	431a      	orrs	r2, r3
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2201      	movs	r2, #1
 8003558:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2200      	movs	r2, #0
 8003560:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	e151      	b.n	800380a <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 8003566:	69bb      	ldr	r3, [r7, #24]
 8003568:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800356a:	e061      	b.n	8003630 <HAL_SD_ReadBlocks+0x1d4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining > 0U))
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003572:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003576:	2b00      	cmp	r3, #0
 8003578:	d03c      	beq.n	80035f4 <HAL_SD_ReadBlocks+0x198>
 800357a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800357c:	2b00      	cmp	r3, #0
 800357e:	d039      	beq.n	80035f4 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8003580:	2300      	movs	r3, #0
 8003582:	643b      	str	r3, [r7, #64]	; 0x40
 8003584:	e033      	b.n	80035ee <HAL_SD_ReadBlocks+0x192>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4618      	mov	r0, r3
 800358c:	f001 ff2e 	bl	80053ec <SDMMC_ReadFIFO>
 8003590:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8003592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003594:	b2da      	uxtb	r2, r3
 8003596:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003598:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800359a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800359c:	3301      	adds	r3, #1
 800359e:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80035a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035a2:	3b01      	subs	r3, #1
 80035a4:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80035a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035a8:	0a1b      	lsrs	r3, r3, #8
 80035aa:	b2da      	uxtb	r2, r3
 80035ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035ae:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80035b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035b2:	3301      	adds	r3, #1
 80035b4:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80035b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035b8:	3b01      	subs	r3, #1
 80035ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80035bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035be:	0c1b      	lsrs	r3, r3, #16
 80035c0:	b2da      	uxtb	r2, r3
 80035c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035c4:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80035c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035c8:	3301      	adds	r3, #1
 80035ca:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80035cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035ce:	3b01      	subs	r3, #1
 80035d0:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80035d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035d4:	0e1b      	lsrs	r3, r3, #24
 80035d6:	b2da      	uxtb	r2, r3
 80035d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035da:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80035dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035de:	3301      	adds	r3, #1
 80035e0:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80035e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035e4:	3b01      	subs	r3, #1
 80035e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 80035e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035ea:	3301      	adds	r3, #1
 80035ec:	643b      	str	r3, [r7, #64]	; 0x40
 80035ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035f0:	2b07      	cmp	r3, #7
 80035f2:	d9c8      	bls.n	8003586 <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80035f4:	f7fe faa2 	bl	8001b3c <HAL_GetTick>
 80035f8:	4602      	mov	r2, r0
 80035fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035fc:	1ad3      	subs	r3, r2, r3
 80035fe:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003600:	429a      	cmp	r2, r3
 8003602:	d902      	bls.n	800360a <HAL_SD_ReadBlocks+0x1ae>
 8003604:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003606:	2b00      	cmp	r3, #0
 8003608:	d112      	bne.n	8003630 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a48      	ldr	r2, [pc, #288]	; (8003730 <HAL_SD_ReadBlocks+0x2d4>)
 8003610:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003616:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2201      	movs	r2, #1
 8003622:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2200      	movs	r2, #0
 800362a:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800362c:	2303      	movs	r3, #3
 800362e:	e0ec      	b.n	800380a <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003636:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800363a:	2b00      	cmp	r3, #0
 800363c:	d096      	beq.n	800356c <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003644:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003648:	2b00      	cmp	r3, #0
 800364a:	d022      	beq.n	8003692 <HAL_SD_ReadBlocks+0x236>
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	2b01      	cmp	r3, #1
 8003650:	d91f      	bls.n	8003692 <HAL_SD_ReadBlocks+0x236>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003656:	2b03      	cmp	r3, #3
 8003658:	d01b      	beq.n	8003692 <HAL_SD_ReadBlocks+0x236>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4618      	mov	r0, r3
 8003660:	f002 f820 	bl	80056a4 <SDMMC_CmdStopTransfer>
 8003664:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8003666:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003668:	2b00      	cmp	r3, #0
 800366a:	d012      	beq.n	8003692 <HAL_SD_ReadBlocks+0x236>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a2f      	ldr	r2, [pc, #188]	; (8003730 <HAL_SD_ReadBlocks+0x2d4>)
 8003672:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003678:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800367a:	431a      	orrs	r2, r3
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2201      	movs	r2, #1
 8003684:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	2200      	movs	r2, #0
 800368c:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	e0bb      	b.n	800380a <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003698:	f003 0308 	and.w	r3, r3, #8
 800369c:	2b00      	cmp	r3, #0
 800369e:	d012      	beq.n	80036c6 <HAL_SD_ReadBlocks+0x26a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a22      	ldr	r2, [pc, #136]	; (8003730 <HAL_SD_ReadBlocks+0x2d4>)
 80036a6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ac:	f043 0208 	orr.w	r2, r3, #8
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2201      	movs	r2, #1
 80036b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2200      	movs	r2, #0
 80036c0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	e0a1      	b.n	800380a <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036cc:	f003 0302 	and.w	r3, r3, #2
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d012      	beq.n	80036fa <HAL_SD_ReadBlocks+0x29e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a15      	ldr	r2, [pc, #84]	; (8003730 <HAL_SD_ReadBlocks+0x2d4>)
 80036da:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036e0:	f043 0202 	orr.w	r2, r3, #2
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2201      	movs	r2, #1
 80036ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2200      	movs	r2, #0
 80036f4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	e087      	b.n	800380a <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003700:	f003 0320 	and.w	r3, r3, #32
 8003704:	2b00      	cmp	r3, #0
 8003706:	d064      	beq.n	80037d2 <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a08      	ldr	r2, [pc, #32]	; (8003730 <HAL_SD_ReadBlocks+0x2d4>)
 800370e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003714:	f043 0220 	orr.w	r2, r3, #32
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2201      	movs	r2, #1
 8003720:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2200      	movs	r2, #0
 8003728:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	e06d      	b.n	800380a <HAL_SD_ReadBlocks+0x3ae>
 800372e:	bf00      	nop
 8003730:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4618      	mov	r0, r3
 800373a:	f001 fe57 	bl	80053ec <SDMMC_ReadFIFO>
 800373e:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8003740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003742:	b2da      	uxtb	r2, r3
 8003744:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003746:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003748:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800374a:	3301      	adds	r3, #1
 800374c:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800374e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003750:	3b01      	subs	r3, #1
 8003752:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8003754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003756:	0a1b      	lsrs	r3, r3, #8
 8003758:	b2da      	uxtb	r2, r3
 800375a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800375c:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800375e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003760:	3301      	adds	r3, #1
 8003762:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8003764:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003766:	3b01      	subs	r3, #1
 8003768:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800376a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800376c:	0c1b      	lsrs	r3, r3, #16
 800376e:	b2da      	uxtb	r2, r3
 8003770:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003772:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003774:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003776:	3301      	adds	r3, #1
 8003778:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800377a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800377c:	3b01      	subs	r3, #1
 800377e:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8003780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003782:	0e1b      	lsrs	r3, r3, #24
 8003784:	b2da      	uxtb	r2, r3
 8003786:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003788:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800378a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800378c:	3301      	adds	r3, #1
 800378e:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8003790:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003792:	3b01      	subs	r3, #1
 8003794:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8003796:	f7fe f9d1 	bl	8001b3c <HAL_GetTick>
 800379a:	4602      	mov	r2, r0
 800379c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800379e:	1ad3      	subs	r3, r2, r3
 80037a0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80037a2:	429a      	cmp	r2, r3
 80037a4:	d902      	bls.n	80037ac <HAL_SD_ReadBlocks+0x350>
 80037a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d112      	bne.n	80037d2 <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a18      	ldr	r2, [pc, #96]	; (8003814 <HAL_SD_ReadBlocks+0x3b8>)
 80037b2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037b8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2201      	movs	r2, #1
 80037c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2200      	movs	r2, #0
 80037cc:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	e01b      	b.n	800380a <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d002      	beq.n	80037e6 <HAL_SD_ReadBlocks+0x38a>
 80037e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d1a6      	bne.n	8003734 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f240 523a 	movw	r2, #1338	; 0x53a
 80037ee:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2201      	movs	r2, #1
 80037f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80037f8:	2300      	movs	r3, #0
 80037fa:	e006      	b.n	800380a <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003800:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003808:	2301      	movs	r3, #1
  }
}
 800380a:	4618      	mov	r0, r3
 800380c:	3748      	adds	r7, #72	; 0x48
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}
 8003812:	bf00      	nop
 8003814:	004005ff 	.word	0x004005ff

08003818 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b092      	sub	sp, #72	; 0x48
 800381c:	af00      	add	r7, sp, #0
 800381e:	60f8      	str	r0, [r7, #12]
 8003820:	60b9      	str	r1, [r7, #8]
 8003822:	607a      	str	r2, [r7, #4]
 8003824:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8003826:	f7fe f989 	bl	8001b3c <HAL_GetTick>
 800382a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d107      	bne.n	800384a <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800383e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	e165      	b.n	8003b16 <HAL_SD_WriteBlocks+0x2fe>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003850:	b2db      	uxtb	r3, r3
 8003852:	2b01      	cmp	r3, #1
 8003854:	f040 8158 	bne.w	8003b08 <HAL_SD_WriteBlocks+0x2f0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	2200      	movs	r2, #0
 800385c:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800385e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	441a      	add	r2, r3
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003868:	429a      	cmp	r2, r3
 800386a:	d907      	bls.n	800387c <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003870:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8003878:	2301      	movs	r3, #1
 800387a:	e14c      	b.n	8003b16 <HAL_SD_WriteBlocks+0x2fe>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2203      	movs	r2, #3
 8003880:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	2200      	movs	r2, #0
 800388a:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003890:	2b01      	cmp	r3, #1
 8003892:	d002      	beq.n	800389a <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8003894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003896:	025b      	lsls	r3, r3, #9
 8003898:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800389a:	f04f 33ff 	mov.w	r3, #4294967295
 800389e:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	025b      	lsls	r3, r3, #9
 80038a4:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80038a6:	2390      	movs	r3, #144	; 0x90
 80038a8:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 80038aa:	2300      	movs	r3, #0
 80038ac:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80038ae:	2300      	movs	r3, #0
 80038b0:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDMMC_DPSM_ENABLE;
 80038b2:	2301      	movs	r3, #1
 80038b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f107 0218 	add.w	r2, r7, #24
 80038be:	4611      	mov	r1, r2
 80038c0:	4618      	mov	r0, r3
 80038c2:	f001 fe19 	bl	80054f8 <SDMMC_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d90a      	bls.n	80038e2 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2220      	movs	r2, #32
 80038d0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80038d8:	4618      	mov	r0, r3
 80038da:	f001 fec1 	bl	8005660 <SDMMC_CmdWriteMultiBlock>
 80038de:	6478      	str	r0, [r7, #68]	; 0x44
 80038e0:	e009      	b.n	80038f6 <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	2210      	movs	r2, #16
 80038e6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80038ee:	4618      	mov	r0, r3
 80038f0:	f001 fe94 	bl	800561c <SDMMC_CmdWriteSingleBlock>
 80038f4:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80038f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d012      	beq.n	8003922 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a87      	ldr	r2, [pc, #540]	; (8003b20 <HAL_SD_WriteBlocks+0x308>)
 8003902:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003908:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800390a:	431a      	orrs	r2, r3
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	2201      	movs	r2, #1
 8003914:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2200      	movs	r2, #0
 800391c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	e0f9      	b.n	8003b16 <HAL_SD_WriteBlocks+0x2fe>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8003922:	69fb      	ldr	r3, [r7, #28]
 8003924:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8003926:	e065      	b.n	80039f4 <HAL_SD_WriteBlocks+0x1dc>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800392e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003932:	2b00      	cmp	r3, #0
 8003934:	d040      	beq.n	80039b8 <HAL_SD_WriteBlocks+0x1a0>
 8003936:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003938:	2b00      	cmp	r3, #0
 800393a:	d03d      	beq.n	80039b8 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 800393c:	2300      	movs	r3, #0
 800393e:	643b      	str	r3, [r7, #64]	; 0x40
 8003940:	e037      	b.n	80039b2 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8003942:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003944:	781b      	ldrb	r3, [r3, #0]
 8003946:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003948:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800394a:	3301      	adds	r3, #1
 800394c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800394e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003950:	3b01      	subs	r3, #1
 8003952:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8003954:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003956:	781b      	ldrb	r3, [r3, #0]
 8003958:	021a      	lsls	r2, r3, #8
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	4313      	orrs	r3, r2
 800395e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003960:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003962:	3301      	adds	r3, #1
 8003964:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003966:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003968:	3b01      	subs	r3, #1
 800396a:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 800396c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800396e:	781b      	ldrb	r3, [r3, #0]
 8003970:	041a      	lsls	r2, r3, #16
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	4313      	orrs	r3, r2
 8003976:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003978:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800397a:	3301      	adds	r3, #1
 800397c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800397e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003980:	3b01      	subs	r3, #1
 8003982:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8003984:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003986:	781b      	ldrb	r3, [r3, #0]
 8003988:	061a      	lsls	r2, r3, #24
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	4313      	orrs	r3, r2
 800398e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003990:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003992:	3301      	adds	r3, #1
 8003994:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003996:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003998:	3b01      	subs	r3, #1
 800399a:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f107 0214 	add.w	r2, r7, #20
 80039a4:	4611      	mov	r1, r2
 80039a6:	4618      	mov	r0, r3
 80039a8:	f001 fd2d 	bl	8005406 <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 80039ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039ae:	3301      	adds	r3, #1
 80039b0:	643b      	str	r3, [r7, #64]	; 0x40
 80039b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039b4:	2b07      	cmp	r3, #7
 80039b6:	d9c4      	bls.n	8003942 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80039b8:	f7fe f8c0 	bl	8001b3c <HAL_GetTick>
 80039bc:	4602      	mov	r2, r0
 80039be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039c0:	1ad3      	subs	r3, r2, r3
 80039c2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80039c4:	429a      	cmp	r2, r3
 80039c6:	d902      	bls.n	80039ce <HAL_SD_WriteBlocks+0x1b6>
 80039c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d112      	bne.n	80039f4 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a53      	ldr	r2, [pc, #332]	; (8003b20 <HAL_SD_WriteBlocks+0x308>)
 80039d4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039dc:	431a      	orrs	r2, r3
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	2201      	movs	r2, #1
 80039e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	2200      	movs	r2, #0
 80039ee:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 80039f0:	2303      	movs	r3, #3
 80039f2:	e090      	b.n	8003b16 <HAL_SD_WriteBlocks+0x2fe>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039fa:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d092      	beq.n	8003928 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d022      	beq.n	8003a56 <HAL_SD_WriteBlocks+0x23e>
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	2b01      	cmp	r3, #1
 8003a14:	d91f      	bls.n	8003a56 <HAL_SD_WriteBlocks+0x23e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a1a:	2b03      	cmp	r3, #3
 8003a1c:	d01b      	beq.n	8003a56 <HAL_SD_WriteBlocks+0x23e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4618      	mov	r0, r3
 8003a24:	f001 fe3e 	bl	80056a4 <SDMMC_CmdStopTransfer>
 8003a28:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8003a2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d012      	beq.n	8003a56 <HAL_SD_WriteBlocks+0x23e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a3a      	ldr	r2, [pc, #232]	; (8003b20 <HAL_SD_WriteBlocks+0x308>)
 8003a36:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a3e:	431a      	orrs	r2, r3
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	2201      	movs	r2, #1
 8003a48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e05f      	b.n	8003b16 <HAL_SD_WriteBlocks+0x2fe>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a5c:	f003 0308 	and.w	r3, r3, #8
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d012      	beq.n	8003a8a <HAL_SD_WriteBlocks+0x272>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a2d      	ldr	r2, [pc, #180]	; (8003b20 <HAL_SD_WriteBlocks+0x308>)
 8003a6a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a70:	f043 0208 	orr.w	r2, r3, #8
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2200      	movs	r2, #0
 8003a84:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	e045      	b.n	8003b16 <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a90:	f003 0302 	and.w	r3, r3, #2
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d012      	beq.n	8003abe <HAL_SD_WriteBlocks+0x2a6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a20      	ldr	r2, [pc, #128]	; (8003b20 <HAL_SD_WriteBlocks+0x308>)
 8003a9e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aa4:	f043 0202 	orr.w	r2, r3, #2
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	2201      	movs	r2, #1
 8003ab0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	e02b      	b.n	8003b16 <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ac4:	f003 0310 	and.w	r3, r3, #16
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d012      	beq.n	8003af2 <HAL_SD_WriteBlocks+0x2da>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a13      	ldr	r2, [pc, #76]	; (8003b20 <HAL_SD_WriteBlocks+0x308>)
 8003ad2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ad8:	f043 0210 	orr.w	r2, r3, #16
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2200      	movs	r2, #0
 8003aec:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	e011      	b.n	8003b16 <HAL_SD_WriteBlocks+0x2fe>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f240 523a 	movw	r2, #1338	; 0x53a
 8003afa:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2201      	movs	r2, #1
 8003b00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8003b04:	2300      	movs	r3, #0
 8003b06:	e006      	b.n	8003b16 <HAL_SD_WriteBlocks+0x2fe>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b0c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
  }
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	3748      	adds	r7, #72	; 0x48
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}
 8003b1e:	bf00      	nop
 8003b20:	004005ff 	.word	0x004005ff

08003b24 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b083      	sub	sp, #12
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
 8003b2c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b32:	0f9b      	lsrs	r3, r3, #30
 8003b34:	b2da      	uxtb	r2, r3
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b3e:	0e9b      	lsrs	r3, r3, #26
 8003b40:	b2db      	uxtb	r3, r3
 8003b42:	f003 030f 	and.w	r3, r3, #15
 8003b46:	b2da      	uxtb	r2, r3
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b50:	0e1b      	lsrs	r3, r3, #24
 8003b52:	b2db      	uxtb	r3, r3
 8003b54:	f003 0303 	and.w	r3, r3, #3
 8003b58:	b2da      	uxtb	r2, r3
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b62:	0c1b      	lsrs	r3, r3, #16
 8003b64:	b2da      	uxtb	r2, r3
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b6e:	0a1b      	lsrs	r3, r3, #8
 8003b70:	b2da      	uxtb	r2, r3
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b7a:	b2da      	uxtb	r2, r3
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b84:	0d1b      	lsrs	r3, r3, #20
 8003b86:	b29a      	uxth	r2, r3
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b90:	0c1b      	lsrs	r3, r3, #16
 8003b92:	b2db      	uxtb	r3, r3
 8003b94:	f003 030f 	and.w	r3, r3, #15
 8003b98:	b2da      	uxtb	r2, r3
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ba2:	0bdb      	lsrs	r3, r3, #15
 8003ba4:	b2db      	uxtb	r3, r3
 8003ba6:	f003 0301 	and.w	r3, r3, #1
 8003baa:	b2da      	uxtb	r2, r3
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003bb4:	0b9b      	lsrs	r3, r3, #14
 8003bb6:	b2db      	uxtb	r3, r3
 8003bb8:	f003 0301 	and.w	r3, r3, #1
 8003bbc:	b2da      	uxtb	r2, r3
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003bc6:	0b5b      	lsrs	r3, r3, #13
 8003bc8:	b2db      	uxtb	r3, r3
 8003bca:	f003 0301 	and.w	r3, r3, #1
 8003bce:	b2da      	uxtb	r2, r3
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003bd8:	0b1b      	lsrs	r3, r3, #12
 8003bda:	b2db      	uxtb	r3, r3
 8003bdc:	f003 0301 	and.w	r3, r3, #1
 8003be0:	b2da      	uxtb	r2, r3
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	2200      	movs	r2, #0
 8003bea:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d163      	bne.n	8003cbc <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003bf8:	009a      	lsls	r2, r3, #2
 8003bfa:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003bfe:	4013      	ands	r3, r2
 8003c00:	687a      	ldr	r2, [r7, #4]
 8003c02:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8003c04:	0f92      	lsrs	r2, r2, #30
 8003c06:	431a      	orrs	r2, r3
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c10:	0edb      	lsrs	r3, r3, #27
 8003c12:	b2db      	uxtb	r3, r3
 8003c14:	f003 0307 	and.w	r3, r3, #7
 8003c18:	b2da      	uxtb	r2, r3
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c22:	0e1b      	lsrs	r3, r3, #24
 8003c24:	b2db      	uxtb	r3, r3
 8003c26:	f003 0307 	and.w	r3, r3, #7
 8003c2a:	b2da      	uxtb	r2, r3
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c34:	0d5b      	lsrs	r3, r3, #21
 8003c36:	b2db      	uxtb	r3, r3
 8003c38:	f003 0307 	and.w	r3, r3, #7
 8003c3c:	b2da      	uxtb	r2, r3
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c46:	0c9b      	lsrs	r3, r3, #18
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	f003 0307 	and.w	r3, r3, #7
 8003c4e:	b2da      	uxtb	r2, r3
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c58:	0bdb      	lsrs	r3, r3, #15
 8003c5a:	b2db      	uxtb	r3, r3
 8003c5c:	f003 0307 	and.w	r3, r3, #7
 8003c60:	b2da      	uxtb	r2, r3
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	691b      	ldr	r3, [r3, #16]
 8003c6a:	1c5a      	adds	r2, r3, #1
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	7e1b      	ldrb	r3, [r3, #24]
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	f003 0307 	and.w	r3, r3, #7
 8003c7a:	3302      	adds	r3, #2
 8003c7c:	2201      	movs	r2, #1
 8003c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c82:	687a      	ldr	r2, [r7, #4]
 8003c84:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003c86:	fb02 f203 	mul.w	r2, r2, r3
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	7a1b      	ldrb	r3, [r3, #8]
 8003c92:	b2db      	uxtb	r3, r3
 8003c94:	f003 030f 	and.w	r3, r3, #15
 8003c98:	2201      	movs	r2, #1
 8003c9a:	409a      	lsls	r2, r3
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ca4:	687a      	ldr	r2, [r7, #4]
 8003ca6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003ca8:	0a52      	lsrs	r2, r2, #9
 8003caa:	fb02 f203 	mul.w	r2, r2, r3
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003cb8:	661a      	str	r2, [r3, #96]	; 0x60
 8003cba:	e031      	b.n	8003d20 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	d11d      	bne.n	8003d00 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003cc8:	041b      	lsls	r3, r3, #16
 8003cca:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003cd2:	0c1b      	lsrs	r3, r3, #16
 8003cd4:	431a      	orrs	r2, r3
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	691b      	ldr	r3, [r3, #16]
 8003cde:	3301      	adds	r3, #1
 8003ce0:	029a      	lsls	r2, r3, #10
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003cf4:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	661a      	str	r2, [r3, #96]	; 0x60
 8003cfe:	e00f      	b.n	8003d20 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a58      	ldr	r2, [pc, #352]	; (8003e68 <HAL_SD_GetCardCSD+0x344>)
 8003d06:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d0c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2201      	movs	r2, #1
 8003d18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	e09d      	b.n	8003e5c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d24:	0b9b      	lsrs	r3, r3, #14
 8003d26:	b2db      	uxtb	r3, r3
 8003d28:	f003 0301 	and.w	r3, r3, #1
 8003d2c:	b2da      	uxtb	r2, r3
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d36:	09db      	lsrs	r3, r3, #7
 8003d38:	b2db      	uxtb	r3, r3
 8003d3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d3e:	b2da      	uxtb	r2, r3
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d4e:	b2da      	uxtb	r2, r3
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d58:	0fdb      	lsrs	r3, r3, #31
 8003d5a:	b2da      	uxtb	r2, r3
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d64:	0f5b      	lsrs	r3, r3, #29
 8003d66:	b2db      	uxtb	r3, r3
 8003d68:	f003 0303 	and.w	r3, r3, #3
 8003d6c:	b2da      	uxtb	r2, r3
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d76:	0e9b      	lsrs	r3, r3, #26
 8003d78:	b2db      	uxtb	r3, r3
 8003d7a:	f003 0307 	and.w	r3, r3, #7
 8003d7e:	b2da      	uxtb	r2, r3
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d88:	0d9b      	lsrs	r3, r3, #22
 8003d8a:	b2db      	uxtb	r3, r3
 8003d8c:	f003 030f 	and.w	r3, r3, #15
 8003d90:	b2da      	uxtb	r2, r3
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d9a:	0d5b      	lsrs	r3, r3, #21
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	f003 0301 	and.w	r3, r3, #1
 8003da2:	b2da      	uxtb	r2, r3
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	2200      	movs	r2, #0
 8003dae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003db6:	0c1b      	lsrs	r3, r3, #16
 8003db8:	b2db      	uxtb	r3, r3
 8003dba:	f003 0301 	and.w	r3, r3, #1
 8003dbe:	b2da      	uxtb	r2, r3
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dca:	0bdb      	lsrs	r3, r3, #15
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	f003 0301 	and.w	r3, r3, #1
 8003dd2:	b2da      	uxtb	r2, r3
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dde:	0b9b      	lsrs	r3, r3, #14
 8003de0:	b2db      	uxtb	r3, r3
 8003de2:	f003 0301 	and.w	r3, r3, #1
 8003de6:	b2da      	uxtb	r2, r3
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003df2:	0b5b      	lsrs	r3, r3, #13
 8003df4:	b2db      	uxtb	r3, r3
 8003df6:	f003 0301 	and.w	r3, r3, #1
 8003dfa:	b2da      	uxtb	r2, r3
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e06:	0b1b      	lsrs	r3, r3, #12
 8003e08:	b2db      	uxtb	r3, r3
 8003e0a:	f003 0301 	and.w	r3, r3, #1
 8003e0e:	b2da      	uxtb	r2, r3
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e1a:	0a9b      	lsrs	r3, r3, #10
 8003e1c:	b2db      	uxtb	r3, r3
 8003e1e:	f003 0303 	and.w	r3, r3, #3
 8003e22:	b2da      	uxtb	r2, r3
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e2e:	0a1b      	lsrs	r3, r3, #8
 8003e30:	b2db      	uxtb	r3, r3
 8003e32:	f003 0303 	and.w	r3, r3, #3
 8003e36:	b2da      	uxtb	r2, r3
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e42:	085b      	lsrs	r3, r3, #1
 8003e44:	b2db      	uxtb	r3, r3
 8003e46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e4a:	b2da      	uxtb	r2, r3
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	2201      	movs	r2, #1
 8003e56:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8003e5a:	2300      	movs	r3, #0
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	370c      	adds	r7, #12
 8003e60:	46bd      	mov	sp, r7
 8003e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e66:	4770      	bx	lr
 8003e68:	004005ff 	.word	0x004005ff

08003e6c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b083      	sub	sp, #12
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
 8003e74:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8003eb6:	2300      	movs	r3, #0
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	370c      	adds	r7, #12
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec2:	4770      	bx	lr

08003ec4 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b086      	sub	sp, #24
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8003ecc:	2300      	movs	r3, #0
 8003ece:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8003ed0:	f107 030c 	add.w	r3, r7, #12
 8003ed4:	4619      	mov	r1, r3
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f000 f96e 	bl	80041b8 <SD_SendStatus>
 8003edc:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d005      	beq.n	8003ef0 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	431a      	orrs	r2, r3
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	0a5b      	lsrs	r3, r3, #9
 8003ef4:	f003 030f 	and.w	r3, r3, #15
 8003ef8:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8003efa:	693b      	ldr	r3, [r7, #16]
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	3718      	adds	r7, #24
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}

08003f04 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003f04:	b5b0      	push	{r4, r5, r7, lr}
 8003f06:	b094      	sub	sp, #80	; 0x50
 8003f08:	af04      	add	r7, sp, #16
 8003f0a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4618      	mov	r0, r3
 8003f16:	f001 fa96 	bl	8005446 <SDMMC_GetPowerState>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d102      	bne.n	8003f26 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003f20:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003f24:	e0b6      	b.n	8004094 <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f2a:	2b03      	cmp	r3, #3
 8003f2c:	d02f      	beq.n	8003f8e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4618      	mov	r0, r3
 8003f34:	f001 fc7e 	bl	8005834 <SDMMC_CmdSendCID>
 8003f38:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003f3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d001      	beq.n	8003f44 <SD_InitCard+0x40>
    {
      return errorstate;
 8003f40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f42:	e0a7      	b.n	8004094 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	2100      	movs	r1, #0
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f001 fac1 	bl	80054d2 <SDMMC_GetResponse>
 8003f50:	4602      	mov	r2, r0
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	2104      	movs	r1, #4
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	f001 fab8 	bl	80054d2 <SDMMC_GetResponse>
 8003f62:	4602      	mov	r2, r0
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	2108      	movs	r1, #8
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f001 faaf 	bl	80054d2 <SDMMC_GetResponse>
 8003f74:	4602      	mov	r2, r0
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	210c      	movs	r1, #12
 8003f80:	4618      	mov	r0, r3
 8003f82:	f001 faa6 	bl	80054d2 <SDMMC_GetResponse>
 8003f86:	4602      	mov	r2, r0
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f92:	2b03      	cmp	r3, #3
 8003f94:	d00d      	beq.n	8003fb2 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f107 020e 	add.w	r2, r7, #14
 8003f9e:	4611      	mov	r1, r2
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	f001 fc84 	bl	80058ae <SDMMC_CmdSetRelAdd>
 8003fa6:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003fa8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d001      	beq.n	8003fb2 <SD_InitCard+0xae>
    {
      return errorstate;
 8003fae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fb0:	e070      	b.n	8004094 <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fb6:	2b03      	cmp	r3, #3
 8003fb8:	d036      	beq.n	8004028 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8003fba:	89fb      	ldrh	r3, [r7, #14]
 8003fbc:	461a      	mov	r2, r3
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681a      	ldr	r2, [r3, #0]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fca:	041b      	lsls	r3, r3, #16
 8003fcc:	4619      	mov	r1, r3
 8003fce:	4610      	mov	r0, r2
 8003fd0:	f001 fc4e 	bl	8005870 <SDMMC_CmdSendCSD>
 8003fd4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003fd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d001      	beq.n	8003fe0 <SD_InitCard+0xdc>
    {
      return errorstate;
 8003fdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fde:	e059      	b.n	8004094 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	2100      	movs	r1, #0
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f001 fa73 	bl	80054d2 <SDMMC_GetResponse>
 8003fec:	4602      	mov	r2, r0
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	2104      	movs	r1, #4
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	f001 fa6a 	bl	80054d2 <SDMMC_GetResponse>
 8003ffe:	4602      	mov	r2, r0
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	2108      	movs	r1, #8
 800400a:	4618      	mov	r0, r3
 800400c:	f001 fa61 	bl	80054d2 <SDMMC_GetResponse>
 8004010:	4602      	mov	r2, r0
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	210c      	movs	r1, #12
 800401c:	4618      	mov	r0, r3
 800401e:	f001 fa58 	bl	80054d2 <SDMMC_GetResponse>
 8004022:	4602      	mov	r2, r0
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	2104      	movs	r1, #4
 800402e:	4618      	mov	r0, r3
 8004030:	f001 fa4f 	bl	80054d2 <SDMMC_GetResponse>
 8004034:	4603      	mov	r3, r0
 8004036:	0d1a      	lsrs	r2, r3, #20
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800403c:	f107 0310 	add.w	r3, r7, #16
 8004040:	4619      	mov	r1, r3
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f7ff fd6e 	bl	8003b24 <HAL_SD_GetCardCSD>
 8004048:	4603      	mov	r3, r0
 800404a:	2b00      	cmp	r3, #0
 800404c:	d002      	beq.n	8004054 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800404e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004052:	e01f      	b.n	8004094 <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6819      	ldr	r1, [r3, #0]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800405c:	041b      	lsls	r3, r3, #16
 800405e:	461a      	mov	r2, r3
 8004060:	f04f 0300 	mov.w	r3, #0
 8004064:	4608      	mov	r0, r1
 8004066:	f001 fb3f 	bl	80056e8 <SDMMC_CmdSelDesel>
 800406a:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800406c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800406e:	2b00      	cmp	r3, #0
 8004070:	d001      	beq.n	8004076 <SD_InitCard+0x172>
  {
    return errorstate;
 8004072:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004074:	e00e      	b.n	8004094 <SD_InitCard+0x190>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681d      	ldr	r5, [r3, #0]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	466c      	mov	r4, sp
 800407e:	f103 0210 	add.w	r2, r3, #16
 8004082:	ca07      	ldmia	r2, {r0, r1, r2}
 8004084:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004088:	3304      	adds	r3, #4
 800408a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800408c:	4628      	mov	r0, r5
 800408e:	f001 f981 	bl	8005394 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8004092:	2300      	movs	r3, #0
}
 8004094:	4618      	mov	r0, r3
 8004096:	3740      	adds	r7, #64	; 0x40
 8004098:	46bd      	mov	sp, r7
 800409a:	bdb0      	pop	{r4, r5, r7, pc}

0800409c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b086      	sub	sp, #24
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80040a4:	2300      	movs	r3, #0
 80040a6:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80040a8:	2300      	movs	r3, #0
 80040aa:	617b      	str	r3, [r7, #20]
 80040ac:	2300      	movs	r3, #0
 80040ae:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4618      	mov	r0, r3
 80040b6:	f001 fb3a 	bl	800572e <SDMMC_CmdGoIdleState>
 80040ba:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d001      	beq.n	80040c6 <SD_PowerON+0x2a>
  {
    return errorstate;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	e072      	b.n	80041ac <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4618      	mov	r0, r3
 80040cc:	f001 fb4d 	bl	800576a <SDMMC_CmdOperCond>
 80040d0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d00d      	beq.n	80040f4 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2200      	movs	r2, #0
 80040dc:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4618      	mov	r0, r3
 80040e4:	f001 fb23 	bl	800572e <SDMMC_CmdGoIdleState>
 80040e8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d004      	beq.n	80040fa <SD_PowerON+0x5e>
    {
      return errorstate;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	e05b      	b.n	80041ac <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2201      	movs	r2, #1
 80040f8:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040fe:	2b01      	cmp	r3, #1
 8004100:	d137      	bne.n	8004172 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	2100      	movs	r1, #0
 8004108:	4618      	mov	r0, r3
 800410a:	f001 fb4d 	bl	80057a8 <SDMMC_CmdAppCommand>
 800410e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d02d      	beq.n	8004172 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004116:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800411a:	e047      	b.n	80041ac <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	2100      	movs	r1, #0
 8004122:	4618      	mov	r0, r3
 8004124:	f001 fb40 	bl	80057a8 <SDMMC_CmdAppCommand>
 8004128:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d001      	beq.n	8004134 <SD_PowerON+0x98>
    {
      return errorstate;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	e03b      	b.n	80041ac <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	491e      	ldr	r1, [pc, #120]	; (80041b4 <SD_PowerON+0x118>)
 800413a:	4618      	mov	r0, r3
 800413c:	f001 fb56 	bl	80057ec <SDMMC_CmdAppOperCommand>
 8004140:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d002      	beq.n	800414e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004148:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800414c:	e02e      	b.n	80041ac <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	2100      	movs	r1, #0
 8004154:	4618      	mov	r0, r3
 8004156:	f001 f9bc 	bl	80054d2 <SDMMC_GetResponse>
 800415a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	0fdb      	lsrs	r3, r3, #31
 8004160:	2b01      	cmp	r3, #1
 8004162:	d101      	bne.n	8004168 <SD_PowerON+0xcc>
 8004164:	2301      	movs	r3, #1
 8004166:	e000      	b.n	800416a <SD_PowerON+0xce>
 8004168:	2300      	movs	r3, #0
 800416a:	613b      	str	r3, [r7, #16]

    count++;
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	3301      	adds	r3, #1
 8004170:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004178:	4293      	cmp	r3, r2
 800417a:	d802      	bhi.n	8004182 <SD_PowerON+0xe6>
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d0cc      	beq.n	800411c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8004182:	68bb      	ldr	r3, [r7, #8]
 8004184:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004188:	4293      	cmp	r3, r2
 800418a:	d902      	bls.n	8004192 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800418c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004190:	e00c      	b.n	80041ac <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004198:	2b00      	cmp	r3, #0
 800419a:	d003      	beq.n	80041a4 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2201      	movs	r2, #1
 80041a0:	645a      	str	r2, [r3, #68]	; 0x44
 80041a2:	e002      	b.n	80041aa <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2200      	movs	r2, #0
 80041a8:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 80041aa:	2300      	movs	r3, #0
}
 80041ac:	4618      	mov	r0, r3
 80041ae:	3718      	adds	r7, #24
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bd80      	pop	{r7, pc}
 80041b4:	c1100000 	.word	0xc1100000

080041b8 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b084      	sub	sp, #16
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
 80041c0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d102      	bne.n	80041ce <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80041c8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80041cc:	e018      	b.n	8004200 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041d6:	041b      	lsls	r3, r3, #16
 80041d8:	4619      	mov	r1, r3
 80041da:	4610      	mov	r0, r2
 80041dc:	f001 fb88 	bl	80058f0 <SDMMC_CmdSendStatus>
 80041e0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d001      	beq.n	80041ec <SD_SendStatus+0x34>
  {
    return errorstate;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	e009      	b.n	8004200 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	2100      	movs	r1, #0
 80041f2:	4618      	mov	r0, r3
 80041f4:	f001 f96d 	bl	80054d2 <SDMMC_GetResponse>
 80041f8:	4602      	mov	r2, r0
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80041fe:	2300      	movs	r3, #0
}
 8004200:	4618      	mov	r0, r3
 8004202:	3710      	adds	r7, #16
 8004204:	46bd      	mov	sp, r7
 8004206:	bd80      	pop	{r7, pc}

08004208 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b082      	sub	sp, #8
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d101      	bne.n	800421a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004216:	2301      	movs	r3, #1
 8004218:	e049      	b.n	80042ae <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004220:	b2db      	uxtb	r3, r3
 8004222:	2b00      	cmp	r3, #0
 8004224:	d106      	bne.n	8004234 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2200      	movs	r2, #0
 800422a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	f7fd fb44 	bl	80018bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2202      	movs	r2, #2
 8004238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681a      	ldr	r2, [r3, #0]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	3304      	adds	r3, #4
 8004244:	4619      	mov	r1, r3
 8004246:	4610      	mov	r0, r2
 8004248:	f000 fabc 	bl	80047c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2201      	movs	r2, #1
 8004250:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2201      	movs	r2, #1
 8004258:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2201      	movs	r2, #1
 8004260:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2201      	movs	r2, #1
 8004268:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2201      	movs	r2, #1
 8004270:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2201      	movs	r2, #1
 8004278:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2201      	movs	r2, #1
 8004280:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2201      	movs	r2, #1
 8004288:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2201      	movs	r2, #1
 8004290:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2201      	movs	r2, #1
 8004298:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2201      	movs	r2, #1
 80042a0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2201      	movs	r2, #1
 80042a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80042ac:	2300      	movs	r3, #0
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	3708      	adds	r7, #8
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}
	...

080042b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b085      	sub	sp, #20
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042c6:	b2db      	uxtb	r3, r3
 80042c8:	2b01      	cmp	r3, #1
 80042ca:	d001      	beq.n	80042d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80042cc:	2301      	movs	r3, #1
 80042ce:	e054      	b.n	800437a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2202      	movs	r2, #2
 80042d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	68da      	ldr	r2, [r3, #12]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f042 0201 	orr.w	r2, r2, #1
 80042e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a26      	ldr	r2, [pc, #152]	; (8004388 <HAL_TIM_Base_Start_IT+0xd0>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d022      	beq.n	8004338 <HAL_TIM_Base_Start_IT+0x80>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042fa:	d01d      	beq.n	8004338 <HAL_TIM_Base_Start_IT+0x80>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a22      	ldr	r2, [pc, #136]	; (800438c <HAL_TIM_Base_Start_IT+0xd4>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d018      	beq.n	8004338 <HAL_TIM_Base_Start_IT+0x80>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a21      	ldr	r2, [pc, #132]	; (8004390 <HAL_TIM_Base_Start_IT+0xd8>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d013      	beq.n	8004338 <HAL_TIM_Base_Start_IT+0x80>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a1f      	ldr	r2, [pc, #124]	; (8004394 <HAL_TIM_Base_Start_IT+0xdc>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d00e      	beq.n	8004338 <HAL_TIM_Base_Start_IT+0x80>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a1e      	ldr	r2, [pc, #120]	; (8004398 <HAL_TIM_Base_Start_IT+0xe0>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d009      	beq.n	8004338 <HAL_TIM_Base_Start_IT+0x80>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a1c      	ldr	r2, [pc, #112]	; (800439c <HAL_TIM_Base_Start_IT+0xe4>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d004      	beq.n	8004338 <HAL_TIM_Base_Start_IT+0x80>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a1b      	ldr	r2, [pc, #108]	; (80043a0 <HAL_TIM_Base_Start_IT+0xe8>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d115      	bne.n	8004364 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	689a      	ldr	r2, [r3, #8]
 800433e:	4b19      	ldr	r3, [pc, #100]	; (80043a4 <HAL_TIM_Base_Start_IT+0xec>)
 8004340:	4013      	ands	r3, r2
 8004342:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	2b06      	cmp	r3, #6
 8004348:	d015      	beq.n	8004376 <HAL_TIM_Base_Start_IT+0xbe>
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004350:	d011      	beq.n	8004376 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	681a      	ldr	r2, [r3, #0]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f042 0201 	orr.w	r2, r2, #1
 8004360:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004362:	e008      	b.n	8004376 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	681a      	ldr	r2, [r3, #0]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f042 0201 	orr.w	r2, r2, #1
 8004372:	601a      	str	r2, [r3, #0]
 8004374:	e000      	b.n	8004378 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004376:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004378:	2300      	movs	r3, #0
}
 800437a:	4618      	mov	r0, r3
 800437c:	3714      	adds	r7, #20
 800437e:	46bd      	mov	sp, r7
 8004380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004384:	4770      	bx	lr
 8004386:	bf00      	nop
 8004388:	40010000 	.word	0x40010000
 800438c:	40000400 	.word	0x40000400
 8004390:	40000800 	.word	0x40000800
 8004394:	40000c00 	.word	0x40000c00
 8004398:	40010400 	.word	0x40010400
 800439c:	40014000 	.word	0x40014000
 80043a0:	40001800 	.word	0x40001800
 80043a4:	00010007 	.word	0x00010007

080043a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b082      	sub	sp, #8
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	691b      	ldr	r3, [r3, #16]
 80043b6:	f003 0302 	and.w	r3, r3, #2
 80043ba:	2b02      	cmp	r3, #2
 80043bc:	d122      	bne.n	8004404 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	68db      	ldr	r3, [r3, #12]
 80043c4:	f003 0302 	and.w	r3, r3, #2
 80043c8:	2b02      	cmp	r3, #2
 80043ca:	d11b      	bne.n	8004404 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f06f 0202 	mvn.w	r2, #2
 80043d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2201      	movs	r2, #1
 80043da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	699b      	ldr	r3, [r3, #24]
 80043e2:	f003 0303 	and.w	r3, r3, #3
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d003      	beq.n	80043f2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80043ea:	6878      	ldr	r0, [r7, #4]
 80043ec:	f000 f9cc 	bl	8004788 <HAL_TIM_IC_CaptureCallback>
 80043f0:	e005      	b.n	80043fe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80043f2:	6878      	ldr	r0, [r7, #4]
 80043f4:	f000 f9be 	bl	8004774 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043f8:	6878      	ldr	r0, [r7, #4]
 80043fa:	f000 f9cf 	bl	800479c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2200      	movs	r2, #0
 8004402:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	691b      	ldr	r3, [r3, #16]
 800440a:	f003 0304 	and.w	r3, r3, #4
 800440e:	2b04      	cmp	r3, #4
 8004410:	d122      	bne.n	8004458 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	68db      	ldr	r3, [r3, #12]
 8004418:	f003 0304 	and.w	r3, r3, #4
 800441c:	2b04      	cmp	r3, #4
 800441e:	d11b      	bne.n	8004458 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f06f 0204 	mvn.w	r2, #4
 8004428:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2202      	movs	r2, #2
 800442e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	699b      	ldr	r3, [r3, #24]
 8004436:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800443a:	2b00      	cmp	r3, #0
 800443c:	d003      	beq.n	8004446 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f000 f9a2 	bl	8004788 <HAL_TIM_IC_CaptureCallback>
 8004444:	e005      	b.n	8004452 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	f000 f994 	bl	8004774 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800444c:	6878      	ldr	r0, [r7, #4]
 800444e:	f000 f9a5 	bl	800479c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2200      	movs	r2, #0
 8004456:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	691b      	ldr	r3, [r3, #16]
 800445e:	f003 0308 	and.w	r3, r3, #8
 8004462:	2b08      	cmp	r3, #8
 8004464:	d122      	bne.n	80044ac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	68db      	ldr	r3, [r3, #12]
 800446c:	f003 0308 	and.w	r3, r3, #8
 8004470:	2b08      	cmp	r3, #8
 8004472:	d11b      	bne.n	80044ac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f06f 0208 	mvn.w	r2, #8
 800447c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2204      	movs	r2, #4
 8004482:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	69db      	ldr	r3, [r3, #28]
 800448a:	f003 0303 	and.w	r3, r3, #3
 800448e:	2b00      	cmp	r3, #0
 8004490:	d003      	beq.n	800449a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	f000 f978 	bl	8004788 <HAL_TIM_IC_CaptureCallback>
 8004498:	e005      	b.n	80044a6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	f000 f96a 	bl	8004774 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044a0:	6878      	ldr	r0, [r7, #4]
 80044a2:	f000 f97b 	bl	800479c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2200      	movs	r2, #0
 80044aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	691b      	ldr	r3, [r3, #16]
 80044b2:	f003 0310 	and.w	r3, r3, #16
 80044b6:	2b10      	cmp	r3, #16
 80044b8:	d122      	bne.n	8004500 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	68db      	ldr	r3, [r3, #12]
 80044c0:	f003 0310 	and.w	r3, r3, #16
 80044c4:	2b10      	cmp	r3, #16
 80044c6:	d11b      	bne.n	8004500 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f06f 0210 	mvn.w	r2, #16
 80044d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2208      	movs	r2, #8
 80044d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	69db      	ldr	r3, [r3, #28]
 80044de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d003      	beq.n	80044ee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044e6:	6878      	ldr	r0, [r7, #4]
 80044e8:	f000 f94e 	bl	8004788 <HAL_TIM_IC_CaptureCallback>
 80044ec:	e005      	b.n	80044fa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	f000 f940 	bl	8004774 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044f4:	6878      	ldr	r0, [r7, #4]
 80044f6:	f000 f951 	bl	800479c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2200      	movs	r2, #0
 80044fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	691b      	ldr	r3, [r3, #16]
 8004506:	f003 0301 	and.w	r3, r3, #1
 800450a:	2b01      	cmp	r3, #1
 800450c:	d10e      	bne.n	800452c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	68db      	ldr	r3, [r3, #12]
 8004514:	f003 0301 	and.w	r3, r3, #1
 8004518:	2b01      	cmp	r3, #1
 800451a:	d107      	bne.n	800452c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f06f 0201 	mvn.w	r2, #1
 8004524:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004526:	6878      	ldr	r0, [r7, #4]
 8004528:	f7fc fe2a 	bl	8001180 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	691b      	ldr	r3, [r3, #16]
 8004532:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004536:	2b80      	cmp	r3, #128	; 0x80
 8004538:	d10e      	bne.n	8004558 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	68db      	ldr	r3, [r3, #12]
 8004540:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004544:	2b80      	cmp	r3, #128	; 0x80
 8004546:	d107      	bne.n	8004558 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004550:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004552:	6878      	ldr	r0, [r7, #4]
 8004554:	f000 fb08 	bl	8004b68 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	691b      	ldr	r3, [r3, #16]
 800455e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004562:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004566:	d10e      	bne.n	8004586 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	68db      	ldr	r3, [r3, #12]
 800456e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004572:	2b80      	cmp	r3, #128	; 0x80
 8004574:	d107      	bne.n	8004586 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800457e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004580:	6878      	ldr	r0, [r7, #4]
 8004582:	f000 fafb 	bl	8004b7c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	691b      	ldr	r3, [r3, #16]
 800458c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004590:	2b40      	cmp	r3, #64	; 0x40
 8004592:	d10e      	bne.n	80045b2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	68db      	ldr	r3, [r3, #12]
 800459a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800459e:	2b40      	cmp	r3, #64	; 0x40
 80045a0:	d107      	bne.n	80045b2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80045aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80045ac:	6878      	ldr	r0, [r7, #4]
 80045ae:	f000 f8ff 	bl	80047b0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	691b      	ldr	r3, [r3, #16]
 80045b8:	f003 0320 	and.w	r3, r3, #32
 80045bc:	2b20      	cmp	r3, #32
 80045be:	d10e      	bne.n	80045de <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	68db      	ldr	r3, [r3, #12]
 80045c6:	f003 0320 	and.w	r3, r3, #32
 80045ca:	2b20      	cmp	r3, #32
 80045cc:	d107      	bne.n	80045de <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f06f 0220 	mvn.w	r2, #32
 80045d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80045d8:	6878      	ldr	r0, [r7, #4]
 80045da:	f000 fabb 	bl	8004b54 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80045de:	bf00      	nop
 80045e0:	3708      	adds	r7, #8
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd80      	pop	{r7, pc}
	...

080045e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b084      	sub	sp, #16
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
 80045f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	d101      	bne.n	8004600 <HAL_TIM_ConfigClockSource+0x18>
 80045fc:	2302      	movs	r3, #2
 80045fe:	e0b3      	b.n	8004768 <HAL_TIM_ConfigClockSource+0x180>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2201      	movs	r2, #1
 8004604:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2202      	movs	r2, #2
 800460c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	689b      	ldr	r3, [r3, #8]
 8004616:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004618:	68fa      	ldr	r2, [r7, #12]
 800461a:	4b55      	ldr	r3, [pc, #340]	; (8004770 <HAL_TIM_ConfigClockSource+0x188>)
 800461c:	4013      	ands	r3, r2
 800461e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004626:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	68fa      	ldr	r2, [r7, #12]
 800462e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004638:	d03e      	beq.n	80046b8 <HAL_TIM_ConfigClockSource+0xd0>
 800463a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800463e:	f200 8087 	bhi.w	8004750 <HAL_TIM_ConfigClockSource+0x168>
 8004642:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004646:	f000 8085 	beq.w	8004754 <HAL_TIM_ConfigClockSource+0x16c>
 800464a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800464e:	d87f      	bhi.n	8004750 <HAL_TIM_ConfigClockSource+0x168>
 8004650:	2b70      	cmp	r3, #112	; 0x70
 8004652:	d01a      	beq.n	800468a <HAL_TIM_ConfigClockSource+0xa2>
 8004654:	2b70      	cmp	r3, #112	; 0x70
 8004656:	d87b      	bhi.n	8004750 <HAL_TIM_ConfigClockSource+0x168>
 8004658:	2b60      	cmp	r3, #96	; 0x60
 800465a:	d050      	beq.n	80046fe <HAL_TIM_ConfigClockSource+0x116>
 800465c:	2b60      	cmp	r3, #96	; 0x60
 800465e:	d877      	bhi.n	8004750 <HAL_TIM_ConfigClockSource+0x168>
 8004660:	2b50      	cmp	r3, #80	; 0x50
 8004662:	d03c      	beq.n	80046de <HAL_TIM_ConfigClockSource+0xf6>
 8004664:	2b50      	cmp	r3, #80	; 0x50
 8004666:	d873      	bhi.n	8004750 <HAL_TIM_ConfigClockSource+0x168>
 8004668:	2b40      	cmp	r3, #64	; 0x40
 800466a:	d058      	beq.n	800471e <HAL_TIM_ConfigClockSource+0x136>
 800466c:	2b40      	cmp	r3, #64	; 0x40
 800466e:	d86f      	bhi.n	8004750 <HAL_TIM_ConfigClockSource+0x168>
 8004670:	2b30      	cmp	r3, #48	; 0x30
 8004672:	d064      	beq.n	800473e <HAL_TIM_ConfigClockSource+0x156>
 8004674:	2b30      	cmp	r3, #48	; 0x30
 8004676:	d86b      	bhi.n	8004750 <HAL_TIM_ConfigClockSource+0x168>
 8004678:	2b20      	cmp	r3, #32
 800467a:	d060      	beq.n	800473e <HAL_TIM_ConfigClockSource+0x156>
 800467c:	2b20      	cmp	r3, #32
 800467e:	d867      	bhi.n	8004750 <HAL_TIM_ConfigClockSource+0x168>
 8004680:	2b00      	cmp	r3, #0
 8004682:	d05c      	beq.n	800473e <HAL_TIM_ConfigClockSource+0x156>
 8004684:	2b10      	cmp	r3, #16
 8004686:	d05a      	beq.n	800473e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004688:	e062      	b.n	8004750 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6818      	ldr	r0, [r3, #0]
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	6899      	ldr	r1, [r3, #8]
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	685a      	ldr	r2, [r3, #4]
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	68db      	ldr	r3, [r3, #12]
 800469a:	f000 f9ad 	bl	80049f8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	689b      	ldr	r3, [r3, #8]
 80046a4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80046ac:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	68fa      	ldr	r2, [r7, #12]
 80046b4:	609a      	str	r2, [r3, #8]
      break;
 80046b6:	e04e      	b.n	8004756 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6818      	ldr	r0, [r3, #0]
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	6899      	ldr	r1, [r3, #8]
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	685a      	ldr	r2, [r3, #4]
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	68db      	ldr	r3, [r3, #12]
 80046c8:	f000 f996 	bl	80049f8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	689a      	ldr	r2, [r3, #8]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80046da:	609a      	str	r2, [r3, #8]
      break;
 80046dc:	e03b      	b.n	8004756 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6818      	ldr	r0, [r3, #0]
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	6859      	ldr	r1, [r3, #4]
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	68db      	ldr	r3, [r3, #12]
 80046ea:	461a      	mov	r2, r3
 80046ec:	f000 f90a 	bl	8004904 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	2150      	movs	r1, #80	; 0x50
 80046f6:	4618      	mov	r0, r3
 80046f8:	f000 f963 	bl	80049c2 <TIM_ITRx_SetConfig>
      break;
 80046fc:	e02b      	b.n	8004756 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6818      	ldr	r0, [r3, #0]
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	6859      	ldr	r1, [r3, #4]
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	68db      	ldr	r3, [r3, #12]
 800470a:	461a      	mov	r2, r3
 800470c:	f000 f929 	bl	8004962 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	2160      	movs	r1, #96	; 0x60
 8004716:	4618      	mov	r0, r3
 8004718:	f000 f953 	bl	80049c2 <TIM_ITRx_SetConfig>
      break;
 800471c:	e01b      	b.n	8004756 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6818      	ldr	r0, [r3, #0]
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	6859      	ldr	r1, [r3, #4]
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	68db      	ldr	r3, [r3, #12]
 800472a:	461a      	mov	r2, r3
 800472c:	f000 f8ea 	bl	8004904 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	2140      	movs	r1, #64	; 0x40
 8004736:	4618      	mov	r0, r3
 8004738:	f000 f943 	bl	80049c2 <TIM_ITRx_SetConfig>
      break;
 800473c:	e00b      	b.n	8004756 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681a      	ldr	r2, [r3, #0]
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4619      	mov	r1, r3
 8004748:	4610      	mov	r0, r2
 800474a:	f000 f93a 	bl	80049c2 <TIM_ITRx_SetConfig>
        break;
 800474e:	e002      	b.n	8004756 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004750:	bf00      	nop
 8004752:	e000      	b.n	8004756 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004754:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2201      	movs	r2, #1
 800475a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2200      	movs	r2, #0
 8004762:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004766:	2300      	movs	r3, #0
}
 8004768:	4618      	mov	r0, r3
 800476a:	3710      	adds	r7, #16
 800476c:	46bd      	mov	sp, r7
 800476e:	bd80      	pop	{r7, pc}
 8004770:	fffeff88 	.word	0xfffeff88

08004774 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004774:	b480      	push	{r7}
 8004776:	b083      	sub	sp, #12
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800477c:	bf00      	nop
 800477e:	370c      	adds	r7, #12
 8004780:	46bd      	mov	sp, r7
 8004782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004786:	4770      	bx	lr

08004788 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004788:	b480      	push	{r7}
 800478a:	b083      	sub	sp, #12
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004790:	bf00      	nop
 8004792:	370c      	adds	r7, #12
 8004794:	46bd      	mov	sp, r7
 8004796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479a:	4770      	bx	lr

0800479c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800479c:	b480      	push	{r7}
 800479e:	b083      	sub	sp, #12
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80047a4:	bf00      	nop
 80047a6:	370c      	adds	r7, #12
 80047a8:	46bd      	mov	sp, r7
 80047aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ae:	4770      	bx	lr

080047b0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b083      	sub	sp, #12
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80047b8:	bf00      	nop
 80047ba:	370c      	adds	r7, #12
 80047bc:	46bd      	mov	sp, r7
 80047be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c2:	4770      	bx	lr

080047c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b085      	sub	sp, #20
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
 80047cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	4a40      	ldr	r2, [pc, #256]	; (80048d8 <TIM_Base_SetConfig+0x114>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d013      	beq.n	8004804 <TIM_Base_SetConfig+0x40>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047e2:	d00f      	beq.n	8004804 <TIM_Base_SetConfig+0x40>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	4a3d      	ldr	r2, [pc, #244]	; (80048dc <TIM_Base_SetConfig+0x118>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d00b      	beq.n	8004804 <TIM_Base_SetConfig+0x40>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	4a3c      	ldr	r2, [pc, #240]	; (80048e0 <TIM_Base_SetConfig+0x11c>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d007      	beq.n	8004804 <TIM_Base_SetConfig+0x40>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	4a3b      	ldr	r2, [pc, #236]	; (80048e4 <TIM_Base_SetConfig+0x120>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d003      	beq.n	8004804 <TIM_Base_SetConfig+0x40>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	4a3a      	ldr	r2, [pc, #232]	; (80048e8 <TIM_Base_SetConfig+0x124>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d108      	bne.n	8004816 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800480a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	68fa      	ldr	r2, [r7, #12]
 8004812:	4313      	orrs	r3, r2
 8004814:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	4a2f      	ldr	r2, [pc, #188]	; (80048d8 <TIM_Base_SetConfig+0x114>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d02b      	beq.n	8004876 <TIM_Base_SetConfig+0xb2>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004824:	d027      	beq.n	8004876 <TIM_Base_SetConfig+0xb2>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	4a2c      	ldr	r2, [pc, #176]	; (80048dc <TIM_Base_SetConfig+0x118>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d023      	beq.n	8004876 <TIM_Base_SetConfig+0xb2>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	4a2b      	ldr	r2, [pc, #172]	; (80048e0 <TIM_Base_SetConfig+0x11c>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d01f      	beq.n	8004876 <TIM_Base_SetConfig+0xb2>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	4a2a      	ldr	r2, [pc, #168]	; (80048e4 <TIM_Base_SetConfig+0x120>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d01b      	beq.n	8004876 <TIM_Base_SetConfig+0xb2>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	4a29      	ldr	r2, [pc, #164]	; (80048e8 <TIM_Base_SetConfig+0x124>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d017      	beq.n	8004876 <TIM_Base_SetConfig+0xb2>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	4a28      	ldr	r2, [pc, #160]	; (80048ec <TIM_Base_SetConfig+0x128>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d013      	beq.n	8004876 <TIM_Base_SetConfig+0xb2>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	4a27      	ldr	r2, [pc, #156]	; (80048f0 <TIM_Base_SetConfig+0x12c>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d00f      	beq.n	8004876 <TIM_Base_SetConfig+0xb2>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	4a26      	ldr	r2, [pc, #152]	; (80048f4 <TIM_Base_SetConfig+0x130>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d00b      	beq.n	8004876 <TIM_Base_SetConfig+0xb2>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	4a25      	ldr	r2, [pc, #148]	; (80048f8 <TIM_Base_SetConfig+0x134>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d007      	beq.n	8004876 <TIM_Base_SetConfig+0xb2>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	4a24      	ldr	r2, [pc, #144]	; (80048fc <TIM_Base_SetConfig+0x138>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d003      	beq.n	8004876 <TIM_Base_SetConfig+0xb2>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	4a23      	ldr	r2, [pc, #140]	; (8004900 <TIM_Base_SetConfig+0x13c>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d108      	bne.n	8004888 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800487c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	68db      	ldr	r3, [r3, #12]
 8004882:	68fa      	ldr	r2, [r7, #12]
 8004884:	4313      	orrs	r3, r2
 8004886:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	695b      	ldr	r3, [r3, #20]
 8004892:	4313      	orrs	r3, r2
 8004894:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	68fa      	ldr	r2, [r7, #12]
 800489a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	689a      	ldr	r2, [r3, #8]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	681a      	ldr	r2, [r3, #0]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	4a0a      	ldr	r2, [pc, #40]	; (80048d8 <TIM_Base_SetConfig+0x114>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d003      	beq.n	80048bc <TIM_Base_SetConfig+0xf8>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	4a0c      	ldr	r2, [pc, #48]	; (80048e8 <TIM_Base_SetConfig+0x124>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d103      	bne.n	80048c4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	691a      	ldr	r2, [r3, #16]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2201      	movs	r2, #1
 80048c8:	615a      	str	r2, [r3, #20]
}
 80048ca:	bf00      	nop
 80048cc:	3714      	adds	r7, #20
 80048ce:	46bd      	mov	sp, r7
 80048d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d4:	4770      	bx	lr
 80048d6:	bf00      	nop
 80048d8:	40010000 	.word	0x40010000
 80048dc:	40000400 	.word	0x40000400
 80048e0:	40000800 	.word	0x40000800
 80048e4:	40000c00 	.word	0x40000c00
 80048e8:	40010400 	.word	0x40010400
 80048ec:	40014000 	.word	0x40014000
 80048f0:	40014400 	.word	0x40014400
 80048f4:	40014800 	.word	0x40014800
 80048f8:	40001800 	.word	0x40001800
 80048fc:	40001c00 	.word	0x40001c00
 8004900:	40002000 	.word	0x40002000

08004904 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004904:	b480      	push	{r7}
 8004906:	b087      	sub	sp, #28
 8004908:	af00      	add	r7, sp, #0
 800490a:	60f8      	str	r0, [r7, #12]
 800490c:	60b9      	str	r1, [r7, #8]
 800490e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	6a1b      	ldr	r3, [r3, #32]
 8004914:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	6a1b      	ldr	r3, [r3, #32]
 800491a:	f023 0201 	bic.w	r2, r3, #1
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	699b      	ldr	r3, [r3, #24]
 8004926:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800492e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	011b      	lsls	r3, r3, #4
 8004934:	693a      	ldr	r2, [r7, #16]
 8004936:	4313      	orrs	r3, r2
 8004938:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	f023 030a 	bic.w	r3, r3, #10
 8004940:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004942:	697a      	ldr	r2, [r7, #20]
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	4313      	orrs	r3, r2
 8004948:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	693a      	ldr	r2, [r7, #16]
 800494e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	697a      	ldr	r2, [r7, #20]
 8004954:	621a      	str	r2, [r3, #32]
}
 8004956:	bf00      	nop
 8004958:	371c      	adds	r7, #28
 800495a:	46bd      	mov	sp, r7
 800495c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004960:	4770      	bx	lr

08004962 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004962:	b480      	push	{r7}
 8004964:	b087      	sub	sp, #28
 8004966:	af00      	add	r7, sp, #0
 8004968:	60f8      	str	r0, [r7, #12]
 800496a:	60b9      	str	r1, [r7, #8]
 800496c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	6a1b      	ldr	r3, [r3, #32]
 8004972:	f023 0210 	bic.w	r2, r3, #16
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	699b      	ldr	r3, [r3, #24]
 800497e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	6a1b      	ldr	r3, [r3, #32]
 8004984:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800498c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	031b      	lsls	r3, r3, #12
 8004992:	697a      	ldr	r2, [r7, #20]
 8004994:	4313      	orrs	r3, r2
 8004996:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004998:	693b      	ldr	r3, [r7, #16]
 800499a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800499e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	011b      	lsls	r3, r3, #4
 80049a4:	693a      	ldr	r2, [r7, #16]
 80049a6:	4313      	orrs	r3, r2
 80049a8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	697a      	ldr	r2, [r7, #20]
 80049ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	693a      	ldr	r2, [r7, #16]
 80049b4:	621a      	str	r2, [r3, #32]
}
 80049b6:	bf00      	nop
 80049b8:	371c      	adds	r7, #28
 80049ba:	46bd      	mov	sp, r7
 80049bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c0:	4770      	bx	lr

080049c2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80049c2:	b480      	push	{r7}
 80049c4:	b085      	sub	sp, #20
 80049c6:	af00      	add	r7, sp, #0
 80049c8:	6078      	str	r0, [r7, #4]
 80049ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	689b      	ldr	r3, [r3, #8]
 80049d0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049d8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80049da:	683a      	ldr	r2, [r7, #0]
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	4313      	orrs	r3, r2
 80049e0:	f043 0307 	orr.w	r3, r3, #7
 80049e4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	68fa      	ldr	r2, [r7, #12]
 80049ea:	609a      	str	r2, [r3, #8]
}
 80049ec:	bf00      	nop
 80049ee:	3714      	adds	r7, #20
 80049f0:	46bd      	mov	sp, r7
 80049f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f6:	4770      	bx	lr

080049f8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b087      	sub	sp, #28
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	60f8      	str	r0, [r7, #12]
 8004a00:	60b9      	str	r1, [r7, #8]
 8004a02:	607a      	str	r2, [r7, #4]
 8004a04:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	689b      	ldr	r3, [r3, #8]
 8004a0a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a12:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	021a      	lsls	r2, r3, #8
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	431a      	orrs	r2, r3
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	697a      	ldr	r2, [r7, #20]
 8004a22:	4313      	orrs	r3, r2
 8004a24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	697a      	ldr	r2, [r7, #20]
 8004a2a:	609a      	str	r2, [r3, #8]
}
 8004a2c:	bf00      	nop
 8004a2e:	371c      	adds	r7, #28
 8004a30:	46bd      	mov	sp, r7
 8004a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a36:	4770      	bx	lr

08004a38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b085      	sub	sp, #20
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
 8004a40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a48:	2b01      	cmp	r3, #1
 8004a4a:	d101      	bne.n	8004a50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004a4c:	2302      	movs	r3, #2
 8004a4e:	e06d      	b.n	8004b2c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2201      	movs	r2, #1
 8004a54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2202      	movs	r2, #2
 8004a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	689b      	ldr	r3, [r3, #8]
 8004a6e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a30      	ldr	r2, [pc, #192]	; (8004b38 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d004      	beq.n	8004a84 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4a2f      	ldr	r2, [pc, #188]	; (8004b3c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d108      	bne.n	8004a96 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004a8a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	68fa      	ldr	r2, [r7, #12]
 8004a92:	4313      	orrs	r3, r2
 8004a94:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a9c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	68fa      	ldr	r2, [r7, #12]
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	68fa      	ldr	r2, [r7, #12]
 8004aae:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a20      	ldr	r2, [pc, #128]	; (8004b38 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d022      	beq.n	8004b00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ac2:	d01d      	beq.n	8004b00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a1d      	ldr	r2, [pc, #116]	; (8004b40 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d018      	beq.n	8004b00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a1c      	ldr	r2, [pc, #112]	; (8004b44 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d013      	beq.n	8004b00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a1a      	ldr	r2, [pc, #104]	; (8004b48 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d00e      	beq.n	8004b00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a15      	ldr	r2, [pc, #84]	; (8004b3c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d009      	beq.n	8004b00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a16      	ldr	r2, [pc, #88]	; (8004b4c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d004      	beq.n	8004b00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a15      	ldr	r2, [pc, #84]	; (8004b50 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d10c      	bne.n	8004b1a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b06:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	689b      	ldr	r3, [r3, #8]
 8004b0c:	68ba      	ldr	r2, [r7, #8]
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	68ba      	ldr	r2, [r7, #8]
 8004b18:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2201      	movs	r2, #1
 8004b1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2200      	movs	r2, #0
 8004b26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b2a:	2300      	movs	r3, #0
}
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	3714      	adds	r7, #20
 8004b30:	46bd      	mov	sp, r7
 8004b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b36:	4770      	bx	lr
 8004b38:	40010000 	.word	0x40010000
 8004b3c:	40010400 	.word	0x40010400
 8004b40:	40000400 	.word	0x40000400
 8004b44:	40000800 	.word	0x40000800
 8004b48:	40000c00 	.word	0x40000c00
 8004b4c:	40014000 	.word	0x40014000
 8004b50:	40001800 	.word	0x40001800

08004b54 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004b54:	b480      	push	{r7}
 8004b56:	b083      	sub	sp, #12
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004b5c:	bf00      	nop
 8004b5e:	370c      	adds	r7, #12
 8004b60:	46bd      	mov	sp, r7
 8004b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b66:	4770      	bx	lr

08004b68 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b083      	sub	sp, #12
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004b70:	bf00      	nop
 8004b72:	370c      	adds	r7, #12
 8004b74:	46bd      	mov	sp, r7
 8004b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7a:	4770      	bx	lr

08004b7c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b083      	sub	sp, #12
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004b84:	bf00      	nop
 8004b86:	370c      	adds	r7, #12
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8e:	4770      	bx	lr

08004b90 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b082      	sub	sp, #8
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d101      	bne.n	8004ba2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	e040      	b.n	8004c24 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d106      	bne.n	8004bb8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2200      	movs	r2, #0
 8004bae:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004bb2:	6878      	ldr	r0, [r7, #4]
 8004bb4:	f7fc fea6 	bl	8001904 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2224      	movs	r2, #36	; 0x24
 8004bbc:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	681a      	ldr	r2, [r3, #0]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f022 0201 	bic.w	r2, r2, #1
 8004bcc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004bce:	6878      	ldr	r0, [r7, #4]
 8004bd0:	f000 f82c 	bl	8004c2c <UART_SetConfig>
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	2b01      	cmp	r3, #1
 8004bd8:	d101      	bne.n	8004bde <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	e022      	b.n	8004c24 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d002      	beq.n	8004bec <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004be6:	6878      	ldr	r0, [r7, #4]
 8004be8:	f000 fa82 	bl	80050f0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	685a      	ldr	r2, [r3, #4]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004bfa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	689a      	ldr	r2, [r3, #8]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004c0a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	681a      	ldr	r2, [r3, #0]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f042 0201 	orr.w	r2, r2, #1
 8004c1a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004c1c:	6878      	ldr	r0, [r7, #4]
 8004c1e:	f000 fb09 	bl	8005234 <UART_CheckIdleState>
 8004c22:	4603      	mov	r3, r0
}
 8004c24:	4618      	mov	r0, r3
 8004c26:	3708      	adds	r7, #8
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bd80      	pop	{r7, pc}

08004c2c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b088      	sub	sp, #32
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004c34:	2300      	movs	r3, #0
 8004c36:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	689a      	ldr	r2, [r3, #8]
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	691b      	ldr	r3, [r3, #16]
 8004c40:	431a      	orrs	r2, r3
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	695b      	ldr	r3, [r3, #20]
 8004c46:	431a      	orrs	r2, r3
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	69db      	ldr	r3, [r3, #28]
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	681a      	ldr	r2, [r3, #0]
 8004c56:	4ba7      	ldr	r3, [pc, #668]	; (8004ef4 <UART_SetConfig+0x2c8>)
 8004c58:	4013      	ands	r3, r2
 8004c5a:	687a      	ldr	r2, [r7, #4]
 8004c5c:	6812      	ldr	r2, [r2, #0]
 8004c5e:	6979      	ldr	r1, [r7, #20]
 8004c60:	430b      	orrs	r3, r1
 8004c62:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	68da      	ldr	r2, [r3, #12]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	430a      	orrs	r2, r1
 8004c78:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	699b      	ldr	r3, [r3, #24]
 8004c7e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6a1b      	ldr	r3, [r3, #32]
 8004c84:	697a      	ldr	r2, [r7, #20]
 8004c86:	4313      	orrs	r3, r2
 8004c88:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	689b      	ldr	r3, [r3, #8]
 8004c90:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	697a      	ldr	r2, [r7, #20]
 8004c9a:	430a      	orrs	r2, r1
 8004c9c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a95      	ldr	r2, [pc, #596]	; (8004ef8 <UART_SetConfig+0x2cc>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d120      	bne.n	8004cea <UART_SetConfig+0xbe>
 8004ca8:	4b94      	ldr	r3, [pc, #592]	; (8004efc <UART_SetConfig+0x2d0>)
 8004caa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cae:	f003 0303 	and.w	r3, r3, #3
 8004cb2:	2b03      	cmp	r3, #3
 8004cb4:	d816      	bhi.n	8004ce4 <UART_SetConfig+0xb8>
 8004cb6:	a201      	add	r2, pc, #4	; (adr r2, 8004cbc <UART_SetConfig+0x90>)
 8004cb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cbc:	08004ccd 	.word	0x08004ccd
 8004cc0:	08004cd9 	.word	0x08004cd9
 8004cc4:	08004cd3 	.word	0x08004cd3
 8004cc8:	08004cdf 	.word	0x08004cdf
 8004ccc:	2301      	movs	r3, #1
 8004cce:	77fb      	strb	r3, [r7, #31]
 8004cd0:	e14f      	b.n	8004f72 <UART_SetConfig+0x346>
 8004cd2:	2302      	movs	r3, #2
 8004cd4:	77fb      	strb	r3, [r7, #31]
 8004cd6:	e14c      	b.n	8004f72 <UART_SetConfig+0x346>
 8004cd8:	2304      	movs	r3, #4
 8004cda:	77fb      	strb	r3, [r7, #31]
 8004cdc:	e149      	b.n	8004f72 <UART_SetConfig+0x346>
 8004cde:	2308      	movs	r3, #8
 8004ce0:	77fb      	strb	r3, [r7, #31]
 8004ce2:	e146      	b.n	8004f72 <UART_SetConfig+0x346>
 8004ce4:	2310      	movs	r3, #16
 8004ce6:	77fb      	strb	r3, [r7, #31]
 8004ce8:	e143      	b.n	8004f72 <UART_SetConfig+0x346>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a84      	ldr	r2, [pc, #528]	; (8004f00 <UART_SetConfig+0x2d4>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d132      	bne.n	8004d5a <UART_SetConfig+0x12e>
 8004cf4:	4b81      	ldr	r3, [pc, #516]	; (8004efc <UART_SetConfig+0x2d0>)
 8004cf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cfa:	f003 030c 	and.w	r3, r3, #12
 8004cfe:	2b0c      	cmp	r3, #12
 8004d00:	d828      	bhi.n	8004d54 <UART_SetConfig+0x128>
 8004d02:	a201      	add	r2, pc, #4	; (adr r2, 8004d08 <UART_SetConfig+0xdc>)
 8004d04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d08:	08004d3d 	.word	0x08004d3d
 8004d0c:	08004d55 	.word	0x08004d55
 8004d10:	08004d55 	.word	0x08004d55
 8004d14:	08004d55 	.word	0x08004d55
 8004d18:	08004d49 	.word	0x08004d49
 8004d1c:	08004d55 	.word	0x08004d55
 8004d20:	08004d55 	.word	0x08004d55
 8004d24:	08004d55 	.word	0x08004d55
 8004d28:	08004d43 	.word	0x08004d43
 8004d2c:	08004d55 	.word	0x08004d55
 8004d30:	08004d55 	.word	0x08004d55
 8004d34:	08004d55 	.word	0x08004d55
 8004d38:	08004d4f 	.word	0x08004d4f
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	77fb      	strb	r3, [r7, #31]
 8004d40:	e117      	b.n	8004f72 <UART_SetConfig+0x346>
 8004d42:	2302      	movs	r3, #2
 8004d44:	77fb      	strb	r3, [r7, #31]
 8004d46:	e114      	b.n	8004f72 <UART_SetConfig+0x346>
 8004d48:	2304      	movs	r3, #4
 8004d4a:	77fb      	strb	r3, [r7, #31]
 8004d4c:	e111      	b.n	8004f72 <UART_SetConfig+0x346>
 8004d4e:	2308      	movs	r3, #8
 8004d50:	77fb      	strb	r3, [r7, #31]
 8004d52:	e10e      	b.n	8004f72 <UART_SetConfig+0x346>
 8004d54:	2310      	movs	r3, #16
 8004d56:	77fb      	strb	r3, [r7, #31]
 8004d58:	e10b      	b.n	8004f72 <UART_SetConfig+0x346>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a69      	ldr	r2, [pc, #420]	; (8004f04 <UART_SetConfig+0x2d8>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d120      	bne.n	8004da6 <UART_SetConfig+0x17a>
 8004d64:	4b65      	ldr	r3, [pc, #404]	; (8004efc <UART_SetConfig+0x2d0>)
 8004d66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d6a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004d6e:	2b30      	cmp	r3, #48	; 0x30
 8004d70:	d013      	beq.n	8004d9a <UART_SetConfig+0x16e>
 8004d72:	2b30      	cmp	r3, #48	; 0x30
 8004d74:	d814      	bhi.n	8004da0 <UART_SetConfig+0x174>
 8004d76:	2b20      	cmp	r3, #32
 8004d78:	d009      	beq.n	8004d8e <UART_SetConfig+0x162>
 8004d7a:	2b20      	cmp	r3, #32
 8004d7c:	d810      	bhi.n	8004da0 <UART_SetConfig+0x174>
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d002      	beq.n	8004d88 <UART_SetConfig+0x15c>
 8004d82:	2b10      	cmp	r3, #16
 8004d84:	d006      	beq.n	8004d94 <UART_SetConfig+0x168>
 8004d86:	e00b      	b.n	8004da0 <UART_SetConfig+0x174>
 8004d88:	2300      	movs	r3, #0
 8004d8a:	77fb      	strb	r3, [r7, #31]
 8004d8c:	e0f1      	b.n	8004f72 <UART_SetConfig+0x346>
 8004d8e:	2302      	movs	r3, #2
 8004d90:	77fb      	strb	r3, [r7, #31]
 8004d92:	e0ee      	b.n	8004f72 <UART_SetConfig+0x346>
 8004d94:	2304      	movs	r3, #4
 8004d96:	77fb      	strb	r3, [r7, #31]
 8004d98:	e0eb      	b.n	8004f72 <UART_SetConfig+0x346>
 8004d9a:	2308      	movs	r3, #8
 8004d9c:	77fb      	strb	r3, [r7, #31]
 8004d9e:	e0e8      	b.n	8004f72 <UART_SetConfig+0x346>
 8004da0:	2310      	movs	r3, #16
 8004da2:	77fb      	strb	r3, [r7, #31]
 8004da4:	e0e5      	b.n	8004f72 <UART_SetConfig+0x346>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a57      	ldr	r2, [pc, #348]	; (8004f08 <UART_SetConfig+0x2dc>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d120      	bne.n	8004df2 <UART_SetConfig+0x1c6>
 8004db0:	4b52      	ldr	r3, [pc, #328]	; (8004efc <UART_SetConfig+0x2d0>)
 8004db2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004db6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004dba:	2bc0      	cmp	r3, #192	; 0xc0
 8004dbc:	d013      	beq.n	8004de6 <UART_SetConfig+0x1ba>
 8004dbe:	2bc0      	cmp	r3, #192	; 0xc0
 8004dc0:	d814      	bhi.n	8004dec <UART_SetConfig+0x1c0>
 8004dc2:	2b80      	cmp	r3, #128	; 0x80
 8004dc4:	d009      	beq.n	8004dda <UART_SetConfig+0x1ae>
 8004dc6:	2b80      	cmp	r3, #128	; 0x80
 8004dc8:	d810      	bhi.n	8004dec <UART_SetConfig+0x1c0>
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d002      	beq.n	8004dd4 <UART_SetConfig+0x1a8>
 8004dce:	2b40      	cmp	r3, #64	; 0x40
 8004dd0:	d006      	beq.n	8004de0 <UART_SetConfig+0x1b4>
 8004dd2:	e00b      	b.n	8004dec <UART_SetConfig+0x1c0>
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	77fb      	strb	r3, [r7, #31]
 8004dd8:	e0cb      	b.n	8004f72 <UART_SetConfig+0x346>
 8004dda:	2302      	movs	r3, #2
 8004ddc:	77fb      	strb	r3, [r7, #31]
 8004dde:	e0c8      	b.n	8004f72 <UART_SetConfig+0x346>
 8004de0:	2304      	movs	r3, #4
 8004de2:	77fb      	strb	r3, [r7, #31]
 8004de4:	e0c5      	b.n	8004f72 <UART_SetConfig+0x346>
 8004de6:	2308      	movs	r3, #8
 8004de8:	77fb      	strb	r3, [r7, #31]
 8004dea:	e0c2      	b.n	8004f72 <UART_SetConfig+0x346>
 8004dec:	2310      	movs	r3, #16
 8004dee:	77fb      	strb	r3, [r7, #31]
 8004df0:	e0bf      	b.n	8004f72 <UART_SetConfig+0x346>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a45      	ldr	r2, [pc, #276]	; (8004f0c <UART_SetConfig+0x2e0>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d125      	bne.n	8004e48 <UART_SetConfig+0x21c>
 8004dfc:	4b3f      	ldr	r3, [pc, #252]	; (8004efc <UART_SetConfig+0x2d0>)
 8004dfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e06:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e0a:	d017      	beq.n	8004e3c <UART_SetConfig+0x210>
 8004e0c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e10:	d817      	bhi.n	8004e42 <UART_SetConfig+0x216>
 8004e12:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e16:	d00b      	beq.n	8004e30 <UART_SetConfig+0x204>
 8004e18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e1c:	d811      	bhi.n	8004e42 <UART_SetConfig+0x216>
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d003      	beq.n	8004e2a <UART_SetConfig+0x1fe>
 8004e22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e26:	d006      	beq.n	8004e36 <UART_SetConfig+0x20a>
 8004e28:	e00b      	b.n	8004e42 <UART_SetConfig+0x216>
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	77fb      	strb	r3, [r7, #31]
 8004e2e:	e0a0      	b.n	8004f72 <UART_SetConfig+0x346>
 8004e30:	2302      	movs	r3, #2
 8004e32:	77fb      	strb	r3, [r7, #31]
 8004e34:	e09d      	b.n	8004f72 <UART_SetConfig+0x346>
 8004e36:	2304      	movs	r3, #4
 8004e38:	77fb      	strb	r3, [r7, #31]
 8004e3a:	e09a      	b.n	8004f72 <UART_SetConfig+0x346>
 8004e3c:	2308      	movs	r3, #8
 8004e3e:	77fb      	strb	r3, [r7, #31]
 8004e40:	e097      	b.n	8004f72 <UART_SetConfig+0x346>
 8004e42:	2310      	movs	r3, #16
 8004e44:	77fb      	strb	r3, [r7, #31]
 8004e46:	e094      	b.n	8004f72 <UART_SetConfig+0x346>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a30      	ldr	r2, [pc, #192]	; (8004f10 <UART_SetConfig+0x2e4>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d125      	bne.n	8004e9e <UART_SetConfig+0x272>
 8004e52:	4b2a      	ldr	r3, [pc, #168]	; (8004efc <UART_SetConfig+0x2d0>)
 8004e54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e58:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004e5c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004e60:	d017      	beq.n	8004e92 <UART_SetConfig+0x266>
 8004e62:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004e66:	d817      	bhi.n	8004e98 <UART_SetConfig+0x26c>
 8004e68:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e6c:	d00b      	beq.n	8004e86 <UART_SetConfig+0x25a>
 8004e6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e72:	d811      	bhi.n	8004e98 <UART_SetConfig+0x26c>
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d003      	beq.n	8004e80 <UART_SetConfig+0x254>
 8004e78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e7c:	d006      	beq.n	8004e8c <UART_SetConfig+0x260>
 8004e7e:	e00b      	b.n	8004e98 <UART_SetConfig+0x26c>
 8004e80:	2301      	movs	r3, #1
 8004e82:	77fb      	strb	r3, [r7, #31]
 8004e84:	e075      	b.n	8004f72 <UART_SetConfig+0x346>
 8004e86:	2302      	movs	r3, #2
 8004e88:	77fb      	strb	r3, [r7, #31]
 8004e8a:	e072      	b.n	8004f72 <UART_SetConfig+0x346>
 8004e8c:	2304      	movs	r3, #4
 8004e8e:	77fb      	strb	r3, [r7, #31]
 8004e90:	e06f      	b.n	8004f72 <UART_SetConfig+0x346>
 8004e92:	2308      	movs	r3, #8
 8004e94:	77fb      	strb	r3, [r7, #31]
 8004e96:	e06c      	b.n	8004f72 <UART_SetConfig+0x346>
 8004e98:	2310      	movs	r3, #16
 8004e9a:	77fb      	strb	r3, [r7, #31]
 8004e9c:	e069      	b.n	8004f72 <UART_SetConfig+0x346>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4a1c      	ldr	r2, [pc, #112]	; (8004f14 <UART_SetConfig+0x2e8>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d137      	bne.n	8004f18 <UART_SetConfig+0x2ec>
 8004ea8:	4b14      	ldr	r3, [pc, #80]	; (8004efc <UART_SetConfig+0x2d0>)
 8004eaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004eae:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004eb2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004eb6:	d017      	beq.n	8004ee8 <UART_SetConfig+0x2bc>
 8004eb8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004ebc:	d817      	bhi.n	8004eee <UART_SetConfig+0x2c2>
 8004ebe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ec2:	d00b      	beq.n	8004edc <UART_SetConfig+0x2b0>
 8004ec4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ec8:	d811      	bhi.n	8004eee <UART_SetConfig+0x2c2>
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d003      	beq.n	8004ed6 <UART_SetConfig+0x2aa>
 8004ece:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ed2:	d006      	beq.n	8004ee2 <UART_SetConfig+0x2b6>
 8004ed4:	e00b      	b.n	8004eee <UART_SetConfig+0x2c2>
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	77fb      	strb	r3, [r7, #31]
 8004eda:	e04a      	b.n	8004f72 <UART_SetConfig+0x346>
 8004edc:	2302      	movs	r3, #2
 8004ede:	77fb      	strb	r3, [r7, #31]
 8004ee0:	e047      	b.n	8004f72 <UART_SetConfig+0x346>
 8004ee2:	2304      	movs	r3, #4
 8004ee4:	77fb      	strb	r3, [r7, #31]
 8004ee6:	e044      	b.n	8004f72 <UART_SetConfig+0x346>
 8004ee8:	2308      	movs	r3, #8
 8004eea:	77fb      	strb	r3, [r7, #31]
 8004eec:	e041      	b.n	8004f72 <UART_SetConfig+0x346>
 8004eee:	2310      	movs	r3, #16
 8004ef0:	77fb      	strb	r3, [r7, #31]
 8004ef2:	e03e      	b.n	8004f72 <UART_SetConfig+0x346>
 8004ef4:	efff69f3 	.word	0xefff69f3
 8004ef8:	40011000 	.word	0x40011000
 8004efc:	40023800 	.word	0x40023800
 8004f00:	40004400 	.word	0x40004400
 8004f04:	40004800 	.word	0x40004800
 8004f08:	40004c00 	.word	0x40004c00
 8004f0c:	40005000 	.word	0x40005000
 8004f10:	40011400 	.word	0x40011400
 8004f14:	40007800 	.word	0x40007800
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a71      	ldr	r2, [pc, #452]	; (80050e4 <UART_SetConfig+0x4b8>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d125      	bne.n	8004f6e <UART_SetConfig+0x342>
 8004f22:	4b71      	ldr	r3, [pc, #452]	; (80050e8 <UART_SetConfig+0x4bc>)
 8004f24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f28:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004f2c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004f30:	d017      	beq.n	8004f62 <UART_SetConfig+0x336>
 8004f32:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004f36:	d817      	bhi.n	8004f68 <UART_SetConfig+0x33c>
 8004f38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f3c:	d00b      	beq.n	8004f56 <UART_SetConfig+0x32a>
 8004f3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f42:	d811      	bhi.n	8004f68 <UART_SetConfig+0x33c>
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d003      	beq.n	8004f50 <UART_SetConfig+0x324>
 8004f48:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f4c:	d006      	beq.n	8004f5c <UART_SetConfig+0x330>
 8004f4e:	e00b      	b.n	8004f68 <UART_SetConfig+0x33c>
 8004f50:	2300      	movs	r3, #0
 8004f52:	77fb      	strb	r3, [r7, #31]
 8004f54:	e00d      	b.n	8004f72 <UART_SetConfig+0x346>
 8004f56:	2302      	movs	r3, #2
 8004f58:	77fb      	strb	r3, [r7, #31]
 8004f5a:	e00a      	b.n	8004f72 <UART_SetConfig+0x346>
 8004f5c:	2304      	movs	r3, #4
 8004f5e:	77fb      	strb	r3, [r7, #31]
 8004f60:	e007      	b.n	8004f72 <UART_SetConfig+0x346>
 8004f62:	2308      	movs	r3, #8
 8004f64:	77fb      	strb	r3, [r7, #31]
 8004f66:	e004      	b.n	8004f72 <UART_SetConfig+0x346>
 8004f68:	2310      	movs	r3, #16
 8004f6a:	77fb      	strb	r3, [r7, #31]
 8004f6c:	e001      	b.n	8004f72 <UART_SetConfig+0x346>
 8004f6e:	2310      	movs	r3, #16
 8004f70:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	69db      	ldr	r3, [r3, #28]
 8004f76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f7a:	d15b      	bne.n	8005034 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8004f7c:	7ffb      	ldrb	r3, [r7, #31]
 8004f7e:	2b08      	cmp	r3, #8
 8004f80:	d827      	bhi.n	8004fd2 <UART_SetConfig+0x3a6>
 8004f82:	a201      	add	r2, pc, #4	; (adr r2, 8004f88 <UART_SetConfig+0x35c>)
 8004f84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f88:	08004fad 	.word	0x08004fad
 8004f8c:	08004fb5 	.word	0x08004fb5
 8004f90:	08004fbd 	.word	0x08004fbd
 8004f94:	08004fd3 	.word	0x08004fd3
 8004f98:	08004fc3 	.word	0x08004fc3
 8004f9c:	08004fd3 	.word	0x08004fd3
 8004fa0:	08004fd3 	.word	0x08004fd3
 8004fa4:	08004fd3 	.word	0x08004fd3
 8004fa8:	08004fcb 	.word	0x08004fcb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004fac:	f7fd fd88 	bl	8002ac0 <HAL_RCC_GetPCLK1Freq>
 8004fb0:	61b8      	str	r0, [r7, #24]
        break;
 8004fb2:	e013      	b.n	8004fdc <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004fb4:	f7fd fd98 	bl	8002ae8 <HAL_RCC_GetPCLK2Freq>
 8004fb8:	61b8      	str	r0, [r7, #24]
        break;
 8004fba:	e00f      	b.n	8004fdc <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004fbc:	4b4b      	ldr	r3, [pc, #300]	; (80050ec <UART_SetConfig+0x4c0>)
 8004fbe:	61bb      	str	r3, [r7, #24]
        break;
 8004fc0:	e00c      	b.n	8004fdc <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004fc2:	f7fd fcbb 	bl	800293c <HAL_RCC_GetSysClockFreq>
 8004fc6:	61b8      	str	r0, [r7, #24]
        break;
 8004fc8:	e008      	b.n	8004fdc <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004fca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004fce:	61bb      	str	r3, [r7, #24]
        break;
 8004fd0:	e004      	b.n	8004fdc <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	77bb      	strb	r3, [r7, #30]
        break;
 8004fda:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004fdc:	69bb      	ldr	r3, [r7, #24]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d074      	beq.n	80050cc <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004fe2:	69bb      	ldr	r3, [r7, #24]
 8004fe4:	005a      	lsls	r2, r3, #1
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	085b      	lsrs	r3, r3, #1
 8004fec:	441a      	add	r2, r3
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ff6:	b29b      	uxth	r3, r3
 8004ff8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	2b0f      	cmp	r3, #15
 8004ffe:	d916      	bls.n	800502e <UART_SetConfig+0x402>
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005006:	d212      	bcs.n	800502e <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005008:	693b      	ldr	r3, [r7, #16]
 800500a:	b29b      	uxth	r3, r3
 800500c:	f023 030f 	bic.w	r3, r3, #15
 8005010:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005012:	693b      	ldr	r3, [r7, #16]
 8005014:	085b      	lsrs	r3, r3, #1
 8005016:	b29b      	uxth	r3, r3
 8005018:	f003 0307 	and.w	r3, r3, #7
 800501c:	b29a      	uxth	r2, r3
 800501e:	89fb      	ldrh	r3, [r7, #14]
 8005020:	4313      	orrs	r3, r2
 8005022:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	89fa      	ldrh	r2, [r7, #14]
 800502a:	60da      	str	r2, [r3, #12]
 800502c:	e04e      	b.n	80050cc <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800502e:	2301      	movs	r3, #1
 8005030:	77bb      	strb	r3, [r7, #30]
 8005032:	e04b      	b.n	80050cc <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005034:	7ffb      	ldrb	r3, [r7, #31]
 8005036:	2b08      	cmp	r3, #8
 8005038:	d827      	bhi.n	800508a <UART_SetConfig+0x45e>
 800503a:	a201      	add	r2, pc, #4	; (adr r2, 8005040 <UART_SetConfig+0x414>)
 800503c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005040:	08005065 	.word	0x08005065
 8005044:	0800506d 	.word	0x0800506d
 8005048:	08005075 	.word	0x08005075
 800504c:	0800508b 	.word	0x0800508b
 8005050:	0800507b 	.word	0x0800507b
 8005054:	0800508b 	.word	0x0800508b
 8005058:	0800508b 	.word	0x0800508b
 800505c:	0800508b 	.word	0x0800508b
 8005060:	08005083 	.word	0x08005083
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005064:	f7fd fd2c 	bl	8002ac0 <HAL_RCC_GetPCLK1Freq>
 8005068:	61b8      	str	r0, [r7, #24]
        break;
 800506a:	e013      	b.n	8005094 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800506c:	f7fd fd3c 	bl	8002ae8 <HAL_RCC_GetPCLK2Freq>
 8005070:	61b8      	str	r0, [r7, #24]
        break;
 8005072:	e00f      	b.n	8005094 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005074:	4b1d      	ldr	r3, [pc, #116]	; (80050ec <UART_SetConfig+0x4c0>)
 8005076:	61bb      	str	r3, [r7, #24]
        break;
 8005078:	e00c      	b.n	8005094 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800507a:	f7fd fc5f 	bl	800293c <HAL_RCC_GetSysClockFreq>
 800507e:	61b8      	str	r0, [r7, #24]
        break;
 8005080:	e008      	b.n	8005094 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005082:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005086:	61bb      	str	r3, [r7, #24]
        break;
 8005088:	e004      	b.n	8005094 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 800508a:	2300      	movs	r3, #0
 800508c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800508e:	2301      	movs	r3, #1
 8005090:	77bb      	strb	r3, [r7, #30]
        break;
 8005092:	bf00      	nop
    }

    if (pclk != 0U)
 8005094:	69bb      	ldr	r3, [r7, #24]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d018      	beq.n	80050cc <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	085a      	lsrs	r2, r3, #1
 80050a0:	69bb      	ldr	r3, [r7, #24]
 80050a2:	441a      	add	r2, r3
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80050ac:	b29b      	uxth	r3, r3
 80050ae:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80050b0:	693b      	ldr	r3, [r7, #16]
 80050b2:	2b0f      	cmp	r3, #15
 80050b4:	d908      	bls.n	80050c8 <UART_SetConfig+0x49c>
 80050b6:	693b      	ldr	r3, [r7, #16]
 80050b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050bc:	d204      	bcs.n	80050c8 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	693a      	ldr	r2, [r7, #16]
 80050c4:	60da      	str	r2, [r3, #12]
 80050c6:	e001      	b.n	80050cc <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80050c8:	2301      	movs	r3, #1
 80050ca:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2200      	movs	r2, #0
 80050d0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2200      	movs	r2, #0
 80050d6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80050d8:	7fbb      	ldrb	r3, [r7, #30]
}
 80050da:	4618      	mov	r0, r3
 80050dc:	3720      	adds	r7, #32
 80050de:	46bd      	mov	sp, r7
 80050e0:	bd80      	pop	{r7, pc}
 80050e2:	bf00      	nop
 80050e4:	40007c00 	.word	0x40007c00
 80050e8:	40023800 	.word	0x40023800
 80050ec:	00f42400 	.word	0x00f42400

080050f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b083      	sub	sp, #12
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050fc:	f003 0301 	and.w	r3, r3, #1
 8005100:	2b00      	cmp	r3, #0
 8005102:	d00a      	beq.n	800511a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	430a      	orrs	r2, r1
 8005118:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800511e:	f003 0302 	and.w	r3, r3, #2
 8005122:	2b00      	cmp	r3, #0
 8005124:	d00a      	beq.n	800513c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	430a      	orrs	r2, r1
 800513a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005140:	f003 0304 	and.w	r3, r3, #4
 8005144:	2b00      	cmp	r3, #0
 8005146:	d00a      	beq.n	800515e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	430a      	orrs	r2, r1
 800515c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005162:	f003 0308 	and.w	r3, r3, #8
 8005166:	2b00      	cmp	r3, #0
 8005168:	d00a      	beq.n	8005180 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	685b      	ldr	r3, [r3, #4]
 8005170:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	430a      	orrs	r2, r1
 800517e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005184:	f003 0310 	and.w	r3, r3, #16
 8005188:	2b00      	cmp	r3, #0
 800518a:	d00a      	beq.n	80051a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	689b      	ldr	r3, [r3, #8]
 8005192:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	430a      	orrs	r2, r1
 80051a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a6:	f003 0320 	and.w	r3, r3, #32
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d00a      	beq.n	80051c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	689b      	ldr	r3, [r3, #8]
 80051b4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	430a      	orrs	r2, r1
 80051c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d01a      	beq.n	8005206 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	685b      	ldr	r3, [r3, #4]
 80051d6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	430a      	orrs	r2, r1
 80051e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80051ee:	d10a      	bne.n	8005206 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	430a      	orrs	r2, r1
 8005204:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800520a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800520e:	2b00      	cmp	r3, #0
 8005210:	d00a      	beq.n	8005228 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	685b      	ldr	r3, [r3, #4]
 8005218:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	430a      	orrs	r2, r1
 8005226:	605a      	str	r2, [r3, #4]
  }
}
 8005228:	bf00      	nop
 800522a:	370c      	adds	r7, #12
 800522c:	46bd      	mov	sp, r7
 800522e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005232:	4770      	bx	lr

08005234 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b086      	sub	sp, #24
 8005238:	af02      	add	r7, sp, #8
 800523a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2200      	movs	r2, #0
 8005240:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005244:	f7fc fc7a 	bl	8001b3c <HAL_GetTick>
 8005248:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f003 0308 	and.w	r3, r3, #8
 8005254:	2b08      	cmp	r3, #8
 8005256:	d10e      	bne.n	8005276 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005258:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800525c:	9300      	str	r3, [sp, #0]
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	2200      	movs	r2, #0
 8005262:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005266:	6878      	ldr	r0, [r7, #4]
 8005268:	f000 f817 	bl	800529a <UART_WaitOnFlagUntilTimeout>
 800526c:	4603      	mov	r3, r0
 800526e:	2b00      	cmp	r3, #0
 8005270:	d001      	beq.n	8005276 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005272:	2303      	movs	r3, #3
 8005274:	e00d      	b.n	8005292 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2220      	movs	r2, #32
 800527a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2220      	movs	r2, #32
 8005280:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2200      	movs	r2, #0
 8005286:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2200      	movs	r2, #0
 800528c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005290:	2300      	movs	r3, #0
}
 8005292:	4618      	mov	r0, r3
 8005294:	3710      	adds	r7, #16
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}

0800529a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800529a:	b580      	push	{r7, lr}
 800529c:	b084      	sub	sp, #16
 800529e:	af00      	add	r7, sp, #0
 80052a0:	60f8      	str	r0, [r7, #12]
 80052a2:	60b9      	str	r1, [r7, #8]
 80052a4:	603b      	str	r3, [r7, #0]
 80052a6:	4613      	mov	r3, r2
 80052a8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052aa:	e05e      	b.n	800536a <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052ac:	69bb      	ldr	r3, [r7, #24]
 80052ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052b2:	d05a      	beq.n	800536a <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052b4:	f7fc fc42 	bl	8001b3c <HAL_GetTick>
 80052b8:	4602      	mov	r2, r0
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	1ad3      	subs	r3, r2, r3
 80052be:	69ba      	ldr	r2, [r7, #24]
 80052c0:	429a      	cmp	r2, r3
 80052c2:	d302      	bcc.n	80052ca <UART_WaitOnFlagUntilTimeout+0x30>
 80052c4:	69bb      	ldr	r3, [r7, #24]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d11b      	bne.n	8005302 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	681a      	ldr	r2, [r3, #0]
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80052d8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	689a      	ldr	r2, [r3, #8]
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f022 0201 	bic.w	r2, r2, #1
 80052e8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	2220      	movs	r2, #32
 80052ee:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	2220      	movs	r2, #32
 80052f4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	2200      	movs	r2, #0
 80052fa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80052fe:	2303      	movs	r3, #3
 8005300:	e043      	b.n	800538a <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f003 0304 	and.w	r3, r3, #4
 800530c:	2b00      	cmp	r3, #0
 800530e:	d02c      	beq.n	800536a <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	69db      	ldr	r3, [r3, #28]
 8005316:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800531a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800531e:	d124      	bne.n	800536a <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005328:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	681a      	ldr	r2, [r3, #0]
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005338:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	689a      	ldr	r2, [r3, #8]
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f022 0201 	bic.w	r2, r2, #1
 8005348:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	2220      	movs	r2, #32
 800534e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	2220      	movs	r2, #32
 8005354:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	2220      	movs	r2, #32
 800535a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	2200      	movs	r2, #0
 8005362:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005366:	2303      	movs	r3, #3
 8005368:	e00f      	b.n	800538a <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	69da      	ldr	r2, [r3, #28]
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	4013      	ands	r3, r2
 8005374:	68ba      	ldr	r2, [r7, #8]
 8005376:	429a      	cmp	r2, r3
 8005378:	bf0c      	ite	eq
 800537a:	2301      	moveq	r3, #1
 800537c:	2300      	movne	r3, #0
 800537e:	b2db      	uxtb	r3, r3
 8005380:	461a      	mov	r2, r3
 8005382:	79fb      	ldrb	r3, [r7, #7]
 8005384:	429a      	cmp	r2, r3
 8005386:	d091      	beq.n	80052ac <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005388:	2300      	movs	r3, #0
}
 800538a:	4618      	mov	r0, r3
 800538c:	3710      	adds	r7, #16
 800538e:	46bd      	mov	sp, r7
 8005390:	bd80      	pop	{r7, pc}
	...

08005394 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8005394:	b084      	sub	sp, #16
 8005396:	b480      	push	{r7}
 8005398:	b085      	sub	sp, #20
 800539a:	af00      	add	r7, sp, #0
 800539c:	6078      	str	r0, [r7, #4]
 800539e:	f107 001c 	add.w	r0, r7, #28
 80053a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80053a6:	2300      	movs	r3, #0
 80053a8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80053aa:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80053ac:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80053ae:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80053b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 80053b2:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80053b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 80053b6:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80053b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 80053ba:	431a      	orrs	r2, r3
             Init.ClockDiv
 80053bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 80053be:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80053c0:	68fa      	ldr	r2, [r7, #12]
 80053c2:	4313      	orrs	r3, r2
 80053c4:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	685a      	ldr	r2, [r3, #4]
 80053ca:	4b07      	ldr	r3, [pc, #28]	; (80053e8 <SDMMC_Init+0x54>)
 80053cc:	4013      	ands	r3, r2
 80053ce:	68fa      	ldr	r2, [r7, #12]
 80053d0:	431a      	orrs	r2, r3
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80053d6:	2300      	movs	r3, #0
}
 80053d8:	4618      	mov	r0, r3
 80053da:	3714      	adds	r7, #20
 80053dc:	46bd      	mov	sp, r7
 80053de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e2:	b004      	add	sp, #16
 80053e4:	4770      	bx	lr
 80053e6:	bf00      	nop
 80053e8:	ffff8100 	.word	0xffff8100

080053ec <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 80053ec:	b480      	push	{r7}
 80053ee:	b083      	sub	sp, #12
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80053fa:	4618      	mov	r0, r3
 80053fc:	370c      	adds	r7, #12
 80053fe:	46bd      	mov	sp, r7
 8005400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005404:	4770      	bx	lr

08005406 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 8005406:	b480      	push	{r7}
 8005408:	b083      	sub	sp, #12
 800540a:	af00      	add	r7, sp, #0
 800540c:	6078      	str	r0, [r7, #4]
 800540e:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	681a      	ldr	r2, [r3, #0]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800541a:	2300      	movs	r3, #0
}
 800541c:	4618      	mov	r0, r3
 800541e:	370c      	adds	r7, #12
 8005420:	46bd      	mov	sp, r7
 8005422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005426:	4770      	bx	lr

08005428 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 8005428:	b580      	push	{r7, lr}
 800542a:	b082      	sub	sp, #8
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2203      	movs	r2, #3
 8005434:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8005436:	2002      	movs	r0, #2
 8005438:	f7fc fb8c 	bl	8001b54 <HAL_Delay>
  
  return HAL_OK;
 800543c:	2300      	movs	r3, #0
}
 800543e:	4618      	mov	r0, r3
 8005440:	3708      	adds	r7, #8
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}

08005446 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 8005446:	b480      	push	{r7}
 8005448:	b083      	sub	sp, #12
 800544a:	af00      	add	r7, sp, #0
 800544c:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f003 0303 	and.w	r3, r3, #3
}
 8005456:	4618      	mov	r0, r3
 8005458:	370c      	adds	r7, #12
 800545a:	46bd      	mov	sp, r7
 800545c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005460:	4770      	bx	lr
	...

08005464 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8005464:	b480      	push	{r7}
 8005466:	b085      	sub	sp, #20
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
 800546c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800546e:	2300      	movs	r3, #0
 8005470:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	681a      	ldr	r2, [r3, #0]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005482:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8005488:	431a      	orrs	r2, r3
                       Command->CPSM);
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800548e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005490:	68fa      	ldr	r2, [r7, #12]
 8005492:	4313      	orrs	r3, r2
 8005494:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	68da      	ldr	r2, [r3, #12]
 800549a:	4b06      	ldr	r3, [pc, #24]	; (80054b4 <SDMMC_SendCommand+0x50>)
 800549c:	4013      	ands	r3, r2
 800549e:	68fa      	ldr	r2, [r7, #12]
 80054a0:	431a      	orrs	r2, r3
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80054a6:	2300      	movs	r3, #0
}
 80054a8:	4618      	mov	r0, r3
 80054aa:	3714      	adds	r7, #20
 80054ac:	46bd      	mov	sp, r7
 80054ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b2:	4770      	bx	lr
 80054b4:	fffff000 	.word	0xfffff000

080054b8 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 80054b8:	b480      	push	{r7}
 80054ba:	b083      	sub	sp, #12
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	691b      	ldr	r3, [r3, #16]
 80054c4:	b2db      	uxtb	r3, r3
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	370c      	adds	r7, #12
 80054ca:	46bd      	mov	sp, r7
 80054cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d0:	4770      	bx	lr

080054d2 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 80054d2:	b480      	push	{r7}
 80054d4:	b085      	sub	sp, #20
 80054d6:	af00      	add	r7, sp, #0
 80054d8:	6078      	str	r0, [r7, #4]
 80054da:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	3314      	adds	r3, #20
 80054e0:	461a      	mov	r2, r3
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	4413      	add	r3, r2
 80054e6:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
}  
 80054ec:	4618      	mov	r0, r3
 80054ee:	3714      	adds	r7, #20
 80054f0:	46bd      	mov	sp, r7
 80054f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f6:	4770      	bx	lr

080054f8 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 80054f8:	b480      	push	{r7}
 80054fa:	b085      	sub	sp, #20
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
 8005500:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005502:	2300      	movs	r3, #0
 8005504:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	681a      	ldr	r2, [r3, #0]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	685a      	ldr	r2, [r3, #4]
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800551e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8005524:	431a      	orrs	r2, r3
                       Data->DPSM);
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800552a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800552c:	68fa      	ldr	r2, [r7, #12]
 800552e:	4313      	orrs	r3, r2
 8005530:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005536:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	431a      	orrs	r2, r3
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8005542:	2300      	movs	r3, #0

}
 8005544:	4618      	mov	r0, r3
 8005546:	3714      	adds	r7, #20
 8005548:	46bd      	mov	sp, r7
 800554a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554e:	4770      	bx	lr

08005550 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b088      	sub	sp, #32
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
 8005558:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800555e:	2310      	movs	r3, #16
 8005560:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005562:	2340      	movs	r3, #64	; 0x40
 8005564:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005566:	2300      	movs	r3, #0
 8005568:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800556a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800556e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005570:	f107 0308 	add.w	r3, r7, #8
 8005574:	4619      	mov	r1, r3
 8005576:	6878      	ldr	r0, [r7, #4]
 8005578:	f7ff ff74 	bl	8005464 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800557c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005580:	2110      	movs	r1, #16
 8005582:	6878      	ldr	r0, [r7, #4]
 8005584:	f000 fa02 	bl	800598c <SDMMC_GetCmdResp1>
 8005588:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800558a:	69fb      	ldr	r3, [r7, #28]
}
 800558c:	4618      	mov	r0, r3
 800558e:	3720      	adds	r7, #32
 8005590:	46bd      	mov	sp, r7
 8005592:	bd80      	pop	{r7, pc}

08005594 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b088      	sub	sp, #32
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
 800559c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80055a2:	2311      	movs	r3, #17
 80055a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80055a6:	2340      	movs	r3, #64	; 0x40
 80055a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80055aa:	2300      	movs	r3, #0
 80055ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80055ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80055b2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80055b4:	f107 0308 	add.w	r3, r7, #8
 80055b8:	4619      	mov	r1, r3
 80055ba:	6878      	ldr	r0, [r7, #4]
 80055bc:	f7ff ff52 	bl	8005464 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80055c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80055c4:	2111      	movs	r1, #17
 80055c6:	6878      	ldr	r0, [r7, #4]
 80055c8:	f000 f9e0 	bl	800598c <SDMMC_GetCmdResp1>
 80055cc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80055ce:	69fb      	ldr	r3, [r7, #28]
}
 80055d0:	4618      	mov	r0, r3
 80055d2:	3720      	adds	r7, #32
 80055d4:	46bd      	mov	sp, r7
 80055d6:	bd80      	pop	{r7, pc}

080055d8 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b088      	sub	sp, #32
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
 80055e0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80055e6:	2312      	movs	r3, #18
 80055e8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80055ea:	2340      	movs	r3, #64	; 0x40
 80055ec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80055ee:	2300      	movs	r3, #0
 80055f0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80055f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80055f6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80055f8:	f107 0308 	add.w	r3, r7, #8
 80055fc:	4619      	mov	r1, r3
 80055fe:	6878      	ldr	r0, [r7, #4]
 8005600:	f7ff ff30 	bl	8005464 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8005604:	f241 3288 	movw	r2, #5000	; 0x1388
 8005608:	2112      	movs	r1, #18
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f000 f9be 	bl	800598c <SDMMC_GetCmdResp1>
 8005610:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005612:	69fb      	ldr	r3, [r7, #28]
}
 8005614:	4618      	mov	r0, r3
 8005616:	3720      	adds	r7, #32
 8005618:	46bd      	mov	sp, r7
 800561a:	bd80      	pop	{r7, pc}

0800561c <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b088      	sub	sp, #32
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
 8005624:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800562a:	2318      	movs	r3, #24
 800562c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800562e:	2340      	movs	r3, #64	; 0x40
 8005630:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005632:	2300      	movs	r3, #0
 8005634:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005636:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800563a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800563c:	f107 0308 	add.w	r3, r7, #8
 8005640:	4619      	mov	r1, r3
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f7ff ff0e 	bl	8005464 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8005648:	f241 3288 	movw	r2, #5000	; 0x1388
 800564c:	2118      	movs	r1, #24
 800564e:	6878      	ldr	r0, [r7, #4]
 8005650:	f000 f99c 	bl	800598c <SDMMC_GetCmdResp1>
 8005654:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005656:	69fb      	ldr	r3, [r7, #28]
}
 8005658:	4618      	mov	r0, r3
 800565a:	3720      	adds	r7, #32
 800565c:	46bd      	mov	sp, r7
 800565e:	bd80      	pop	{r7, pc}

08005660 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b088      	sub	sp, #32
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
 8005668:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800566e:	2319      	movs	r3, #25
 8005670:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005672:	2340      	movs	r3, #64	; 0x40
 8005674:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005676:	2300      	movs	r3, #0
 8005678:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800567a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800567e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005680:	f107 0308 	add.w	r3, r7, #8
 8005684:	4619      	mov	r1, r3
 8005686:	6878      	ldr	r0, [r7, #4]
 8005688:	f7ff feec 	bl	8005464 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800568c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005690:	2119      	movs	r1, #25
 8005692:	6878      	ldr	r0, [r7, #4]
 8005694:	f000 f97a 	bl	800598c <SDMMC_GetCmdResp1>
 8005698:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800569a:	69fb      	ldr	r3, [r7, #28]
}
 800569c:	4618      	mov	r0, r3
 800569e:	3720      	adds	r7, #32
 80056a0:	46bd      	mov	sp, r7
 80056a2:	bd80      	pop	{r7, pc}

080056a4 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b088      	sub	sp, #32
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80056ac:	2300      	movs	r3, #0
 80056ae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80056b0:	230c      	movs	r3, #12
 80056b2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80056b4:	2340      	movs	r3, #64	; 0x40
 80056b6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80056b8:	2300      	movs	r3, #0
 80056ba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80056bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80056c0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80056c2:	f107 0308 	add.w	r3, r7, #8
 80056c6:	4619      	mov	r1, r3
 80056c8:	6878      	ldr	r0, [r7, #4]
 80056ca:	f7ff fecb 	bl	8005464 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 80056ce:	4a05      	ldr	r2, [pc, #20]	; (80056e4 <SDMMC_CmdStopTransfer+0x40>)
 80056d0:	210c      	movs	r1, #12
 80056d2:	6878      	ldr	r0, [r7, #4]
 80056d4:	f000 f95a 	bl	800598c <SDMMC_GetCmdResp1>
 80056d8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80056da:	69fb      	ldr	r3, [r7, #28]
}
 80056dc:	4618      	mov	r0, r3
 80056de:	3720      	adds	r7, #32
 80056e0:	46bd      	mov	sp, r7
 80056e2:	bd80      	pop	{r7, pc}
 80056e4:	05f5e100 	.word	0x05f5e100

080056e8 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b08a      	sub	sp, #40	; 0x28
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	60f8      	str	r0, [r7, #12]
 80056f0:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80056f8:	2307      	movs	r3, #7
 80056fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80056fc:	2340      	movs	r3, #64	; 0x40
 80056fe:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005700:	2300      	movs	r3, #0
 8005702:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005704:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005708:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800570a:	f107 0310 	add.w	r3, r7, #16
 800570e:	4619      	mov	r1, r3
 8005710:	68f8      	ldr	r0, [r7, #12]
 8005712:	f7ff fea7 	bl	8005464 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8005716:	f241 3288 	movw	r2, #5000	; 0x1388
 800571a:	2107      	movs	r1, #7
 800571c:	68f8      	ldr	r0, [r7, #12]
 800571e:	f000 f935 	bl	800598c <SDMMC_GetCmdResp1>
 8005722:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8005724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005726:	4618      	mov	r0, r3
 8005728:	3728      	adds	r7, #40	; 0x28
 800572a:	46bd      	mov	sp, r7
 800572c:	bd80      	pop	{r7, pc}

0800572e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800572e:	b580      	push	{r7, lr}
 8005730:	b088      	sub	sp, #32
 8005732:	af00      	add	r7, sp, #0
 8005734:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8005736:	2300      	movs	r3, #0
 8005738:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800573a:	2300      	movs	r3, #0
 800573c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800573e:	2300      	movs	r3, #0
 8005740:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005742:	2300      	movs	r3, #0
 8005744:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005746:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800574a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800574c:	f107 0308 	add.w	r3, r7, #8
 8005750:	4619      	mov	r1, r3
 8005752:	6878      	ldr	r0, [r7, #4]
 8005754:	f7ff fe86 	bl	8005464 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8005758:	6878      	ldr	r0, [r7, #4]
 800575a:	f000 f8eb 	bl	8005934 <SDMMC_GetCmdError>
 800575e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005760:	69fb      	ldr	r3, [r7, #28]
}
 8005762:	4618      	mov	r0, r3
 8005764:	3720      	adds	r7, #32
 8005766:	46bd      	mov	sp, r7
 8005768:	bd80      	pop	{r7, pc}

0800576a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800576a:	b580      	push	{r7, lr}
 800576c:	b088      	sub	sp, #32
 800576e:	af00      	add	r7, sp, #0
 8005770:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8005772:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8005776:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8005778:	2308      	movs	r3, #8
 800577a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800577c:	2340      	movs	r3, #64	; 0x40
 800577e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005780:	2300      	movs	r3, #0
 8005782:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005784:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005788:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800578a:	f107 0308 	add.w	r3, r7, #8
 800578e:	4619      	mov	r1, r3
 8005790:	6878      	ldr	r0, [r7, #4]
 8005792:	f7ff fe67 	bl	8005464 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8005796:	6878      	ldr	r0, [r7, #4]
 8005798:	f000 fae2 	bl	8005d60 <SDMMC_GetCmdResp7>
 800579c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800579e:	69fb      	ldr	r3, [r7, #28]
}
 80057a0:	4618      	mov	r0, r3
 80057a2:	3720      	adds	r7, #32
 80057a4:	46bd      	mov	sp, r7
 80057a6:	bd80      	pop	{r7, pc}

080057a8 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b088      	sub	sp, #32
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
 80057b0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80057b6:	2337      	movs	r3, #55	; 0x37
 80057b8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80057ba:	2340      	movs	r3, #64	; 0x40
 80057bc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80057be:	2300      	movs	r3, #0
 80057c0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80057c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80057c6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80057c8:	f107 0308 	add.w	r3, r7, #8
 80057cc:	4619      	mov	r1, r3
 80057ce:	6878      	ldr	r0, [r7, #4]
 80057d0:	f7ff fe48 	bl	8005464 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 80057d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80057d8:	2137      	movs	r1, #55	; 0x37
 80057da:	6878      	ldr	r0, [r7, #4]
 80057dc:	f000 f8d6 	bl	800598c <SDMMC_GetCmdResp1>
 80057e0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80057e2:	69fb      	ldr	r3, [r7, #28]
}
 80057e4:	4618      	mov	r0, r3
 80057e6:	3720      	adds	r7, #32
 80057e8:	46bd      	mov	sp, r7
 80057ea:	bd80      	pop	{r7, pc}

080057ec <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b088      	sub	sp, #32
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
 80057f4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80057f6:	683a      	ldr	r2, [r7, #0]
 80057f8:	4b0d      	ldr	r3, [pc, #52]	; (8005830 <SDMMC_CmdAppOperCommand+0x44>)
 80057fa:	4313      	orrs	r3, r2
 80057fc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80057fe:	2329      	movs	r3, #41	; 0x29
 8005800:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005802:	2340      	movs	r3, #64	; 0x40
 8005804:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005806:	2300      	movs	r3, #0
 8005808:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800580a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800580e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005810:	f107 0308 	add.w	r3, r7, #8
 8005814:	4619      	mov	r1, r3
 8005816:	6878      	ldr	r0, [r7, #4]
 8005818:	f7ff fe24 	bl	8005464 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800581c:	6878      	ldr	r0, [r7, #4]
 800581e:	f000 f9eb 	bl	8005bf8 <SDMMC_GetCmdResp3>
 8005822:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005824:	69fb      	ldr	r3, [r7, #28]
}
 8005826:	4618      	mov	r0, r3
 8005828:	3720      	adds	r7, #32
 800582a:	46bd      	mov	sp, r7
 800582c:	bd80      	pop	{r7, pc}
 800582e:	bf00      	nop
 8005830:	80100000 	.word	0x80100000

08005834 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b088      	sub	sp, #32
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800583c:	2300      	movs	r3, #0
 800583e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8005840:	2302      	movs	r3, #2
 8005842:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8005844:	23c0      	movs	r3, #192	; 0xc0
 8005846:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005848:	2300      	movs	r3, #0
 800584a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800584c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005850:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005852:	f107 0308 	add.w	r3, r7, #8
 8005856:	4619      	mov	r1, r3
 8005858:	6878      	ldr	r0, [r7, #4]
 800585a:	f7ff fe03 	bl	8005464 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800585e:	6878      	ldr	r0, [r7, #4]
 8005860:	f000 f982 	bl	8005b68 <SDMMC_GetCmdResp2>
 8005864:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005866:	69fb      	ldr	r3, [r7, #28]
}
 8005868:	4618      	mov	r0, r3
 800586a:	3720      	adds	r7, #32
 800586c:	46bd      	mov	sp, r7
 800586e:	bd80      	pop	{r7, pc}

08005870 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b088      	sub	sp, #32
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
 8005878:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800587e:	2309      	movs	r3, #9
 8005880:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8005882:	23c0      	movs	r3, #192	; 0xc0
 8005884:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005886:	2300      	movs	r3, #0
 8005888:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800588a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800588e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005890:	f107 0308 	add.w	r3, r7, #8
 8005894:	4619      	mov	r1, r3
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	f7ff fde4 	bl	8005464 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800589c:	6878      	ldr	r0, [r7, #4]
 800589e:	f000 f963 	bl	8005b68 <SDMMC_GetCmdResp2>
 80058a2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80058a4:	69fb      	ldr	r3, [r7, #28]
}
 80058a6:	4618      	mov	r0, r3
 80058a8:	3720      	adds	r7, #32
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bd80      	pop	{r7, pc}

080058ae <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 80058ae:	b580      	push	{r7, lr}
 80058b0:	b088      	sub	sp, #32
 80058b2:	af00      	add	r7, sp, #0
 80058b4:	6078      	str	r0, [r7, #4]
 80058b6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80058b8:	2300      	movs	r3, #0
 80058ba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80058bc:	2303      	movs	r3, #3
 80058be:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80058c0:	2340      	movs	r3, #64	; 0x40
 80058c2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80058c4:	2300      	movs	r3, #0
 80058c6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80058c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80058cc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80058ce:	f107 0308 	add.w	r3, r7, #8
 80058d2:	4619      	mov	r1, r3
 80058d4:	6878      	ldr	r0, [r7, #4]
 80058d6:	f7ff fdc5 	bl	8005464 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80058da:	683a      	ldr	r2, [r7, #0]
 80058dc:	2103      	movs	r1, #3
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	f000 f9c8 	bl	8005c74 <SDMMC_GetCmdResp6>
 80058e4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80058e6:	69fb      	ldr	r3, [r7, #28]
}
 80058e8:	4618      	mov	r0, r3
 80058ea:	3720      	adds	r7, #32
 80058ec:	46bd      	mov	sp, r7
 80058ee:	bd80      	pop	{r7, pc}

080058f0 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b088      	sub	sp, #32
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
 80058f8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80058fe:	230d      	movs	r3, #13
 8005900:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005902:	2340      	movs	r3, #64	; 0x40
 8005904:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005906:	2300      	movs	r3, #0
 8005908:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800590a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800590e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005910:	f107 0308 	add.w	r3, r7, #8
 8005914:	4619      	mov	r1, r3
 8005916:	6878      	ldr	r0, [r7, #4]
 8005918:	f7ff fda4 	bl	8005464 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800591c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005920:	210d      	movs	r1, #13
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	f000 f832 	bl	800598c <SDMMC_GetCmdResp1>
 8005928:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800592a:	69fb      	ldr	r3, [r7, #28]
}
 800592c:	4618      	mov	r0, r3
 800592e:	3720      	adds	r7, #32
 8005930:	46bd      	mov	sp, r7
 8005932:	bd80      	pop	{r7, pc}

08005934 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8005934:	b480      	push	{r7}
 8005936:	b085      	sub	sp, #20
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800593c:	4b11      	ldr	r3, [pc, #68]	; (8005984 <SDMMC_GetCmdError+0x50>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4a11      	ldr	r2, [pc, #68]	; (8005988 <SDMMC_GetCmdError+0x54>)
 8005942:	fba2 2303 	umull	r2, r3, r2, r3
 8005946:	0a5b      	lsrs	r3, r3, #9
 8005948:	f241 3288 	movw	r2, #5000	; 0x1388
 800594c:	fb02 f303 	mul.w	r3, r2, r3
 8005950:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	1e5a      	subs	r2, r3, #1
 8005956:	60fa      	str	r2, [r7, #12]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d102      	bne.n	8005962 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800595c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005960:	e009      	b.n	8005976 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005966:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800596a:	2b00      	cmp	r3, #0
 800596c:	d0f1      	beq.n	8005952 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	22c5      	movs	r2, #197	; 0xc5
 8005972:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8005974:	2300      	movs	r3, #0
}
 8005976:	4618      	mov	r0, r3
 8005978:	3714      	adds	r7, #20
 800597a:	46bd      	mov	sp, r7
 800597c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005980:	4770      	bx	lr
 8005982:	bf00      	nop
 8005984:	20000094 	.word	0x20000094
 8005988:	10624dd3 	.word	0x10624dd3

0800598c <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b088      	sub	sp, #32
 8005990:	af00      	add	r7, sp, #0
 8005992:	60f8      	str	r0, [r7, #12]
 8005994:	460b      	mov	r3, r1
 8005996:	607a      	str	r2, [r7, #4]
 8005998:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800599a:	4b70      	ldr	r3, [pc, #448]	; (8005b5c <SDMMC_GetCmdResp1+0x1d0>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4a70      	ldr	r2, [pc, #448]	; (8005b60 <SDMMC_GetCmdResp1+0x1d4>)
 80059a0:	fba2 2303 	umull	r2, r3, r2, r3
 80059a4:	0a5a      	lsrs	r2, r3, #9
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	fb02 f303 	mul.w	r3, r2, r3
 80059ac:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80059ae:	69fb      	ldr	r3, [r7, #28]
 80059b0:	1e5a      	subs	r2, r3, #1
 80059b2:	61fa      	str	r2, [r7, #28]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d102      	bne.n	80059be <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80059b8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80059bc:	e0c9      	b.n	8005b52 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059c2:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80059c4:	69bb      	ldr	r3, [r7, #24]
 80059c6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d0ef      	beq.n	80059ae <SDMMC_GetCmdResp1+0x22>
 80059ce:	69bb      	ldr	r3, [r7, #24]
 80059d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d1ea      	bne.n	80059ae <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059dc:	f003 0304 	and.w	r3, r3, #4
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d004      	beq.n	80059ee <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	2204      	movs	r2, #4
 80059e8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80059ea:	2304      	movs	r3, #4
 80059ec:	e0b1      	b.n	8005b52 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059f2:	f003 0301 	and.w	r3, r3, #1
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d004      	beq.n	8005a04 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	2201      	movs	r2, #1
 80059fe:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005a00:	2301      	movs	r3, #1
 8005a02:	e0a6      	b.n	8005b52 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	22c5      	movs	r2, #197	; 0xc5
 8005a08:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8005a0a:	68f8      	ldr	r0, [r7, #12]
 8005a0c:	f7ff fd54 	bl	80054b8 <SDMMC_GetCommandResponse>
 8005a10:	4603      	mov	r3, r0
 8005a12:	461a      	mov	r2, r3
 8005a14:	7afb      	ldrb	r3, [r7, #11]
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d001      	beq.n	8005a1e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	e099      	b.n	8005b52 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8005a1e:	2100      	movs	r1, #0
 8005a20:	68f8      	ldr	r0, [r7, #12]
 8005a22:	f7ff fd56 	bl	80054d2 <SDMMC_GetResponse>
 8005a26:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8005a28:	697a      	ldr	r2, [r7, #20]
 8005a2a:	4b4e      	ldr	r3, [pc, #312]	; (8005b64 <SDMMC_GetCmdResp1+0x1d8>)
 8005a2c:	4013      	ands	r3, r2
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d101      	bne.n	8005a36 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8005a32:	2300      	movs	r3, #0
 8005a34:	e08d      	b.n	8005b52 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8005a36:	697b      	ldr	r3, [r7, #20]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	da02      	bge.n	8005a42 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8005a3c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005a40:	e087      	b.n	8005b52 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8005a42:	697b      	ldr	r3, [r7, #20]
 8005a44:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d001      	beq.n	8005a50 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8005a4c:	2340      	movs	r3, #64	; 0x40
 8005a4e:	e080      	b.n	8005b52 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8005a50:	697b      	ldr	r3, [r7, #20]
 8005a52:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d001      	beq.n	8005a5e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8005a5a:	2380      	movs	r3, #128	; 0x80
 8005a5c:	e079      	b.n	8005b52 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8005a5e:	697b      	ldr	r3, [r7, #20]
 8005a60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d002      	beq.n	8005a6e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8005a68:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005a6c:	e071      	b.n	8005b52 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8005a6e:	697b      	ldr	r3, [r7, #20]
 8005a70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d002      	beq.n	8005a7e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8005a78:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005a7c:	e069      	b.n	8005b52 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8005a7e:	697b      	ldr	r3, [r7, #20]
 8005a80:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d002      	beq.n	8005a8e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8005a88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005a8c:	e061      	b.n	8005b52 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8005a8e:	697b      	ldr	r3, [r7, #20]
 8005a90:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d002      	beq.n	8005a9e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8005a98:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005a9c:	e059      	b.n	8005b52 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8005a9e:	697b      	ldr	r3, [r7, #20]
 8005aa0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d002      	beq.n	8005aae <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005aa8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005aac:	e051      	b.n	8005b52 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d002      	beq.n	8005abe <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005ab8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005abc:	e049      	b.n	8005b52 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8005abe:	697b      	ldr	r3, [r7, #20]
 8005ac0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d002      	beq.n	8005ace <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8005ac8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005acc:	e041      	b.n	8005b52 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8005ace:	697b      	ldr	r3, [r7, #20]
 8005ad0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d002      	beq.n	8005ade <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8005ad8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005adc:	e039      	b.n	8005b52 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8005ade:	697b      	ldr	r3, [r7, #20]
 8005ae0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d002      	beq.n	8005aee <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8005ae8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005aec:	e031      	b.n	8005b52 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8005aee:	697b      	ldr	r3, [r7, #20]
 8005af0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d002      	beq.n	8005afe <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8005af8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005afc:	e029      	b.n	8005b52 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8005afe:	697b      	ldr	r3, [r7, #20]
 8005b00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d002      	beq.n	8005b0e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8005b08:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005b0c:	e021      	b.n	8005b52 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8005b0e:	697b      	ldr	r3, [r7, #20]
 8005b10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d002      	beq.n	8005b1e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8005b18:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005b1c:	e019      	b.n	8005b52 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8005b1e:	697b      	ldr	r3, [r7, #20]
 8005b20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d002      	beq.n	8005b2e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8005b28:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005b2c:	e011      	b.n	8005b52 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8005b2e:	697b      	ldr	r3, [r7, #20]
 8005b30:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d002      	beq.n	8005b3e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8005b38:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005b3c:	e009      	b.n	8005b52 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8005b3e:	697b      	ldr	r3, [r7, #20]
 8005b40:	f003 0308 	and.w	r3, r3, #8
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d002      	beq.n	8005b4e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8005b48:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8005b4c:	e001      	b.n	8005b52 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005b4e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8005b52:	4618      	mov	r0, r3
 8005b54:	3720      	adds	r7, #32
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bd80      	pop	{r7, pc}
 8005b5a:	bf00      	nop
 8005b5c:	20000094 	.word	0x20000094
 8005b60:	10624dd3 	.word	0x10624dd3
 8005b64:	fdffe008 	.word	0xfdffe008

08005b68 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8005b68:	b480      	push	{r7}
 8005b6a:	b085      	sub	sp, #20
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005b70:	4b1f      	ldr	r3, [pc, #124]	; (8005bf0 <SDMMC_GetCmdResp2+0x88>)
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4a1f      	ldr	r2, [pc, #124]	; (8005bf4 <SDMMC_GetCmdResp2+0x8c>)
 8005b76:	fba2 2303 	umull	r2, r3, r2, r3
 8005b7a:	0a5b      	lsrs	r3, r3, #9
 8005b7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b80:	fb02 f303 	mul.w	r3, r2, r3
 8005b84:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	1e5a      	subs	r2, r3, #1
 8005b8a:	60fa      	str	r2, [r7, #12]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d102      	bne.n	8005b96 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005b90:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005b94:	e026      	b.n	8005be4 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b9a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d0ef      	beq.n	8005b86 <SDMMC_GetCmdResp2+0x1e>
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d1ea      	bne.n	8005b86 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bb4:	f003 0304 	and.w	r3, r3, #4
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d004      	beq.n	8005bc6 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2204      	movs	r2, #4
 8005bc0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005bc2:	2304      	movs	r3, #4
 8005bc4:	e00e      	b.n	8005be4 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bca:	f003 0301 	and.w	r3, r3, #1
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d004      	beq.n	8005bdc <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2201      	movs	r2, #1
 8005bd6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005bd8:	2301      	movs	r3, #1
 8005bda:	e003      	b.n	8005be4 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	22c5      	movs	r2, #197	; 0xc5
 8005be0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8005be2:	2300      	movs	r3, #0
}
 8005be4:	4618      	mov	r0, r3
 8005be6:	3714      	adds	r7, #20
 8005be8:	46bd      	mov	sp, r7
 8005bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bee:	4770      	bx	lr
 8005bf0:	20000094 	.word	0x20000094
 8005bf4:	10624dd3 	.word	0x10624dd3

08005bf8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	b085      	sub	sp, #20
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005c00:	4b1a      	ldr	r3, [pc, #104]	; (8005c6c <SDMMC_GetCmdResp3+0x74>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	4a1a      	ldr	r2, [pc, #104]	; (8005c70 <SDMMC_GetCmdResp3+0x78>)
 8005c06:	fba2 2303 	umull	r2, r3, r2, r3
 8005c0a:	0a5b      	lsrs	r3, r3, #9
 8005c0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c10:	fb02 f303 	mul.w	r3, r2, r3
 8005c14:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	1e5a      	subs	r2, r3, #1
 8005c1a:	60fa      	str	r2, [r7, #12]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d102      	bne.n	8005c26 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005c20:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005c24:	e01b      	b.n	8005c5e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c2a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d0ef      	beq.n	8005c16 <SDMMC_GetCmdResp3+0x1e>
 8005c36:	68bb      	ldr	r3, [r7, #8]
 8005c38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d1ea      	bne.n	8005c16 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c44:	f003 0304 	and.w	r3, r3, #4
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d004      	beq.n	8005c56 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2204      	movs	r2, #4
 8005c50:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005c52:	2304      	movs	r3, #4
 8005c54:	e003      	b.n	8005c5e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	22c5      	movs	r2, #197	; 0xc5
 8005c5a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005c5c:	2300      	movs	r3, #0
}
 8005c5e:	4618      	mov	r0, r3
 8005c60:	3714      	adds	r7, #20
 8005c62:	46bd      	mov	sp, r7
 8005c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c68:	4770      	bx	lr
 8005c6a:	bf00      	nop
 8005c6c:	20000094 	.word	0x20000094
 8005c70:	10624dd3 	.word	0x10624dd3

08005c74 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b088      	sub	sp, #32
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	60f8      	str	r0, [r7, #12]
 8005c7c:	460b      	mov	r3, r1
 8005c7e:	607a      	str	r2, [r7, #4]
 8005c80:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005c82:	4b35      	ldr	r3, [pc, #212]	; (8005d58 <SDMMC_GetCmdResp6+0xe4>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	4a35      	ldr	r2, [pc, #212]	; (8005d5c <SDMMC_GetCmdResp6+0xe8>)
 8005c88:	fba2 2303 	umull	r2, r3, r2, r3
 8005c8c:	0a5b      	lsrs	r3, r3, #9
 8005c8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c92:	fb02 f303 	mul.w	r3, r2, r3
 8005c96:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8005c98:	69fb      	ldr	r3, [r7, #28]
 8005c9a:	1e5a      	subs	r2, r3, #1
 8005c9c:	61fa      	str	r2, [r7, #28]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d102      	bne.n	8005ca8 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005ca2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005ca6:	e052      	b.n	8005d4e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cac:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005cae:	69bb      	ldr	r3, [r7, #24]
 8005cb0:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d0ef      	beq.n	8005c98 <SDMMC_GetCmdResp6+0x24>
 8005cb8:	69bb      	ldr	r3, [r7, #24]
 8005cba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d1ea      	bne.n	8005c98 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cc6:	f003 0304 	and.w	r3, r3, #4
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d004      	beq.n	8005cd8 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	2204      	movs	r2, #4
 8005cd2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005cd4:	2304      	movs	r3, #4
 8005cd6:	e03a      	b.n	8005d4e <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cdc:	f003 0301 	and.w	r3, r3, #1
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d004      	beq.n	8005cee <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	2201      	movs	r2, #1
 8005ce8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005cea:	2301      	movs	r3, #1
 8005cec:	e02f      	b.n	8005d4e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8005cee:	68f8      	ldr	r0, [r7, #12]
 8005cf0:	f7ff fbe2 	bl	80054b8 <SDMMC_GetCommandResponse>
 8005cf4:	4603      	mov	r3, r0
 8005cf6:	461a      	mov	r2, r3
 8005cf8:	7afb      	ldrb	r3, [r7, #11]
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d001      	beq.n	8005d02 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005cfe:	2301      	movs	r3, #1
 8005d00:	e025      	b.n	8005d4e <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	22c5      	movs	r2, #197	; 0xc5
 8005d06:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8005d08:	2100      	movs	r1, #0
 8005d0a:	68f8      	ldr	r0, [r7, #12]
 8005d0c:	f7ff fbe1 	bl	80054d2 <SDMMC_GetResponse>
 8005d10:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d106      	bne.n	8005d2a <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8005d1c:	697b      	ldr	r3, [r7, #20]
 8005d1e:	0c1b      	lsrs	r3, r3, #16
 8005d20:	b29a      	uxth	r2, r3
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8005d26:	2300      	movs	r3, #0
 8005d28:	e011      	b.n	8005d4e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8005d2a:	697b      	ldr	r3, [r7, #20]
 8005d2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d002      	beq.n	8005d3a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005d34:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005d38:	e009      	b.n	8005d4e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8005d3a:	697b      	ldr	r3, [r7, #20]
 8005d3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d002      	beq.n	8005d4a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005d44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005d48:	e001      	b.n	8005d4e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005d4a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8005d4e:	4618      	mov	r0, r3
 8005d50:	3720      	adds	r7, #32
 8005d52:	46bd      	mov	sp, r7
 8005d54:	bd80      	pop	{r7, pc}
 8005d56:	bf00      	nop
 8005d58:	20000094 	.word	0x20000094
 8005d5c:	10624dd3 	.word	0x10624dd3

08005d60 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8005d60:	b480      	push	{r7}
 8005d62:	b085      	sub	sp, #20
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005d68:	4b22      	ldr	r3, [pc, #136]	; (8005df4 <SDMMC_GetCmdResp7+0x94>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4a22      	ldr	r2, [pc, #136]	; (8005df8 <SDMMC_GetCmdResp7+0x98>)
 8005d6e:	fba2 2303 	umull	r2, r3, r2, r3
 8005d72:	0a5b      	lsrs	r3, r3, #9
 8005d74:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d78:	fb02 f303 	mul.w	r3, r2, r3
 8005d7c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	1e5a      	subs	r2, r3, #1
 8005d82:	60fa      	str	r2, [r7, #12]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d102      	bne.n	8005d8e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005d88:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005d8c:	e02c      	b.n	8005de8 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d92:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d0ef      	beq.n	8005d7e <SDMMC_GetCmdResp7+0x1e>
 8005d9e:	68bb      	ldr	r3, [r7, #8]
 8005da0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d1ea      	bne.n	8005d7e <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dac:	f003 0304 	and.w	r3, r3, #4
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d004      	beq.n	8005dbe <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2204      	movs	r2, #4
 8005db8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005dba:	2304      	movs	r3, #4
 8005dbc:	e014      	b.n	8005de8 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dc2:	f003 0301 	and.w	r3, r3, #1
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d004      	beq.n	8005dd4 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2201      	movs	r2, #1
 8005dce:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005dd0:	2301      	movs	r3, #1
 8005dd2:	e009      	b.n	8005de8 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d002      	beq.n	8005de6 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2240      	movs	r2, #64	; 0x40
 8005de4:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005de6:	2300      	movs	r3, #0
  
}
 8005de8:	4618      	mov	r0, r3
 8005dea:	3714      	adds	r7, #20
 8005dec:	46bd      	mov	sp, r7
 8005dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df2:	4770      	bx	lr
 8005df4:	20000094 	.word	0x20000094
 8005df8:	10624dd3 	.word	0x10624dd3

08005dfc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8005e00:	4904      	ldr	r1, [pc, #16]	; (8005e14 <MX_FATFS_Init+0x18>)
 8005e02:	4805      	ldr	r0, [pc, #20]	; (8005e18 <MX_FATFS_Init+0x1c>)
 8005e04:	f000 f9d6 	bl	80061b4 <FATFS_LinkDriver>
 8005e08:	4603      	mov	r3, r0
 8005e0a:	461a      	mov	r2, r3
 8005e0c:	4b03      	ldr	r3, [pc, #12]	; (8005e1c <MX_FATFS_Init+0x20>)
 8005e0e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005e10:	bf00      	nop
 8005e12:	bd80      	pop	{r7, pc}
 8005e14:	2000455c 	.word	0x2000455c
 8005e18:	080072d0 	.word	0x080072d0
 8005e1c:	20004558 	.word	0x20004558

08005e20 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b082      	sub	sp, #8
 8005e24:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8005e26:	2300      	movs	r3, #0
 8005e28:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8005e2a:	f000 f86b 	bl	8005f04 <BSP_SD_IsDetected>
 8005e2e:	4603      	mov	r3, r0
 8005e30:	2b01      	cmp	r3, #1
 8005e32:	d001      	beq.n	8005e38 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8005e34:	2302      	movs	r3, #2
 8005e36:	e005      	b.n	8005e44 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8005e38:	4804      	ldr	r0, [pc, #16]	; (8005e4c <BSP_SD_Init+0x2c>)
 8005e3a:	f7fd fa59 	bl	80032f0 <HAL_SD_Init>
 8005e3e:	4603      	mov	r3, r0
 8005e40:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 8005e42:	79fb      	ldrb	r3, [r7, #7]
}
 8005e44:	4618      	mov	r0, r3
 8005e46:	3708      	adds	r7, #8
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	bd80      	pop	{r7, pc}
 8005e4c:	200000d8 	.word	0x200000d8

08005e50 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b088      	sub	sp, #32
 8005e54:	af02      	add	r7, sp, #8
 8005e56:	60f8      	str	r0, [r7, #12]
 8005e58:	60b9      	str	r1, [r7, #8]
 8005e5a:	607a      	str	r2, [r7, #4]
 8005e5c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8005e5e:	2300      	movs	r3, #0
 8005e60:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	9300      	str	r3, [sp, #0]
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	68ba      	ldr	r2, [r7, #8]
 8005e6a:	68f9      	ldr	r1, [r7, #12]
 8005e6c:	4806      	ldr	r0, [pc, #24]	; (8005e88 <BSP_SD_ReadBlocks+0x38>)
 8005e6e:	f7fd faf5 	bl	800345c <HAL_SD_ReadBlocks>
 8005e72:	4603      	mov	r3, r0
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d001      	beq.n	8005e7c <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8005e78:	2301      	movs	r3, #1
 8005e7a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8005e7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e7e:	4618      	mov	r0, r3
 8005e80:	3718      	adds	r7, #24
 8005e82:	46bd      	mov	sp, r7
 8005e84:	bd80      	pop	{r7, pc}
 8005e86:	bf00      	nop
 8005e88:	200000d8 	.word	0x200000d8

08005e8c <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b088      	sub	sp, #32
 8005e90:	af02      	add	r7, sp, #8
 8005e92:	60f8      	str	r0, [r7, #12]
 8005e94:	60b9      	str	r1, [r7, #8]
 8005e96:	607a      	str	r2, [r7, #4]
 8005e98:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	9300      	str	r3, [sp, #0]
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	68ba      	ldr	r2, [r7, #8]
 8005ea6:	68f9      	ldr	r1, [r7, #12]
 8005ea8:	4806      	ldr	r0, [pc, #24]	; (8005ec4 <BSP_SD_WriteBlocks+0x38>)
 8005eaa:	f7fd fcb5 	bl	8003818 <HAL_SD_WriteBlocks>
 8005eae:	4603      	mov	r3, r0
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d001      	beq.n	8005eb8 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8005eb4:	2301      	movs	r3, #1
 8005eb6:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8005eb8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005eba:	4618      	mov	r0, r3
 8005ebc:	3718      	adds	r7, #24
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bd80      	pop	{r7, pc}
 8005ec2:	bf00      	nop
 8005ec4:	200000d8 	.word	0x200000d8

08005ec8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8005ecc:	4805      	ldr	r0, [pc, #20]	; (8005ee4 <BSP_SD_GetCardState+0x1c>)
 8005ece:	f7fd fff9 	bl	8003ec4 <HAL_SD_GetCardState>
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	2b04      	cmp	r3, #4
 8005ed6:	bf14      	ite	ne
 8005ed8:	2301      	movne	r3, #1
 8005eda:	2300      	moveq	r3, #0
 8005edc:	b2db      	uxtb	r3, r3
}
 8005ede:	4618      	mov	r0, r3
 8005ee0:	bd80      	pop	{r7, pc}
 8005ee2:	bf00      	nop
 8005ee4:	200000d8 	.word	0x200000d8

08005ee8 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b082      	sub	sp, #8
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8005ef0:	6879      	ldr	r1, [r7, #4]
 8005ef2:	4803      	ldr	r0, [pc, #12]	; (8005f00 <BSP_SD_GetCardInfo+0x18>)
 8005ef4:	f7fd ffba 	bl	8003e6c <HAL_SD_GetCardInfo>
}
 8005ef8:	bf00      	nop
 8005efa:	3708      	adds	r7, #8
 8005efc:	46bd      	mov	sp, r7
 8005efe:	bd80      	pop	{r7, pc}
 8005f00:	200000d8 	.word	0x200000d8

08005f04 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b082      	sub	sp, #8
 8005f08:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8005f0e:	f000 f80b 	bl	8005f28 <BSP_PlatformIsDetected>
 8005f12:	4603      	mov	r3, r0
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d101      	bne.n	8005f1c <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8005f18:	2300      	movs	r3, #0
 8005f1a:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8005f1c:	79fb      	ldrb	r3, [r7, #7]
 8005f1e:	b2db      	uxtb	r3, r3
}
 8005f20:	4618      	mov	r0, r3
 8005f22:	3708      	adds	r7, #8
 8005f24:	46bd      	mov	sp, r7
 8005f26:	bd80      	pop	{r7, pc}

08005f28 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b082      	sub	sp, #8
 8005f2c:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8005f2e:	2301      	movs	r3, #1
 8005f30:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8005f32:	2101      	movs	r1, #1
 8005f34:	4806      	ldr	r0, [pc, #24]	; (8005f50 <BSP_PlatformIsDetected+0x28>)
 8005f36:	f7fc f8ef 	bl	8002118 <HAL_GPIO_ReadPin>
 8005f3a:	4603      	mov	r3, r0
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d001      	beq.n	8005f44 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 8005f40:	2300      	movs	r3, #0
 8005f42:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8005f44:	79fb      	ldrb	r3, [r7, #7]
}
 8005f46:	4618      	mov	r0, r3
 8005f48:	3708      	adds	r7, #8
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bd80      	pop	{r7, pc}
 8005f4e:	bf00      	nop
 8005f50:	40020000 	.word	0x40020000

08005f54 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b082      	sub	sp, #8
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8005f5e:	4b0b      	ldr	r3, [pc, #44]	; (8005f8c <SD_CheckStatus+0x38>)
 8005f60:	2201      	movs	r2, #1
 8005f62:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8005f64:	f7ff ffb0 	bl	8005ec8 <BSP_SD_GetCardState>
 8005f68:	4603      	mov	r3, r0
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d107      	bne.n	8005f7e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8005f6e:	4b07      	ldr	r3, [pc, #28]	; (8005f8c <SD_CheckStatus+0x38>)
 8005f70:	781b      	ldrb	r3, [r3, #0]
 8005f72:	b2db      	uxtb	r3, r3
 8005f74:	f023 0301 	bic.w	r3, r3, #1
 8005f78:	b2da      	uxtb	r2, r3
 8005f7a:	4b04      	ldr	r3, [pc, #16]	; (8005f8c <SD_CheckStatus+0x38>)
 8005f7c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8005f7e:	4b03      	ldr	r3, [pc, #12]	; (8005f8c <SD_CheckStatus+0x38>)
 8005f80:	781b      	ldrb	r3, [r3, #0]
 8005f82:	b2db      	uxtb	r3, r3
}
 8005f84:	4618      	mov	r0, r3
 8005f86:	3708      	adds	r7, #8
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	bd80      	pop	{r7, pc}
 8005f8c:	2000009d 	.word	0x2000009d

08005f90 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b082      	sub	sp, #8
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	4603      	mov	r3, r0
 8005f98:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8005f9a:	4b0b      	ldr	r3, [pc, #44]	; (8005fc8 <SD_initialize+0x38>)
 8005f9c:	2201      	movs	r2, #1
 8005f9e:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8005fa0:	f7ff ff3e 	bl	8005e20 <BSP_SD_Init>
 8005fa4:	4603      	mov	r3, r0
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d107      	bne.n	8005fba <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8005faa:	79fb      	ldrb	r3, [r7, #7]
 8005fac:	4618      	mov	r0, r3
 8005fae:	f7ff ffd1 	bl	8005f54 <SD_CheckStatus>
 8005fb2:	4603      	mov	r3, r0
 8005fb4:	461a      	mov	r2, r3
 8005fb6:	4b04      	ldr	r3, [pc, #16]	; (8005fc8 <SD_initialize+0x38>)
 8005fb8:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8005fba:	4b03      	ldr	r3, [pc, #12]	; (8005fc8 <SD_initialize+0x38>)
 8005fbc:	781b      	ldrb	r3, [r3, #0]
 8005fbe:	b2db      	uxtb	r3, r3
}
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	3708      	adds	r7, #8
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	bd80      	pop	{r7, pc}
 8005fc8:	2000009d 	.word	0x2000009d

08005fcc <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b082      	sub	sp, #8
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8005fd6:	79fb      	ldrb	r3, [r7, #7]
 8005fd8:	4618      	mov	r0, r3
 8005fda:	f7ff ffbb 	bl	8005f54 <SD_CheckStatus>
 8005fde:	4603      	mov	r3, r0
}
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	3708      	adds	r7, #8
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	bd80      	pop	{r7, pc}

08005fe8 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b086      	sub	sp, #24
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	60b9      	str	r1, [r7, #8]
 8005ff0:	607a      	str	r2, [r7, #4]
 8005ff2:	603b      	str	r3, [r7, #0]
 8005ff4:	4603      	mov	r3, r0
 8005ff6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8005ffc:	f04f 33ff 	mov.w	r3, #4294967295
 8006000:	683a      	ldr	r2, [r7, #0]
 8006002:	6879      	ldr	r1, [r7, #4]
 8006004:	68b8      	ldr	r0, [r7, #8]
 8006006:	f7ff ff23 	bl	8005e50 <BSP_SD_ReadBlocks>
 800600a:	4603      	mov	r3, r0
 800600c:	2b00      	cmp	r3, #0
 800600e:	d107      	bne.n	8006020 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8006010:	bf00      	nop
 8006012:	f7ff ff59 	bl	8005ec8 <BSP_SD_GetCardState>
 8006016:	4603      	mov	r3, r0
 8006018:	2b00      	cmp	r3, #0
 800601a:	d1fa      	bne.n	8006012 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800601c:	2300      	movs	r3, #0
 800601e:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8006020:	7dfb      	ldrb	r3, [r7, #23]
}
 8006022:	4618      	mov	r0, r3
 8006024:	3718      	adds	r7, #24
 8006026:	46bd      	mov	sp, r7
 8006028:	bd80      	pop	{r7, pc}

0800602a <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800602a:	b580      	push	{r7, lr}
 800602c:	b086      	sub	sp, #24
 800602e:	af00      	add	r7, sp, #0
 8006030:	60b9      	str	r1, [r7, #8]
 8006032:	607a      	str	r2, [r7, #4]
 8006034:	603b      	str	r3, [r7, #0]
 8006036:	4603      	mov	r3, r0
 8006038:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800603a:	2301      	movs	r3, #1
 800603c:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800603e:	f04f 33ff 	mov.w	r3, #4294967295
 8006042:	683a      	ldr	r2, [r7, #0]
 8006044:	6879      	ldr	r1, [r7, #4]
 8006046:	68b8      	ldr	r0, [r7, #8]
 8006048:	f7ff ff20 	bl	8005e8c <BSP_SD_WriteBlocks>
 800604c:	4603      	mov	r3, r0
 800604e:	2b00      	cmp	r3, #0
 8006050:	d107      	bne.n	8006062 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8006052:	bf00      	nop
 8006054:	f7ff ff38 	bl	8005ec8 <BSP_SD_GetCardState>
 8006058:	4603      	mov	r3, r0
 800605a:	2b00      	cmp	r3, #0
 800605c:	d1fa      	bne.n	8006054 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800605e:	2300      	movs	r3, #0
 8006060:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8006062:	7dfb      	ldrb	r3, [r7, #23]
}
 8006064:	4618      	mov	r0, r3
 8006066:	3718      	adds	r7, #24
 8006068:	46bd      	mov	sp, r7
 800606a:	bd80      	pop	{r7, pc}

0800606c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b08c      	sub	sp, #48	; 0x30
 8006070:	af00      	add	r7, sp, #0
 8006072:	4603      	mov	r3, r0
 8006074:	603a      	str	r2, [r7, #0]
 8006076:	71fb      	strb	r3, [r7, #7]
 8006078:	460b      	mov	r3, r1
 800607a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800607c:	2301      	movs	r3, #1
 800607e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8006082:	4b25      	ldr	r3, [pc, #148]	; (8006118 <SD_ioctl+0xac>)
 8006084:	781b      	ldrb	r3, [r3, #0]
 8006086:	b2db      	uxtb	r3, r3
 8006088:	f003 0301 	and.w	r3, r3, #1
 800608c:	2b00      	cmp	r3, #0
 800608e:	d001      	beq.n	8006094 <SD_ioctl+0x28>
 8006090:	2303      	movs	r3, #3
 8006092:	e03c      	b.n	800610e <SD_ioctl+0xa2>

  switch (cmd)
 8006094:	79bb      	ldrb	r3, [r7, #6]
 8006096:	2b03      	cmp	r3, #3
 8006098:	d834      	bhi.n	8006104 <SD_ioctl+0x98>
 800609a:	a201      	add	r2, pc, #4	; (adr r2, 80060a0 <SD_ioctl+0x34>)
 800609c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060a0:	080060b1 	.word	0x080060b1
 80060a4:	080060b9 	.word	0x080060b9
 80060a8:	080060d1 	.word	0x080060d1
 80060ac:	080060eb 	.word	0x080060eb
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80060b0:	2300      	movs	r3, #0
 80060b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80060b6:	e028      	b.n	800610a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80060b8:	f107 030c 	add.w	r3, r7, #12
 80060bc:	4618      	mov	r0, r3
 80060be:	f7ff ff13 	bl	8005ee8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80060c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80060c8:	2300      	movs	r3, #0
 80060ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80060ce:	e01c      	b.n	800610a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80060d0:	f107 030c 	add.w	r3, r7, #12
 80060d4:	4618      	mov	r0, r3
 80060d6:	f7ff ff07 	bl	8005ee8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80060da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060dc:	b29a      	uxth	r2, r3
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80060e2:	2300      	movs	r3, #0
 80060e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80060e8:	e00f      	b.n	800610a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80060ea:	f107 030c 	add.w	r3, r7, #12
 80060ee:	4618      	mov	r0, r3
 80060f0:	f7ff fefa 	bl	8005ee8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80060f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060f6:	0a5a      	lsrs	r2, r3, #9
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80060fc:	2300      	movs	r3, #0
 80060fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8006102:	e002      	b.n	800610a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8006104:	2304      	movs	r3, #4
 8006106:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800610a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800610e:	4618      	mov	r0, r3
 8006110:	3730      	adds	r7, #48	; 0x30
 8006112:	46bd      	mov	sp, r7
 8006114:	bd80      	pop	{r7, pc}
 8006116:	bf00      	nop
 8006118:	2000009d 	.word	0x2000009d

0800611c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800611c:	b480      	push	{r7}
 800611e:	b087      	sub	sp, #28
 8006120:	af00      	add	r7, sp, #0
 8006122:	60f8      	str	r0, [r7, #12]
 8006124:	60b9      	str	r1, [r7, #8]
 8006126:	4613      	mov	r3, r2
 8006128:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800612a:	2301      	movs	r3, #1
 800612c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800612e:	2300      	movs	r3, #0
 8006130:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8006132:	4b1f      	ldr	r3, [pc, #124]	; (80061b0 <FATFS_LinkDriverEx+0x94>)
 8006134:	7a5b      	ldrb	r3, [r3, #9]
 8006136:	b2db      	uxtb	r3, r3
 8006138:	2b00      	cmp	r3, #0
 800613a:	d131      	bne.n	80061a0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800613c:	4b1c      	ldr	r3, [pc, #112]	; (80061b0 <FATFS_LinkDriverEx+0x94>)
 800613e:	7a5b      	ldrb	r3, [r3, #9]
 8006140:	b2db      	uxtb	r3, r3
 8006142:	461a      	mov	r2, r3
 8006144:	4b1a      	ldr	r3, [pc, #104]	; (80061b0 <FATFS_LinkDriverEx+0x94>)
 8006146:	2100      	movs	r1, #0
 8006148:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800614a:	4b19      	ldr	r3, [pc, #100]	; (80061b0 <FATFS_LinkDriverEx+0x94>)
 800614c:	7a5b      	ldrb	r3, [r3, #9]
 800614e:	b2db      	uxtb	r3, r3
 8006150:	4a17      	ldr	r2, [pc, #92]	; (80061b0 <FATFS_LinkDriverEx+0x94>)
 8006152:	009b      	lsls	r3, r3, #2
 8006154:	4413      	add	r3, r2
 8006156:	68fa      	ldr	r2, [r7, #12]
 8006158:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800615a:	4b15      	ldr	r3, [pc, #84]	; (80061b0 <FATFS_LinkDriverEx+0x94>)
 800615c:	7a5b      	ldrb	r3, [r3, #9]
 800615e:	b2db      	uxtb	r3, r3
 8006160:	461a      	mov	r2, r3
 8006162:	4b13      	ldr	r3, [pc, #76]	; (80061b0 <FATFS_LinkDriverEx+0x94>)
 8006164:	4413      	add	r3, r2
 8006166:	79fa      	ldrb	r2, [r7, #7]
 8006168:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800616a:	4b11      	ldr	r3, [pc, #68]	; (80061b0 <FATFS_LinkDriverEx+0x94>)
 800616c:	7a5b      	ldrb	r3, [r3, #9]
 800616e:	b2db      	uxtb	r3, r3
 8006170:	1c5a      	adds	r2, r3, #1
 8006172:	b2d1      	uxtb	r1, r2
 8006174:	4a0e      	ldr	r2, [pc, #56]	; (80061b0 <FATFS_LinkDriverEx+0x94>)
 8006176:	7251      	strb	r1, [r2, #9]
 8006178:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800617a:	7dbb      	ldrb	r3, [r7, #22]
 800617c:	3330      	adds	r3, #48	; 0x30
 800617e:	b2da      	uxtb	r2, r3
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	3301      	adds	r3, #1
 8006188:	223a      	movs	r2, #58	; 0x3a
 800618a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	3302      	adds	r3, #2
 8006190:	222f      	movs	r2, #47	; 0x2f
 8006192:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	3303      	adds	r3, #3
 8006198:	2200      	movs	r2, #0
 800619a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800619c:	2300      	movs	r3, #0
 800619e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80061a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80061a2:	4618      	mov	r0, r3
 80061a4:	371c      	adds	r7, #28
 80061a6:	46bd      	mov	sp, r7
 80061a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ac:	4770      	bx	lr
 80061ae:	bf00      	nop
 80061b0:	200000bc 	.word	0x200000bc

080061b4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b082      	sub	sp, #8
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
 80061bc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80061be:	2200      	movs	r2, #0
 80061c0:	6839      	ldr	r1, [r7, #0]
 80061c2:	6878      	ldr	r0, [r7, #4]
 80061c4:	f7ff ffaa 	bl	800611c <FATFS_LinkDriverEx>
 80061c8:	4603      	mov	r3, r0
}
 80061ca:	4618      	mov	r0, r3
 80061cc:	3708      	adds	r7, #8
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bd80      	pop	{r7, pc}
	...

080061d4 <__libc_init_array>:
 80061d4:	b570      	push	{r4, r5, r6, lr}
 80061d6:	4d0d      	ldr	r5, [pc, #52]	; (800620c <__libc_init_array+0x38>)
 80061d8:	4c0d      	ldr	r4, [pc, #52]	; (8006210 <__libc_init_array+0x3c>)
 80061da:	1b64      	subs	r4, r4, r5
 80061dc:	10a4      	asrs	r4, r4, #2
 80061de:	2600      	movs	r6, #0
 80061e0:	42a6      	cmp	r6, r4
 80061e2:	d109      	bne.n	80061f8 <__libc_init_array+0x24>
 80061e4:	4d0b      	ldr	r5, [pc, #44]	; (8006214 <__libc_init_array+0x40>)
 80061e6:	4c0c      	ldr	r4, [pc, #48]	; (8006218 <__libc_init_array+0x44>)
 80061e8:	f001 f858 	bl	800729c <_init>
 80061ec:	1b64      	subs	r4, r4, r5
 80061ee:	10a4      	asrs	r4, r4, #2
 80061f0:	2600      	movs	r6, #0
 80061f2:	42a6      	cmp	r6, r4
 80061f4:	d105      	bne.n	8006202 <__libc_init_array+0x2e>
 80061f6:	bd70      	pop	{r4, r5, r6, pc}
 80061f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80061fc:	4798      	blx	r3
 80061fe:	3601      	adds	r6, #1
 8006200:	e7ee      	b.n	80061e0 <__libc_init_array+0xc>
 8006202:	f855 3b04 	ldr.w	r3, [r5], #4
 8006206:	4798      	blx	r3
 8006208:	3601      	adds	r6, #1
 800620a:	e7f2      	b.n	80061f2 <__libc_init_array+0x1e>
 800620c:	080074c8 	.word	0x080074c8
 8006210:	080074c8 	.word	0x080074c8
 8006214:	080074c8 	.word	0x080074c8
 8006218:	080074cc 	.word	0x080074cc

0800621c <memset>:
 800621c:	4402      	add	r2, r0
 800621e:	4603      	mov	r3, r0
 8006220:	4293      	cmp	r3, r2
 8006222:	d100      	bne.n	8006226 <memset+0xa>
 8006224:	4770      	bx	lr
 8006226:	f803 1b01 	strb.w	r1, [r3], #1
 800622a:	e7f9      	b.n	8006220 <memset+0x4>
 800622c:	0000      	movs	r0, r0
	...

08006230 <sin>:
 8006230:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006232:	ec53 2b10 	vmov	r2, r3, d0
 8006236:	4826      	ldr	r0, [pc, #152]	; (80062d0 <sin+0xa0>)
 8006238:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800623c:	4281      	cmp	r1, r0
 800623e:	dc07      	bgt.n	8006250 <sin+0x20>
 8006240:	ed9f 1b21 	vldr	d1, [pc, #132]	; 80062c8 <sin+0x98>
 8006244:	2000      	movs	r0, #0
 8006246:	f000 fe5b 	bl	8006f00 <__kernel_sin>
 800624a:	ec51 0b10 	vmov	r0, r1, d0
 800624e:	e007      	b.n	8006260 <sin+0x30>
 8006250:	4820      	ldr	r0, [pc, #128]	; (80062d4 <sin+0xa4>)
 8006252:	4281      	cmp	r1, r0
 8006254:	dd09      	ble.n	800626a <sin+0x3a>
 8006256:	ee10 0a10 	vmov	r0, s0
 800625a:	4619      	mov	r1, r3
 800625c:	f7f9 ffd8 	bl	8000210 <__aeabi_dsub>
 8006260:	ec41 0b10 	vmov	d0, r0, r1
 8006264:	b005      	add	sp, #20
 8006266:	f85d fb04 	ldr.w	pc, [sp], #4
 800626a:	4668      	mov	r0, sp
 800626c:	f000 f834 	bl	80062d8 <__ieee754_rem_pio2>
 8006270:	f000 0003 	and.w	r0, r0, #3
 8006274:	2801      	cmp	r0, #1
 8006276:	d008      	beq.n	800628a <sin+0x5a>
 8006278:	2802      	cmp	r0, #2
 800627a:	d00d      	beq.n	8006298 <sin+0x68>
 800627c:	b9d0      	cbnz	r0, 80062b4 <sin+0x84>
 800627e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006282:	ed9d 0b00 	vldr	d0, [sp]
 8006286:	2001      	movs	r0, #1
 8006288:	e7dd      	b.n	8006246 <sin+0x16>
 800628a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800628e:	ed9d 0b00 	vldr	d0, [sp]
 8006292:	f000 fa2d 	bl	80066f0 <__kernel_cos>
 8006296:	e7d8      	b.n	800624a <sin+0x1a>
 8006298:	ed9d 1b02 	vldr	d1, [sp, #8]
 800629c:	ed9d 0b00 	vldr	d0, [sp]
 80062a0:	2001      	movs	r0, #1
 80062a2:	f000 fe2d 	bl	8006f00 <__kernel_sin>
 80062a6:	ec53 2b10 	vmov	r2, r3, d0
 80062aa:	ee10 0a10 	vmov	r0, s0
 80062ae:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80062b2:	e7d5      	b.n	8006260 <sin+0x30>
 80062b4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80062b8:	ed9d 0b00 	vldr	d0, [sp]
 80062bc:	f000 fa18 	bl	80066f0 <__kernel_cos>
 80062c0:	e7f1      	b.n	80062a6 <sin+0x76>
 80062c2:	bf00      	nop
 80062c4:	f3af 8000 	nop.w
	...
 80062d0:	3fe921fb 	.word	0x3fe921fb
 80062d4:	7fefffff 	.word	0x7fefffff

080062d8 <__ieee754_rem_pio2>:
 80062d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062dc:	ed2d 8b02 	vpush	{d8}
 80062e0:	ec55 4b10 	vmov	r4, r5, d0
 80062e4:	4bca      	ldr	r3, [pc, #808]	; (8006610 <__ieee754_rem_pio2+0x338>)
 80062e6:	b08b      	sub	sp, #44	; 0x2c
 80062e8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 80062ec:	4598      	cmp	r8, r3
 80062ee:	4682      	mov	sl, r0
 80062f0:	9502      	str	r5, [sp, #8]
 80062f2:	dc08      	bgt.n	8006306 <__ieee754_rem_pio2+0x2e>
 80062f4:	2200      	movs	r2, #0
 80062f6:	2300      	movs	r3, #0
 80062f8:	ed80 0b00 	vstr	d0, [r0]
 80062fc:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8006300:	f04f 0b00 	mov.w	fp, #0
 8006304:	e028      	b.n	8006358 <__ieee754_rem_pio2+0x80>
 8006306:	4bc3      	ldr	r3, [pc, #780]	; (8006614 <__ieee754_rem_pio2+0x33c>)
 8006308:	4598      	cmp	r8, r3
 800630a:	dc78      	bgt.n	80063fe <__ieee754_rem_pio2+0x126>
 800630c:	9b02      	ldr	r3, [sp, #8]
 800630e:	4ec2      	ldr	r6, [pc, #776]	; (8006618 <__ieee754_rem_pio2+0x340>)
 8006310:	2b00      	cmp	r3, #0
 8006312:	ee10 0a10 	vmov	r0, s0
 8006316:	a3b0      	add	r3, pc, #704	; (adr r3, 80065d8 <__ieee754_rem_pio2+0x300>)
 8006318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800631c:	4629      	mov	r1, r5
 800631e:	dd39      	ble.n	8006394 <__ieee754_rem_pio2+0xbc>
 8006320:	f7f9 ff76 	bl	8000210 <__aeabi_dsub>
 8006324:	45b0      	cmp	r8, r6
 8006326:	4604      	mov	r4, r0
 8006328:	460d      	mov	r5, r1
 800632a:	d01b      	beq.n	8006364 <__ieee754_rem_pio2+0x8c>
 800632c:	a3ac      	add	r3, pc, #688	; (adr r3, 80065e0 <__ieee754_rem_pio2+0x308>)
 800632e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006332:	f7f9 ff6d 	bl	8000210 <__aeabi_dsub>
 8006336:	4602      	mov	r2, r0
 8006338:	460b      	mov	r3, r1
 800633a:	e9ca 2300 	strd	r2, r3, [sl]
 800633e:	4620      	mov	r0, r4
 8006340:	4629      	mov	r1, r5
 8006342:	f7f9 ff65 	bl	8000210 <__aeabi_dsub>
 8006346:	a3a6      	add	r3, pc, #664	; (adr r3, 80065e0 <__ieee754_rem_pio2+0x308>)
 8006348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800634c:	f7f9 ff60 	bl	8000210 <__aeabi_dsub>
 8006350:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006354:	f04f 0b01 	mov.w	fp, #1
 8006358:	4658      	mov	r0, fp
 800635a:	b00b      	add	sp, #44	; 0x2c
 800635c:	ecbd 8b02 	vpop	{d8}
 8006360:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006364:	a3a0      	add	r3, pc, #640	; (adr r3, 80065e8 <__ieee754_rem_pio2+0x310>)
 8006366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800636a:	f7f9 ff51 	bl	8000210 <__aeabi_dsub>
 800636e:	a3a0      	add	r3, pc, #640	; (adr r3, 80065f0 <__ieee754_rem_pio2+0x318>)
 8006370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006374:	4604      	mov	r4, r0
 8006376:	460d      	mov	r5, r1
 8006378:	f7f9 ff4a 	bl	8000210 <__aeabi_dsub>
 800637c:	4602      	mov	r2, r0
 800637e:	460b      	mov	r3, r1
 8006380:	e9ca 2300 	strd	r2, r3, [sl]
 8006384:	4620      	mov	r0, r4
 8006386:	4629      	mov	r1, r5
 8006388:	f7f9 ff42 	bl	8000210 <__aeabi_dsub>
 800638c:	a398      	add	r3, pc, #608	; (adr r3, 80065f0 <__ieee754_rem_pio2+0x318>)
 800638e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006392:	e7db      	b.n	800634c <__ieee754_rem_pio2+0x74>
 8006394:	f7f9 ff3e 	bl	8000214 <__adddf3>
 8006398:	45b0      	cmp	r8, r6
 800639a:	4604      	mov	r4, r0
 800639c:	460d      	mov	r5, r1
 800639e:	d016      	beq.n	80063ce <__ieee754_rem_pio2+0xf6>
 80063a0:	a38f      	add	r3, pc, #572	; (adr r3, 80065e0 <__ieee754_rem_pio2+0x308>)
 80063a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063a6:	f7f9 ff35 	bl	8000214 <__adddf3>
 80063aa:	4602      	mov	r2, r0
 80063ac:	460b      	mov	r3, r1
 80063ae:	e9ca 2300 	strd	r2, r3, [sl]
 80063b2:	4620      	mov	r0, r4
 80063b4:	4629      	mov	r1, r5
 80063b6:	f7f9 ff2b 	bl	8000210 <__aeabi_dsub>
 80063ba:	a389      	add	r3, pc, #548	; (adr r3, 80065e0 <__ieee754_rem_pio2+0x308>)
 80063bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063c0:	f7f9 ff28 	bl	8000214 <__adddf3>
 80063c4:	f04f 3bff 	mov.w	fp, #4294967295
 80063c8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80063cc:	e7c4      	b.n	8006358 <__ieee754_rem_pio2+0x80>
 80063ce:	a386      	add	r3, pc, #536	; (adr r3, 80065e8 <__ieee754_rem_pio2+0x310>)
 80063d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063d4:	f7f9 ff1e 	bl	8000214 <__adddf3>
 80063d8:	a385      	add	r3, pc, #532	; (adr r3, 80065f0 <__ieee754_rem_pio2+0x318>)
 80063da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063de:	4604      	mov	r4, r0
 80063e0:	460d      	mov	r5, r1
 80063e2:	f7f9 ff17 	bl	8000214 <__adddf3>
 80063e6:	4602      	mov	r2, r0
 80063e8:	460b      	mov	r3, r1
 80063ea:	e9ca 2300 	strd	r2, r3, [sl]
 80063ee:	4620      	mov	r0, r4
 80063f0:	4629      	mov	r1, r5
 80063f2:	f7f9 ff0d 	bl	8000210 <__aeabi_dsub>
 80063f6:	a37e      	add	r3, pc, #504	; (adr r3, 80065f0 <__ieee754_rem_pio2+0x318>)
 80063f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063fc:	e7e0      	b.n	80063c0 <__ieee754_rem_pio2+0xe8>
 80063fe:	4b87      	ldr	r3, [pc, #540]	; (800661c <__ieee754_rem_pio2+0x344>)
 8006400:	4598      	cmp	r8, r3
 8006402:	f300 80d9 	bgt.w	80065b8 <__ieee754_rem_pio2+0x2e0>
 8006406:	f000 fe39 	bl	800707c <fabs>
 800640a:	ec55 4b10 	vmov	r4, r5, d0
 800640e:	ee10 0a10 	vmov	r0, s0
 8006412:	a379      	add	r3, pc, #484	; (adr r3, 80065f8 <__ieee754_rem_pio2+0x320>)
 8006414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006418:	4629      	mov	r1, r5
 800641a:	f7fa f8b1 	bl	8000580 <__aeabi_dmul>
 800641e:	4b80      	ldr	r3, [pc, #512]	; (8006620 <__ieee754_rem_pio2+0x348>)
 8006420:	2200      	movs	r2, #0
 8006422:	f7f9 fef7 	bl	8000214 <__adddf3>
 8006426:	f7fa fb45 	bl	8000ab4 <__aeabi_d2iz>
 800642a:	4683      	mov	fp, r0
 800642c:	f7fa f83e 	bl	80004ac <__aeabi_i2d>
 8006430:	4602      	mov	r2, r0
 8006432:	460b      	mov	r3, r1
 8006434:	ec43 2b18 	vmov	d8, r2, r3
 8006438:	a367      	add	r3, pc, #412	; (adr r3, 80065d8 <__ieee754_rem_pio2+0x300>)
 800643a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800643e:	f7fa f89f 	bl	8000580 <__aeabi_dmul>
 8006442:	4602      	mov	r2, r0
 8006444:	460b      	mov	r3, r1
 8006446:	4620      	mov	r0, r4
 8006448:	4629      	mov	r1, r5
 800644a:	f7f9 fee1 	bl	8000210 <__aeabi_dsub>
 800644e:	a364      	add	r3, pc, #400	; (adr r3, 80065e0 <__ieee754_rem_pio2+0x308>)
 8006450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006454:	4606      	mov	r6, r0
 8006456:	460f      	mov	r7, r1
 8006458:	ec51 0b18 	vmov	r0, r1, d8
 800645c:	f7fa f890 	bl	8000580 <__aeabi_dmul>
 8006460:	f1bb 0f1f 	cmp.w	fp, #31
 8006464:	4604      	mov	r4, r0
 8006466:	460d      	mov	r5, r1
 8006468:	dc0d      	bgt.n	8006486 <__ieee754_rem_pio2+0x1ae>
 800646a:	4b6e      	ldr	r3, [pc, #440]	; (8006624 <__ieee754_rem_pio2+0x34c>)
 800646c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8006470:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006474:	4543      	cmp	r3, r8
 8006476:	d006      	beq.n	8006486 <__ieee754_rem_pio2+0x1ae>
 8006478:	4622      	mov	r2, r4
 800647a:	462b      	mov	r3, r5
 800647c:	4630      	mov	r0, r6
 800647e:	4639      	mov	r1, r7
 8006480:	f7f9 fec6 	bl	8000210 <__aeabi_dsub>
 8006484:	e00f      	b.n	80064a6 <__ieee754_rem_pio2+0x1ce>
 8006486:	462b      	mov	r3, r5
 8006488:	4622      	mov	r2, r4
 800648a:	4630      	mov	r0, r6
 800648c:	4639      	mov	r1, r7
 800648e:	f7f9 febf 	bl	8000210 <__aeabi_dsub>
 8006492:	ea4f 5328 	mov.w	r3, r8, asr #20
 8006496:	9303      	str	r3, [sp, #12]
 8006498:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800649c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 80064a0:	f1b8 0f10 	cmp.w	r8, #16
 80064a4:	dc02      	bgt.n	80064ac <__ieee754_rem_pio2+0x1d4>
 80064a6:	e9ca 0100 	strd	r0, r1, [sl]
 80064aa:	e039      	b.n	8006520 <__ieee754_rem_pio2+0x248>
 80064ac:	a34e      	add	r3, pc, #312	; (adr r3, 80065e8 <__ieee754_rem_pio2+0x310>)
 80064ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064b2:	ec51 0b18 	vmov	r0, r1, d8
 80064b6:	f7fa f863 	bl	8000580 <__aeabi_dmul>
 80064ba:	4604      	mov	r4, r0
 80064bc:	460d      	mov	r5, r1
 80064be:	4602      	mov	r2, r0
 80064c0:	460b      	mov	r3, r1
 80064c2:	4630      	mov	r0, r6
 80064c4:	4639      	mov	r1, r7
 80064c6:	f7f9 fea3 	bl	8000210 <__aeabi_dsub>
 80064ca:	4602      	mov	r2, r0
 80064cc:	460b      	mov	r3, r1
 80064ce:	4680      	mov	r8, r0
 80064d0:	4689      	mov	r9, r1
 80064d2:	4630      	mov	r0, r6
 80064d4:	4639      	mov	r1, r7
 80064d6:	f7f9 fe9b 	bl	8000210 <__aeabi_dsub>
 80064da:	4622      	mov	r2, r4
 80064dc:	462b      	mov	r3, r5
 80064de:	f7f9 fe97 	bl	8000210 <__aeabi_dsub>
 80064e2:	a343      	add	r3, pc, #268	; (adr r3, 80065f0 <__ieee754_rem_pio2+0x318>)
 80064e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064e8:	4604      	mov	r4, r0
 80064ea:	460d      	mov	r5, r1
 80064ec:	ec51 0b18 	vmov	r0, r1, d8
 80064f0:	f7fa f846 	bl	8000580 <__aeabi_dmul>
 80064f4:	4622      	mov	r2, r4
 80064f6:	462b      	mov	r3, r5
 80064f8:	f7f9 fe8a 	bl	8000210 <__aeabi_dsub>
 80064fc:	4602      	mov	r2, r0
 80064fe:	460b      	mov	r3, r1
 8006500:	4604      	mov	r4, r0
 8006502:	460d      	mov	r5, r1
 8006504:	4640      	mov	r0, r8
 8006506:	4649      	mov	r1, r9
 8006508:	f7f9 fe82 	bl	8000210 <__aeabi_dsub>
 800650c:	9a03      	ldr	r2, [sp, #12]
 800650e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006512:	1ad3      	subs	r3, r2, r3
 8006514:	2b31      	cmp	r3, #49	; 0x31
 8006516:	dc24      	bgt.n	8006562 <__ieee754_rem_pio2+0x28a>
 8006518:	e9ca 0100 	strd	r0, r1, [sl]
 800651c:	4646      	mov	r6, r8
 800651e:	464f      	mov	r7, r9
 8006520:	e9da 8900 	ldrd	r8, r9, [sl]
 8006524:	4630      	mov	r0, r6
 8006526:	4642      	mov	r2, r8
 8006528:	464b      	mov	r3, r9
 800652a:	4639      	mov	r1, r7
 800652c:	f7f9 fe70 	bl	8000210 <__aeabi_dsub>
 8006530:	462b      	mov	r3, r5
 8006532:	4622      	mov	r2, r4
 8006534:	f7f9 fe6c 	bl	8000210 <__aeabi_dsub>
 8006538:	9b02      	ldr	r3, [sp, #8]
 800653a:	2b00      	cmp	r3, #0
 800653c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006540:	f6bf af0a 	bge.w	8006358 <__ieee754_rem_pio2+0x80>
 8006544:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006548:	f8ca 3004 	str.w	r3, [sl, #4]
 800654c:	f8ca 8000 	str.w	r8, [sl]
 8006550:	f8ca 0008 	str.w	r0, [sl, #8]
 8006554:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006558:	f8ca 300c 	str.w	r3, [sl, #12]
 800655c:	f1cb 0b00 	rsb	fp, fp, #0
 8006560:	e6fa      	b.n	8006358 <__ieee754_rem_pio2+0x80>
 8006562:	a327      	add	r3, pc, #156	; (adr r3, 8006600 <__ieee754_rem_pio2+0x328>)
 8006564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006568:	ec51 0b18 	vmov	r0, r1, d8
 800656c:	f7fa f808 	bl	8000580 <__aeabi_dmul>
 8006570:	4604      	mov	r4, r0
 8006572:	460d      	mov	r5, r1
 8006574:	4602      	mov	r2, r0
 8006576:	460b      	mov	r3, r1
 8006578:	4640      	mov	r0, r8
 800657a:	4649      	mov	r1, r9
 800657c:	f7f9 fe48 	bl	8000210 <__aeabi_dsub>
 8006580:	4602      	mov	r2, r0
 8006582:	460b      	mov	r3, r1
 8006584:	4606      	mov	r6, r0
 8006586:	460f      	mov	r7, r1
 8006588:	4640      	mov	r0, r8
 800658a:	4649      	mov	r1, r9
 800658c:	f7f9 fe40 	bl	8000210 <__aeabi_dsub>
 8006590:	4622      	mov	r2, r4
 8006592:	462b      	mov	r3, r5
 8006594:	f7f9 fe3c 	bl	8000210 <__aeabi_dsub>
 8006598:	a31b      	add	r3, pc, #108	; (adr r3, 8006608 <__ieee754_rem_pio2+0x330>)
 800659a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800659e:	4604      	mov	r4, r0
 80065a0:	460d      	mov	r5, r1
 80065a2:	ec51 0b18 	vmov	r0, r1, d8
 80065a6:	f7f9 ffeb 	bl	8000580 <__aeabi_dmul>
 80065aa:	4622      	mov	r2, r4
 80065ac:	462b      	mov	r3, r5
 80065ae:	f7f9 fe2f 	bl	8000210 <__aeabi_dsub>
 80065b2:	4604      	mov	r4, r0
 80065b4:	460d      	mov	r5, r1
 80065b6:	e75f      	b.n	8006478 <__ieee754_rem_pio2+0x1a0>
 80065b8:	4b1b      	ldr	r3, [pc, #108]	; (8006628 <__ieee754_rem_pio2+0x350>)
 80065ba:	4598      	cmp	r8, r3
 80065bc:	dd36      	ble.n	800662c <__ieee754_rem_pio2+0x354>
 80065be:	ee10 2a10 	vmov	r2, s0
 80065c2:	462b      	mov	r3, r5
 80065c4:	4620      	mov	r0, r4
 80065c6:	4629      	mov	r1, r5
 80065c8:	f7f9 fe22 	bl	8000210 <__aeabi_dsub>
 80065cc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80065d0:	e9ca 0100 	strd	r0, r1, [sl]
 80065d4:	e694      	b.n	8006300 <__ieee754_rem_pio2+0x28>
 80065d6:	bf00      	nop
 80065d8:	54400000 	.word	0x54400000
 80065dc:	3ff921fb 	.word	0x3ff921fb
 80065e0:	1a626331 	.word	0x1a626331
 80065e4:	3dd0b461 	.word	0x3dd0b461
 80065e8:	1a600000 	.word	0x1a600000
 80065ec:	3dd0b461 	.word	0x3dd0b461
 80065f0:	2e037073 	.word	0x2e037073
 80065f4:	3ba3198a 	.word	0x3ba3198a
 80065f8:	6dc9c883 	.word	0x6dc9c883
 80065fc:	3fe45f30 	.word	0x3fe45f30
 8006600:	2e000000 	.word	0x2e000000
 8006604:	3ba3198a 	.word	0x3ba3198a
 8006608:	252049c1 	.word	0x252049c1
 800660c:	397b839a 	.word	0x397b839a
 8006610:	3fe921fb 	.word	0x3fe921fb
 8006614:	4002d97b 	.word	0x4002d97b
 8006618:	3ff921fb 	.word	0x3ff921fb
 800661c:	413921fb 	.word	0x413921fb
 8006620:	3fe00000 	.word	0x3fe00000
 8006624:	080072e4 	.word	0x080072e4
 8006628:	7fefffff 	.word	0x7fefffff
 800662c:	ea4f 5428 	mov.w	r4, r8, asr #20
 8006630:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8006634:	ee10 0a10 	vmov	r0, s0
 8006638:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800663c:	ee10 6a10 	vmov	r6, s0
 8006640:	460f      	mov	r7, r1
 8006642:	f7fa fa37 	bl	8000ab4 <__aeabi_d2iz>
 8006646:	f7f9 ff31 	bl	80004ac <__aeabi_i2d>
 800664a:	4602      	mov	r2, r0
 800664c:	460b      	mov	r3, r1
 800664e:	4630      	mov	r0, r6
 8006650:	4639      	mov	r1, r7
 8006652:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006656:	f7f9 fddb 	bl	8000210 <__aeabi_dsub>
 800665a:	4b22      	ldr	r3, [pc, #136]	; (80066e4 <__ieee754_rem_pio2+0x40c>)
 800665c:	2200      	movs	r2, #0
 800665e:	f7f9 ff8f 	bl	8000580 <__aeabi_dmul>
 8006662:	460f      	mov	r7, r1
 8006664:	4606      	mov	r6, r0
 8006666:	f7fa fa25 	bl	8000ab4 <__aeabi_d2iz>
 800666a:	f7f9 ff1f 	bl	80004ac <__aeabi_i2d>
 800666e:	4602      	mov	r2, r0
 8006670:	460b      	mov	r3, r1
 8006672:	4630      	mov	r0, r6
 8006674:	4639      	mov	r1, r7
 8006676:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800667a:	f7f9 fdc9 	bl	8000210 <__aeabi_dsub>
 800667e:	4b19      	ldr	r3, [pc, #100]	; (80066e4 <__ieee754_rem_pio2+0x40c>)
 8006680:	2200      	movs	r2, #0
 8006682:	f7f9 ff7d 	bl	8000580 <__aeabi_dmul>
 8006686:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800668a:	ad04      	add	r5, sp, #16
 800668c:	f04f 0803 	mov.w	r8, #3
 8006690:	46a9      	mov	r9, r5
 8006692:	2600      	movs	r6, #0
 8006694:	2700      	movs	r7, #0
 8006696:	4632      	mov	r2, r6
 8006698:	463b      	mov	r3, r7
 800669a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800669e:	46c3      	mov	fp, r8
 80066a0:	3d08      	subs	r5, #8
 80066a2:	f108 38ff 	add.w	r8, r8, #4294967295
 80066a6:	f7fa f9d3 	bl	8000a50 <__aeabi_dcmpeq>
 80066aa:	2800      	cmp	r0, #0
 80066ac:	d1f3      	bne.n	8006696 <__ieee754_rem_pio2+0x3be>
 80066ae:	4b0e      	ldr	r3, [pc, #56]	; (80066e8 <__ieee754_rem_pio2+0x410>)
 80066b0:	9301      	str	r3, [sp, #4]
 80066b2:	2302      	movs	r3, #2
 80066b4:	9300      	str	r3, [sp, #0]
 80066b6:	4622      	mov	r2, r4
 80066b8:	465b      	mov	r3, fp
 80066ba:	4651      	mov	r1, sl
 80066bc:	4648      	mov	r0, r9
 80066be:	f000 f8df 	bl	8006880 <__kernel_rem_pio2>
 80066c2:	9b02      	ldr	r3, [sp, #8]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	4683      	mov	fp, r0
 80066c8:	f6bf ae46 	bge.w	8006358 <__ieee754_rem_pio2+0x80>
 80066cc:	f8da 3004 	ldr.w	r3, [sl, #4]
 80066d0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80066d4:	f8ca 3004 	str.w	r3, [sl, #4]
 80066d8:	f8da 300c 	ldr.w	r3, [sl, #12]
 80066dc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80066e0:	e73a      	b.n	8006558 <__ieee754_rem_pio2+0x280>
 80066e2:	bf00      	nop
 80066e4:	41700000 	.word	0x41700000
 80066e8:	08007364 	.word	0x08007364
 80066ec:	00000000 	.word	0x00000000

080066f0 <__kernel_cos>:
 80066f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066f4:	ec57 6b10 	vmov	r6, r7, d0
 80066f8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80066fc:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8006700:	ed8d 1b00 	vstr	d1, [sp]
 8006704:	da07      	bge.n	8006716 <__kernel_cos+0x26>
 8006706:	ee10 0a10 	vmov	r0, s0
 800670a:	4639      	mov	r1, r7
 800670c:	f7fa f9d2 	bl	8000ab4 <__aeabi_d2iz>
 8006710:	2800      	cmp	r0, #0
 8006712:	f000 8088 	beq.w	8006826 <__kernel_cos+0x136>
 8006716:	4632      	mov	r2, r6
 8006718:	463b      	mov	r3, r7
 800671a:	4630      	mov	r0, r6
 800671c:	4639      	mov	r1, r7
 800671e:	f7f9 ff2f 	bl	8000580 <__aeabi_dmul>
 8006722:	4b51      	ldr	r3, [pc, #324]	; (8006868 <__kernel_cos+0x178>)
 8006724:	2200      	movs	r2, #0
 8006726:	4604      	mov	r4, r0
 8006728:	460d      	mov	r5, r1
 800672a:	f7f9 ff29 	bl	8000580 <__aeabi_dmul>
 800672e:	a340      	add	r3, pc, #256	; (adr r3, 8006830 <__kernel_cos+0x140>)
 8006730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006734:	4682      	mov	sl, r0
 8006736:	468b      	mov	fp, r1
 8006738:	4620      	mov	r0, r4
 800673a:	4629      	mov	r1, r5
 800673c:	f7f9 ff20 	bl	8000580 <__aeabi_dmul>
 8006740:	a33d      	add	r3, pc, #244	; (adr r3, 8006838 <__kernel_cos+0x148>)
 8006742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006746:	f7f9 fd65 	bl	8000214 <__adddf3>
 800674a:	4622      	mov	r2, r4
 800674c:	462b      	mov	r3, r5
 800674e:	f7f9 ff17 	bl	8000580 <__aeabi_dmul>
 8006752:	a33b      	add	r3, pc, #236	; (adr r3, 8006840 <__kernel_cos+0x150>)
 8006754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006758:	f7f9 fd5a 	bl	8000210 <__aeabi_dsub>
 800675c:	4622      	mov	r2, r4
 800675e:	462b      	mov	r3, r5
 8006760:	f7f9 ff0e 	bl	8000580 <__aeabi_dmul>
 8006764:	a338      	add	r3, pc, #224	; (adr r3, 8006848 <__kernel_cos+0x158>)
 8006766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800676a:	f7f9 fd53 	bl	8000214 <__adddf3>
 800676e:	4622      	mov	r2, r4
 8006770:	462b      	mov	r3, r5
 8006772:	f7f9 ff05 	bl	8000580 <__aeabi_dmul>
 8006776:	a336      	add	r3, pc, #216	; (adr r3, 8006850 <__kernel_cos+0x160>)
 8006778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800677c:	f7f9 fd48 	bl	8000210 <__aeabi_dsub>
 8006780:	4622      	mov	r2, r4
 8006782:	462b      	mov	r3, r5
 8006784:	f7f9 fefc 	bl	8000580 <__aeabi_dmul>
 8006788:	a333      	add	r3, pc, #204	; (adr r3, 8006858 <__kernel_cos+0x168>)
 800678a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800678e:	f7f9 fd41 	bl	8000214 <__adddf3>
 8006792:	4622      	mov	r2, r4
 8006794:	462b      	mov	r3, r5
 8006796:	f7f9 fef3 	bl	8000580 <__aeabi_dmul>
 800679a:	4622      	mov	r2, r4
 800679c:	462b      	mov	r3, r5
 800679e:	f7f9 feef 	bl	8000580 <__aeabi_dmul>
 80067a2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80067a6:	4604      	mov	r4, r0
 80067a8:	460d      	mov	r5, r1
 80067aa:	4630      	mov	r0, r6
 80067ac:	4639      	mov	r1, r7
 80067ae:	f7f9 fee7 	bl	8000580 <__aeabi_dmul>
 80067b2:	460b      	mov	r3, r1
 80067b4:	4602      	mov	r2, r0
 80067b6:	4629      	mov	r1, r5
 80067b8:	4620      	mov	r0, r4
 80067ba:	f7f9 fd29 	bl	8000210 <__aeabi_dsub>
 80067be:	4b2b      	ldr	r3, [pc, #172]	; (800686c <__kernel_cos+0x17c>)
 80067c0:	4598      	cmp	r8, r3
 80067c2:	4606      	mov	r6, r0
 80067c4:	460f      	mov	r7, r1
 80067c6:	dc10      	bgt.n	80067ea <__kernel_cos+0xfa>
 80067c8:	4602      	mov	r2, r0
 80067ca:	460b      	mov	r3, r1
 80067cc:	4650      	mov	r0, sl
 80067ce:	4659      	mov	r1, fp
 80067d0:	f7f9 fd1e 	bl	8000210 <__aeabi_dsub>
 80067d4:	460b      	mov	r3, r1
 80067d6:	4926      	ldr	r1, [pc, #152]	; (8006870 <__kernel_cos+0x180>)
 80067d8:	4602      	mov	r2, r0
 80067da:	2000      	movs	r0, #0
 80067dc:	f7f9 fd18 	bl	8000210 <__aeabi_dsub>
 80067e0:	ec41 0b10 	vmov	d0, r0, r1
 80067e4:	b003      	add	sp, #12
 80067e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067ea:	4b22      	ldr	r3, [pc, #136]	; (8006874 <__kernel_cos+0x184>)
 80067ec:	4920      	ldr	r1, [pc, #128]	; (8006870 <__kernel_cos+0x180>)
 80067ee:	4598      	cmp	r8, r3
 80067f0:	bfcc      	ite	gt
 80067f2:	4d21      	ldrgt	r5, [pc, #132]	; (8006878 <__kernel_cos+0x188>)
 80067f4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 80067f8:	2400      	movs	r4, #0
 80067fa:	4622      	mov	r2, r4
 80067fc:	462b      	mov	r3, r5
 80067fe:	2000      	movs	r0, #0
 8006800:	f7f9 fd06 	bl	8000210 <__aeabi_dsub>
 8006804:	4622      	mov	r2, r4
 8006806:	4680      	mov	r8, r0
 8006808:	4689      	mov	r9, r1
 800680a:	462b      	mov	r3, r5
 800680c:	4650      	mov	r0, sl
 800680e:	4659      	mov	r1, fp
 8006810:	f7f9 fcfe 	bl	8000210 <__aeabi_dsub>
 8006814:	4632      	mov	r2, r6
 8006816:	463b      	mov	r3, r7
 8006818:	f7f9 fcfa 	bl	8000210 <__aeabi_dsub>
 800681c:	4602      	mov	r2, r0
 800681e:	460b      	mov	r3, r1
 8006820:	4640      	mov	r0, r8
 8006822:	4649      	mov	r1, r9
 8006824:	e7da      	b.n	80067dc <__kernel_cos+0xec>
 8006826:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8006860 <__kernel_cos+0x170>
 800682a:	e7db      	b.n	80067e4 <__kernel_cos+0xf4>
 800682c:	f3af 8000 	nop.w
 8006830:	be8838d4 	.word	0xbe8838d4
 8006834:	bda8fae9 	.word	0xbda8fae9
 8006838:	bdb4b1c4 	.word	0xbdb4b1c4
 800683c:	3e21ee9e 	.word	0x3e21ee9e
 8006840:	809c52ad 	.word	0x809c52ad
 8006844:	3e927e4f 	.word	0x3e927e4f
 8006848:	19cb1590 	.word	0x19cb1590
 800684c:	3efa01a0 	.word	0x3efa01a0
 8006850:	16c15177 	.word	0x16c15177
 8006854:	3f56c16c 	.word	0x3f56c16c
 8006858:	5555554c 	.word	0x5555554c
 800685c:	3fa55555 	.word	0x3fa55555
 8006860:	00000000 	.word	0x00000000
 8006864:	3ff00000 	.word	0x3ff00000
 8006868:	3fe00000 	.word	0x3fe00000
 800686c:	3fd33332 	.word	0x3fd33332
 8006870:	3ff00000 	.word	0x3ff00000
 8006874:	3fe90000 	.word	0x3fe90000
 8006878:	3fd20000 	.word	0x3fd20000
 800687c:	00000000 	.word	0x00000000

08006880 <__kernel_rem_pio2>:
 8006880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006884:	ed2d 8b02 	vpush	{d8}
 8006888:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800688c:	f112 0f14 	cmn.w	r2, #20
 8006890:	9308      	str	r3, [sp, #32]
 8006892:	9101      	str	r1, [sp, #4]
 8006894:	4bc6      	ldr	r3, [pc, #792]	; (8006bb0 <__kernel_rem_pio2+0x330>)
 8006896:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8006898:	9009      	str	r0, [sp, #36]	; 0x24
 800689a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800689e:	9304      	str	r3, [sp, #16]
 80068a0:	9b08      	ldr	r3, [sp, #32]
 80068a2:	f103 33ff 	add.w	r3, r3, #4294967295
 80068a6:	bfa8      	it	ge
 80068a8:	1ed4      	subge	r4, r2, #3
 80068aa:	9306      	str	r3, [sp, #24]
 80068ac:	bfb2      	itee	lt
 80068ae:	2400      	movlt	r4, #0
 80068b0:	2318      	movge	r3, #24
 80068b2:	fb94 f4f3 	sdivge	r4, r4, r3
 80068b6:	f06f 0317 	mvn.w	r3, #23
 80068ba:	fb04 3303 	mla	r3, r4, r3, r3
 80068be:	eb03 0a02 	add.w	sl, r3, r2
 80068c2:	9b04      	ldr	r3, [sp, #16]
 80068c4:	9a06      	ldr	r2, [sp, #24]
 80068c6:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8006ba0 <__kernel_rem_pio2+0x320>
 80068ca:	eb03 0802 	add.w	r8, r3, r2
 80068ce:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80068d0:	1aa7      	subs	r7, r4, r2
 80068d2:	ae20      	add	r6, sp, #128	; 0x80
 80068d4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80068d8:	2500      	movs	r5, #0
 80068da:	4545      	cmp	r5, r8
 80068dc:	dd18      	ble.n	8006910 <__kernel_rem_pio2+0x90>
 80068de:	9b08      	ldr	r3, [sp, #32]
 80068e0:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80068e4:	aa20      	add	r2, sp, #128	; 0x80
 80068e6:	ed9f 8bae 	vldr	d8, [pc, #696]	; 8006ba0 <__kernel_rem_pio2+0x320>
 80068ea:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80068ee:	f1c3 0301 	rsb	r3, r3, #1
 80068f2:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 80068f6:	9307      	str	r3, [sp, #28]
 80068f8:	9b07      	ldr	r3, [sp, #28]
 80068fa:	9a04      	ldr	r2, [sp, #16]
 80068fc:	4443      	add	r3, r8
 80068fe:	429a      	cmp	r2, r3
 8006900:	db2f      	blt.n	8006962 <__kernel_rem_pio2+0xe2>
 8006902:	ed8d 8b02 	vstr	d8, [sp, #8]
 8006906:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800690a:	462f      	mov	r7, r5
 800690c:	2600      	movs	r6, #0
 800690e:	e01b      	b.n	8006948 <__kernel_rem_pio2+0xc8>
 8006910:	42ef      	cmn	r7, r5
 8006912:	d407      	bmi.n	8006924 <__kernel_rem_pio2+0xa4>
 8006914:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8006918:	f7f9 fdc8 	bl	80004ac <__aeabi_i2d>
 800691c:	e8e6 0102 	strd	r0, r1, [r6], #8
 8006920:	3501      	adds	r5, #1
 8006922:	e7da      	b.n	80068da <__kernel_rem_pio2+0x5a>
 8006924:	ec51 0b18 	vmov	r0, r1, d8
 8006928:	e7f8      	b.n	800691c <__kernel_rem_pio2+0x9c>
 800692a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800692e:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8006932:	f7f9 fe25 	bl	8000580 <__aeabi_dmul>
 8006936:	4602      	mov	r2, r0
 8006938:	460b      	mov	r3, r1
 800693a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800693e:	f7f9 fc69 	bl	8000214 <__adddf3>
 8006942:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006946:	3601      	adds	r6, #1
 8006948:	9b06      	ldr	r3, [sp, #24]
 800694a:	429e      	cmp	r6, r3
 800694c:	f1a7 0708 	sub.w	r7, r7, #8
 8006950:	ddeb      	ble.n	800692a <__kernel_rem_pio2+0xaa>
 8006952:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006956:	3508      	adds	r5, #8
 8006958:	ecab 7b02 	vstmia	fp!, {d7}
 800695c:	f108 0801 	add.w	r8, r8, #1
 8006960:	e7ca      	b.n	80068f8 <__kernel_rem_pio2+0x78>
 8006962:	9b04      	ldr	r3, [sp, #16]
 8006964:	aa0c      	add	r2, sp, #48	; 0x30
 8006966:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800696a:	930b      	str	r3, [sp, #44]	; 0x2c
 800696c:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800696e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8006972:	9c04      	ldr	r4, [sp, #16]
 8006974:	930a      	str	r3, [sp, #40]	; 0x28
 8006976:	ab98      	add	r3, sp, #608	; 0x260
 8006978:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800697c:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8006980:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 8006984:	f8cd b008 	str.w	fp, [sp, #8]
 8006988:	4625      	mov	r5, r4
 800698a:	2d00      	cmp	r5, #0
 800698c:	dc78      	bgt.n	8006a80 <__kernel_rem_pio2+0x200>
 800698e:	ec47 6b10 	vmov	d0, r6, r7
 8006992:	4650      	mov	r0, sl
 8006994:	f000 fbfc 	bl	8007190 <scalbn>
 8006998:	ec57 6b10 	vmov	r6, r7, d0
 800699c:	2200      	movs	r2, #0
 800699e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80069a2:	ee10 0a10 	vmov	r0, s0
 80069a6:	4639      	mov	r1, r7
 80069a8:	f7f9 fdea 	bl	8000580 <__aeabi_dmul>
 80069ac:	ec41 0b10 	vmov	d0, r0, r1
 80069b0:	f000 fb6e 	bl	8007090 <floor>
 80069b4:	4b7f      	ldr	r3, [pc, #508]	; (8006bb4 <__kernel_rem_pio2+0x334>)
 80069b6:	ec51 0b10 	vmov	r0, r1, d0
 80069ba:	2200      	movs	r2, #0
 80069bc:	f7f9 fde0 	bl	8000580 <__aeabi_dmul>
 80069c0:	4602      	mov	r2, r0
 80069c2:	460b      	mov	r3, r1
 80069c4:	4630      	mov	r0, r6
 80069c6:	4639      	mov	r1, r7
 80069c8:	f7f9 fc22 	bl	8000210 <__aeabi_dsub>
 80069cc:	460f      	mov	r7, r1
 80069ce:	4606      	mov	r6, r0
 80069d0:	f7fa f870 	bl	8000ab4 <__aeabi_d2iz>
 80069d4:	9007      	str	r0, [sp, #28]
 80069d6:	f7f9 fd69 	bl	80004ac <__aeabi_i2d>
 80069da:	4602      	mov	r2, r0
 80069dc:	460b      	mov	r3, r1
 80069de:	4630      	mov	r0, r6
 80069e0:	4639      	mov	r1, r7
 80069e2:	f7f9 fc15 	bl	8000210 <__aeabi_dsub>
 80069e6:	f1ba 0f00 	cmp.w	sl, #0
 80069ea:	4606      	mov	r6, r0
 80069ec:	460f      	mov	r7, r1
 80069ee:	dd70      	ble.n	8006ad2 <__kernel_rem_pio2+0x252>
 80069f0:	1e62      	subs	r2, r4, #1
 80069f2:	ab0c      	add	r3, sp, #48	; 0x30
 80069f4:	9d07      	ldr	r5, [sp, #28]
 80069f6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80069fa:	f1ca 0118 	rsb	r1, sl, #24
 80069fe:	fa40 f301 	asr.w	r3, r0, r1
 8006a02:	441d      	add	r5, r3
 8006a04:	408b      	lsls	r3, r1
 8006a06:	1ac0      	subs	r0, r0, r3
 8006a08:	ab0c      	add	r3, sp, #48	; 0x30
 8006a0a:	9507      	str	r5, [sp, #28]
 8006a0c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8006a10:	f1ca 0317 	rsb	r3, sl, #23
 8006a14:	fa40 f303 	asr.w	r3, r0, r3
 8006a18:	9302      	str	r3, [sp, #8]
 8006a1a:	9b02      	ldr	r3, [sp, #8]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	dd66      	ble.n	8006aee <__kernel_rem_pio2+0x26e>
 8006a20:	9b07      	ldr	r3, [sp, #28]
 8006a22:	2200      	movs	r2, #0
 8006a24:	3301      	adds	r3, #1
 8006a26:	9307      	str	r3, [sp, #28]
 8006a28:	4615      	mov	r5, r2
 8006a2a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8006a2e:	4294      	cmp	r4, r2
 8006a30:	f300 8099 	bgt.w	8006b66 <__kernel_rem_pio2+0x2e6>
 8006a34:	f1ba 0f00 	cmp.w	sl, #0
 8006a38:	dd07      	ble.n	8006a4a <__kernel_rem_pio2+0x1ca>
 8006a3a:	f1ba 0f01 	cmp.w	sl, #1
 8006a3e:	f000 80a5 	beq.w	8006b8c <__kernel_rem_pio2+0x30c>
 8006a42:	f1ba 0f02 	cmp.w	sl, #2
 8006a46:	f000 80c1 	beq.w	8006bcc <__kernel_rem_pio2+0x34c>
 8006a4a:	9b02      	ldr	r3, [sp, #8]
 8006a4c:	2b02      	cmp	r3, #2
 8006a4e:	d14e      	bne.n	8006aee <__kernel_rem_pio2+0x26e>
 8006a50:	4632      	mov	r2, r6
 8006a52:	463b      	mov	r3, r7
 8006a54:	4958      	ldr	r1, [pc, #352]	; (8006bb8 <__kernel_rem_pio2+0x338>)
 8006a56:	2000      	movs	r0, #0
 8006a58:	f7f9 fbda 	bl	8000210 <__aeabi_dsub>
 8006a5c:	4606      	mov	r6, r0
 8006a5e:	460f      	mov	r7, r1
 8006a60:	2d00      	cmp	r5, #0
 8006a62:	d044      	beq.n	8006aee <__kernel_rem_pio2+0x26e>
 8006a64:	4650      	mov	r0, sl
 8006a66:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8006ba8 <__kernel_rem_pio2+0x328>
 8006a6a:	f000 fb91 	bl	8007190 <scalbn>
 8006a6e:	4630      	mov	r0, r6
 8006a70:	4639      	mov	r1, r7
 8006a72:	ec53 2b10 	vmov	r2, r3, d0
 8006a76:	f7f9 fbcb 	bl	8000210 <__aeabi_dsub>
 8006a7a:	4606      	mov	r6, r0
 8006a7c:	460f      	mov	r7, r1
 8006a7e:	e036      	b.n	8006aee <__kernel_rem_pio2+0x26e>
 8006a80:	4b4e      	ldr	r3, [pc, #312]	; (8006bbc <__kernel_rem_pio2+0x33c>)
 8006a82:	2200      	movs	r2, #0
 8006a84:	4630      	mov	r0, r6
 8006a86:	4639      	mov	r1, r7
 8006a88:	f7f9 fd7a 	bl	8000580 <__aeabi_dmul>
 8006a8c:	f7fa f812 	bl	8000ab4 <__aeabi_d2iz>
 8006a90:	f7f9 fd0c 	bl	80004ac <__aeabi_i2d>
 8006a94:	4b4a      	ldr	r3, [pc, #296]	; (8006bc0 <__kernel_rem_pio2+0x340>)
 8006a96:	2200      	movs	r2, #0
 8006a98:	4680      	mov	r8, r0
 8006a9a:	4689      	mov	r9, r1
 8006a9c:	f7f9 fd70 	bl	8000580 <__aeabi_dmul>
 8006aa0:	4602      	mov	r2, r0
 8006aa2:	460b      	mov	r3, r1
 8006aa4:	4630      	mov	r0, r6
 8006aa6:	4639      	mov	r1, r7
 8006aa8:	f7f9 fbb2 	bl	8000210 <__aeabi_dsub>
 8006aac:	f7fa f802 	bl	8000ab4 <__aeabi_d2iz>
 8006ab0:	9b02      	ldr	r3, [sp, #8]
 8006ab2:	f843 0b04 	str.w	r0, [r3], #4
 8006ab6:	3d01      	subs	r5, #1
 8006ab8:	9302      	str	r3, [sp, #8]
 8006aba:	ab70      	add	r3, sp, #448	; 0x1c0
 8006abc:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8006ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ac4:	4640      	mov	r0, r8
 8006ac6:	4649      	mov	r1, r9
 8006ac8:	f7f9 fba4 	bl	8000214 <__adddf3>
 8006acc:	4606      	mov	r6, r0
 8006ace:	460f      	mov	r7, r1
 8006ad0:	e75b      	b.n	800698a <__kernel_rem_pio2+0x10a>
 8006ad2:	d105      	bne.n	8006ae0 <__kernel_rem_pio2+0x260>
 8006ad4:	1e63      	subs	r3, r4, #1
 8006ad6:	aa0c      	add	r2, sp, #48	; 0x30
 8006ad8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8006adc:	15c3      	asrs	r3, r0, #23
 8006ade:	e79b      	b.n	8006a18 <__kernel_rem_pio2+0x198>
 8006ae0:	4b38      	ldr	r3, [pc, #224]	; (8006bc4 <__kernel_rem_pio2+0x344>)
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	f7f9 ffd2 	bl	8000a8c <__aeabi_dcmpge>
 8006ae8:	2800      	cmp	r0, #0
 8006aea:	d139      	bne.n	8006b60 <__kernel_rem_pio2+0x2e0>
 8006aec:	9002      	str	r0, [sp, #8]
 8006aee:	2200      	movs	r2, #0
 8006af0:	2300      	movs	r3, #0
 8006af2:	4630      	mov	r0, r6
 8006af4:	4639      	mov	r1, r7
 8006af6:	f7f9 ffab 	bl	8000a50 <__aeabi_dcmpeq>
 8006afa:	2800      	cmp	r0, #0
 8006afc:	f000 80b4 	beq.w	8006c68 <__kernel_rem_pio2+0x3e8>
 8006b00:	f104 3bff 	add.w	fp, r4, #4294967295
 8006b04:	465b      	mov	r3, fp
 8006b06:	2200      	movs	r2, #0
 8006b08:	9904      	ldr	r1, [sp, #16]
 8006b0a:	428b      	cmp	r3, r1
 8006b0c:	da65      	bge.n	8006bda <__kernel_rem_pio2+0x35a>
 8006b0e:	2a00      	cmp	r2, #0
 8006b10:	d07b      	beq.n	8006c0a <__kernel_rem_pio2+0x38a>
 8006b12:	ab0c      	add	r3, sp, #48	; 0x30
 8006b14:	f1aa 0a18 	sub.w	sl, sl, #24
 8006b18:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	f000 80a0 	beq.w	8006c62 <__kernel_rem_pio2+0x3e2>
 8006b22:	ed9f 0b21 	vldr	d0, [pc, #132]	; 8006ba8 <__kernel_rem_pio2+0x328>
 8006b26:	4650      	mov	r0, sl
 8006b28:	f000 fb32 	bl	8007190 <scalbn>
 8006b2c:	4f23      	ldr	r7, [pc, #140]	; (8006bbc <__kernel_rem_pio2+0x33c>)
 8006b2e:	ec55 4b10 	vmov	r4, r5, d0
 8006b32:	46d8      	mov	r8, fp
 8006b34:	2600      	movs	r6, #0
 8006b36:	f1b8 0f00 	cmp.w	r8, #0
 8006b3a:	f280 80cf 	bge.w	8006cdc <__kernel_rem_pio2+0x45c>
 8006b3e:	ed9f 8b18 	vldr	d8, [pc, #96]	; 8006ba0 <__kernel_rem_pio2+0x320>
 8006b42:	465f      	mov	r7, fp
 8006b44:	f04f 0800 	mov.w	r8, #0
 8006b48:	2f00      	cmp	r7, #0
 8006b4a:	f2c0 80fd 	blt.w	8006d48 <__kernel_rem_pio2+0x4c8>
 8006b4e:	ab70      	add	r3, sp, #448	; 0x1c0
 8006b50:	f8df a074 	ldr.w	sl, [pc, #116]	; 8006bc8 <__kernel_rem_pio2+0x348>
 8006b54:	ec55 4b18 	vmov	r4, r5, d8
 8006b58:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 8006b5c:	2600      	movs	r6, #0
 8006b5e:	e0e5      	b.n	8006d2c <__kernel_rem_pio2+0x4ac>
 8006b60:	2302      	movs	r3, #2
 8006b62:	9302      	str	r3, [sp, #8]
 8006b64:	e75c      	b.n	8006a20 <__kernel_rem_pio2+0x1a0>
 8006b66:	f8db 3000 	ldr.w	r3, [fp]
 8006b6a:	b955      	cbnz	r5, 8006b82 <__kernel_rem_pio2+0x302>
 8006b6c:	b123      	cbz	r3, 8006b78 <__kernel_rem_pio2+0x2f8>
 8006b6e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8006b72:	f8cb 3000 	str.w	r3, [fp]
 8006b76:	2301      	movs	r3, #1
 8006b78:	3201      	adds	r2, #1
 8006b7a:	f10b 0b04 	add.w	fp, fp, #4
 8006b7e:	461d      	mov	r5, r3
 8006b80:	e755      	b.n	8006a2e <__kernel_rem_pio2+0x1ae>
 8006b82:	1acb      	subs	r3, r1, r3
 8006b84:	f8cb 3000 	str.w	r3, [fp]
 8006b88:	462b      	mov	r3, r5
 8006b8a:	e7f5      	b.n	8006b78 <__kernel_rem_pio2+0x2f8>
 8006b8c:	1e62      	subs	r2, r4, #1
 8006b8e:	ab0c      	add	r3, sp, #48	; 0x30
 8006b90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b94:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8006b98:	a90c      	add	r1, sp, #48	; 0x30
 8006b9a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8006b9e:	e754      	b.n	8006a4a <__kernel_rem_pio2+0x1ca>
	...
 8006bac:	3ff00000 	.word	0x3ff00000
 8006bb0:	080074b0 	.word	0x080074b0
 8006bb4:	40200000 	.word	0x40200000
 8006bb8:	3ff00000 	.word	0x3ff00000
 8006bbc:	3e700000 	.word	0x3e700000
 8006bc0:	41700000 	.word	0x41700000
 8006bc4:	3fe00000 	.word	0x3fe00000
 8006bc8:	08007470 	.word	0x08007470
 8006bcc:	1e62      	subs	r2, r4, #1
 8006bce:	ab0c      	add	r3, sp, #48	; 0x30
 8006bd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bd4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8006bd8:	e7de      	b.n	8006b98 <__kernel_rem_pio2+0x318>
 8006bda:	a90c      	add	r1, sp, #48	; 0x30
 8006bdc:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8006be0:	3b01      	subs	r3, #1
 8006be2:	430a      	orrs	r2, r1
 8006be4:	e790      	b.n	8006b08 <__kernel_rem_pio2+0x288>
 8006be6:	3301      	adds	r3, #1
 8006be8:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8006bec:	2900      	cmp	r1, #0
 8006bee:	d0fa      	beq.n	8006be6 <__kernel_rem_pio2+0x366>
 8006bf0:	9a08      	ldr	r2, [sp, #32]
 8006bf2:	18e3      	adds	r3, r4, r3
 8006bf4:	18a6      	adds	r6, r4, r2
 8006bf6:	aa20      	add	r2, sp, #128	; 0x80
 8006bf8:	1c65      	adds	r5, r4, #1
 8006bfa:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8006bfe:	9302      	str	r3, [sp, #8]
 8006c00:	9b02      	ldr	r3, [sp, #8]
 8006c02:	42ab      	cmp	r3, r5
 8006c04:	da04      	bge.n	8006c10 <__kernel_rem_pio2+0x390>
 8006c06:	461c      	mov	r4, r3
 8006c08:	e6b5      	b.n	8006976 <__kernel_rem_pio2+0xf6>
 8006c0a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006c0c:	2301      	movs	r3, #1
 8006c0e:	e7eb      	b.n	8006be8 <__kernel_rem_pio2+0x368>
 8006c10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c12:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006c16:	f7f9 fc49 	bl	80004ac <__aeabi_i2d>
 8006c1a:	e8e6 0102 	strd	r0, r1, [r6], #8
 8006c1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c20:	46b3      	mov	fp, r6
 8006c22:	461c      	mov	r4, r3
 8006c24:	2700      	movs	r7, #0
 8006c26:	f04f 0800 	mov.w	r8, #0
 8006c2a:	f04f 0900 	mov.w	r9, #0
 8006c2e:	9b06      	ldr	r3, [sp, #24]
 8006c30:	429f      	cmp	r7, r3
 8006c32:	dd06      	ble.n	8006c42 <__kernel_rem_pio2+0x3c2>
 8006c34:	ab70      	add	r3, sp, #448	; 0x1c0
 8006c36:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8006c3a:	e9c3 8900 	strd	r8, r9, [r3]
 8006c3e:	3501      	adds	r5, #1
 8006c40:	e7de      	b.n	8006c00 <__kernel_rem_pio2+0x380>
 8006c42:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8006c46:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8006c4a:	f7f9 fc99 	bl	8000580 <__aeabi_dmul>
 8006c4e:	4602      	mov	r2, r0
 8006c50:	460b      	mov	r3, r1
 8006c52:	4640      	mov	r0, r8
 8006c54:	4649      	mov	r1, r9
 8006c56:	f7f9 fadd 	bl	8000214 <__adddf3>
 8006c5a:	3701      	adds	r7, #1
 8006c5c:	4680      	mov	r8, r0
 8006c5e:	4689      	mov	r9, r1
 8006c60:	e7e5      	b.n	8006c2e <__kernel_rem_pio2+0x3ae>
 8006c62:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006c66:	e754      	b.n	8006b12 <__kernel_rem_pio2+0x292>
 8006c68:	ec47 6b10 	vmov	d0, r6, r7
 8006c6c:	f1ca 0000 	rsb	r0, sl, #0
 8006c70:	f000 fa8e 	bl	8007190 <scalbn>
 8006c74:	ec57 6b10 	vmov	r6, r7, d0
 8006c78:	4b9f      	ldr	r3, [pc, #636]	; (8006ef8 <__kernel_rem_pio2+0x678>)
 8006c7a:	ee10 0a10 	vmov	r0, s0
 8006c7e:	2200      	movs	r2, #0
 8006c80:	4639      	mov	r1, r7
 8006c82:	f7f9 ff03 	bl	8000a8c <__aeabi_dcmpge>
 8006c86:	b300      	cbz	r0, 8006cca <__kernel_rem_pio2+0x44a>
 8006c88:	4b9c      	ldr	r3, [pc, #624]	; (8006efc <__kernel_rem_pio2+0x67c>)
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	4630      	mov	r0, r6
 8006c8e:	4639      	mov	r1, r7
 8006c90:	f7f9 fc76 	bl	8000580 <__aeabi_dmul>
 8006c94:	f7f9 ff0e 	bl	8000ab4 <__aeabi_d2iz>
 8006c98:	4605      	mov	r5, r0
 8006c9a:	f7f9 fc07 	bl	80004ac <__aeabi_i2d>
 8006c9e:	4b96      	ldr	r3, [pc, #600]	; (8006ef8 <__kernel_rem_pio2+0x678>)
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	f7f9 fc6d 	bl	8000580 <__aeabi_dmul>
 8006ca6:	460b      	mov	r3, r1
 8006ca8:	4602      	mov	r2, r0
 8006caa:	4639      	mov	r1, r7
 8006cac:	4630      	mov	r0, r6
 8006cae:	f7f9 faaf 	bl	8000210 <__aeabi_dsub>
 8006cb2:	f7f9 feff 	bl	8000ab4 <__aeabi_d2iz>
 8006cb6:	f104 0b01 	add.w	fp, r4, #1
 8006cba:	ab0c      	add	r3, sp, #48	; 0x30
 8006cbc:	f10a 0a18 	add.w	sl, sl, #24
 8006cc0:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8006cc4:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 8006cc8:	e72b      	b.n	8006b22 <__kernel_rem_pio2+0x2a2>
 8006cca:	4630      	mov	r0, r6
 8006ccc:	4639      	mov	r1, r7
 8006cce:	f7f9 fef1 	bl	8000ab4 <__aeabi_d2iz>
 8006cd2:	ab0c      	add	r3, sp, #48	; 0x30
 8006cd4:	46a3      	mov	fp, r4
 8006cd6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8006cda:	e722      	b.n	8006b22 <__kernel_rem_pio2+0x2a2>
 8006cdc:	ab70      	add	r3, sp, #448	; 0x1c0
 8006cde:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 8006ce2:	ab0c      	add	r3, sp, #48	; 0x30
 8006ce4:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8006ce8:	f7f9 fbe0 	bl	80004ac <__aeabi_i2d>
 8006cec:	4622      	mov	r2, r4
 8006cee:	462b      	mov	r3, r5
 8006cf0:	f7f9 fc46 	bl	8000580 <__aeabi_dmul>
 8006cf4:	4632      	mov	r2, r6
 8006cf6:	e9c9 0100 	strd	r0, r1, [r9]
 8006cfa:	463b      	mov	r3, r7
 8006cfc:	4620      	mov	r0, r4
 8006cfe:	4629      	mov	r1, r5
 8006d00:	f7f9 fc3e 	bl	8000580 <__aeabi_dmul>
 8006d04:	f108 38ff 	add.w	r8, r8, #4294967295
 8006d08:	4604      	mov	r4, r0
 8006d0a:	460d      	mov	r5, r1
 8006d0c:	e713      	b.n	8006b36 <__kernel_rem_pio2+0x2b6>
 8006d0e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8006d12:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8006d16:	f7f9 fc33 	bl	8000580 <__aeabi_dmul>
 8006d1a:	4602      	mov	r2, r0
 8006d1c:	460b      	mov	r3, r1
 8006d1e:	4620      	mov	r0, r4
 8006d20:	4629      	mov	r1, r5
 8006d22:	f7f9 fa77 	bl	8000214 <__adddf3>
 8006d26:	3601      	adds	r6, #1
 8006d28:	4604      	mov	r4, r0
 8006d2a:	460d      	mov	r5, r1
 8006d2c:	9b04      	ldr	r3, [sp, #16]
 8006d2e:	429e      	cmp	r6, r3
 8006d30:	dc01      	bgt.n	8006d36 <__kernel_rem_pio2+0x4b6>
 8006d32:	45b0      	cmp	r8, r6
 8006d34:	daeb      	bge.n	8006d0e <__kernel_rem_pio2+0x48e>
 8006d36:	ab48      	add	r3, sp, #288	; 0x120
 8006d38:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8006d3c:	e9c3 4500 	strd	r4, r5, [r3]
 8006d40:	3f01      	subs	r7, #1
 8006d42:	f108 0801 	add.w	r8, r8, #1
 8006d46:	e6ff      	b.n	8006b48 <__kernel_rem_pio2+0x2c8>
 8006d48:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8006d4a:	2b02      	cmp	r3, #2
 8006d4c:	dc0b      	bgt.n	8006d66 <__kernel_rem_pio2+0x4e6>
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	dc6e      	bgt.n	8006e30 <__kernel_rem_pio2+0x5b0>
 8006d52:	d045      	beq.n	8006de0 <__kernel_rem_pio2+0x560>
 8006d54:	9b07      	ldr	r3, [sp, #28]
 8006d56:	f003 0007 	and.w	r0, r3, #7
 8006d5a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8006d5e:	ecbd 8b02 	vpop	{d8}
 8006d62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d66:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8006d68:	2b03      	cmp	r3, #3
 8006d6a:	d1f3      	bne.n	8006d54 <__kernel_rem_pio2+0x4d4>
 8006d6c:	ab48      	add	r3, sp, #288	; 0x120
 8006d6e:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 8006d72:	46d0      	mov	r8, sl
 8006d74:	46d9      	mov	r9, fp
 8006d76:	f1b9 0f00 	cmp.w	r9, #0
 8006d7a:	f1a8 0808 	sub.w	r8, r8, #8
 8006d7e:	dc64      	bgt.n	8006e4a <__kernel_rem_pio2+0x5ca>
 8006d80:	465c      	mov	r4, fp
 8006d82:	2c01      	cmp	r4, #1
 8006d84:	f1aa 0a08 	sub.w	sl, sl, #8
 8006d88:	dc7e      	bgt.n	8006e88 <__kernel_rem_pio2+0x608>
 8006d8a:	2000      	movs	r0, #0
 8006d8c:	2100      	movs	r1, #0
 8006d8e:	f1bb 0f01 	cmp.w	fp, #1
 8006d92:	f300 8097 	bgt.w	8006ec4 <__kernel_rem_pio2+0x644>
 8006d96:	9b02      	ldr	r3, [sp, #8]
 8006d98:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 8006d9c:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	f040 8099 	bne.w	8006ed8 <__kernel_rem_pio2+0x658>
 8006da6:	9b01      	ldr	r3, [sp, #4]
 8006da8:	e9c3 5600 	strd	r5, r6, [r3]
 8006dac:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8006db0:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8006db4:	e7ce      	b.n	8006d54 <__kernel_rem_pio2+0x4d4>
 8006db6:	ab48      	add	r3, sp, #288	; 0x120
 8006db8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dc0:	f7f9 fa28 	bl	8000214 <__adddf3>
 8006dc4:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006dc8:	f1bb 0f00 	cmp.w	fp, #0
 8006dcc:	daf3      	bge.n	8006db6 <__kernel_rem_pio2+0x536>
 8006dce:	9b02      	ldr	r3, [sp, #8]
 8006dd0:	b113      	cbz	r3, 8006dd8 <__kernel_rem_pio2+0x558>
 8006dd2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006dd6:	4619      	mov	r1, r3
 8006dd8:	9b01      	ldr	r3, [sp, #4]
 8006dda:	e9c3 0100 	strd	r0, r1, [r3]
 8006dde:	e7b9      	b.n	8006d54 <__kernel_rem_pio2+0x4d4>
 8006de0:	2000      	movs	r0, #0
 8006de2:	2100      	movs	r1, #0
 8006de4:	e7f0      	b.n	8006dc8 <__kernel_rem_pio2+0x548>
 8006de6:	ab48      	add	r3, sp, #288	; 0x120
 8006de8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006df0:	f7f9 fa10 	bl	8000214 <__adddf3>
 8006df4:	3c01      	subs	r4, #1
 8006df6:	2c00      	cmp	r4, #0
 8006df8:	daf5      	bge.n	8006de6 <__kernel_rem_pio2+0x566>
 8006dfa:	9b02      	ldr	r3, [sp, #8]
 8006dfc:	b1e3      	cbz	r3, 8006e38 <__kernel_rem_pio2+0x5b8>
 8006dfe:	4602      	mov	r2, r0
 8006e00:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006e04:	9c01      	ldr	r4, [sp, #4]
 8006e06:	e9c4 2300 	strd	r2, r3, [r4]
 8006e0a:	4602      	mov	r2, r0
 8006e0c:	460b      	mov	r3, r1
 8006e0e:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8006e12:	f7f9 f9fd 	bl	8000210 <__aeabi_dsub>
 8006e16:	ad4a      	add	r5, sp, #296	; 0x128
 8006e18:	2401      	movs	r4, #1
 8006e1a:	45a3      	cmp	fp, r4
 8006e1c:	da0f      	bge.n	8006e3e <__kernel_rem_pio2+0x5be>
 8006e1e:	9b02      	ldr	r3, [sp, #8]
 8006e20:	b113      	cbz	r3, 8006e28 <__kernel_rem_pio2+0x5a8>
 8006e22:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006e26:	4619      	mov	r1, r3
 8006e28:	9b01      	ldr	r3, [sp, #4]
 8006e2a:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8006e2e:	e791      	b.n	8006d54 <__kernel_rem_pio2+0x4d4>
 8006e30:	465c      	mov	r4, fp
 8006e32:	2000      	movs	r0, #0
 8006e34:	2100      	movs	r1, #0
 8006e36:	e7de      	b.n	8006df6 <__kernel_rem_pio2+0x576>
 8006e38:	4602      	mov	r2, r0
 8006e3a:	460b      	mov	r3, r1
 8006e3c:	e7e2      	b.n	8006e04 <__kernel_rem_pio2+0x584>
 8006e3e:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8006e42:	f7f9 f9e7 	bl	8000214 <__adddf3>
 8006e46:	3401      	adds	r4, #1
 8006e48:	e7e7      	b.n	8006e1a <__kernel_rem_pio2+0x59a>
 8006e4a:	e9d8 4500 	ldrd	r4, r5, [r8]
 8006e4e:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 8006e52:	4620      	mov	r0, r4
 8006e54:	4632      	mov	r2, r6
 8006e56:	463b      	mov	r3, r7
 8006e58:	4629      	mov	r1, r5
 8006e5a:	f7f9 f9db 	bl	8000214 <__adddf3>
 8006e5e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006e62:	4602      	mov	r2, r0
 8006e64:	460b      	mov	r3, r1
 8006e66:	4620      	mov	r0, r4
 8006e68:	4629      	mov	r1, r5
 8006e6a:	f7f9 f9d1 	bl	8000210 <__aeabi_dsub>
 8006e6e:	4632      	mov	r2, r6
 8006e70:	463b      	mov	r3, r7
 8006e72:	f7f9 f9cf 	bl	8000214 <__adddf3>
 8006e76:	ed9d 7b04 	vldr	d7, [sp, #16]
 8006e7a:	e9c8 0102 	strd	r0, r1, [r8, #8]
 8006e7e:	ed88 7b00 	vstr	d7, [r8]
 8006e82:	f109 39ff 	add.w	r9, r9, #4294967295
 8006e86:	e776      	b.n	8006d76 <__kernel_rem_pio2+0x4f6>
 8006e88:	e9da 8900 	ldrd	r8, r9, [sl]
 8006e8c:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8006e90:	4640      	mov	r0, r8
 8006e92:	4632      	mov	r2, r6
 8006e94:	463b      	mov	r3, r7
 8006e96:	4649      	mov	r1, r9
 8006e98:	f7f9 f9bc 	bl	8000214 <__adddf3>
 8006e9c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006ea0:	4602      	mov	r2, r0
 8006ea2:	460b      	mov	r3, r1
 8006ea4:	4640      	mov	r0, r8
 8006ea6:	4649      	mov	r1, r9
 8006ea8:	f7f9 f9b2 	bl	8000210 <__aeabi_dsub>
 8006eac:	4632      	mov	r2, r6
 8006eae:	463b      	mov	r3, r7
 8006eb0:	f7f9 f9b0 	bl	8000214 <__adddf3>
 8006eb4:	ed9d 7b04 	vldr	d7, [sp, #16]
 8006eb8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006ebc:	ed8a 7b00 	vstr	d7, [sl]
 8006ec0:	3c01      	subs	r4, #1
 8006ec2:	e75e      	b.n	8006d82 <__kernel_rem_pio2+0x502>
 8006ec4:	ab48      	add	r3, sp, #288	; 0x120
 8006ec6:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ece:	f7f9 f9a1 	bl	8000214 <__adddf3>
 8006ed2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006ed6:	e75a      	b.n	8006d8e <__kernel_rem_pio2+0x50e>
 8006ed8:	9b01      	ldr	r3, [sp, #4]
 8006eda:	9a01      	ldr	r2, [sp, #4]
 8006edc:	601d      	str	r5, [r3, #0]
 8006ede:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8006ee2:	605c      	str	r4, [r3, #4]
 8006ee4:	609f      	str	r7, [r3, #8]
 8006ee6:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8006eea:	60d3      	str	r3, [r2, #12]
 8006eec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006ef0:	6110      	str	r0, [r2, #16]
 8006ef2:	6153      	str	r3, [r2, #20]
 8006ef4:	e72e      	b.n	8006d54 <__kernel_rem_pio2+0x4d4>
 8006ef6:	bf00      	nop
 8006ef8:	41700000 	.word	0x41700000
 8006efc:	3e700000 	.word	0x3e700000

08006f00 <__kernel_sin>:
 8006f00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f04:	ed2d 8b04 	vpush	{d8-d9}
 8006f08:	eeb0 8a41 	vmov.f32	s16, s2
 8006f0c:	eef0 8a61 	vmov.f32	s17, s3
 8006f10:	ec55 4b10 	vmov	r4, r5, d0
 8006f14:	b083      	sub	sp, #12
 8006f16:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8006f1a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8006f1e:	9001      	str	r0, [sp, #4]
 8006f20:	da06      	bge.n	8006f30 <__kernel_sin+0x30>
 8006f22:	ee10 0a10 	vmov	r0, s0
 8006f26:	4629      	mov	r1, r5
 8006f28:	f7f9 fdc4 	bl	8000ab4 <__aeabi_d2iz>
 8006f2c:	2800      	cmp	r0, #0
 8006f2e:	d051      	beq.n	8006fd4 <__kernel_sin+0xd4>
 8006f30:	4622      	mov	r2, r4
 8006f32:	462b      	mov	r3, r5
 8006f34:	4620      	mov	r0, r4
 8006f36:	4629      	mov	r1, r5
 8006f38:	f7f9 fb22 	bl	8000580 <__aeabi_dmul>
 8006f3c:	4682      	mov	sl, r0
 8006f3e:	468b      	mov	fp, r1
 8006f40:	4602      	mov	r2, r0
 8006f42:	460b      	mov	r3, r1
 8006f44:	4620      	mov	r0, r4
 8006f46:	4629      	mov	r1, r5
 8006f48:	f7f9 fb1a 	bl	8000580 <__aeabi_dmul>
 8006f4c:	a341      	add	r3, pc, #260	; (adr r3, 8007054 <__kernel_sin+0x154>)
 8006f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f52:	4680      	mov	r8, r0
 8006f54:	4689      	mov	r9, r1
 8006f56:	4650      	mov	r0, sl
 8006f58:	4659      	mov	r1, fp
 8006f5a:	f7f9 fb11 	bl	8000580 <__aeabi_dmul>
 8006f5e:	a33f      	add	r3, pc, #252	; (adr r3, 800705c <__kernel_sin+0x15c>)
 8006f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f64:	f7f9 f954 	bl	8000210 <__aeabi_dsub>
 8006f68:	4652      	mov	r2, sl
 8006f6a:	465b      	mov	r3, fp
 8006f6c:	f7f9 fb08 	bl	8000580 <__aeabi_dmul>
 8006f70:	a33c      	add	r3, pc, #240	; (adr r3, 8007064 <__kernel_sin+0x164>)
 8006f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f76:	f7f9 f94d 	bl	8000214 <__adddf3>
 8006f7a:	4652      	mov	r2, sl
 8006f7c:	465b      	mov	r3, fp
 8006f7e:	f7f9 faff 	bl	8000580 <__aeabi_dmul>
 8006f82:	a33a      	add	r3, pc, #232	; (adr r3, 800706c <__kernel_sin+0x16c>)
 8006f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f88:	f7f9 f942 	bl	8000210 <__aeabi_dsub>
 8006f8c:	4652      	mov	r2, sl
 8006f8e:	465b      	mov	r3, fp
 8006f90:	f7f9 faf6 	bl	8000580 <__aeabi_dmul>
 8006f94:	a337      	add	r3, pc, #220	; (adr r3, 8007074 <__kernel_sin+0x174>)
 8006f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f9a:	f7f9 f93b 	bl	8000214 <__adddf3>
 8006f9e:	9b01      	ldr	r3, [sp, #4]
 8006fa0:	4606      	mov	r6, r0
 8006fa2:	460f      	mov	r7, r1
 8006fa4:	b9eb      	cbnz	r3, 8006fe2 <__kernel_sin+0xe2>
 8006fa6:	4602      	mov	r2, r0
 8006fa8:	460b      	mov	r3, r1
 8006faa:	4650      	mov	r0, sl
 8006fac:	4659      	mov	r1, fp
 8006fae:	f7f9 fae7 	bl	8000580 <__aeabi_dmul>
 8006fb2:	a325      	add	r3, pc, #148	; (adr r3, 8007048 <__kernel_sin+0x148>)
 8006fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fb8:	f7f9 f92a 	bl	8000210 <__aeabi_dsub>
 8006fbc:	4642      	mov	r2, r8
 8006fbe:	464b      	mov	r3, r9
 8006fc0:	f7f9 fade 	bl	8000580 <__aeabi_dmul>
 8006fc4:	4602      	mov	r2, r0
 8006fc6:	460b      	mov	r3, r1
 8006fc8:	4620      	mov	r0, r4
 8006fca:	4629      	mov	r1, r5
 8006fcc:	f7f9 f922 	bl	8000214 <__adddf3>
 8006fd0:	4604      	mov	r4, r0
 8006fd2:	460d      	mov	r5, r1
 8006fd4:	ec45 4b10 	vmov	d0, r4, r5
 8006fd8:	b003      	add	sp, #12
 8006fda:	ecbd 8b04 	vpop	{d8-d9}
 8006fde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fe2:	4b1b      	ldr	r3, [pc, #108]	; (8007050 <__kernel_sin+0x150>)
 8006fe4:	ec51 0b18 	vmov	r0, r1, d8
 8006fe8:	2200      	movs	r2, #0
 8006fea:	f7f9 fac9 	bl	8000580 <__aeabi_dmul>
 8006fee:	4632      	mov	r2, r6
 8006ff0:	ec41 0b19 	vmov	d9, r0, r1
 8006ff4:	463b      	mov	r3, r7
 8006ff6:	4640      	mov	r0, r8
 8006ff8:	4649      	mov	r1, r9
 8006ffa:	f7f9 fac1 	bl	8000580 <__aeabi_dmul>
 8006ffe:	4602      	mov	r2, r0
 8007000:	460b      	mov	r3, r1
 8007002:	ec51 0b19 	vmov	r0, r1, d9
 8007006:	f7f9 f903 	bl	8000210 <__aeabi_dsub>
 800700a:	4652      	mov	r2, sl
 800700c:	465b      	mov	r3, fp
 800700e:	f7f9 fab7 	bl	8000580 <__aeabi_dmul>
 8007012:	ec53 2b18 	vmov	r2, r3, d8
 8007016:	f7f9 f8fb 	bl	8000210 <__aeabi_dsub>
 800701a:	a30b      	add	r3, pc, #44	; (adr r3, 8007048 <__kernel_sin+0x148>)
 800701c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007020:	4606      	mov	r6, r0
 8007022:	460f      	mov	r7, r1
 8007024:	4640      	mov	r0, r8
 8007026:	4649      	mov	r1, r9
 8007028:	f7f9 faaa 	bl	8000580 <__aeabi_dmul>
 800702c:	4602      	mov	r2, r0
 800702e:	460b      	mov	r3, r1
 8007030:	4630      	mov	r0, r6
 8007032:	4639      	mov	r1, r7
 8007034:	f7f9 f8ee 	bl	8000214 <__adddf3>
 8007038:	4602      	mov	r2, r0
 800703a:	460b      	mov	r3, r1
 800703c:	4620      	mov	r0, r4
 800703e:	4629      	mov	r1, r5
 8007040:	f7f9 f8e6 	bl	8000210 <__aeabi_dsub>
 8007044:	e7c4      	b.n	8006fd0 <__kernel_sin+0xd0>
 8007046:	bf00      	nop
 8007048:	55555549 	.word	0x55555549
 800704c:	3fc55555 	.word	0x3fc55555
 8007050:	3fe00000 	.word	0x3fe00000
 8007054:	5acfd57c 	.word	0x5acfd57c
 8007058:	3de5d93a 	.word	0x3de5d93a
 800705c:	8a2b9ceb 	.word	0x8a2b9ceb
 8007060:	3e5ae5e6 	.word	0x3e5ae5e6
 8007064:	57b1fe7d 	.word	0x57b1fe7d
 8007068:	3ec71de3 	.word	0x3ec71de3
 800706c:	19c161d5 	.word	0x19c161d5
 8007070:	3f2a01a0 	.word	0x3f2a01a0
 8007074:	1110f8a6 	.word	0x1110f8a6
 8007078:	3f811111 	.word	0x3f811111

0800707c <fabs>:
 800707c:	ec51 0b10 	vmov	r0, r1, d0
 8007080:	ee10 2a10 	vmov	r2, s0
 8007084:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007088:	ec43 2b10 	vmov	d0, r2, r3
 800708c:	4770      	bx	lr
	...

08007090 <floor>:
 8007090:	ec51 0b10 	vmov	r0, r1, d0
 8007094:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007098:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800709c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80070a0:	2e13      	cmp	r6, #19
 80070a2:	ee10 5a10 	vmov	r5, s0
 80070a6:	ee10 8a10 	vmov	r8, s0
 80070aa:	460c      	mov	r4, r1
 80070ac:	dc32      	bgt.n	8007114 <floor+0x84>
 80070ae:	2e00      	cmp	r6, #0
 80070b0:	da14      	bge.n	80070dc <floor+0x4c>
 80070b2:	a333      	add	r3, pc, #204	; (adr r3, 8007180 <floor+0xf0>)
 80070b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070b8:	f7f9 f8ac 	bl	8000214 <__adddf3>
 80070bc:	2200      	movs	r2, #0
 80070be:	2300      	movs	r3, #0
 80070c0:	f7f9 fcee 	bl	8000aa0 <__aeabi_dcmpgt>
 80070c4:	b138      	cbz	r0, 80070d6 <floor+0x46>
 80070c6:	2c00      	cmp	r4, #0
 80070c8:	da57      	bge.n	800717a <floor+0xea>
 80070ca:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80070ce:	431d      	orrs	r5, r3
 80070d0:	d001      	beq.n	80070d6 <floor+0x46>
 80070d2:	4c2d      	ldr	r4, [pc, #180]	; (8007188 <floor+0xf8>)
 80070d4:	2500      	movs	r5, #0
 80070d6:	4621      	mov	r1, r4
 80070d8:	4628      	mov	r0, r5
 80070da:	e025      	b.n	8007128 <floor+0x98>
 80070dc:	4f2b      	ldr	r7, [pc, #172]	; (800718c <floor+0xfc>)
 80070de:	4137      	asrs	r7, r6
 80070e0:	ea01 0307 	and.w	r3, r1, r7
 80070e4:	4303      	orrs	r3, r0
 80070e6:	d01f      	beq.n	8007128 <floor+0x98>
 80070e8:	a325      	add	r3, pc, #148	; (adr r3, 8007180 <floor+0xf0>)
 80070ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070ee:	f7f9 f891 	bl	8000214 <__adddf3>
 80070f2:	2200      	movs	r2, #0
 80070f4:	2300      	movs	r3, #0
 80070f6:	f7f9 fcd3 	bl	8000aa0 <__aeabi_dcmpgt>
 80070fa:	2800      	cmp	r0, #0
 80070fc:	d0eb      	beq.n	80070d6 <floor+0x46>
 80070fe:	2c00      	cmp	r4, #0
 8007100:	bfbe      	ittt	lt
 8007102:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8007106:	fa43 f606 	asrlt.w	r6, r3, r6
 800710a:	19a4      	addlt	r4, r4, r6
 800710c:	ea24 0407 	bic.w	r4, r4, r7
 8007110:	2500      	movs	r5, #0
 8007112:	e7e0      	b.n	80070d6 <floor+0x46>
 8007114:	2e33      	cmp	r6, #51	; 0x33
 8007116:	dd0b      	ble.n	8007130 <floor+0xa0>
 8007118:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800711c:	d104      	bne.n	8007128 <floor+0x98>
 800711e:	ee10 2a10 	vmov	r2, s0
 8007122:	460b      	mov	r3, r1
 8007124:	f7f9 f876 	bl	8000214 <__adddf3>
 8007128:	ec41 0b10 	vmov	d0, r0, r1
 800712c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007130:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8007134:	f04f 33ff 	mov.w	r3, #4294967295
 8007138:	fa23 f707 	lsr.w	r7, r3, r7
 800713c:	4207      	tst	r7, r0
 800713e:	d0f3      	beq.n	8007128 <floor+0x98>
 8007140:	a30f      	add	r3, pc, #60	; (adr r3, 8007180 <floor+0xf0>)
 8007142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007146:	f7f9 f865 	bl	8000214 <__adddf3>
 800714a:	2200      	movs	r2, #0
 800714c:	2300      	movs	r3, #0
 800714e:	f7f9 fca7 	bl	8000aa0 <__aeabi_dcmpgt>
 8007152:	2800      	cmp	r0, #0
 8007154:	d0bf      	beq.n	80070d6 <floor+0x46>
 8007156:	2c00      	cmp	r4, #0
 8007158:	da02      	bge.n	8007160 <floor+0xd0>
 800715a:	2e14      	cmp	r6, #20
 800715c:	d103      	bne.n	8007166 <floor+0xd6>
 800715e:	3401      	adds	r4, #1
 8007160:	ea25 0507 	bic.w	r5, r5, r7
 8007164:	e7b7      	b.n	80070d6 <floor+0x46>
 8007166:	2301      	movs	r3, #1
 8007168:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800716c:	fa03 f606 	lsl.w	r6, r3, r6
 8007170:	4435      	add	r5, r6
 8007172:	4545      	cmp	r5, r8
 8007174:	bf38      	it	cc
 8007176:	18e4      	addcc	r4, r4, r3
 8007178:	e7f2      	b.n	8007160 <floor+0xd0>
 800717a:	2500      	movs	r5, #0
 800717c:	462c      	mov	r4, r5
 800717e:	e7aa      	b.n	80070d6 <floor+0x46>
 8007180:	8800759c 	.word	0x8800759c
 8007184:	7e37e43c 	.word	0x7e37e43c
 8007188:	bff00000 	.word	0xbff00000
 800718c:	000fffff 	.word	0x000fffff

08007190 <scalbn>:
 8007190:	b570      	push	{r4, r5, r6, lr}
 8007192:	ec55 4b10 	vmov	r4, r5, d0
 8007196:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800719a:	4606      	mov	r6, r0
 800719c:	462b      	mov	r3, r5
 800719e:	b99a      	cbnz	r2, 80071c8 <scalbn+0x38>
 80071a0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80071a4:	4323      	orrs	r3, r4
 80071a6:	d036      	beq.n	8007216 <scalbn+0x86>
 80071a8:	4b39      	ldr	r3, [pc, #228]	; (8007290 <scalbn+0x100>)
 80071aa:	4629      	mov	r1, r5
 80071ac:	ee10 0a10 	vmov	r0, s0
 80071b0:	2200      	movs	r2, #0
 80071b2:	f7f9 f9e5 	bl	8000580 <__aeabi_dmul>
 80071b6:	4b37      	ldr	r3, [pc, #220]	; (8007294 <scalbn+0x104>)
 80071b8:	429e      	cmp	r6, r3
 80071ba:	4604      	mov	r4, r0
 80071bc:	460d      	mov	r5, r1
 80071be:	da10      	bge.n	80071e2 <scalbn+0x52>
 80071c0:	a32b      	add	r3, pc, #172	; (adr r3, 8007270 <scalbn+0xe0>)
 80071c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071c6:	e03a      	b.n	800723e <scalbn+0xae>
 80071c8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80071cc:	428a      	cmp	r2, r1
 80071ce:	d10c      	bne.n	80071ea <scalbn+0x5a>
 80071d0:	ee10 2a10 	vmov	r2, s0
 80071d4:	4620      	mov	r0, r4
 80071d6:	4629      	mov	r1, r5
 80071d8:	f7f9 f81c 	bl	8000214 <__adddf3>
 80071dc:	4604      	mov	r4, r0
 80071de:	460d      	mov	r5, r1
 80071e0:	e019      	b.n	8007216 <scalbn+0x86>
 80071e2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80071e6:	460b      	mov	r3, r1
 80071e8:	3a36      	subs	r2, #54	; 0x36
 80071ea:	4432      	add	r2, r6
 80071ec:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80071f0:	428a      	cmp	r2, r1
 80071f2:	dd08      	ble.n	8007206 <scalbn+0x76>
 80071f4:	2d00      	cmp	r5, #0
 80071f6:	a120      	add	r1, pc, #128	; (adr r1, 8007278 <scalbn+0xe8>)
 80071f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80071fc:	da1c      	bge.n	8007238 <scalbn+0xa8>
 80071fe:	a120      	add	r1, pc, #128	; (adr r1, 8007280 <scalbn+0xf0>)
 8007200:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007204:	e018      	b.n	8007238 <scalbn+0xa8>
 8007206:	2a00      	cmp	r2, #0
 8007208:	dd08      	ble.n	800721c <scalbn+0x8c>
 800720a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800720e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007212:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007216:	ec45 4b10 	vmov	d0, r4, r5
 800721a:	bd70      	pop	{r4, r5, r6, pc}
 800721c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8007220:	da19      	bge.n	8007256 <scalbn+0xc6>
 8007222:	f24c 3350 	movw	r3, #50000	; 0xc350
 8007226:	429e      	cmp	r6, r3
 8007228:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800722c:	dd0a      	ble.n	8007244 <scalbn+0xb4>
 800722e:	a112      	add	r1, pc, #72	; (adr r1, 8007278 <scalbn+0xe8>)
 8007230:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d1e2      	bne.n	80071fe <scalbn+0x6e>
 8007238:	a30f      	add	r3, pc, #60	; (adr r3, 8007278 <scalbn+0xe8>)
 800723a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800723e:	f7f9 f99f 	bl	8000580 <__aeabi_dmul>
 8007242:	e7cb      	b.n	80071dc <scalbn+0x4c>
 8007244:	a10a      	add	r1, pc, #40	; (adr r1, 8007270 <scalbn+0xe0>)
 8007246:	e9d1 0100 	ldrd	r0, r1, [r1]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d0b8      	beq.n	80071c0 <scalbn+0x30>
 800724e:	a10e      	add	r1, pc, #56	; (adr r1, 8007288 <scalbn+0xf8>)
 8007250:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007254:	e7b4      	b.n	80071c0 <scalbn+0x30>
 8007256:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800725a:	3236      	adds	r2, #54	; 0x36
 800725c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007260:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8007264:	4620      	mov	r0, r4
 8007266:	4b0c      	ldr	r3, [pc, #48]	; (8007298 <scalbn+0x108>)
 8007268:	2200      	movs	r2, #0
 800726a:	e7e8      	b.n	800723e <scalbn+0xae>
 800726c:	f3af 8000 	nop.w
 8007270:	c2f8f359 	.word	0xc2f8f359
 8007274:	01a56e1f 	.word	0x01a56e1f
 8007278:	8800759c 	.word	0x8800759c
 800727c:	7e37e43c 	.word	0x7e37e43c
 8007280:	8800759c 	.word	0x8800759c
 8007284:	fe37e43c 	.word	0xfe37e43c
 8007288:	c2f8f359 	.word	0xc2f8f359
 800728c:	81a56e1f 	.word	0x81a56e1f
 8007290:	43500000 	.word	0x43500000
 8007294:	ffff3cb0 	.word	0xffff3cb0
 8007298:	3c900000 	.word	0x3c900000

0800729c <_init>:
 800729c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800729e:	bf00      	nop
 80072a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072a2:	bc08      	pop	{r3}
 80072a4:	469e      	mov	lr, r3
 80072a6:	4770      	bx	lr

080072a8 <_fini>:
 80072a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072aa:	bf00      	nop
 80072ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072ae:	bc08      	pop	{r3}
 80072b0:	469e      	mov	lr, r3
 80072b2:	4770      	bx	lr
