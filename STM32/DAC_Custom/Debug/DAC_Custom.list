
DAC_Custom.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008428  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004b8  080085f0  080085f0  000185f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008aa8  08008aa8  0002012c  2**0
                  CONTENTS
  4 .ARM          00000008  08008aa8  08008aa8  00018aa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008ab0  08008ab0  0002012c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008ab0  08008ab0  00018ab0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008ab4  08008ab4  00018ab4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000012c  20000000  08008ab8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001fe98  2000012c  08008be4  0002012c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2001ffc4  08008be4  0002ffc4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019b9e  00000000  00000000  0002015c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003154  00000000  00000000  00039cfa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013d0  00000000  00000000  0003ce50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001298  00000000  00000000  0003e220  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000284f8  00000000  00000000  0003f4b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018558  00000000  00000000  000679b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f5b97  00000000  00000000  0007ff08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00175a9f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005324  00000000  00000000  00175af4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000012c 	.word	0x2000012c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080085d8 	.word	0x080085d8

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000130 	.word	0x20000130
 8000204:	080085d8 	.word	0x080085d8

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b96e 	b.w	80004fc <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9d08      	ldr	r5, [sp, #32]
 800023e:	4604      	mov	r4, r0
 8000240:	468c      	mov	ip, r1
 8000242:	2b00      	cmp	r3, #0
 8000244:	f040 8083 	bne.w	800034e <__udivmoddi4+0x116>
 8000248:	428a      	cmp	r2, r1
 800024a:	4617      	mov	r7, r2
 800024c:	d947      	bls.n	80002de <__udivmoddi4+0xa6>
 800024e:	fab2 f282 	clz	r2, r2
 8000252:	b142      	cbz	r2, 8000266 <__udivmoddi4+0x2e>
 8000254:	f1c2 0020 	rsb	r0, r2, #32
 8000258:	fa24 f000 	lsr.w	r0, r4, r0
 800025c:	4091      	lsls	r1, r2
 800025e:	4097      	lsls	r7, r2
 8000260:	ea40 0c01 	orr.w	ip, r0, r1
 8000264:	4094      	lsls	r4, r2
 8000266:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800026a:	0c23      	lsrs	r3, r4, #16
 800026c:	fbbc f6f8 	udiv	r6, ip, r8
 8000270:	fa1f fe87 	uxth.w	lr, r7
 8000274:	fb08 c116 	mls	r1, r8, r6, ip
 8000278:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027c:	fb06 f10e 	mul.w	r1, r6, lr
 8000280:	4299      	cmp	r1, r3
 8000282:	d909      	bls.n	8000298 <__udivmoddi4+0x60>
 8000284:	18fb      	adds	r3, r7, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295
 800028a:	f080 8119 	bcs.w	80004c0 <__udivmoddi4+0x288>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 8116 	bls.w	80004c0 <__udivmoddi4+0x288>
 8000294:	3e02      	subs	r6, #2
 8000296:	443b      	add	r3, r7
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002ac:	45a6      	cmp	lr, r4
 80002ae:	d909      	bls.n	80002c4 <__udivmoddi4+0x8c>
 80002b0:	193c      	adds	r4, r7, r4
 80002b2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b6:	f080 8105 	bcs.w	80004c4 <__udivmoddi4+0x28c>
 80002ba:	45a6      	cmp	lr, r4
 80002bc:	f240 8102 	bls.w	80004c4 <__udivmoddi4+0x28c>
 80002c0:	3802      	subs	r0, #2
 80002c2:	443c      	add	r4, r7
 80002c4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c8:	eba4 040e 	sub.w	r4, r4, lr
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa0>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	b902      	cbnz	r2, 80002e2 <__udivmoddi4+0xaa>
 80002e0:	deff      	udf	#255	; 0xff
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d150      	bne.n	800038c <__udivmoddi4+0x154>
 80002ea:	1bcb      	subs	r3, r1, r7
 80002ec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f0:	fa1f f887 	uxth.w	r8, r7
 80002f4:	2601      	movs	r6, #1
 80002f6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002fa:	0c21      	lsrs	r1, r4, #16
 80002fc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000300:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000304:	fb08 f30c 	mul.w	r3, r8, ip
 8000308:	428b      	cmp	r3, r1
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0xe4>
 800030c:	1879      	adds	r1, r7, r1
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0xe2>
 8000314:	428b      	cmp	r3, r1
 8000316:	f200 80e9 	bhi.w	80004ec <__udivmoddi4+0x2b4>
 800031a:	4684      	mov	ip, r0
 800031c:	1ac9      	subs	r1, r1, r3
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1110 	mls	r1, lr, r0, r1
 8000328:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x10c>
 8000334:	193c      	adds	r4, r7, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x10a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80d9 	bhi.w	80004f4 <__udivmoddi4+0x2bc>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e7bf      	b.n	80002ce <__udivmoddi4+0x96>
 800034e:	428b      	cmp	r3, r1
 8000350:	d909      	bls.n	8000366 <__udivmoddi4+0x12e>
 8000352:	2d00      	cmp	r5, #0
 8000354:	f000 80b1 	beq.w	80004ba <__udivmoddi4+0x282>
 8000358:	2600      	movs	r6, #0
 800035a:	e9c5 0100 	strd	r0, r1, [r5]
 800035e:	4630      	mov	r0, r6
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	fab3 f683 	clz	r6, r3
 800036a:	2e00      	cmp	r6, #0
 800036c:	d14a      	bne.n	8000404 <__udivmoddi4+0x1cc>
 800036e:	428b      	cmp	r3, r1
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0x140>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 80b8 	bhi.w	80004e8 <__udivmoddi4+0x2b0>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb61 0103 	sbc.w	r1, r1, r3
 800037e:	2001      	movs	r0, #1
 8000380:	468c      	mov	ip, r1
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0a8      	beq.n	80002d8 <__udivmoddi4+0xa0>
 8000386:	e9c5 4c00 	strd	r4, ip, [r5]
 800038a:	e7a5      	b.n	80002d8 <__udivmoddi4+0xa0>
 800038c:	f1c2 0320 	rsb	r3, r2, #32
 8000390:	fa20 f603 	lsr.w	r6, r0, r3
 8000394:	4097      	lsls	r7, r2
 8000396:	fa01 f002 	lsl.w	r0, r1, r2
 800039a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800039e:	40d9      	lsrs	r1, r3
 80003a0:	4330      	orrs	r0, r6
 80003a2:	0c03      	lsrs	r3, r0, #16
 80003a4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003a8:	fa1f f887 	uxth.w	r8, r7
 80003ac:	fb0e 1116 	mls	r1, lr, r6, r1
 80003b0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b4:	fb06 f108 	mul.w	r1, r6, r8
 80003b8:	4299      	cmp	r1, r3
 80003ba:	fa04 f402 	lsl.w	r4, r4, r2
 80003be:	d909      	bls.n	80003d4 <__udivmoddi4+0x19c>
 80003c0:	18fb      	adds	r3, r7, r3
 80003c2:	f106 3cff 	add.w	ip, r6, #4294967295
 80003c6:	f080 808d 	bcs.w	80004e4 <__udivmoddi4+0x2ac>
 80003ca:	4299      	cmp	r1, r3
 80003cc:	f240 808a 	bls.w	80004e4 <__udivmoddi4+0x2ac>
 80003d0:	3e02      	subs	r6, #2
 80003d2:	443b      	add	r3, r7
 80003d4:	1a5b      	subs	r3, r3, r1
 80003d6:	b281      	uxth	r1, r0
 80003d8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003dc:	fb0e 3310 	mls	r3, lr, r0, r3
 80003e0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003e4:	fb00 f308 	mul.w	r3, r0, r8
 80003e8:	428b      	cmp	r3, r1
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x1c4>
 80003ec:	1879      	adds	r1, r7, r1
 80003ee:	f100 3cff 	add.w	ip, r0, #4294967295
 80003f2:	d273      	bcs.n	80004dc <__udivmoddi4+0x2a4>
 80003f4:	428b      	cmp	r3, r1
 80003f6:	d971      	bls.n	80004dc <__udivmoddi4+0x2a4>
 80003f8:	3802      	subs	r0, #2
 80003fa:	4439      	add	r1, r7
 80003fc:	1acb      	subs	r3, r1, r3
 80003fe:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000402:	e778      	b.n	80002f6 <__udivmoddi4+0xbe>
 8000404:	f1c6 0c20 	rsb	ip, r6, #32
 8000408:	fa03 f406 	lsl.w	r4, r3, r6
 800040c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000410:	431c      	orrs	r4, r3
 8000412:	fa20 f70c 	lsr.w	r7, r0, ip
 8000416:	fa01 f306 	lsl.w	r3, r1, r6
 800041a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800041e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000422:	431f      	orrs	r7, r3
 8000424:	0c3b      	lsrs	r3, r7, #16
 8000426:	fbb1 f9fe 	udiv	r9, r1, lr
 800042a:	fa1f f884 	uxth.w	r8, r4
 800042e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000432:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000436:	fb09 fa08 	mul.w	sl, r9, r8
 800043a:	458a      	cmp	sl, r1
 800043c:	fa02 f206 	lsl.w	r2, r2, r6
 8000440:	fa00 f306 	lsl.w	r3, r0, r6
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x220>
 8000446:	1861      	adds	r1, r4, r1
 8000448:	f109 30ff 	add.w	r0, r9, #4294967295
 800044c:	d248      	bcs.n	80004e0 <__udivmoddi4+0x2a8>
 800044e:	458a      	cmp	sl, r1
 8000450:	d946      	bls.n	80004e0 <__udivmoddi4+0x2a8>
 8000452:	f1a9 0902 	sub.w	r9, r9, #2
 8000456:	4421      	add	r1, r4
 8000458:	eba1 010a 	sub.w	r1, r1, sl
 800045c:	b2bf      	uxth	r7, r7
 800045e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000462:	fb0e 1110 	mls	r1, lr, r0, r1
 8000466:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800046a:	fb00 f808 	mul.w	r8, r0, r8
 800046e:	45b8      	cmp	r8, r7
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x24a>
 8000472:	19e7      	adds	r7, r4, r7
 8000474:	f100 31ff 	add.w	r1, r0, #4294967295
 8000478:	d22e      	bcs.n	80004d8 <__udivmoddi4+0x2a0>
 800047a:	45b8      	cmp	r8, r7
 800047c:	d92c      	bls.n	80004d8 <__udivmoddi4+0x2a0>
 800047e:	3802      	subs	r0, #2
 8000480:	4427      	add	r7, r4
 8000482:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000486:	eba7 0708 	sub.w	r7, r7, r8
 800048a:	fba0 8902 	umull	r8, r9, r0, r2
 800048e:	454f      	cmp	r7, r9
 8000490:	46c6      	mov	lr, r8
 8000492:	4649      	mov	r1, r9
 8000494:	d31a      	bcc.n	80004cc <__udivmoddi4+0x294>
 8000496:	d017      	beq.n	80004c8 <__udivmoddi4+0x290>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x27a>
 800049a:	ebb3 020e 	subs.w	r2, r3, lr
 800049e:	eb67 0701 	sbc.w	r7, r7, r1
 80004a2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004a6:	40f2      	lsrs	r2, r6
 80004a8:	ea4c 0202 	orr.w	r2, ip, r2
 80004ac:	40f7      	lsrs	r7, r6
 80004ae:	e9c5 2700 	strd	r2, r7, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	462e      	mov	r6, r5
 80004bc:	4628      	mov	r0, r5
 80004be:	e70b      	b.n	80002d8 <__udivmoddi4+0xa0>
 80004c0:	4606      	mov	r6, r0
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0x60>
 80004c4:	4618      	mov	r0, r3
 80004c6:	e6fd      	b.n	80002c4 <__udivmoddi4+0x8c>
 80004c8:	4543      	cmp	r3, r8
 80004ca:	d2e5      	bcs.n	8000498 <__udivmoddi4+0x260>
 80004cc:	ebb8 0e02 	subs.w	lr, r8, r2
 80004d0:	eb69 0104 	sbc.w	r1, r9, r4
 80004d4:	3801      	subs	r0, #1
 80004d6:	e7df      	b.n	8000498 <__udivmoddi4+0x260>
 80004d8:	4608      	mov	r0, r1
 80004da:	e7d2      	b.n	8000482 <__udivmoddi4+0x24a>
 80004dc:	4660      	mov	r0, ip
 80004de:	e78d      	b.n	80003fc <__udivmoddi4+0x1c4>
 80004e0:	4681      	mov	r9, r0
 80004e2:	e7b9      	b.n	8000458 <__udivmoddi4+0x220>
 80004e4:	4666      	mov	r6, ip
 80004e6:	e775      	b.n	80003d4 <__udivmoddi4+0x19c>
 80004e8:	4630      	mov	r0, r6
 80004ea:	e74a      	b.n	8000382 <__udivmoddi4+0x14a>
 80004ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f0:	4439      	add	r1, r7
 80004f2:	e713      	b.n	800031c <__udivmoddi4+0xe4>
 80004f4:	3802      	subs	r0, #2
 80004f6:	443c      	add	r4, r7
 80004f8:	e724      	b.n	8000344 <__udivmoddi4+0x10c>
 80004fa:	bf00      	nop

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000500:	b480      	push	{r7}
 8000502:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000504:	f3bf 8f4f 	dsb	sy
}
 8000508:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800050a:	f3bf 8f6f 	isb	sy
}
 800050e:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000510:	4b0d      	ldr	r3, [pc, #52]	; (8000548 <SCB_EnableICache+0x48>)
 8000512:	2200      	movs	r2, #0
 8000514:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000518:	f3bf 8f4f 	dsb	sy
}
 800051c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800051e:	f3bf 8f6f 	isb	sy
}
 8000522:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000524:	4b08      	ldr	r3, [pc, #32]	; (8000548 <SCB_EnableICache+0x48>)
 8000526:	695b      	ldr	r3, [r3, #20]
 8000528:	4a07      	ldr	r2, [pc, #28]	; (8000548 <SCB_EnableICache+0x48>)
 800052a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800052e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000530:	f3bf 8f4f 	dsb	sy
}
 8000534:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000536:	f3bf 8f6f 	isb	sy
}
 800053a:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 800053c:	bf00      	nop
 800053e:	46bd      	mov	sp, r7
 8000540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000544:	4770      	bx	lr
 8000546:	bf00      	nop
 8000548:	e000ed00 	.word	0xe000ed00

0800054c <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 800054c:	b480      	push	{r7}
 800054e:	b085      	sub	sp, #20
 8000550:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000552:	4b1f      	ldr	r3, [pc, #124]	; (80005d0 <SCB_EnableDCache+0x84>)
 8000554:	2200      	movs	r2, #0
 8000556:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800055a:	f3bf 8f4f 	dsb	sy
}
 800055e:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000560:	4b1b      	ldr	r3, [pc, #108]	; (80005d0 <SCB_EnableDCache+0x84>)
 8000562:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000566:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	0b5b      	lsrs	r3, r3, #13
 800056c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000570:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	08db      	lsrs	r3, r3, #3
 8000576:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800057a:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	015a      	lsls	r2, r3, #5
 8000580:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000584:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000586:	68ba      	ldr	r2, [r7, #8]
 8000588:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800058a:	4911      	ldr	r1, [pc, #68]	; (80005d0 <SCB_EnableDCache+0x84>)
 800058c:	4313      	orrs	r3, r2
 800058e:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000592:	68bb      	ldr	r3, [r7, #8]
 8000594:	1e5a      	subs	r2, r3, #1
 8000596:	60ba      	str	r2, [r7, #8]
 8000598:	2b00      	cmp	r3, #0
 800059a:	d1ef      	bne.n	800057c <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 800059c:	68fb      	ldr	r3, [r7, #12]
 800059e:	1e5a      	subs	r2, r3, #1
 80005a0:	60fa      	str	r2, [r7, #12]
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d1e5      	bne.n	8000572 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 80005a6:	f3bf 8f4f 	dsb	sy
}
 80005aa:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80005ac:	4b08      	ldr	r3, [pc, #32]	; (80005d0 <SCB_EnableDCache+0x84>)
 80005ae:	695b      	ldr	r3, [r3, #20]
 80005b0:	4a07      	ldr	r2, [pc, #28]	; (80005d0 <SCB_EnableDCache+0x84>)
 80005b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80005b6:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80005b8:	f3bf 8f4f 	dsb	sy
}
 80005bc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005be:	f3bf 8f6f 	isb	sy
}
 80005c2:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 80005c4:	bf00      	nop
 80005c6:	3714      	adds	r7, #20
 80005c8:	46bd      	mov	sp, r7
 80005ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ce:	4770      	bx	lr
 80005d0:	e000ed00 	.word	0xe000ed00

080005d4 <init_SD>:
/* USER CODE BEGIN 0 */

/******************************* SD CARD HANDLER FUNCTIONS *********************************/

void init_SD()
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
	res = BSP_SD_Init();				// initialize SD stuff
 80005d8:	f004 ffb8 	bl	800554c <BSP_SD_Init>
 80005dc:	4603      	mov	r3, r0
 80005de:	461a      	mov	r2, r3
 80005e0:	4b06      	ldr	r3, [pc, #24]	; (80005fc <init_SD+0x28>)
 80005e2:	701a      	strb	r2, [r3, #0]
	res = f_mount(&SDFatFs, "", 1);		// mount the SD card
 80005e4:	2201      	movs	r2, #1
 80005e6:	4906      	ldr	r1, [pc, #24]	; (8000600 <init_SD+0x2c>)
 80005e8:	4806      	ldr	r0, [pc, #24]	; (8000604 <init_SD+0x30>)
 80005ea:	f007 fa2f 	bl	8007a4c <f_mount>
 80005ee:	4603      	mov	r3, r0
 80005f0:	461a      	mov	r2, r3
 80005f2:	4b02      	ldr	r3, [pc, #8]	; (80005fc <init_SD+0x28>)
 80005f4:	701a      	strb	r2, [r3, #0]
}
 80005f6:	bf00      	nop
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	2001fb44 	.word	0x2001fb44
 8000600:	080085f0 	.word	0x080085f0
 8000604:	2000fec4 	.word	0x2000fec4

08000608 <read_BIN_AUDIO>:

void read_BIN_AUDIO(int note)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
	//res = f_open(&myFile, "c5.bin", FA_OPEN_ALWAYS|FA_WRITE|FA_READ);
	res = f_open(&myFile, audio_filenames[note], FA_OPEN_ALWAYS|FA_WRITE|FA_READ);
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	00db      	lsls	r3, r3, #3
 8000614:	4a0e      	ldr	r2, [pc, #56]	; (8000650 <read_BIN_AUDIO+0x48>)
 8000616:	4413      	add	r3, r2
 8000618:	2213      	movs	r2, #19
 800061a:	4619      	mov	r1, r3
 800061c:	480d      	ldr	r0, [pc, #52]	; (8000654 <read_BIN_AUDIO+0x4c>)
 800061e:	f007 fa5b 	bl	8007ad8 <f_open>
 8000622:	4603      	mov	r3, r0
 8000624:	461a      	mov	r2, r3
 8000626:	4b0c      	ldr	r3, [pc, #48]	; (8000658 <read_BIN_AUDIO+0x50>)
 8000628:	701a      	strb	r2, [r3, #0]
	res = f_read(&myFile, DATA_BUFFER, BUFF_SIZE, &bytesRead);
 800062a:	4b0c      	ldr	r3, [pc, #48]	; (800065c <read_BIN_AUDIO+0x54>)
 800062c:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 8000630:	490b      	ldr	r1, [pc, #44]	; (8000660 <read_BIN_AUDIO+0x58>)
 8000632:	4808      	ldr	r0, [pc, #32]	; (8000654 <read_BIN_AUDIO+0x4c>)
 8000634:	f007 fc9a 	bl	8007f6c <f_read>
 8000638:	4603      	mov	r3, r0
 800063a:	461a      	mov	r2, r3
 800063c:	4b06      	ldr	r3, [pc, #24]	; (8000658 <read_BIN_AUDIO+0x50>)
 800063e:	701a      	strb	r2, [r3, #0]
	f_close(&myFile);
 8000640:	4804      	ldr	r0, [pc, #16]	; (8000654 <read_BIN_AUDIO+0x4c>)
 8000642:	f007 fe50 	bl	80082e6 <f_close>
}
 8000646:	bf00      	nop
 8000648:	3708      	adds	r7, #8
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	20000000 	.word	0x20000000
 8000654:	2000017c 	.word	0x2000017c
 8000658:	2001fb44 	.word	0x2001fb44
 800065c:	200003ac 	.word	0x200003ac
 8000660:	200100f8 	.word	0x200100f8

08000664 <DAC_OUTPUT>:
pin1	PC6
pin0	PC7
*/

// this function reads DAC_REG and generates corresponding DC voltage level to the DAC
void DAC_OUTPUT(){
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOI, GPIO_PIN_3, !!(DAC_REG & (1<<7)));
 8000668:	4b37      	ldr	r3, [pc, #220]	; (8000748 <DAC_OUTPUT+0xe4>)
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	b25b      	sxtb	r3, r3
 800066e:	b2db      	uxtb	r3, r3
 8000670:	09db      	lsrs	r3, r3, #7
 8000672:	b2db      	uxtb	r3, r3
 8000674:	461a      	mov	r2, r3
 8000676:	2108      	movs	r1, #8
 8000678:	4834      	ldr	r0, [pc, #208]	; (800074c <DAC_OUTPUT+0xe8>)
 800067a:	f001 f8cf 	bl	800181c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOH, GPIO_PIN_6, !!(DAC_REG & (1<<6)));
 800067e:	4b32      	ldr	r3, [pc, #200]	; (8000748 <DAC_OUTPUT+0xe4>)
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000686:	2b00      	cmp	r3, #0
 8000688:	bf14      	ite	ne
 800068a:	2301      	movne	r3, #1
 800068c:	2300      	moveq	r3, #0
 800068e:	b2db      	uxtb	r3, r3
 8000690:	461a      	mov	r2, r3
 8000692:	2140      	movs	r1, #64	; 0x40
 8000694:	482e      	ldr	r0, [pc, #184]	; (8000750 <DAC_OUTPUT+0xec>)
 8000696:	f001 f8c1 	bl	800181c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, !!(DAC_REG & (1<<5)));
 800069a:	4b2b      	ldr	r3, [pc, #172]	; (8000748 <DAC_OUTPUT+0xe4>)
 800069c:	781b      	ldrb	r3, [r3, #0]
 800069e:	f003 0320 	and.w	r3, r3, #32
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	bf14      	ite	ne
 80006a6:	2301      	movne	r3, #1
 80006a8:	2300      	moveq	r3, #0
 80006aa:	b2db      	uxtb	r3, r3
 80006ac:	461a      	mov	r2, r3
 80006ae:	2101      	movs	r1, #1
 80006b0:	4826      	ldr	r0, [pc, #152]	; (800074c <DAC_OUTPUT+0xe8>)
 80006b2:	f001 f8b3 	bl	800181c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7, !!(DAC_REG & (1<<4)));
 80006b6:	4b24      	ldr	r3, [pc, #144]	; (8000748 <DAC_OUTPUT+0xe4>)
 80006b8:	781b      	ldrb	r3, [r3, #0]
 80006ba:	f003 0310 	and.w	r3, r3, #16
 80006be:	2b00      	cmp	r3, #0
 80006c0:	bf14      	ite	ne
 80006c2:	2301      	movne	r3, #1
 80006c4:	2300      	moveq	r3, #0
 80006c6:	b2db      	uxtb	r3, r3
 80006c8:	461a      	mov	r2, r3
 80006ca:	2180      	movs	r1, #128	; 0x80
 80006cc:	4821      	ldr	r0, [pc, #132]	; (8000754 <DAC_OUTPUT+0xf0>)
 80006ce:	f001 f8a5 	bl	800181c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, !!(DAC_REG & (1<<3)));
 80006d2:	4b1d      	ldr	r3, [pc, #116]	; (8000748 <DAC_OUTPUT+0xe4>)
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	f003 0308 	and.w	r3, r3, #8
 80006da:	2b00      	cmp	r3, #0
 80006dc:	bf14      	ite	ne
 80006de:	2301      	movne	r3, #1
 80006e0:	2300      	moveq	r3, #0
 80006e2:	b2db      	uxtb	r3, r3
 80006e4:	461a      	mov	r2, r3
 80006e6:	2110      	movs	r1, #16
 80006e8:	481b      	ldr	r0, [pc, #108]	; (8000758 <DAC_OUTPUT+0xf4>)
 80006ea:	f001 f897 	bl	800181c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, !!(DAC_REG & (1<<2)));
 80006ee:	4b16      	ldr	r3, [pc, #88]	; (8000748 <DAC_OUTPUT+0xe4>)
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	f003 0304 	and.w	r3, r3, #4
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	bf14      	ite	ne
 80006fa:	2301      	movne	r3, #1
 80006fc:	2300      	moveq	r3, #0
 80006fe:	b2db      	uxtb	r3, r3
 8000700:	461a      	mov	r2, r3
 8000702:	2140      	movs	r1, #64	; 0x40
 8000704:	4813      	ldr	r0, [pc, #76]	; (8000754 <DAC_OUTPUT+0xf0>)
 8000706:	f001 f889 	bl	800181c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, !!(DAC_REG & (1<<1)));
 800070a:	4b0f      	ldr	r3, [pc, #60]	; (8000748 <DAC_OUTPUT+0xe4>)
 800070c:	781b      	ldrb	r3, [r3, #0]
 800070e:	f003 0302 	and.w	r3, r3, #2
 8000712:	2b00      	cmp	r3, #0
 8000714:	bf14      	ite	ne
 8000716:	2301      	movne	r3, #1
 8000718:	2300      	moveq	r3, #0
 800071a:	b2db      	uxtb	r3, r3
 800071c:	461a      	mov	r2, r3
 800071e:	2140      	movs	r1, #64	; 0x40
 8000720:	480e      	ldr	r0, [pc, #56]	; (800075c <DAC_OUTPUT+0xf8>)
 8000722:	f001 f87b 	bl	800181c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, !!(DAC_REG & (1<<0)));
 8000726:	4b08      	ldr	r3, [pc, #32]	; (8000748 <DAC_OUTPUT+0xe4>)
 8000728:	781b      	ldrb	r3, [r3, #0]
 800072a:	f003 0301 	and.w	r3, r3, #1
 800072e:	2b00      	cmp	r3, #0
 8000730:	bf14      	ite	ne
 8000732:	2301      	movne	r3, #1
 8000734:	2300      	moveq	r3, #0
 8000736:	b2db      	uxtb	r3, r3
 8000738:	461a      	mov	r2, r3
 800073a:	2180      	movs	r1, #128	; 0x80
 800073c:	4807      	ldr	r0, [pc, #28]	; (800075c <DAC_OUTPUT+0xf8>)
 800073e:	f001 f86d 	bl	800181c <HAL_GPIO_WritePin>
}
 8000742:	bf00      	nop
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	20000434 	.word	0x20000434
 800074c:	40022000 	.word	0x40022000
 8000750:	40021c00 	.word	0x40021c00
 8000754:	40021800 	.word	0x40021800
 8000758:	40020400 	.word	0x40020400
 800075c:	40020800 	.word	0x40020800

08000760 <update_audio_buffer>:

// starts at the current audio_pointer location and from there keeps adding values of data
// buffer to audio buffer for new tone.
void update_audio_buffer(){
 8000760:	b480      	push	{r7}
 8000762:	b083      	sub	sp, #12
 8000764:	af00      	add	r7, sp, #0
	int idx_audio, idx_data;
	// int scaling_factor = 2;		// scaling factor to make sure value does not overflow
	idx_audio = AUDIO_PTR + 1;	// get current position of audio buffer pointer
 8000766:	4b1c      	ldr	r3, [pc, #112]	; (80007d8 <update_audio_buffer+0x78>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	3301      	adds	r3, #1
 800076c:	607b      	str	r3, [r7, #4]
	for (idx_data=0; idx_data<bytesRead; idx_data++){
 800076e:	2300      	movs	r3, #0
 8000770:	603b      	str	r3, [r7, #0]
 8000772:	e025      	b.n	80007c0 <update_audio_buffer+0x60>
		idx_audio = (idx_audio+1) % BUFF_SIZE;
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	3301      	adds	r3, #1
 8000778:	4a18      	ldr	r2, [pc, #96]	; (80007dc <update_audio_buffer+0x7c>)
 800077a:	fb82 1203 	smull	r1, r2, r2, r3
 800077e:	1311      	asrs	r1, r2, #12
 8000780:	17da      	asrs	r2, r3, #31
 8000782:	1a8a      	subs	r2, r1, r2
 8000784:	f44f 417a 	mov.w	r1, #64000	; 0xfa00
 8000788:	fb01 f202 	mul.w	r2, r1, r2
 800078c:	1a9b      	subs	r3, r3, r2
 800078e:	607b      	str	r3, [r7, #4]
		AUDIO_BUFFER[idx_audio]+=AUDIO_BUFFER[idx_audio] + DATA_BUFFER[idx_data];
 8000790:	4a13      	ldr	r2, [pc, #76]	; (80007e0 <update_audio_buffer+0x80>)
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	4413      	add	r3, r2
 8000796:	781a      	ldrb	r2, [r3, #0]
 8000798:	4911      	ldr	r1, [pc, #68]	; (80007e0 <update_audio_buffer+0x80>)
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	440b      	add	r3, r1
 800079e:	7819      	ldrb	r1, [r3, #0]
 80007a0:	4810      	ldr	r0, [pc, #64]	; (80007e4 <update_audio_buffer+0x84>)
 80007a2:	683b      	ldr	r3, [r7, #0]
 80007a4:	4403      	add	r3, r0
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	440b      	add	r3, r1
 80007aa:	b2db      	uxtb	r3, r3
 80007ac:	4413      	add	r3, r2
 80007ae:	b2d9      	uxtb	r1, r3
 80007b0:	4a0b      	ldr	r2, [pc, #44]	; (80007e0 <update_audio_buffer+0x80>)
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	4413      	add	r3, r2
 80007b6:	460a      	mov	r2, r1
 80007b8:	701a      	strb	r2, [r3, #0]
	for (idx_data=0; idx_data<bytesRead; idx_data++){
 80007ba:	683b      	ldr	r3, [r7, #0]
 80007bc:	3301      	adds	r3, #1
 80007be:	603b      	str	r3, [r7, #0]
 80007c0:	683a      	ldr	r2, [r7, #0]
 80007c2:	4b09      	ldr	r3, [pc, #36]	; (80007e8 <update_audio_buffer+0x88>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	429a      	cmp	r2, r3
 80007c8:	d3d4      	bcc.n	8000774 <update_audio_buffer+0x14>
	}
}
 80007ca:	bf00      	nop
 80007cc:	bf00      	nop
 80007ce:	370c      	adds	r7, #12
 80007d0:	46bd      	mov	sp, r7
 80007d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d6:	4770      	bx	lr
 80007d8:	2001fb50 	.word	0x2001fb50
 80007dc:	10624dd3 	.word	0x10624dd3
 80007e0:	20000438 	.word	0x20000438
 80007e4:	200100f8 	.word	0x200100f8
 80007e8:	200003ac 	.word	0x200003ac

080007ec <keyboard_interrupt_handler>:
IDP[3] A3 PF8		INF[3] pin11 PB15
IDP[4] A4 PF7		INF[4] pin12 PB14
IDP[5] A5 PF6		INF[5] pin13 PI1
*/
// reads key press/release information from Arduino DUE
void keyboard_interrupt_handler(){
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
	key_ID[0] = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 80007f0:	2101      	movs	r1, #1
 80007f2:	482e      	ldr	r0, [pc, #184]	; (80008ac <keyboard_interrupt_handler+0xc0>)
 80007f4:	f000 fffa 	bl	80017ec <HAL_GPIO_ReadPin>
 80007f8:	4603      	mov	r3, r0
 80007fa:	461a      	mov	r2, r3
 80007fc:	4b2c      	ldr	r3, [pc, #176]	; (80008b0 <keyboard_interrupt_handler+0xc4>)
 80007fe:	701a      	strb	r2, [r3, #0]
	key_ID[1] = HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_10);
 8000800:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000804:	482b      	ldr	r0, [pc, #172]	; (80008b4 <keyboard_interrupt_handler+0xc8>)
 8000806:	f000 fff1 	bl	80017ec <HAL_GPIO_ReadPin>
 800080a:	4603      	mov	r3, r0
 800080c:	461a      	mov	r2, r3
 800080e:	4b28      	ldr	r3, [pc, #160]	; (80008b0 <keyboard_interrupt_handler+0xc4>)
 8000810:	705a      	strb	r2, [r3, #1]
	key_ID[2] = HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_9);
 8000812:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000816:	4827      	ldr	r0, [pc, #156]	; (80008b4 <keyboard_interrupt_handler+0xc8>)
 8000818:	f000 ffe8 	bl	80017ec <HAL_GPIO_ReadPin>
 800081c:	4603      	mov	r3, r0
 800081e:	461a      	mov	r2, r3
 8000820:	4b23      	ldr	r3, [pc, #140]	; (80008b0 <keyboard_interrupt_handler+0xc4>)
 8000822:	709a      	strb	r2, [r3, #2]
	key_ID[3] = HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_8);
 8000824:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000828:	4822      	ldr	r0, [pc, #136]	; (80008b4 <keyboard_interrupt_handler+0xc8>)
 800082a:	f000 ffdf 	bl	80017ec <HAL_GPIO_ReadPin>
 800082e:	4603      	mov	r3, r0
 8000830:	461a      	mov	r2, r3
 8000832:	4b1f      	ldr	r3, [pc, #124]	; (80008b0 <keyboard_interrupt_handler+0xc4>)
 8000834:	70da      	strb	r2, [r3, #3]
	key_ID[4] = HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_7);
 8000836:	2180      	movs	r1, #128	; 0x80
 8000838:	481e      	ldr	r0, [pc, #120]	; (80008b4 <keyboard_interrupt_handler+0xc8>)
 800083a:	f000 ffd7 	bl	80017ec <HAL_GPIO_ReadPin>
 800083e:	4603      	mov	r3, r0
 8000840:	461a      	mov	r2, r3
 8000842:	4b1b      	ldr	r3, [pc, #108]	; (80008b0 <keyboard_interrupt_handler+0xc4>)
 8000844:	711a      	strb	r2, [r3, #4]
	key_ID[5] = HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_6);
 8000846:	2140      	movs	r1, #64	; 0x40
 8000848:	481a      	ldr	r0, [pc, #104]	; (80008b4 <keyboard_interrupt_handler+0xc8>)
 800084a:	f000 ffcf 	bl	80017ec <HAL_GPIO_ReadPin>
 800084e:	4603      	mov	r3, r0
 8000850:	461a      	mov	r2, r3
 8000852:	4b17      	ldr	r3, [pc, #92]	; (80008b0 <keyboard_interrupt_handler+0xc4>)
 8000854:	715a      	strb	r2, [r3, #5]

	keypress = (key_ID[5]<<5) + (key_ID[4]<<4) + (key_ID[3]<<3) + (key_ID[2]<<2) + (key_ID[1]<<1) + (key_ID[0]<<0);
 8000856:	4b16      	ldr	r3, [pc, #88]	; (80008b0 <keyboard_interrupt_handler+0xc4>)
 8000858:	795b      	ldrb	r3, [r3, #5]
 800085a:	015b      	lsls	r3, r3, #5
 800085c:	b2da      	uxtb	r2, r3
 800085e:	4b14      	ldr	r3, [pc, #80]	; (80008b0 <keyboard_interrupt_handler+0xc4>)
 8000860:	791b      	ldrb	r3, [r3, #4]
 8000862:	011b      	lsls	r3, r3, #4
 8000864:	b2db      	uxtb	r3, r3
 8000866:	4413      	add	r3, r2
 8000868:	b2da      	uxtb	r2, r3
 800086a:	4b11      	ldr	r3, [pc, #68]	; (80008b0 <keyboard_interrupt_handler+0xc4>)
 800086c:	78db      	ldrb	r3, [r3, #3]
 800086e:	00db      	lsls	r3, r3, #3
 8000870:	b2db      	uxtb	r3, r3
 8000872:	4413      	add	r3, r2
 8000874:	b2da      	uxtb	r2, r3
 8000876:	4b0e      	ldr	r3, [pc, #56]	; (80008b0 <keyboard_interrupt_handler+0xc4>)
 8000878:	789b      	ldrb	r3, [r3, #2]
 800087a:	009b      	lsls	r3, r3, #2
 800087c:	b2db      	uxtb	r3, r3
 800087e:	4413      	add	r3, r2
 8000880:	b2da      	uxtb	r2, r3
 8000882:	4b0b      	ldr	r3, [pc, #44]	; (80008b0 <keyboard_interrupt_handler+0xc4>)
 8000884:	785b      	ldrb	r3, [r3, #1]
 8000886:	005b      	lsls	r3, r3, #1
 8000888:	b2db      	uxtb	r3, r3
 800088a:	4413      	add	r3, r2
 800088c:	b2da      	uxtb	r2, r3
 800088e:	4b08      	ldr	r3, [pc, #32]	; (80008b0 <keyboard_interrupt_handler+0xc4>)
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	4413      	add	r3, r2
 8000894:	b2da      	uxtb	r2, r3
 8000896:	4b08      	ldr	r3, [pc, #32]	; (80008b8 <keyboard_interrupt_handler+0xcc>)
 8000898:	701a      	strb	r2, [r3, #0]
//	key_info[2] = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8);
//	key_info[3] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15);
//	key_info[4] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14);
//	key_info[5] = HAL_GPIO_ReadPin(GPIOI, GPIO_PIN_1);

	read_BIN_AUDIO(keypress);	// read the corresponding audio file from SD card and save to data buffer
 800089a:	4b07      	ldr	r3, [pc, #28]	; (80008b8 <keyboard_interrupt_handler+0xcc>)
 800089c:	781b      	ldrb	r3, [r3, #0]
 800089e:	4618      	mov	r0, r3
 80008a0:	f7ff feb2 	bl	8000608 <read_BIN_AUDIO>
	update_audio_buffer();		// add the tone to the audio buffer
 80008a4:	f7ff ff5c 	bl	8000760 <update_audio_buffer>

}
 80008a8:	bf00      	nop
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	40020000 	.word	0x40020000
 80008b0:	2001fb48 	.word	0x2001fb48
 80008b4:	40021400 	.word	0x40021400
 80008b8:	2001fb4e 	.word	0x2001fb4e

080008bc <init_audio_buffer>:

/******************************* AUDIO HANDLER FUNCTIONS *********************************/

// initializing the audio buffer to all values = 127 (mid value of DAC)
void init_audio_buffer()
{
 80008bc:	b480      	push	{r7}
 80008be:	b083      	sub	sp, #12
 80008c0:	af00      	add	r7, sp, #0
	int idx;
	for (idx=0; idx<BUFF_SIZE; idx++){
 80008c2:	2300      	movs	r3, #0
 80008c4:	607b      	str	r3, [r7, #4]
 80008c6:	e007      	b.n	80008d8 <init_audio_buffer+0x1c>
		AUDIO_BUFFER[idx] = 127;
 80008c8:	4a09      	ldr	r2, [pc, #36]	; (80008f0 <init_audio_buffer+0x34>)
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	4413      	add	r3, r2
 80008ce:	227f      	movs	r2, #127	; 0x7f
 80008d0:	701a      	strb	r2, [r3, #0]
	for (idx=0; idx<BUFF_SIZE; idx++){
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	3301      	adds	r3, #1
 80008d6:	607b      	str	r3, [r7, #4]
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	f5b3 4f7a 	cmp.w	r3, #64000	; 0xfa00
 80008de:	dbf3      	blt.n	80008c8 <init_audio_buffer+0xc>
	}
}
 80008e0:	bf00      	nop
 80008e2:	bf00      	nop
 80008e4:	370c      	adds	r7, #12
 80008e6:	46bd      	mov	sp, r7
 80008e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ec:	4770      	bx	lr
 80008ee:	bf00      	nop
 80008f0:	20000438 	.word	0x20000438

080008f4 <HAL_TIM_PeriodElapsedCallback>:

// Timer interrupt service routine, regularly reads a value from the audio
// buffer at the sampling frequency and outputs the sample via DAC
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
	AUDIO_PTR = (AUDIO_PTR+1) % BUFF_SIZE;
 80008fc:	4b10      	ldr	r3, [pc, #64]	; (8000940 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	1c5a      	adds	r2, r3, #1
 8000902:	4b10      	ldr	r3, [pc, #64]	; (8000944 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000904:	fb83 1302 	smull	r1, r3, r3, r2
 8000908:	1319      	asrs	r1, r3, #12
 800090a:	17d3      	asrs	r3, r2, #31
 800090c:	1acb      	subs	r3, r1, r3
 800090e:	f44f 417a 	mov.w	r1, #64000	; 0xfa00
 8000912:	fb01 f303 	mul.w	r3, r1, r3
 8000916:	1ad3      	subs	r3, r2, r3
 8000918:	4a09      	ldr	r2, [pc, #36]	; (8000940 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800091a:	6013      	str	r3, [r2, #0]

	DAC_REG = AUDIO_BUFFER[AUDIO_PTR];
 800091c:	4b08      	ldr	r3, [pc, #32]	; (8000940 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	4a09      	ldr	r2, [pc, #36]	; (8000948 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000922:	5cd2      	ldrb	r2, [r2, r3]
 8000924:	4b09      	ldr	r3, [pc, #36]	; (800094c <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000926:	701a      	strb	r2, [r3, #0]
	AUDIO_BUFFER[AUDIO_PTR] = 127;		// after reading a sample, reset it
 8000928:	4b05      	ldr	r3, [pc, #20]	; (8000940 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4a06      	ldr	r2, [pc, #24]	; (8000948 <HAL_TIM_PeriodElapsedCallback+0x54>)
 800092e:	217f      	movs	r1, #127	; 0x7f
 8000930:	54d1      	strb	r1, [r2, r3]

	DAC_OUTPUT();
 8000932:	f7ff fe97 	bl	8000664 <DAC_OUTPUT>
}
 8000936:	bf00      	nop
 8000938:	3708      	adds	r7, #8
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	2001fb50 	.word	0x2001fb50
 8000944:	10624dd3 	.word	0x10624dd3
 8000948:	20000438 	.word	0x20000438
 800094c:	20000434 	.word	0x20000434

08000950 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8000954:	f7ff fdd4 	bl	8000500 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8000958:	f7ff fdf8 	bl	800054c <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800095c:	f000 fbf8 	bl	8001150 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000960:	f000 f814 	bl	800098c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000964:	f000 f952 	bl	8000c0c <MX_GPIO_Init>
  MX_TIM2_Init();
 8000968:	f000 f8d4 	bl	8000b14 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 800096c:	f000 f91e 	bl	8000bac <MX_USART1_UART_Init>
  MX_SDMMC1_SD_Init();
 8000970:	f000 f8b0 	bl	8000ad4 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 8000974:	f004 fdd0 	bl	8005518 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  init_audio_buffer();
 8000978:	f7ff ffa0 	bl	80008bc <init_audio_buffer>

  init_SD();
 800097c:	f7ff fe2a 	bl	80005d4 <init_SD>
  // read_BIN_AUDIO(0);
  // umount_SD();

  HAL_TIM_Base_Start_IT(&htim2);	// initialize timer counter interrupt for audio sample rate
 8000980:	4801      	ldr	r0, [pc, #4]	; (8000988 <main+0x38>)
 8000982:	f003 f827 	bl	80039d4 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000986:	e7fe      	b.n	8000986 <main+0x36>
 8000988:	2001faf8 	.word	0x2001faf8

0800098c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b0b4      	sub	sp, #208	; 0xd0
 8000990:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000992:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000996:	2230      	movs	r2, #48	; 0x30
 8000998:	2100      	movs	r1, #0
 800099a:	4618      	mov	r0, r3
 800099c:	f007 fe14 	bl	80085c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009a0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80009a4:	2200      	movs	r2, #0
 80009a6:	601a      	str	r2, [r3, #0]
 80009a8:	605a      	str	r2, [r3, #4]
 80009aa:	609a      	str	r2, [r3, #8]
 80009ac:	60da      	str	r2, [r3, #12]
 80009ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009b0:	f107 0308 	add.w	r3, r7, #8
 80009b4:	2284      	movs	r2, #132	; 0x84
 80009b6:	2100      	movs	r1, #0
 80009b8:	4618      	mov	r0, r3
 80009ba:	f007 fe05 	bl	80085c8 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009be:	4b42      	ldr	r3, [pc, #264]	; (8000ac8 <SystemClock_Config+0x13c>)
 80009c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c2:	4a41      	ldr	r2, [pc, #260]	; (8000ac8 <SystemClock_Config+0x13c>)
 80009c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009c8:	6413      	str	r3, [r2, #64]	; 0x40
 80009ca:	4b3f      	ldr	r3, [pc, #252]	; (8000ac8 <SystemClock_Config+0x13c>)
 80009cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009d2:	607b      	str	r3, [r7, #4]
 80009d4:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009d6:	4b3d      	ldr	r3, [pc, #244]	; (8000acc <SystemClock_Config+0x140>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	4a3c      	ldr	r2, [pc, #240]	; (8000acc <SystemClock_Config+0x140>)
 80009dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80009e0:	6013      	str	r3, [r2, #0]
 80009e2:	4b3a      	ldr	r3, [pc, #232]	; (8000acc <SystemClock_Config+0x140>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009ea:	603b      	str	r3, [r7, #0]
 80009ec:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009ee:	2301      	movs	r3, #1
 80009f0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009f8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009fc:	2302      	movs	r3, #2
 80009fe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a02:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a06:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 12;
 8000a0a:	230c      	movs	r3, #12
 8000a0c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000a10:	23c0      	movs	r3, #192	; 0xc0
 8000a12:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a16:	2302      	movs	r3, #2
 8000a18:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000a1c:	2309      	movs	r3, #9
 8000a1e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a22:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000a26:	4618      	mov	r0, r3
 8000a28:	f000 ff86 	bl	8001938 <HAL_RCC_OscConfig>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000a32:	f000 fa13 	bl	8000e5c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000a36:	f000 ff2f 	bl	8001898 <HAL_PWREx_EnableOverDrive>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000a40:	f000 fa0c 	bl	8000e5c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a44:	230f      	movs	r3, #15
 8000a46:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a4a:	2302      	movs	r3, #2
 8000a4c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a50:	2300      	movs	r3, #0
 8000a52:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a56:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a5a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a62:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000a66:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000a6a:	2106      	movs	r1, #6
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f001 fa07 	bl	8001e80 <HAL_RCC_ClockConfig>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <SystemClock_Config+0xf0>
  {
    Error_Handler();
 8000a78:	f000 f9f0 	bl	8000e5c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_SDMMC1
 8000a7c:	4b14      	ldr	r3, [pc, #80]	; (8000ad0 <SystemClock_Config+0x144>)
 8000a7e:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8000a80:	2332      	movs	r3, #50	; 0x32
 8000a82:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8000a84:	2305      	movs	r3, #5
 8000a86:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8000a88:	2302      	movs	r3, #2
 8000a8a:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV4;
 8000a8c:	2301      	movs	r3, #1
 8000a8e:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8000a90:	2301      	movs	r3, #1
 8000a92:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000a94:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000a98:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8000a9e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000aa2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000aac:	f107 0308 	add.w	r3, r7, #8
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f001 fbbb 	bl	800222c <HAL_RCCEx_PeriphCLKConfig>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <SystemClock_Config+0x134>
  {
    Error_Handler();
 8000abc:	f000 f9ce 	bl	8000e5c <Error_Handler>
  }
}
 8000ac0:	bf00      	nop
 8000ac2:	37d0      	adds	r7, #208	; 0xd0
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	40023800 	.word	0x40023800
 8000acc:	40007000 	.word	0x40007000
 8000ad0:	00a00040 	.word	0x00a00040

08000ad4 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000ad8:	4b0c      	ldr	r3, [pc, #48]	; (8000b0c <MX_SDMMC1_SD_Init+0x38>)
 8000ada:	4a0d      	ldr	r2, [pc, #52]	; (8000b10 <MX_SDMMC1_SD_Init+0x3c>)
 8000adc:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000ade:	4b0b      	ldr	r3, [pc, #44]	; (8000b0c <MX_SDMMC1_SD_Init+0x38>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8000ae4:	4b09      	ldr	r3, [pc, #36]	; (8000b0c <MX_SDMMC1_SD_Init+0x38>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000aea:	4b08      	ldr	r3, [pc, #32]	; (8000b0c <MX_SDMMC1_SD_Init+0x38>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8000af0:	4b06      	ldr	r3, [pc, #24]	; (8000b0c <MX_SDMMC1_SD_Init+0x38>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000af6:	4b05      	ldr	r3, [pc, #20]	; (8000b0c <MX_SDMMC1_SD_Init+0x38>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8000afc:	4b03      	ldr	r3, [pc, #12]	; (8000b0c <MX_SDMMC1_SD_Init+0x38>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000b02:	bf00      	nop
 8000b04:	46bd      	mov	sp, r7
 8000b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0a:	4770      	bx	lr
 8000b0c:	200003b0 	.word	0x200003b0
 8000b10:	40012c00 	.word	0x40012c00

08000b14 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b088      	sub	sp, #32
 8000b18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b1a:	f107 0310 	add.w	r3, r7, #16
 8000b1e:	2200      	movs	r2, #0
 8000b20:	601a      	str	r2, [r3, #0]
 8000b22:	605a      	str	r2, [r3, #4]
 8000b24:	609a      	str	r2, [r3, #8]
 8000b26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b28:	1d3b      	adds	r3, r7, #4
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	601a      	str	r2, [r3, #0]
 8000b2e:	605a      	str	r2, [r3, #4]
 8000b30:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b32:	4b1d      	ldr	r3, [pc, #116]	; (8000ba8 <MX_TIM2_Init+0x94>)
 8000b34:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b38:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100;
 8000b3a:	4b1b      	ldr	r3, [pc, #108]	; (8000ba8 <MX_TIM2_Init+0x94>)
 8000b3c:	2264      	movs	r2, #100	; 0x64
 8000b3e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b40:	4b19      	ldr	r3, [pc, #100]	; (8000ba8 <MX_TIM2_Init+0x94>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 124;
 8000b46:	4b18      	ldr	r3, [pc, #96]	; (8000ba8 <MX_TIM2_Init+0x94>)
 8000b48:	227c      	movs	r2, #124	; 0x7c
 8000b4a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b4c:	4b16      	ldr	r3, [pc, #88]	; (8000ba8 <MX_TIM2_Init+0x94>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b52:	4b15      	ldr	r3, [pc, #84]	; (8000ba8 <MX_TIM2_Init+0x94>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b58:	4813      	ldr	r0, [pc, #76]	; (8000ba8 <MX_TIM2_Init+0x94>)
 8000b5a:	f002 fee3 	bl	8003924 <HAL_TIM_Base_Init>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000b64:	f000 f97a 	bl	8000e5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b6c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b6e:	f107 0310 	add.w	r3, r7, #16
 8000b72:	4619      	mov	r1, r3
 8000b74:	480c      	ldr	r0, [pc, #48]	; (8000ba8 <MX_TIM2_Init+0x94>)
 8000b76:	f003 f8c5 	bl	8003d04 <HAL_TIM_ConfigClockSource>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d001      	beq.n	8000b84 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000b80:	f000 f96c 	bl	8000e5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000b84:	2320      	movs	r3, #32
 8000b86:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b8c:	1d3b      	adds	r3, r7, #4
 8000b8e:	4619      	mov	r1, r3
 8000b90:	4805      	ldr	r0, [pc, #20]	; (8000ba8 <MX_TIM2_Init+0x94>)
 8000b92:	f003 fadf 	bl	8004154 <HAL_TIMEx_MasterConfigSynchronization>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d001      	beq.n	8000ba0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000b9c:	f000 f95e 	bl	8000e5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ba0:	bf00      	nop
 8000ba2:	3720      	adds	r7, #32
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	2001faf8 	.word	0x2001faf8

08000bac <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000bb0:	4b14      	ldr	r3, [pc, #80]	; (8000c04 <MX_USART1_UART_Init+0x58>)
 8000bb2:	4a15      	ldr	r2, [pc, #84]	; (8000c08 <MX_USART1_UART_Init+0x5c>)
 8000bb4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000bb6:	4b13      	ldr	r3, [pc, #76]	; (8000c04 <MX_USART1_UART_Init+0x58>)
 8000bb8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000bbc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000bbe:	4b11      	ldr	r3, [pc, #68]	; (8000c04 <MX_USART1_UART_Init+0x58>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000bc4:	4b0f      	ldr	r3, [pc, #60]	; (8000c04 <MX_USART1_UART_Init+0x58>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000bca:	4b0e      	ldr	r3, [pc, #56]	; (8000c04 <MX_USART1_UART_Init+0x58>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000bd0:	4b0c      	ldr	r3, [pc, #48]	; (8000c04 <MX_USART1_UART_Init+0x58>)
 8000bd2:	220c      	movs	r2, #12
 8000bd4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bd6:	4b0b      	ldr	r3, [pc, #44]	; (8000c04 <MX_USART1_UART_Init+0x58>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bdc:	4b09      	ldr	r3, [pc, #36]	; (8000c04 <MX_USART1_UART_Init+0x58>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000be2:	4b08      	ldr	r3, [pc, #32]	; (8000c04 <MX_USART1_UART_Init+0x58>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000be8:	4b06      	ldr	r3, [pc, #24]	; (8000c04 <MX_USART1_UART_Init+0x58>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000bee:	4805      	ldr	r0, [pc, #20]	; (8000c04 <MX_USART1_UART_Init+0x58>)
 8000bf0:	f003 fb5c 	bl	80042ac <HAL_UART_Init>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d001      	beq.n	8000bfe <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000bfa:	f000 f92f 	bl	8000e5c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000bfe:	bf00      	nop
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	2000fe38 	.word	0x2000fe38
 8000c08:	40011000 	.word	0x40011000

08000c0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b08e      	sub	sp, #56	; 0x38
 8000c10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c16:	2200      	movs	r2, #0
 8000c18:	601a      	str	r2, [r3, #0]
 8000c1a:	605a      	str	r2, [r3, #4]
 8000c1c:	609a      	str	r2, [r3, #8]
 8000c1e:	60da      	str	r2, [r3, #12]
 8000c20:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c22:	4b85      	ldr	r3, [pc, #532]	; (8000e38 <MX_GPIO_Init+0x22c>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c26:	4a84      	ldr	r2, [pc, #528]	; (8000e38 <MX_GPIO_Init+0x22c>)
 8000c28:	f043 0302 	orr.w	r3, r3, #2
 8000c2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c2e:	4b82      	ldr	r3, [pc, #520]	; (8000e38 <MX_GPIO_Init+0x22c>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c32:	f003 0302 	and.w	r3, r3, #2
 8000c36:	623b      	str	r3, [r7, #32]
 8000c38:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c3a:	4b7f      	ldr	r3, [pc, #508]	; (8000e38 <MX_GPIO_Init+0x22c>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3e:	4a7e      	ldr	r2, [pc, #504]	; (8000e38 <MX_GPIO_Init+0x22c>)
 8000c40:	f043 0304 	orr.w	r3, r3, #4
 8000c44:	6313      	str	r3, [r2, #48]	; 0x30
 8000c46:	4b7c      	ldr	r3, [pc, #496]	; (8000e38 <MX_GPIO_Init+0x22c>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4a:	f003 0304 	and.w	r3, r3, #4
 8000c4e:	61fb      	str	r3, [r7, #28]
 8000c50:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c52:	4b79      	ldr	r3, [pc, #484]	; (8000e38 <MX_GPIO_Init+0x22c>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c56:	4a78      	ldr	r2, [pc, #480]	; (8000e38 <MX_GPIO_Init+0x22c>)
 8000c58:	f043 0301 	orr.w	r3, r3, #1
 8000c5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c5e:	4b76      	ldr	r3, [pc, #472]	; (8000e38 <MX_GPIO_Init+0x22c>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c62:	f003 0301 	and.w	r3, r3, #1
 8000c66:	61bb      	str	r3, [r7, #24]
 8000c68:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000c6a:	4b73      	ldr	r3, [pc, #460]	; (8000e38 <MX_GPIO_Init+0x22c>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6e:	4a72      	ldr	r2, [pc, #456]	; (8000e38 <MX_GPIO_Init+0x22c>)
 8000c70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c74:	6313      	str	r3, [r2, #48]	; 0x30
 8000c76:	4b70      	ldr	r3, [pc, #448]	; (8000e38 <MX_GPIO_Init+0x22c>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c7e:	617b      	str	r3, [r7, #20]
 8000c80:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c82:	4b6d      	ldr	r3, [pc, #436]	; (8000e38 <MX_GPIO_Init+0x22c>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c86:	4a6c      	ldr	r2, [pc, #432]	; (8000e38 <MX_GPIO_Init+0x22c>)
 8000c88:	f043 0308 	orr.w	r3, r3, #8
 8000c8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c8e:	4b6a      	ldr	r3, [pc, #424]	; (8000e38 <MX_GPIO_Init+0x22c>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c92:	f003 0308 	and.w	r3, r3, #8
 8000c96:	613b      	str	r3, [r7, #16]
 8000c98:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c9a:	4b67      	ldr	r3, [pc, #412]	; (8000e38 <MX_GPIO_Init+0x22c>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9e:	4a66      	ldr	r2, [pc, #408]	; (8000e38 <MX_GPIO_Init+0x22c>)
 8000ca0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ca4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ca6:	4b64      	ldr	r3, [pc, #400]	; (8000e38 <MX_GPIO_Init+0x22c>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000caa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cae:	60fb      	str	r3, [r7, #12]
 8000cb0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000cb2:	4b61      	ldr	r3, [pc, #388]	; (8000e38 <MX_GPIO_Init+0x22c>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb6:	4a60      	ldr	r2, [pc, #384]	; (8000e38 <MX_GPIO_Init+0x22c>)
 8000cb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cbe:	4b5e      	ldr	r3, [pc, #376]	; (8000e38 <MX_GPIO_Init+0x22c>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000cc6:	60bb      	str	r3, [r7, #8]
 8000cc8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000cca:	4b5b      	ldr	r3, [pc, #364]	; (8000e38 <MX_GPIO_Init+0x22c>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cce:	4a5a      	ldr	r2, [pc, #360]	; (8000e38 <MX_GPIO_Init+0x22c>)
 8000cd0:	f043 0320 	orr.w	r3, r3, #32
 8000cd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cd6:	4b58      	ldr	r3, [pc, #352]	; (8000e38 <MX_GPIO_Init+0x22c>)
 8000cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cda:	f003 0320 	and.w	r3, r3, #32
 8000cde:	607b      	str	r3, [r7, #4]
 8000ce0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	2110      	movs	r1, #16
 8000ce6:	4855      	ldr	r0, [pc, #340]	; (8000e3c <MX_GPIO_Init+0x230>)
 8000ce8:	f000 fd98 	bl	800181c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_3|GPIO_PIN_0, GPIO_PIN_RESET);
 8000cec:	2200      	movs	r2, #0
 8000cee:	2109      	movs	r1, #9
 8000cf0:	4853      	ldr	r0, [pc, #332]	; (8000e40 <MX_GPIO_Init+0x234>)
 8000cf2:	f000 fd93 	bl	800181c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7|GPIO_PIN_6, GPIO_PIN_RESET);
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	21c0      	movs	r1, #192	; 0xc0
 8000cfa:	4852      	ldr	r0, [pc, #328]	; (8000e44 <MX_GPIO_Init+0x238>)
 8000cfc:	f000 fd8e 	bl	800181c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7|GPIO_PIN_6, GPIO_PIN_RESET);
 8000d00:	2200      	movs	r2, #0
 8000d02:	21c0      	movs	r1, #192	; 0xc0
 8000d04:	4850      	ldr	r0, [pc, #320]	; (8000e48 <MX_GPIO_Init+0x23c>)
 8000d06:	f000 fd89 	bl	800181c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_6, GPIO_PIN_RESET);
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2140      	movs	r1, #64	; 0x40
 8000d0e:	484f      	ldr	r0, [pc, #316]	; (8000e4c <MX_GPIO_Init+0x240>)
 8000d10:	f000 fd84 	bl	800181c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000d14:	2310      	movs	r3, #16
 8000d16:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d18:	2301      	movs	r3, #1
 8000d1a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d20:	2300      	movs	r3, #0
 8000d22:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d28:	4619      	mov	r1, r3
 8000d2a:	4844      	ldr	r0, [pc, #272]	; (8000e3c <MX_GPIO_Init+0x230>)
 8000d2c:	f000 fbb2 	bl	8001494 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA15 PA8 PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_0;
 8000d30:	f248 1301 	movw	r3, #33025	; 0x8101
 8000d34:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d36:	2300      	movs	r3, #0
 8000d38:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d42:	4619      	mov	r1, r3
 8000d44:	4842      	ldr	r0, [pc, #264]	; (8000e50 <MX_GPIO_Init+0x244>)
 8000d46:	f000 fba5 	bl	8001494 <HAL_GPIO_Init>

  /*Configure GPIO pins : PI3 PI0 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_0;
 8000d4a:	2309      	movs	r3, #9
 8000d4c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d4e:	2301      	movs	r3, #1
 8000d50:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d52:	2300      	movs	r3, #0
 8000d54:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d56:	2300      	movs	r3, #0
 8000d58:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000d5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d5e:	4619      	mov	r1, r3
 8000d60:	4837      	ldr	r0, [pc, #220]	; (8000e40 <MX_GPIO_Init+0x234>)
 8000d62:	f000 fb97 	bl	8001494 <HAL_GPIO_Init>

  /*Configure GPIO pin : PI2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000d66:	2304      	movs	r3, #4
 8000d68:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d6a:	4b3a      	ldr	r3, [pc, #232]	; (8000e54 <MX_GPIO_Init+0x248>)
 8000d6c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000d72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d76:	4619      	mov	r1, r3
 8000d78:	4831      	ldr	r0, [pc, #196]	; (8000e40 <MX_GPIO_Init+0x234>)
 8000d7a:	f000 fb8b 	bl	8001494 <HAL_GPIO_Init>

  /*Configure GPIO pin : PI1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000d7e:	2302      	movs	r3, #2
 8000d80:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d82:	2300      	movs	r3, #0
 8000d84:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d86:	2300      	movs	r3, #0
 8000d88:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000d8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d8e:	4619      	mov	r1, r3
 8000d90:	482b      	ldr	r0, [pc, #172]	; (8000e40 <MX_GPIO_Init+0x234>)
 8000d92:	f000 fb7f 	bl	8001494 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC7 PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8000d96:	23c0      	movs	r3, #192	; 0xc0
 8000d98:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da2:	2300      	movs	r3, #0
 8000da4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000da6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000daa:	4619      	mov	r1, r3
 8000dac:	4825      	ldr	r0, [pc, #148]	; (8000e44 <MX_GPIO_Init+0x238>)
 8000dae:	f000 fb71 	bl	8001494 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG7 PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8000db2:	23c0      	movs	r3, #192	; 0xc0
 8000db4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000db6:	2301      	movs	r3, #1
 8000db8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000dc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	481f      	ldr	r0, [pc, #124]	; (8000e48 <MX_GPIO_Init+0x23c>)
 8000dca:	f000 fb63 	bl	8001494 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF7 PF6 PF10 PF9
                           PF8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_10|GPIO_PIN_9
 8000dce:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8000dd2:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000ddc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000de0:	4619      	mov	r1, r3
 8000de2:	481d      	ldr	r0, [pc, #116]	; (8000e58 <MX_GPIO_Init+0x24c>)
 8000de4:	f000 fb56 	bl	8001494 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000de8:	2340      	movs	r3, #64	; 0x40
 8000dea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dec:	2301      	movs	r3, #1
 8000dee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df0:	2300      	movs	r3, #0
 8000df2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df4:	2300      	movs	r3, #0
 8000df6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000df8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	4813      	ldr	r0, [pc, #76]	; (8000e4c <MX_GPIO_Init+0x240>)
 8000e00:	f000 fb48 	bl	8001494 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000e04:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000e08:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e16:	4619      	mov	r1, r3
 8000e18:	4808      	ldr	r0, [pc, #32]	; (8000e3c <MX_GPIO_Init+0x230>)
 8000e1a:	f000 fb3b 	bl	8001494 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000e1e:	2200      	movs	r2, #0
 8000e20:	2100      	movs	r1, #0
 8000e22:	2008      	movs	r0, #8
 8000e24:	f000 faff 	bl	8001426 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000e28:	2008      	movs	r0, #8
 8000e2a:	f000 fb18 	bl	800145e <HAL_NVIC_EnableIRQ>

}
 8000e2e:	bf00      	nop
 8000e30:	3738      	adds	r7, #56	; 0x38
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	40023800 	.word	0x40023800
 8000e3c:	40020400 	.word	0x40020400
 8000e40:	40022000 	.word	0x40022000
 8000e44:	40020800 	.word	0x40020800
 8000e48:	40021800 	.word	0x40021800
 8000e4c:	40021c00 	.word	0x40021c00
 8000e50:	40020000 	.word	0x40020000
 8000e54:	10110000 	.word	0x10110000
 8000e58:	40021400 	.word	0x40021400

08000e5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000e60:	b672      	cpsid	i
}
 8000e62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e64:	e7fe      	b.n	8000e64 <Error_Handler+0x8>
	...

08000e68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000e6e:	4b12      	ldr	r3, [pc, #72]	; (8000eb8 <HAL_MspInit+0x50>)
 8000e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e72:	4a11      	ldr	r2, [pc, #68]	; (8000eb8 <HAL_MspInit+0x50>)
 8000e74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e78:	6413      	str	r3, [r2, #64]	; 0x40
 8000e7a:	4b0f      	ldr	r3, [pc, #60]	; (8000eb8 <HAL_MspInit+0x50>)
 8000e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e82:	607b      	str	r3, [r7, #4]
 8000e84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e86:	4b0c      	ldr	r3, [pc, #48]	; (8000eb8 <HAL_MspInit+0x50>)
 8000e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e8a:	4a0b      	ldr	r2, [pc, #44]	; (8000eb8 <HAL_MspInit+0x50>)
 8000e8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e90:	6453      	str	r3, [r2, #68]	; 0x44
 8000e92:	4b09      	ldr	r3, [pc, #36]	; (8000eb8 <HAL_MspInit+0x50>)
 8000e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e9a:	603b      	str	r3, [r7, #0]
 8000e9c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	2100      	movs	r1, #0
 8000ea2:	2005      	movs	r0, #5
 8000ea4:	f000 fabf 	bl	8001426 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8000ea8:	2005      	movs	r0, #5
 8000eaa:	f000 fad8 	bl	800145e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eae:	bf00      	nop
 8000eb0:	3708      	adds	r7, #8
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	40023800 	.word	0x40023800

08000ebc <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b08a      	sub	sp, #40	; 0x28
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec4:	f107 0314 	add.w	r3, r7, #20
 8000ec8:	2200      	movs	r2, #0
 8000eca:	601a      	str	r2, [r3, #0]
 8000ecc:	605a      	str	r2, [r3, #4]
 8000ece:	609a      	str	r2, [r3, #8]
 8000ed0:	60da      	str	r2, [r3, #12]
 8000ed2:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a25      	ldr	r2, [pc, #148]	; (8000f70 <HAL_SD_MspInit+0xb4>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d144      	bne.n	8000f68 <HAL_SD_MspInit+0xac>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8000ede:	4b25      	ldr	r3, [pc, #148]	; (8000f74 <HAL_SD_MspInit+0xb8>)
 8000ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ee2:	4a24      	ldr	r2, [pc, #144]	; (8000f74 <HAL_SD_MspInit+0xb8>)
 8000ee4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000ee8:	6453      	str	r3, [r2, #68]	; 0x44
 8000eea:	4b22      	ldr	r3, [pc, #136]	; (8000f74 <HAL_SD_MspInit+0xb8>)
 8000eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000ef2:	613b      	str	r3, [r7, #16]
 8000ef4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ef6:	4b1f      	ldr	r3, [pc, #124]	; (8000f74 <HAL_SD_MspInit+0xb8>)
 8000ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efa:	4a1e      	ldr	r2, [pc, #120]	; (8000f74 <HAL_SD_MspInit+0xb8>)
 8000efc:	f043 0304 	orr.w	r3, r3, #4
 8000f00:	6313      	str	r3, [r2, #48]	; 0x30
 8000f02:	4b1c      	ldr	r3, [pc, #112]	; (8000f74 <HAL_SD_MspInit+0xb8>)
 8000f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f06:	f003 0304 	and.w	r3, r3, #4
 8000f0a:	60fb      	str	r3, [r7, #12]
 8000f0c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f0e:	4b19      	ldr	r3, [pc, #100]	; (8000f74 <HAL_SD_MspInit+0xb8>)
 8000f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f12:	4a18      	ldr	r2, [pc, #96]	; (8000f74 <HAL_SD_MspInit+0xb8>)
 8000f14:	f043 0308 	orr.w	r3, r3, #8
 8000f18:	6313      	str	r3, [r2, #48]	; 0x30
 8000f1a:	4b16      	ldr	r3, [pc, #88]	; (8000f74 <HAL_SD_MspInit+0xb8>)
 8000f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1e:	f003 0308 	and.w	r3, r3, #8
 8000f22:	60bb      	str	r3, [r7, #8]
 8000f24:	68bb      	ldr	r3, [r7, #8]
    /**SDMMC1 GPIO Configuration
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_8;
 8000f26:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 8000f2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f2c:	2302      	movs	r3, #2
 8000f2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f30:	2300      	movs	r3, #0
 8000f32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f34:	2303      	movs	r3, #3
 8000f36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000f38:	230c      	movs	r3, #12
 8000f3a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f3c:	f107 0314 	add.w	r3, r7, #20
 8000f40:	4619      	mov	r1, r3
 8000f42:	480d      	ldr	r0, [pc, #52]	; (8000f78 <HAL_SD_MspInit+0xbc>)
 8000f44:	f000 faa6 	bl	8001494 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000f48:	2304      	movs	r3, #4
 8000f4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f4c:	2302      	movs	r3, #2
 8000f4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f50:	2300      	movs	r3, #0
 8000f52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f54:	2303      	movs	r3, #3
 8000f56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000f58:	230c      	movs	r3, #12
 8000f5a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f5c:	f107 0314 	add.w	r3, r7, #20
 8000f60:	4619      	mov	r1, r3
 8000f62:	4806      	ldr	r0, [pc, #24]	; (8000f7c <HAL_SD_MspInit+0xc0>)
 8000f64:	f000 fa96 	bl	8001494 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8000f68:	bf00      	nop
 8000f6a:	3728      	adds	r7, #40	; 0x28
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	40012c00 	.word	0x40012c00
 8000f74:	40023800 	.word	0x40023800
 8000f78:	40020800 	.word	0x40020800
 8000f7c:	40020c00 	.word	0x40020c00

08000f80 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b084      	sub	sp, #16
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f90:	d113      	bne.n	8000fba <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f92:	4b0c      	ldr	r3, [pc, #48]	; (8000fc4 <HAL_TIM_Base_MspInit+0x44>)
 8000f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f96:	4a0b      	ldr	r2, [pc, #44]	; (8000fc4 <HAL_TIM_Base_MspInit+0x44>)
 8000f98:	f043 0301 	orr.w	r3, r3, #1
 8000f9c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f9e:	4b09      	ldr	r3, [pc, #36]	; (8000fc4 <HAL_TIM_Base_MspInit+0x44>)
 8000fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa2:	f003 0301 	and.w	r3, r3, #1
 8000fa6:	60fb      	str	r3, [r7, #12]
 8000fa8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000faa:	2200      	movs	r2, #0
 8000fac:	2100      	movs	r1, #0
 8000fae:	201c      	movs	r0, #28
 8000fb0:	f000 fa39 	bl	8001426 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000fb4:	201c      	movs	r0, #28
 8000fb6:	f000 fa52 	bl	800145e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000fba:	bf00      	nop
 8000fbc:	3710      	adds	r7, #16
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	40023800 	.word	0x40023800

08000fc8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b08a      	sub	sp, #40	; 0x28
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd0:	f107 0314 	add.w	r3, r7, #20
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	601a      	str	r2, [r3, #0]
 8000fd8:	605a      	str	r2, [r3, #4]
 8000fda:	609a      	str	r2, [r3, #8]
 8000fdc:	60da      	str	r2, [r3, #12]
 8000fde:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a17      	ldr	r2, [pc, #92]	; (8001044 <HAL_UART_MspInit+0x7c>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d127      	bne.n	800103a <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000fea:	4b17      	ldr	r3, [pc, #92]	; (8001048 <HAL_UART_MspInit+0x80>)
 8000fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fee:	4a16      	ldr	r2, [pc, #88]	; (8001048 <HAL_UART_MspInit+0x80>)
 8000ff0:	f043 0310 	orr.w	r3, r3, #16
 8000ff4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ff6:	4b14      	ldr	r3, [pc, #80]	; (8001048 <HAL_UART_MspInit+0x80>)
 8000ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ffa:	f003 0310 	and.w	r3, r3, #16
 8000ffe:	613b      	str	r3, [r7, #16]
 8001000:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001002:	4b11      	ldr	r3, [pc, #68]	; (8001048 <HAL_UART_MspInit+0x80>)
 8001004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001006:	4a10      	ldr	r2, [pc, #64]	; (8001048 <HAL_UART_MspInit+0x80>)
 8001008:	f043 0302 	orr.w	r3, r3, #2
 800100c:	6313      	str	r3, [r2, #48]	; 0x30
 800100e:	4b0e      	ldr	r3, [pc, #56]	; (8001048 <HAL_UART_MspInit+0x80>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001012:	f003 0302 	and.w	r3, r3, #2
 8001016:	60fb      	str	r3, [r7, #12]
 8001018:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 800101a:	23c0      	movs	r3, #192	; 0xc0
 800101c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800101e:	2302      	movs	r3, #2
 8001020:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001022:	2300      	movs	r3, #0
 8001024:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001026:	2303      	movs	r3, #3
 8001028:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800102a:	2307      	movs	r3, #7
 800102c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800102e:	f107 0314 	add.w	r3, r7, #20
 8001032:	4619      	mov	r1, r3
 8001034:	4805      	ldr	r0, [pc, #20]	; (800104c <HAL_UART_MspInit+0x84>)
 8001036:	f000 fa2d 	bl	8001494 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800103a:	bf00      	nop
 800103c:	3728      	adds	r7, #40	; 0x28
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	40011000 	.word	0x40011000
 8001048:	40023800 	.word	0x40023800
 800104c:	40020400 	.word	0x40020400

08001050 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001054:	e7fe      	b.n	8001054 <NMI_Handler+0x4>

08001056 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001056:	b480      	push	{r7}
 8001058:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800105a:	e7fe      	b.n	800105a <HardFault_Handler+0x4>

0800105c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001060:	e7fe      	b.n	8001060 <MemManage_Handler+0x4>

08001062 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001062:	b480      	push	{r7}
 8001064:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001066:	e7fe      	b.n	8001066 <BusFault_Handler+0x4>

08001068 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800106c:	e7fe      	b.n	800106c <UsageFault_Handler+0x4>

0800106e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800106e:	b480      	push	{r7}
 8001070:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001072:	bf00      	nop
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr

0800107c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001080:	bf00      	nop
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr

0800108a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800108a:	b480      	push	{r7}
 800108c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800108e:	bf00      	nop
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr

08001098 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800109c:	f000 f8a4 	bl	80011e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010a0:	bf00      	nop
 80010a2:	bd80      	pop	{r7, pc}

080010a4 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80010a8:	bf00      	nop
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr

080010b2 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80010b2:	b580      	push	{r7, lr}
 80010b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */
	keyboard_interrupt_handler();
 80010b6:	f7ff fb99 	bl	80007ec <keyboard_interrupt_handler>
  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80010ba:	2004      	movs	r0, #4
 80010bc:	f000 fbc8 	bl	8001850 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80010c0:	bf00      	nop
 80010c2:	bd80      	pop	{r7, pc}

080010c4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80010c8:	4802      	ldr	r0, [pc, #8]	; (80010d4 <TIM2_IRQHandler+0x10>)
 80010ca:	f002 fcfb 	bl	8003ac4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80010ce:	bf00      	nop
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	2001faf8 	.word	0x2001faf8

080010d8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010dc:	4b06      	ldr	r3, [pc, #24]	; (80010f8 <SystemInit+0x20>)
 80010de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010e2:	4a05      	ldr	r2, [pc, #20]	; (80010f8 <SystemInit+0x20>)
 80010e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010ec:	bf00      	nop
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop
 80010f8:	e000ed00 	.word	0xe000ed00

080010fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80010fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001134 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001100:	480d      	ldr	r0, [pc, #52]	; (8001138 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001102:	490e      	ldr	r1, [pc, #56]	; (800113c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001104:	4a0e      	ldr	r2, [pc, #56]	; (8001140 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001106:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001108:	e002      	b.n	8001110 <LoopCopyDataInit>

0800110a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800110a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800110c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800110e:	3304      	adds	r3, #4

08001110 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001110:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001112:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001114:	d3f9      	bcc.n	800110a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001116:	4a0b      	ldr	r2, [pc, #44]	; (8001144 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001118:	4c0b      	ldr	r4, [pc, #44]	; (8001148 <LoopFillZerobss+0x26>)
  movs r3, #0
 800111a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800111c:	e001      	b.n	8001122 <LoopFillZerobss>

0800111e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800111e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001120:	3204      	adds	r2, #4

08001122 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001122:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001124:	d3fb      	bcc.n	800111e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001126:	f7ff ffd7 	bl	80010d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800112a:	f007 fa29 	bl	8008580 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800112e:	f7ff fc0f 	bl	8000950 <main>
  bx  lr    
 8001132:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001134:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001138:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800113c:	2000012c 	.word	0x2000012c
  ldr r2, =_sidata
 8001140:	08008ab8 	.word	0x08008ab8
  ldr r2, =_sbss
 8001144:	2000012c 	.word	0x2000012c
  ldr r4, =_ebss
 8001148:	2001ffc4 	.word	0x2001ffc4

0800114c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800114c:	e7fe      	b.n	800114c <ADC_IRQHandler>
	...

08001150 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
 8001154:	4b0b      	ldr	r3, [pc, #44]	; (8001184 <HAL_Init+0x34>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4a0a      	ldr	r2, [pc, #40]	; (8001184 <HAL_Init+0x34>)
 800115a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800115e:	6013      	str	r3, [r2, #0]
#endif /* ART_ACCLERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001160:	4b08      	ldr	r3, [pc, #32]	; (8001184 <HAL_Init+0x34>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a07      	ldr	r2, [pc, #28]	; (8001184 <HAL_Init+0x34>)
 8001166:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800116a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800116c:	2003      	movs	r0, #3
 800116e:	f000 f94f 	bl	8001410 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001172:	2000      	movs	r0, #0
 8001174:	f000 f808 	bl	8001188 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001178:	f7ff fe76 	bl	8000e68 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800117c:	2300      	movs	r3, #0
}
 800117e:	4618      	mov	r0, r3
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	40023c00 	.word	0x40023c00

08001188 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001190:	4b12      	ldr	r3, [pc, #72]	; (80011dc <HAL_InitTick+0x54>)
 8001192:	681a      	ldr	r2, [r3, #0]
 8001194:	4b12      	ldr	r3, [pc, #72]	; (80011e0 <HAL_InitTick+0x58>)
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	4619      	mov	r1, r3
 800119a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800119e:	fbb3 f3f1 	udiv	r3, r3, r1
 80011a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80011a6:	4618      	mov	r0, r3
 80011a8:	f000 f967 	bl	800147a <HAL_SYSTICK_Config>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011b2:	2301      	movs	r3, #1
 80011b4:	e00e      	b.n	80011d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	2b0f      	cmp	r3, #15
 80011ba:	d80a      	bhi.n	80011d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011bc:	2200      	movs	r2, #0
 80011be:	6879      	ldr	r1, [r7, #4]
 80011c0:	f04f 30ff 	mov.w	r0, #4294967295
 80011c4:	f000 f92f 	bl	8001426 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011c8:	4a06      	ldr	r2, [pc, #24]	; (80011e4 <HAL_InitTick+0x5c>)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011ce:	2300      	movs	r3, #0
 80011d0:	e000      	b.n	80011d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011d2:	2301      	movs	r3, #1
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	3708      	adds	r7, #8
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	20000120 	.word	0x20000120
 80011e0:	20000128 	.word	0x20000128
 80011e4:	20000124 	.word	0x20000124

080011e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011ec:	4b06      	ldr	r3, [pc, #24]	; (8001208 <HAL_IncTick+0x20>)
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	461a      	mov	r2, r3
 80011f2:	4b06      	ldr	r3, [pc, #24]	; (800120c <HAL_IncTick+0x24>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4413      	add	r3, r2
 80011f8:	4a04      	ldr	r2, [pc, #16]	; (800120c <HAL_IncTick+0x24>)
 80011fa:	6013      	str	r3, [r2, #0]
}
 80011fc:	bf00      	nop
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	20000128 	.word	0x20000128
 800120c:	2001fb54 	.word	0x2001fb54

08001210 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  return uwTick;
 8001214:	4b03      	ldr	r3, [pc, #12]	; (8001224 <HAL_GetTick+0x14>)
 8001216:	681b      	ldr	r3, [r3, #0]
}
 8001218:	4618      	mov	r0, r3
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr
 8001222:	bf00      	nop
 8001224:	2001fb54 	.word	0x2001fb54

08001228 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b084      	sub	sp, #16
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001230:	f7ff ffee 	bl	8001210 <HAL_GetTick>
 8001234:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001240:	d005      	beq.n	800124e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001242:	4b0a      	ldr	r3, [pc, #40]	; (800126c <HAL_Delay+0x44>)
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	461a      	mov	r2, r3
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	4413      	add	r3, r2
 800124c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800124e:	bf00      	nop
 8001250:	f7ff ffde 	bl	8001210 <HAL_GetTick>
 8001254:	4602      	mov	r2, r0
 8001256:	68bb      	ldr	r3, [r7, #8]
 8001258:	1ad3      	subs	r3, r2, r3
 800125a:	68fa      	ldr	r2, [r7, #12]
 800125c:	429a      	cmp	r2, r3
 800125e:	d8f7      	bhi.n	8001250 <HAL_Delay+0x28>
  {
  }
}
 8001260:	bf00      	nop
 8001262:	bf00      	nop
 8001264:	3710      	adds	r7, #16
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	20000128 	.word	0x20000128

08001270 <__NVIC_SetPriorityGrouping>:
{
 8001270:	b480      	push	{r7}
 8001272:	b085      	sub	sp, #20
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	f003 0307 	and.w	r3, r3, #7
 800127e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001280:	4b0b      	ldr	r3, [pc, #44]	; (80012b0 <__NVIC_SetPriorityGrouping+0x40>)
 8001282:	68db      	ldr	r3, [r3, #12]
 8001284:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001286:	68ba      	ldr	r2, [r7, #8]
 8001288:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800128c:	4013      	ands	r3, r2
 800128e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001298:	4b06      	ldr	r3, [pc, #24]	; (80012b4 <__NVIC_SetPriorityGrouping+0x44>)
 800129a:	4313      	orrs	r3, r2
 800129c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800129e:	4a04      	ldr	r2, [pc, #16]	; (80012b0 <__NVIC_SetPriorityGrouping+0x40>)
 80012a0:	68bb      	ldr	r3, [r7, #8]
 80012a2:	60d3      	str	r3, [r2, #12]
}
 80012a4:	bf00      	nop
 80012a6:	3714      	adds	r7, #20
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr
 80012b0:	e000ed00 	.word	0xe000ed00
 80012b4:	05fa0000 	.word	0x05fa0000

080012b8 <__NVIC_GetPriorityGrouping>:
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012bc:	4b04      	ldr	r3, [pc, #16]	; (80012d0 <__NVIC_GetPriorityGrouping+0x18>)
 80012be:	68db      	ldr	r3, [r3, #12]
 80012c0:	0a1b      	lsrs	r3, r3, #8
 80012c2:	f003 0307 	and.w	r3, r3, #7
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr
 80012d0:	e000ed00 	.word	0xe000ed00

080012d4 <__NVIC_EnableIRQ>:
{
 80012d4:	b480      	push	{r7}
 80012d6:	b083      	sub	sp, #12
 80012d8:	af00      	add	r7, sp, #0
 80012da:	4603      	mov	r3, r0
 80012dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	db0b      	blt.n	80012fe <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012e6:	79fb      	ldrb	r3, [r7, #7]
 80012e8:	f003 021f 	and.w	r2, r3, #31
 80012ec:	4907      	ldr	r1, [pc, #28]	; (800130c <__NVIC_EnableIRQ+0x38>)
 80012ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f2:	095b      	lsrs	r3, r3, #5
 80012f4:	2001      	movs	r0, #1
 80012f6:	fa00 f202 	lsl.w	r2, r0, r2
 80012fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80012fe:	bf00      	nop
 8001300:	370c      	adds	r7, #12
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop
 800130c:	e000e100 	.word	0xe000e100

08001310 <__NVIC_SetPriority>:
{
 8001310:	b480      	push	{r7}
 8001312:	b083      	sub	sp, #12
 8001314:	af00      	add	r7, sp, #0
 8001316:	4603      	mov	r3, r0
 8001318:	6039      	str	r1, [r7, #0]
 800131a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800131c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001320:	2b00      	cmp	r3, #0
 8001322:	db0a      	blt.n	800133a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	b2da      	uxtb	r2, r3
 8001328:	490c      	ldr	r1, [pc, #48]	; (800135c <__NVIC_SetPriority+0x4c>)
 800132a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800132e:	0112      	lsls	r2, r2, #4
 8001330:	b2d2      	uxtb	r2, r2
 8001332:	440b      	add	r3, r1
 8001334:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001338:	e00a      	b.n	8001350 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	b2da      	uxtb	r2, r3
 800133e:	4908      	ldr	r1, [pc, #32]	; (8001360 <__NVIC_SetPriority+0x50>)
 8001340:	79fb      	ldrb	r3, [r7, #7]
 8001342:	f003 030f 	and.w	r3, r3, #15
 8001346:	3b04      	subs	r3, #4
 8001348:	0112      	lsls	r2, r2, #4
 800134a:	b2d2      	uxtb	r2, r2
 800134c:	440b      	add	r3, r1
 800134e:	761a      	strb	r2, [r3, #24]
}
 8001350:	bf00      	nop
 8001352:	370c      	adds	r7, #12
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr
 800135c:	e000e100 	.word	0xe000e100
 8001360:	e000ed00 	.word	0xe000ed00

08001364 <NVIC_EncodePriority>:
{
 8001364:	b480      	push	{r7}
 8001366:	b089      	sub	sp, #36	; 0x24
 8001368:	af00      	add	r7, sp, #0
 800136a:	60f8      	str	r0, [r7, #12]
 800136c:	60b9      	str	r1, [r7, #8]
 800136e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	f003 0307 	and.w	r3, r3, #7
 8001376:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001378:	69fb      	ldr	r3, [r7, #28]
 800137a:	f1c3 0307 	rsb	r3, r3, #7
 800137e:	2b04      	cmp	r3, #4
 8001380:	bf28      	it	cs
 8001382:	2304      	movcs	r3, #4
 8001384:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001386:	69fb      	ldr	r3, [r7, #28]
 8001388:	3304      	adds	r3, #4
 800138a:	2b06      	cmp	r3, #6
 800138c:	d902      	bls.n	8001394 <NVIC_EncodePriority+0x30>
 800138e:	69fb      	ldr	r3, [r7, #28]
 8001390:	3b03      	subs	r3, #3
 8001392:	e000      	b.n	8001396 <NVIC_EncodePriority+0x32>
 8001394:	2300      	movs	r3, #0
 8001396:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001398:	f04f 32ff 	mov.w	r2, #4294967295
 800139c:	69bb      	ldr	r3, [r7, #24]
 800139e:	fa02 f303 	lsl.w	r3, r2, r3
 80013a2:	43da      	mvns	r2, r3
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	401a      	ands	r2, r3
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013ac:	f04f 31ff 	mov.w	r1, #4294967295
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	fa01 f303 	lsl.w	r3, r1, r3
 80013b6:	43d9      	mvns	r1, r3
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013bc:	4313      	orrs	r3, r2
}
 80013be:	4618      	mov	r0, r3
 80013c0:	3724      	adds	r7, #36	; 0x24
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr
	...

080013cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	3b01      	subs	r3, #1
 80013d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013dc:	d301      	bcc.n	80013e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013de:	2301      	movs	r3, #1
 80013e0:	e00f      	b.n	8001402 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013e2:	4a0a      	ldr	r2, [pc, #40]	; (800140c <SysTick_Config+0x40>)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	3b01      	subs	r3, #1
 80013e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013ea:	210f      	movs	r1, #15
 80013ec:	f04f 30ff 	mov.w	r0, #4294967295
 80013f0:	f7ff ff8e 	bl	8001310 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013f4:	4b05      	ldr	r3, [pc, #20]	; (800140c <SysTick_Config+0x40>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013fa:	4b04      	ldr	r3, [pc, #16]	; (800140c <SysTick_Config+0x40>)
 80013fc:	2207      	movs	r2, #7
 80013fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001400:	2300      	movs	r3, #0
}
 8001402:	4618      	mov	r0, r3
 8001404:	3708      	adds	r7, #8
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	e000e010 	.word	0xe000e010

08001410 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001418:	6878      	ldr	r0, [r7, #4]
 800141a:	f7ff ff29 	bl	8001270 <__NVIC_SetPriorityGrouping>
}
 800141e:	bf00      	nop
 8001420:	3708      	adds	r7, #8
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}

08001426 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001426:	b580      	push	{r7, lr}
 8001428:	b086      	sub	sp, #24
 800142a:	af00      	add	r7, sp, #0
 800142c:	4603      	mov	r3, r0
 800142e:	60b9      	str	r1, [r7, #8]
 8001430:	607a      	str	r2, [r7, #4]
 8001432:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001434:	2300      	movs	r3, #0
 8001436:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001438:	f7ff ff3e 	bl	80012b8 <__NVIC_GetPriorityGrouping>
 800143c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800143e:	687a      	ldr	r2, [r7, #4]
 8001440:	68b9      	ldr	r1, [r7, #8]
 8001442:	6978      	ldr	r0, [r7, #20]
 8001444:	f7ff ff8e 	bl	8001364 <NVIC_EncodePriority>
 8001448:	4602      	mov	r2, r0
 800144a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800144e:	4611      	mov	r1, r2
 8001450:	4618      	mov	r0, r3
 8001452:	f7ff ff5d 	bl	8001310 <__NVIC_SetPriority>
}
 8001456:	bf00      	nop
 8001458:	3718      	adds	r7, #24
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}

0800145e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800145e:	b580      	push	{r7, lr}
 8001460:	b082      	sub	sp, #8
 8001462:	af00      	add	r7, sp, #0
 8001464:	4603      	mov	r3, r0
 8001466:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001468:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800146c:	4618      	mov	r0, r3
 800146e:	f7ff ff31 	bl	80012d4 <__NVIC_EnableIRQ>
}
 8001472:	bf00      	nop
 8001474:	3708      	adds	r7, #8
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}

0800147a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800147a:	b580      	push	{r7, lr}
 800147c:	b082      	sub	sp, #8
 800147e:	af00      	add	r7, sp, #0
 8001480:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001482:	6878      	ldr	r0, [r7, #4]
 8001484:	f7ff ffa2 	bl	80013cc <SysTick_Config>
 8001488:	4603      	mov	r3, r0
}
 800148a:	4618      	mov	r0, r3
 800148c:	3708      	adds	r7, #8
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
	...

08001494 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001494:	b480      	push	{r7}
 8001496:	b089      	sub	sp, #36	; 0x24
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
 800149c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800149e:	2300      	movs	r3, #0
 80014a0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80014a2:	2300      	movs	r3, #0
 80014a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80014a6:	2300      	movs	r3, #0
 80014a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80014aa:	2300      	movs	r3, #0
 80014ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80014ae:	2300      	movs	r3, #0
 80014b0:	61fb      	str	r3, [r7, #28]
 80014b2:	e175      	b.n	80017a0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80014b4:	2201      	movs	r2, #1
 80014b6:	69fb      	ldr	r3, [r7, #28]
 80014b8:	fa02 f303 	lsl.w	r3, r2, r3
 80014bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	697a      	ldr	r2, [r7, #20]
 80014c4:	4013      	ands	r3, r2
 80014c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80014c8:	693a      	ldr	r2, [r7, #16]
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	429a      	cmp	r2, r3
 80014ce:	f040 8164 	bne.w	800179a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	2b01      	cmp	r3, #1
 80014d8:	d00b      	beq.n	80014f2 <HAL_GPIO_Init+0x5e>
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	2b02      	cmp	r3, #2
 80014e0:	d007      	beq.n	80014f2 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80014e6:	2b11      	cmp	r3, #17
 80014e8:	d003      	beq.n	80014f2 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	2b12      	cmp	r3, #18
 80014f0:	d130      	bne.n	8001554 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	689b      	ldr	r3, [r3, #8]
 80014f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80014f8:	69fb      	ldr	r3, [r7, #28]
 80014fa:	005b      	lsls	r3, r3, #1
 80014fc:	2203      	movs	r2, #3
 80014fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001502:	43db      	mvns	r3, r3
 8001504:	69ba      	ldr	r2, [r7, #24]
 8001506:	4013      	ands	r3, r2
 8001508:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	68da      	ldr	r2, [r3, #12]
 800150e:	69fb      	ldr	r3, [r7, #28]
 8001510:	005b      	lsls	r3, r3, #1
 8001512:	fa02 f303 	lsl.w	r3, r2, r3
 8001516:	69ba      	ldr	r2, [r7, #24]
 8001518:	4313      	orrs	r3, r2
 800151a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	69ba      	ldr	r2, [r7, #24]
 8001520:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001528:	2201      	movs	r2, #1
 800152a:	69fb      	ldr	r3, [r7, #28]
 800152c:	fa02 f303 	lsl.w	r3, r2, r3
 8001530:	43db      	mvns	r3, r3
 8001532:	69ba      	ldr	r2, [r7, #24]
 8001534:	4013      	ands	r3, r2
 8001536:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	091b      	lsrs	r3, r3, #4
 800153e:	f003 0201 	and.w	r2, r3, #1
 8001542:	69fb      	ldr	r3, [r7, #28]
 8001544:	fa02 f303 	lsl.w	r3, r2, r3
 8001548:	69ba      	ldr	r2, [r7, #24]
 800154a:	4313      	orrs	r3, r2
 800154c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	69ba      	ldr	r2, [r7, #24]
 8001552:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	68db      	ldr	r3, [r3, #12]
 8001558:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800155a:	69fb      	ldr	r3, [r7, #28]
 800155c:	005b      	lsls	r3, r3, #1
 800155e:	2203      	movs	r2, #3
 8001560:	fa02 f303 	lsl.w	r3, r2, r3
 8001564:	43db      	mvns	r3, r3
 8001566:	69ba      	ldr	r2, [r7, #24]
 8001568:	4013      	ands	r3, r2
 800156a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	689a      	ldr	r2, [r3, #8]
 8001570:	69fb      	ldr	r3, [r7, #28]
 8001572:	005b      	lsls	r3, r3, #1
 8001574:	fa02 f303 	lsl.w	r3, r2, r3
 8001578:	69ba      	ldr	r2, [r7, #24]
 800157a:	4313      	orrs	r3, r2
 800157c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	69ba      	ldr	r2, [r7, #24]
 8001582:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	2b02      	cmp	r3, #2
 800158a:	d003      	beq.n	8001594 <HAL_GPIO_Init+0x100>
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	2b12      	cmp	r3, #18
 8001592:	d123      	bne.n	80015dc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001594:	69fb      	ldr	r3, [r7, #28]
 8001596:	08da      	lsrs	r2, r3, #3
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	3208      	adds	r2, #8
 800159c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80015a2:	69fb      	ldr	r3, [r7, #28]
 80015a4:	f003 0307 	and.w	r3, r3, #7
 80015a8:	009b      	lsls	r3, r3, #2
 80015aa:	220f      	movs	r2, #15
 80015ac:	fa02 f303 	lsl.w	r3, r2, r3
 80015b0:	43db      	mvns	r3, r3
 80015b2:	69ba      	ldr	r2, [r7, #24]
 80015b4:	4013      	ands	r3, r2
 80015b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	691a      	ldr	r2, [r3, #16]
 80015bc:	69fb      	ldr	r3, [r7, #28]
 80015be:	f003 0307 	and.w	r3, r3, #7
 80015c2:	009b      	lsls	r3, r3, #2
 80015c4:	fa02 f303 	lsl.w	r3, r2, r3
 80015c8:	69ba      	ldr	r2, [r7, #24]
 80015ca:	4313      	orrs	r3, r2
 80015cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80015ce:	69fb      	ldr	r3, [r7, #28]
 80015d0:	08da      	lsrs	r2, r3, #3
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	3208      	adds	r2, #8
 80015d6:	69b9      	ldr	r1, [r7, #24]
 80015d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80015e2:	69fb      	ldr	r3, [r7, #28]
 80015e4:	005b      	lsls	r3, r3, #1
 80015e6:	2203      	movs	r2, #3
 80015e8:	fa02 f303 	lsl.w	r3, r2, r3
 80015ec:	43db      	mvns	r3, r3
 80015ee:	69ba      	ldr	r2, [r7, #24]
 80015f0:	4013      	ands	r3, r2
 80015f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	f003 0203 	and.w	r2, r3, #3
 80015fc:	69fb      	ldr	r3, [r7, #28]
 80015fe:	005b      	lsls	r3, r3, #1
 8001600:	fa02 f303 	lsl.w	r3, r2, r3
 8001604:	69ba      	ldr	r2, [r7, #24]
 8001606:	4313      	orrs	r3, r2
 8001608:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	69ba      	ldr	r2, [r7, #24]
 800160e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001618:	2b00      	cmp	r3, #0
 800161a:	f000 80be 	beq.w	800179a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800161e:	4b66      	ldr	r3, [pc, #408]	; (80017b8 <HAL_GPIO_Init+0x324>)
 8001620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001622:	4a65      	ldr	r2, [pc, #404]	; (80017b8 <HAL_GPIO_Init+0x324>)
 8001624:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001628:	6453      	str	r3, [r2, #68]	; 0x44
 800162a:	4b63      	ldr	r3, [pc, #396]	; (80017b8 <HAL_GPIO_Init+0x324>)
 800162c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800162e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001632:	60fb      	str	r3, [r7, #12]
 8001634:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001636:	4a61      	ldr	r2, [pc, #388]	; (80017bc <HAL_GPIO_Init+0x328>)
 8001638:	69fb      	ldr	r3, [r7, #28]
 800163a:	089b      	lsrs	r3, r3, #2
 800163c:	3302      	adds	r3, #2
 800163e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001642:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001644:	69fb      	ldr	r3, [r7, #28]
 8001646:	f003 0303 	and.w	r3, r3, #3
 800164a:	009b      	lsls	r3, r3, #2
 800164c:	220f      	movs	r2, #15
 800164e:	fa02 f303 	lsl.w	r3, r2, r3
 8001652:	43db      	mvns	r3, r3
 8001654:	69ba      	ldr	r2, [r7, #24]
 8001656:	4013      	ands	r3, r2
 8001658:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	4a58      	ldr	r2, [pc, #352]	; (80017c0 <HAL_GPIO_Init+0x32c>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d037      	beq.n	80016d2 <HAL_GPIO_Init+0x23e>
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	4a57      	ldr	r2, [pc, #348]	; (80017c4 <HAL_GPIO_Init+0x330>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d031      	beq.n	80016ce <HAL_GPIO_Init+0x23a>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	4a56      	ldr	r2, [pc, #344]	; (80017c8 <HAL_GPIO_Init+0x334>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d02b      	beq.n	80016ca <HAL_GPIO_Init+0x236>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	4a55      	ldr	r2, [pc, #340]	; (80017cc <HAL_GPIO_Init+0x338>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d025      	beq.n	80016c6 <HAL_GPIO_Init+0x232>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	4a54      	ldr	r2, [pc, #336]	; (80017d0 <HAL_GPIO_Init+0x33c>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d01f      	beq.n	80016c2 <HAL_GPIO_Init+0x22e>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	4a53      	ldr	r2, [pc, #332]	; (80017d4 <HAL_GPIO_Init+0x340>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d019      	beq.n	80016be <HAL_GPIO_Init+0x22a>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	4a52      	ldr	r2, [pc, #328]	; (80017d8 <HAL_GPIO_Init+0x344>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d013      	beq.n	80016ba <HAL_GPIO_Init+0x226>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	4a51      	ldr	r2, [pc, #324]	; (80017dc <HAL_GPIO_Init+0x348>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d00d      	beq.n	80016b6 <HAL_GPIO_Init+0x222>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	4a50      	ldr	r2, [pc, #320]	; (80017e0 <HAL_GPIO_Init+0x34c>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d007      	beq.n	80016b2 <HAL_GPIO_Init+0x21e>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	4a4f      	ldr	r2, [pc, #316]	; (80017e4 <HAL_GPIO_Init+0x350>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d101      	bne.n	80016ae <HAL_GPIO_Init+0x21a>
 80016aa:	2309      	movs	r3, #9
 80016ac:	e012      	b.n	80016d4 <HAL_GPIO_Init+0x240>
 80016ae:	230a      	movs	r3, #10
 80016b0:	e010      	b.n	80016d4 <HAL_GPIO_Init+0x240>
 80016b2:	2308      	movs	r3, #8
 80016b4:	e00e      	b.n	80016d4 <HAL_GPIO_Init+0x240>
 80016b6:	2307      	movs	r3, #7
 80016b8:	e00c      	b.n	80016d4 <HAL_GPIO_Init+0x240>
 80016ba:	2306      	movs	r3, #6
 80016bc:	e00a      	b.n	80016d4 <HAL_GPIO_Init+0x240>
 80016be:	2305      	movs	r3, #5
 80016c0:	e008      	b.n	80016d4 <HAL_GPIO_Init+0x240>
 80016c2:	2304      	movs	r3, #4
 80016c4:	e006      	b.n	80016d4 <HAL_GPIO_Init+0x240>
 80016c6:	2303      	movs	r3, #3
 80016c8:	e004      	b.n	80016d4 <HAL_GPIO_Init+0x240>
 80016ca:	2302      	movs	r3, #2
 80016cc:	e002      	b.n	80016d4 <HAL_GPIO_Init+0x240>
 80016ce:	2301      	movs	r3, #1
 80016d0:	e000      	b.n	80016d4 <HAL_GPIO_Init+0x240>
 80016d2:	2300      	movs	r3, #0
 80016d4:	69fa      	ldr	r2, [r7, #28]
 80016d6:	f002 0203 	and.w	r2, r2, #3
 80016da:	0092      	lsls	r2, r2, #2
 80016dc:	4093      	lsls	r3, r2
 80016de:	69ba      	ldr	r2, [r7, #24]
 80016e0:	4313      	orrs	r3, r2
 80016e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80016e4:	4935      	ldr	r1, [pc, #212]	; (80017bc <HAL_GPIO_Init+0x328>)
 80016e6:	69fb      	ldr	r3, [r7, #28]
 80016e8:	089b      	lsrs	r3, r3, #2
 80016ea:	3302      	adds	r3, #2
 80016ec:	69ba      	ldr	r2, [r7, #24]
 80016ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016f2:	4b3d      	ldr	r3, [pc, #244]	; (80017e8 <HAL_GPIO_Init+0x354>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016f8:	693b      	ldr	r3, [r7, #16]
 80016fa:	43db      	mvns	r3, r3
 80016fc:	69ba      	ldr	r2, [r7, #24]
 80016fe:	4013      	ands	r3, r2
 8001700:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800170a:	2b00      	cmp	r3, #0
 800170c:	d003      	beq.n	8001716 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800170e:	69ba      	ldr	r2, [r7, #24]
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	4313      	orrs	r3, r2
 8001714:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001716:	4a34      	ldr	r2, [pc, #208]	; (80017e8 <HAL_GPIO_Init+0x354>)
 8001718:	69bb      	ldr	r3, [r7, #24]
 800171a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800171c:	4b32      	ldr	r3, [pc, #200]	; (80017e8 <HAL_GPIO_Init+0x354>)
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	43db      	mvns	r3, r3
 8001726:	69ba      	ldr	r2, [r7, #24]
 8001728:	4013      	ands	r3, r2
 800172a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001734:	2b00      	cmp	r3, #0
 8001736:	d003      	beq.n	8001740 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001738:	69ba      	ldr	r2, [r7, #24]
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	4313      	orrs	r3, r2
 800173e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001740:	4a29      	ldr	r2, [pc, #164]	; (80017e8 <HAL_GPIO_Init+0x354>)
 8001742:	69bb      	ldr	r3, [r7, #24]
 8001744:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001746:	4b28      	ldr	r3, [pc, #160]	; (80017e8 <HAL_GPIO_Init+0x354>)
 8001748:	689b      	ldr	r3, [r3, #8]
 800174a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800174c:	693b      	ldr	r3, [r7, #16]
 800174e:	43db      	mvns	r3, r3
 8001750:	69ba      	ldr	r2, [r7, #24]
 8001752:	4013      	ands	r3, r2
 8001754:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800175e:	2b00      	cmp	r3, #0
 8001760:	d003      	beq.n	800176a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001762:	69ba      	ldr	r2, [r7, #24]
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	4313      	orrs	r3, r2
 8001768:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800176a:	4a1f      	ldr	r2, [pc, #124]	; (80017e8 <HAL_GPIO_Init+0x354>)
 800176c:	69bb      	ldr	r3, [r7, #24]
 800176e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001770:	4b1d      	ldr	r3, [pc, #116]	; (80017e8 <HAL_GPIO_Init+0x354>)
 8001772:	68db      	ldr	r3, [r3, #12]
 8001774:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	43db      	mvns	r3, r3
 800177a:	69ba      	ldr	r2, [r7, #24]
 800177c:	4013      	ands	r3, r2
 800177e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001788:	2b00      	cmp	r3, #0
 800178a:	d003      	beq.n	8001794 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800178c:	69ba      	ldr	r2, [r7, #24]
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	4313      	orrs	r3, r2
 8001792:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001794:	4a14      	ldr	r2, [pc, #80]	; (80017e8 <HAL_GPIO_Init+0x354>)
 8001796:	69bb      	ldr	r3, [r7, #24]
 8001798:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	3301      	adds	r3, #1
 800179e:	61fb      	str	r3, [r7, #28]
 80017a0:	69fb      	ldr	r3, [r7, #28]
 80017a2:	2b0f      	cmp	r3, #15
 80017a4:	f67f ae86 	bls.w	80014b4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80017a8:	bf00      	nop
 80017aa:	bf00      	nop
 80017ac:	3724      	adds	r7, #36	; 0x24
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr
 80017b6:	bf00      	nop
 80017b8:	40023800 	.word	0x40023800
 80017bc:	40013800 	.word	0x40013800
 80017c0:	40020000 	.word	0x40020000
 80017c4:	40020400 	.word	0x40020400
 80017c8:	40020800 	.word	0x40020800
 80017cc:	40020c00 	.word	0x40020c00
 80017d0:	40021000 	.word	0x40021000
 80017d4:	40021400 	.word	0x40021400
 80017d8:	40021800 	.word	0x40021800
 80017dc:	40021c00 	.word	0x40021c00
 80017e0:	40022000 	.word	0x40022000
 80017e4:	40022400 	.word	0x40022400
 80017e8:	40013c00 	.word	0x40013c00

080017ec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b085      	sub	sp, #20
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
 80017f4:	460b      	mov	r3, r1
 80017f6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	691a      	ldr	r2, [r3, #16]
 80017fc:	887b      	ldrh	r3, [r7, #2]
 80017fe:	4013      	ands	r3, r2
 8001800:	2b00      	cmp	r3, #0
 8001802:	d002      	beq.n	800180a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001804:	2301      	movs	r3, #1
 8001806:	73fb      	strb	r3, [r7, #15]
 8001808:	e001      	b.n	800180e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800180a:	2300      	movs	r3, #0
 800180c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800180e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001810:	4618      	mov	r0, r3
 8001812:	3714      	adds	r7, #20
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr

0800181c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800181c:	b480      	push	{r7}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
 8001824:	460b      	mov	r3, r1
 8001826:	807b      	strh	r3, [r7, #2]
 8001828:	4613      	mov	r3, r2
 800182a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800182c:	787b      	ldrb	r3, [r7, #1]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d003      	beq.n	800183a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001832:	887a      	ldrh	r2, [r7, #2]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001838:	e003      	b.n	8001842 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800183a:	887b      	ldrh	r3, [r7, #2]
 800183c:	041a      	lsls	r2, r3, #16
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	619a      	str	r2, [r3, #24]
}
 8001842:	bf00      	nop
 8001844:	370c      	adds	r7, #12
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr
	...

08001850 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
 8001856:	4603      	mov	r3, r0
 8001858:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800185a:	4b08      	ldr	r3, [pc, #32]	; (800187c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800185c:	695a      	ldr	r2, [r3, #20]
 800185e:	88fb      	ldrh	r3, [r7, #6]
 8001860:	4013      	ands	r3, r2
 8001862:	2b00      	cmp	r3, #0
 8001864:	d006      	beq.n	8001874 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001866:	4a05      	ldr	r2, [pc, #20]	; (800187c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001868:	88fb      	ldrh	r3, [r7, #6]
 800186a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800186c:	88fb      	ldrh	r3, [r7, #6]
 800186e:	4618      	mov	r0, r3
 8001870:	f000 f806 	bl	8001880 <HAL_GPIO_EXTI_Callback>
  }
}
 8001874:	bf00      	nop
 8001876:	3708      	adds	r7, #8
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}
 800187c:	40013c00 	.word	0x40013c00

08001880 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001880:	b480      	push	{r7}
 8001882:	b083      	sub	sp, #12
 8001884:	af00      	add	r7, sp, #0
 8001886:	4603      	mov	r3, r0
 8001888:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800188a:	bf00      	nop
 800188c:	370c      	adds	r7, #12
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr
	...

08001898 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800189e:	2300      	movs	r3, #0
 80018a0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80018a2:	4b23      	ldr	r3, [pc, #140]	; (8001930 <HAL_PWREx_EnableOverDrive+0x98>)
 80018a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a6:	4a22      	ldr	r2, [pc, #136]	; (8001930 <HAL_PWREx_EnableOverDrive+0x98>)
 80018a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018ac:	6413      	str	r3, [r2, #64]	; 0x40
 80018ae:	4b20      	ldr	r3, [pc, #128]	; (8001930 <HAL_PWREx_EnableOverDrive+0x98>)
 80018b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018b6:	603b      	str	r3, [r7, #0]
 80018b8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80018ba:	4b1e      	ldr	r3, [pc, #120]	; (8001934 <HAL_PWREx_EnableOverDrive+0x9c>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a1d      	ldr	r2, [pc, #116]	; (8001934 <HAL_PWREx_EnableOverDrive+0x9c>)
 80018c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018c4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80018c6:	f7ff fca3 	bl	8001210 <HAL_GetTick>
 80018ca:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80018cc:	e009      	b.n	80018e2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80018ce:	f7ff fc9f 	bl	8001210 <HAL_GetTick>
 80018d2:	4602      	mov	r2, r0
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	1ad3      	subs	r3, r2, r3
 80018d8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80018dc:	d901      	bls.n	80018e2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80018de:	2303      	movs	r3, #3
 80018e0:	e022      	b.n	8001928 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80018e2:	4b14      	ldr	r3, [pc, #80]	; (8001934 <HAL_PWREx_EnableOverDrive+0x9c>)
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018ee:	d1ee      	bne.n	80018ce <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80018f0:	4b10      	ldr	r3, [pc, #64]	; (8001934 <HAL_PWREx_EnableOverDrive+0x9c>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a0f      	ldr	r2, [pc, #60]	; (8001934 <HAL_PWREx_EnableOverDrive+0x9c>)
 80018f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018fa:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80018fc:	f7ff fc88 	bl	8001210 <HAL_GetTick>
 8001900:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001902:	e009      	b.n	8001918 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001904:	f7ff fc84 	bl	8001210 <HAL_GetTick>
 8001908:	4602      	mov	r2, r0
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001912:	d901      	bls.n	8001918 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001914:	2303      	movs	r3, #3
 8001916:	e007      	b.n	8001928 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001918:	4b06      	ldr	r3, [pc, #24]	; (8001934 <HAL_PWREx_EnableOverDrive+0x9c>)
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001920:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001924:	d1ee      	bne.n	8001904 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001926:	2300      	movs	r3, #0
}
 8001928:	4618      	mov	r0, r3
 800192a:	3708      	adds	r7, #8
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}
 8001930:	40023800 	.word	0x40023800
 8001934:	40007000 	.word	0x40007000

08001938 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b086      	sub	sp, #24
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001940:	2300      	movs	r3, #0
 8001942:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d101      	bne.n	800194e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800194a:	2301      	movs	r3, #1
 800194c:	e291      	b.n	8001e72 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f003 0301 	and.w	r3, r3, #1
 8001956:	2b00      	cmp	r3, #0
 8001958:	f000 8087 	beq.w	8001a6a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800195c:	4b96      	ldr	r3, [pc, #600]	; (8001bb8 <HAL_RCC_OscConfig+0x280>)
 800195e:	689b      	ldr	r3, [r3, #8]
 8001960:	f003 030c 	and.w	r3, r3, #12
 8001964:	2b04      	cmp	r3, #4
 8001966:	d00c      	beq.n	8001982 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001968:	4b93      	ldr	r3, [pc, #588]	; (8001bb8 <HAL_RCC_OscConfig+0x280>)
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	f003 030c 	and.w	r3, r3, #12
 8001970:	2b08      	cmp	r3, #8
 8001972:	d112      	bne.n	800199a <HAL_RCC_OscConfig+0x62>
 8001974:	4b90      	ldr	r3, [pc, #576]	; (8001bb8 <HAL_RCC_OscConfig+0x280>)
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800197c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001980:	d10b      	bne.n	800199a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001982:	4b8d      	ldr	r3, [pc, #564]	; (8001bb8 <HAL_RCC_OscConfig+0x280>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800198a:	2b00      	cmp	r3, #0
 800198c:	d06c      	beq.n	8001a68 <HAL_RCC_OscConfig+0x130>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d168      	bne.n	8001a68 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001996:	2301      	movs	r3, #1
 8001998:	e26b      	b.n	8001e72 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019a2:	d106      	bne.n	80019b2 <HAL_RCC_OscConfig+0x7a>
 80019a4:	4b84      	ldr	r3, [pc, #528]	; (8001bb8 <HAL_RCC_OscConfig+0x280>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a83      	ldr	r2, [pc, #524]	; (8001bb8 <HAL_RCC_OscConfig+0x280>)
 80019aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019ae:	6013      	str	r3, [r2, #0]
 80019b0:	e02e      	b.n	8001a10 <HAL_RCC_OscConfig+0xd8>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d10c      	bne.n	80019d4 <HAL_RCC_OscConfig+0x9c>
 80019ba:	4b7f      	ldr	r3, [pc, #508]	; (8001bb8 <HAL_RCC_OscConfig+0x280>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a7e      	ldr	r2, [pc, #504]	; (8001bb8 <HAL_RCC_OscConfig+0x280>)
 80019c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019c4:	6013      	str	r3, [r2, #0]
 80019c6:	4b7c      	ldr	r3, [pc, #496]	; (8001bb8 <HAL_RCC_OscConfig+0x280>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a7b      	ldr	r2, [pc, #492]	; (8001bb8 <HAL_RCC_OscConfig+0x280>)
 80019cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019d0:	6013      	str	r3, [r2, #0]
 80019d2:	e01d      	b.n	8001a10 <HAL_RCC_OscConfig+0xd8>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019dc:	d10c      	bne.n	80019f8 <HAL_RCC_OscConfig+0xc0>
 80019de:	4b76      	ldr	r3, [pc, #472]	; (8001bb8 <HAL_RCC_OscConfig+0x280>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a75      	ldr	r2, [pc, #468]	; (8001bb8 <HAL_RCC_OscConfig+0x280>)
 80019e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019e8:	6013      	str	r3, [r2, #0]
 80019ea:	4b73      	ldr	r3, [pc, #460]	; (8001bb8 <HAL_RCC_OscConfig+0x280>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a72      	ldr	r2, [pc, #456]	; (8001bb8 <HAL_RCC_OscConfig+0x280>)
 80019f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019f4:	6013      	str	r3, [r2, #0]
 80019f6:	e00b      	b.n	8001a10 <HAL_RCC_OscConfig+0xd8>
 80019f8:	4b6f      	ldr	r3, [pc, #444]	; (8001bb8 <HAL_RCC_OscConfig+0x280>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a6e      	ldr	r2, [pc, #440]	; (8001bb8 <HAL_RCC_OscConfig+0x280>)
 80019fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a02:	6013      	str	r3, [r2, #0]
 8001a04:	4b6c      	ldr	r3, [pc, #432]	; (8001bb8 <HAL_RCC_OscConfig+0x280>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a6b      	ldr	r2, [pc, #428]	; (8001bb8 <HAL_RCC_OscConfig+0x280>)
 8001a0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d013      	beq.n	8001a40 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a18:	f7ff fbfa 	bl	8001210 <HAL_GetTick>
 8001a1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a1e:	e008      	b.n	8001a32 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a20:	f7ff fbf6 	bl	8001210 <HAL_GetTick>
 8001a24:	4602      	mov	r2, r0
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	2b64      	cmp	r3, #100	; 0x64
 8001a2c:	d901      	bls.n	8001a32 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001a2e:	2303      	movs	r3, #3
 8001a30:	e21f      	b.n	8001e72 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a32:	4b61      	ldr	r3, [pc, #388]	; (8001bb8 <HAL_RCC_OscConfig+0x280>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d0f0      	beq.n	8001a20 <HAL_RCC_OscConfig+0xe8>
 8001a3e:	e014      	b.n	8001a6a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a40:	f7ff fbe6 	bl	8001210 <HAL_GetTick>
 8001a44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a46:	e008      	b.n	8001a5a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a48:	f7ff fbe2 	bl	8001210 <HAL_GetTick>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	693b      	ldr	r3, [r7, #16]
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	2b64      	cmp	r3, #100	; 0x64
 8001a54:	d901      	bls.n	8001a5a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001a56:	2303      	movs	r3, #3
 8001a58:	e20b      	b.n	8001e72 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a5a:	4b57      	ldr	r3, [pc, #348]	; (8001bb8 <HAL_RCC_OscConfig+0x280>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d1f0      	bne.n	8001a48 <HAL_RCC_OscConfig+0x110>
 8001a66:	e000      	b.n	8001a6a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 0302 	and.w	r3, r3, #2
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d069      	beq.n	8001b4a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a76:	4b50      	ldr	r3, [pc, #320]	; (8001bb8 <HAL_RCC_OscConfig+0x280>)
 8001a78:	689b      	ldr	r3, [r3, #8]
 8001a7a:	f003 030c 	and.w	r3, r3, #12
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d00b      	beq.n	8001a9a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a82:	4b4d      	ldr	r3, [pc, #308]	; (8001bb8 <HAL_RCC_OscConfig+0x280>)
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	f003 030c 	and.w	r3, r3, #12
 8001a8a:	2b08      	cmp	r3, #8
 8001a8c:	d11c      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x190>
 8001a8e:	4b4a      	ldr	r3, [pc, #296]	; (8001bb8 <HAL_RCC_OscConfig+0x280>)
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d116      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a9a:	4b47      	ldr	r3, [pc, #284]	; (8001bb8 <HAL_RCC_OscConfig+0x280>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f003 0302 	and.w	r3, r3, #2
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d005      	beq.n	8001ab2 <HAL_RCC_OscConfig+0x17a>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	68db      	ldr	r3, [r3, #12]
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	d001      	beq.n	8001ab2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e1df      	b.n	8001e72 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ab2:	4b41      	ldr	r3, [pc, #260]	; (8001bb8 <HAL_RCC_OscConfig+0x280>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	691b      	ldr	r3, [r3, #16]
 8001abe:	00db      	lsls	r3, r3, #3
 8001ac0:	493d      	ldr	r1, [pc, #244]	; (8001bb8 <HAL_RCC_OscConfig+0x280>)
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ac6:	e040      	b.n	8001b4a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	68db      	ldr	r3, [r3, #12]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d023      	beq.n	8001b18 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ad0:	4b39      	ldr	r3, [pc, #228]	; (8001bb8 <HAL_RCC_OscConfig+0x280>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a38      	ldr	r2, [pc, #224]	; (8001bb8 <HAL_RCC_OscConfig+0x280>)
 8001ad6:	f043 0301 	orr.w	r3, r3, #1
 8001ada:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001adc:	f7ff fb98 	bl	8001210 <HAL_GetTick>
 8001ae0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ae2:	e008      	b.n	8001af6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ae4:	f7ff fb94 	bl	8001210 <HAL_GetTick>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	2b02      	cmp	r3, #2
 8001af0:	d901      	bls.n	8001af6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001af2:	2303      	movs	r3, #3
 8001af4:	e1bd      	b.n	8001e72 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001af6:	4b30      	ldr	r3, [pc, #192]	; (8001bb8 <HAL_RCC_OscConfig+0x280>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f003 0302 	and.w	r3, r3, #2
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d0f0      	beq.n	8001ae4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b02:	4b2d      	ldr	r3, [pc, #180]	; (8001bb8 <HAL_RCC_OscConfig+0x280>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	691b      	ldr	r3, [r3, #16]
 8001b0e:	00db      	lsls	r3, r3, #3
 8001b10:	4929      	ldr	r1, [pc, #164]	; (8001bb8 <HAL_RCC_OscConfig+0x280>)
 8001b12:	4313      	orrs	r3, r2
 8001b14:	600b      	str	r3, [r1, #0]
 8001b16:	e018      	b.n	8001b4a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b18:	4b27      	ldr	r3, [pc, #156]	; (8001bb8 <HAL_RCC_OscConfig+0x280>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a26      	ldr	r2, [pc, #152]	; (8001bb8 <HAL_RCC_OscConfig+0x280>)
 8001b1e:	f023 0301 	bic.w	r3, r3, #1
 8001b22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b24:	f7ff fb74 	bl	8001210 <HAL_GetTick>
 8001b28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b2a:	e008      	b.n	8001b3e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b2c:	f7ff fb70 	bl	8001210 <HAL_GetTick>
 8001b30:	4602      	mov	r2, r0
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	2b02      	cmp	r3, #2
 8001b38:	d901      	bls.n	8001b3e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	e199      	b.n	8001e72 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b3e:	4b1e      	ldr	r3, [pc, #120]	; (8001bb8 <HAL_RCC_OscConfig+0x280>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 0302 	and.w	r3, r3, #2
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d1f0      	bne.n	8001b2c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f003 0308 	and.w	r3, r3, #8
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d038      	beq.n	8001bc8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	695b      	ldr	r3, [r3, #20]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d019      	beq.n	8001b92 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b5e:	4b16      	ldr	r3, [pc, #88]	; (8001bb8 <HAL_RCC_OscConfig+0x280>)
 8001b60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b62:	4a15      	ldr	r2, [pc, #84]	; (8001bb8 <HAL_RCC_OscConfig+0x280>)
 8001b64:	f043 0301 	orr.w	r3, r3, #1
 8001b68:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b6a:	f7ff fb51 	bl	8001210 <HAL_GetTick>
 8001b6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b70:	e008      	b.n	8001b84 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b72:	f7ff fb4d 	bl	8001210 <HAL_GetTick>
 8001b76:	4602      	mov	r2, r0
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	1ad3      	subs	r3, r2, r3
 8001b7c:	2b02      	cmp	r3, #2
 8001b7e:	d901      	bls.n	8001b84 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001b80:	2303      	movs	r3, #3
 8001b82:	e176      	b.n	8001e72 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b84:	4b0c      	ldr	r3, [pc, #48]	; (8001bb8 <HAL_RCC_OscConfig+0x280>)
 8001b86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b88:	f003 0302 	and.w	r3, r3, #2
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d0f0      	beq.n	8001b72 <HAL_RCC_OscConfig+0x23a>
 8001b90:	e01a      	b.n	8001bc8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b92:	4b09      	ldr	r3, [pc, #36]	; (8001bb8 <HAL_RCC_OscConfig+0x280>)
 8001b94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b96:	4a08      	ldr	r2, [pc, #32]	; (8001bb8 <HAL_RCC_OscConfig+0x280>)
 8001b98:	f023 0301 	bic.w	r3, r3, #1
 8001b9c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b9e:	f7ff fb37 	bl	8001210 <HAL_GetTick>
 8001ba2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ba4:	e00a      	b.n	8001bbc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ba6:	f7ff fb33 	bl	8001210 <HAL_GetTick>
 8001baa:	4602      	mov	r2, r0
 8001bac:	693b      	ldr	r3, [r7, #16]
 8001bae:	1ad3      	subs	r3, r2, r3
 8001bb0:	2b02      	cmp	r3, #2
 8001bb2:	d903      	bls.n	8001bbc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001bb4:	2303      	movs	r3, #3
 8001bb6:	e15c      	b.n	8001e72 <HAL_RCC_OscConfig+0x53a>
 8001bb8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bbc:	4b91      	ldr	r3, [pc, #580]	; (8001e04 <HAL_RCC_OscConfig+0x4cc>)
 8001bbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bc0:	f003 0302 	and.w	r3, r3, #2
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d1ee      	bne.n	8001ba6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f003 0304 	and.w	r3, r3, #4
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	f000 80a4 	beq.w	8001d1e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bd6:	4b8b      	ldr	r3, [pc, #556]	; (8001e04 <HAL_RCC_OscConfig+0x4cc>)
 8001bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d10d      	bne.n	8001bfe <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001be2:	4b88      	ldr	r3, [pc, #544]	; (8001e04 <HAL_RCC_OscConfig+0x4cc>)
 8001be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be6:	4a87      	ldr	r2, [pc, #540]	; (8001e04 <HAL_RCC_OscConfig+0x4cc>)
 8001be8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bec:	6413      	str	r3, [r2, #64]	; 0x40
 8001bee:	4b85      	ldr	r3, [pc, #532]	; (8001e04 <HAL_RCC_OscConfig+0x4cc>)
 8001bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bf6:	60bb      	str	r3, [r7, #8]
 8001bf8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bfe:	4b82      	ldr	r3, [pc, #520]	; (8001e08 <HAL_RCC_OscConfig+0x4d0>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d118      	bne.n	8001c3c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001c0a:	4b7f      	ldr	r3, [pc, #508]	; (8001e08 <HAL_RCC_OscConfig+0x4d0>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a7e      	ldr	r2, [pc, #504]	; (8001e08 <HAL_RCC_OscConfig+0x4d0>)
 8001c10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c16:	f7ff fafb 	bl	8001210 <HAL_GetTick>
 8001c1a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c1c:	e008      	b.n	8001c30 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c1e:	f7ff faf7 	bl	8001210 <HAL_GetTick>
 8001c22:	4602      	mov	r2, r0
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	1ad3      	subs	r3, r2, r3
 8001c28:	2b64      	cmp	r3, #100	; 0x64
 8001c2a:	d901      	bls.n	8001c30 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001c2c:	2303      	movs	r3, #3
 8001c2e:	e120      	b.n	8001e72 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c30:	4b75      	ldr	r3, [pc, #468]	; (8001e08 <HAL_RCC_OscConfig+0x4d0>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d0f0      	beq.n	8001c1e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	2b01      	cmp	r3, #1
 8001c42:	d106      	bne.n	8001c52 <HAL_RCC_OscConfig+0x31a>
 8001c44:	4b6f      	ldr	r3, [pc, #444]	; (8001e04 <HAL_RCC_OscConfig+0x4cc>)
 8001c46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c48:	4a6e      	ldr	r2, [pc, #440]	; (8001e04 <HAL_RCC_OscConfig+0x4cc>)
 8001c4a:	f043 0301 	orr.w	r3, r3, #1
 8001c4e:	6713      	str	r3, [r2, #112]	; 0x70
 8001c50:	e02d      	b.n	8001cae <HAL_RCC_OscConfig+0x376>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d10c      	bne.n	8001c74 <HAL_RCC_OscConfig+0x33c>
 8001c5a:	4b6a      	ldr	r3, [pc, #424]	; (8001e04 <HAL_RCC_OscConfig+0x4cc>)
 8001c5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c5e:	4a69      	ldr	r2, [pc, #420]	; (8001e04 <HAL_RCC_OscConfig+0x4cc>)
 8001c60:	f023 0301 	bic.w	r3, r3, #1
 8001c64:	6713      	str	r3, [r2, #112]	; 0x70
 8001c66:	4b67      	ldr	r3, [pc, #412]	; (8001e04 <HAL_RCC_OscConfig+0x4cc>)
 8001c68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c6a:	4a66      	ldr	r2, [pc, #408]	; (8001e04 <HAL_RCC_OscConfig+0x4cc>)
 8001c6c:	f023 0304 	bic.w	r3, r3, #4
 8001c70:	6713      	str	r3, [r2, #112]	; 0x70
 8001c72:	e01c      	b.n	8001cae <HAL_RCC_OscConfig+0x376>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	2b05      	cmp	r3, #5
 8001c7a:	d10c      	bne.n	8001c96 <HAL_RCC_OscConfig+0x35e>
 8001c7c:	4b61      	ldr	r3, [pc, #388]	; (8001e04 <HAL_RCC_OscConfig+0x4cc>)
 8001c7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c80:	4a60      	ldr	r2, [pc, #384]	; (8001e04 <HAL_RCC_OscConfig+0x4cc>)
 8001c82:	f043 0304 	orr.w	r3, r3, #4
 8001c86:	6713      	str	r3, [r2, #112]	; 0x70
 8001c88:	4b5e      	ldr	r3, [pc, #376]	; (8001e04 <HAL_RCC_OscConfig+0x4cc>)
 8001c8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c8c:	4a5d      	ldr	r2, [pc, #372]	; (8001e04 <HAL_RCC_OscConfig+0x4cc>)
 8001c8e:	f043 0301 	orr.w	r3, r3, #1
 8001c92:	6713      	str	r3, [r2, #112]	; 0x70
 8001c94:	e00b      	b.n	8001cae <HAL_RCC_OscConfig+0x376>
 8001c96:	4b5b      	ldr	r3, [pc, #364]	; (8001e04 <HAL_RCC_OscConfig+0x4cc>)
 8001c98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c9a:	4a5a      	ldr	r2, [pc, #360]	; (8001e04 <HAL_RCC_OscConfig+0x4cc>)
 8001c9c:	f023 0301 	bic.w	r3, r3, #1
 8001ca0:	6713      	str	r3, [r2, #112]	; 0x70
 8001ca2:	4b58      	ldr	r3, [pc, #352]	; (8001e04 <HAL_RCC_OscConfig+0x4cc>)
 8001ca4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ca6:	4a57      	ldr	r2, [pc, #348]	; (8001e04 <HAL_RCC_OscConfig+0x4cc>)
 8001ca8:	f023 0304 	bic.w	r3, r3, #4
 8001cac:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d015      	beq.n	8001ce2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cb6:	f7ff faab 	bl	8001210 <HAL_GetTick>
 8001cba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cbc:	e00a      	b.n	8001cd4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cbe:	f7ff faa7 	bl	8001210 <HAL_GetTick>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	1ad3      	subs	r3, r2, r3
 8001cc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d901      	bls.n	8001cd4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001cd0:	2303      	movs	r3, #3
 8001cd2:	e0ce      	b.n	8001e72 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cd4:	4b4b      	ldr	r3, [pc, #300]	; (8001e04 <HAL_RCC_OscConfig+0x4cc>)
 8001cd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cd8:	f003 0302 	and.w	r3, r3, #2
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d0ee      	beq.n	8001cbe <HAL_RCC_OscConfig+0x386>
 8001ce0:	e014      	b.n	8001d0c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ce2:	f7ff fa95 	bl	8001210 <HAL_GetTick>
 8001ce6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ce8:	e00a      	b.n	8001d00 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cea:	f7ff fa91 	bl	8001210 <HAL_GetTick>
 8001cee:	4602      	mov	r2, r0
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	1ad3      	subs	r3, r2, r3
 8001cf4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d901      	bls.n	8001d00 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001cfc:	2303      	movs	r3, #3
 8001cfe:	e0b8      	b.n	8001e72 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d00:	4b40      	ldr	r3, [pc, #256]	; (8001e04 <HAL_RCC_OscConfig+0x4cc>)
 8001d02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d04:	f003 0302 	and.w	r3, r3, #2
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d1ee      	bne.n	8001cea <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001d0c:	7dfb      	ldrb	r3, [r7, #23]
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d105      	bne.n	8001d1e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d12:	4b3c      	ldr	r3, [pc, #240]	; (8001e04 <HAL_RCC_OscConfig+0x4cc>)
 8001d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d16:	4a3b      	ldr	r2, [pc, #236]	; (8001e04 <HAL_RCC_OscConfig+0x4cc>)
 8001d18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d1c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	699b      	ldr	r3, [r3, #24]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	f000 80a4 	beq.w	8001e70 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d28:	4b36      	ldr	r3, [pc, #216]	; (8001e04 <HAL_RCC_OscConfig+0x4cc>)
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	f003 030c 	and.w	r3, r3, #12
 8001d30:	2b08      	cmp	r3, #8
 8001d32:	d06b      	beq.n	8001e0c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	699b      	ldr	r3, [r3, #24]
 8001d38:	2b02      	cmp	r3, #2
 8001d3a:	d149      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d3c:	4b31      	ldr	r3, [pc, #196]	; (8001e04 <HAL_RCC_OscConfig+0x4cc>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a30      	ldr	r2, [pc, #192]	; (8001e04 <HAL_RCC_OscConfig+0x4cc>)
 8001d42:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d48:	f7ff fa62 	bl	8001210 <HAL_GetTick>
 8001d4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d4e:	e008      	b.n	8001d62 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d50:	f7ff fa5e 	bl	8001210 <HAL_GetTick>
 8001d54:	4602      	mov	r2, r0
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	2b02      	cmp	r3, #2
 8001d5c:	d901      	bls.n	8001d62 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001d5e:	2303      	movs	r3, #3
 8001d60:	e087      	b.n	8001e72 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d62:	4b28      	ldr	r3, [pc, #160]	; (8001e04 <HAL_RCC_OscConfig+0x4cc>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d1f0      	bne.n	8001d50 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	69da      	ldr	r2, [r3, #28]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6a1b      	ldr	r3, [r3, #32]
 8001d76:	431a      	orrs	r2, r3
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d7c:	019b      	lsls	r3, r3, #6
 8001d7e:	431a      	orrs	r2, r3
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d84:	085b      	lsrs	r3, r3, #1
 8001d86:	3b01      	subs	r3, #1
 8001d88:	041b      	lsls	r3, r3, #16
 8001d8a:	431a      	orrs	r2, r3
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d90:	061b      	lsls	r3, r3, #24
 8001d92:	4313      	orrs	r3, r2
 8001d94:	4a1b      	ldr	r2, [pc, #108]	; (8001e04 <HAL_RCC_OscConfig+0x4cc>)
 8001d96:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001d9a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d9c:	4b19      	ldr	r3, [pc, #100]	; (8001e04 <HAL_RCC_OscConfig+0x4cc>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a18      	ldr	r2, [pc, #96]	; (8001e04 <HAL_RCC_OscConfig+0x4cc>)
 8001da2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001da6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001da8:	f7ff fa32 	bl	8001210 <HAL_GetTick>
 8001dac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dae:	e008      	b.n	8001dc2 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001db0:	f7ff fa2e 	bl	8001210 <HAL_GetTick>
 8001db4:	4602      	mov	r2, r0
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	2b02      	cmp	r3, #2
 8001dbc:	d901      	bls.n	8001dc2 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	e057      	b.n	8001e72 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dc2:	4b10      	ldr	r3, [pc, #64]	; (8001e04 <HAL_RCC_OscConfig+0x4cc>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d0f0      	beq.n	8001db0 <HAL_RCC_OscConfig+0x478>
 8001dce:	e04f      	b.n	8001e70 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dd0:	4b0c      	ldr	r3, [pc, #48]	; (8001e04 <HAL_RCC_OscConfig+0x4cc>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a0b      	ldr	r2, [pc, #44]	; (8001e04 <HAL_RCC_OscConfig+0x4cc>)
 8001dd6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001dda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ddc:	f7ff fa18 	bl	8001210 <HAL_GetTick>
 8001de0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001de2:	e008      	b.n	8001df6 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001de4:	f7ff fa14 	bl	8001210 <HAL_GetTick>
 8001de8:	4602      	mov	r2, r0
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	1ad3      	subs	r3, r2, r3
 8001dee:	2b02      	cmp	r3, #2
 8001df0:	d901      	bls.n	8001df6 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8001df2:	2303      	movs	r3, #3
 8001df4:	e03d      	b.n	8001e72 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001df6:	4b03      	ldr	r3, [pc, #12]	; (8001e04 <HAL_RCC_OscConfig+0x4cc>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d1f0      	bne.n	8001de4 <HAL_RCC_OscConfig+0x4ac>
 8001e02:	e035      	b.n	8001e70 <HAL_RCC_OscConfig+0x538>
 8001e04:	40023800 	.word	0x40023800
 8001e08:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001e0c:	4b1b      	ldr	r3, [pc, #108]	; (8001e7c <HAL_RCC_OscConfig+0x544>)
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	699b      	ldr	r3, [r3, #24]
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d028      	beq.n	8001e6c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d121      	bne.n	8001e6c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e32:	429a      	cmp	r2, r3
 8001e34:	d11a      	bne.n	8001e6c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e36:	68fa      	ldr	r2, [r7, #12]
 8001e38:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	687a      	ldr	r2, [r7, #4]
 8001e40:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001e42:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d111      	bne.n	8001e6c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e52:	085b      	lsrs	r3, r3, #1
 8001e54:	3b01      	subs	r3, #1
 8001e56:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	d107      	bne.n	8001e6c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e66:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	d001      	beq.n	8001e70 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e000      	b.n	8001e72 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8001e70:	2300      	movs	r3, #0
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3718      	adds	r7, #24
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	40023800 	.word	0x40023800

08001e80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b084      	sub	sp, #16
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
 8001e88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d101      	bne.n	8001e98 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001e94:	2301      	movs	r3, #1
 8001e96:	e0d0      	b.n	800203a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e98:	4b6a      	ldr	r3, [pc, #424]	; (8002044 <HAL_RCC_ClockConfig+0x1c4>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f003 030f 	and.w	r3, r3, #15
 8001ea0:	683a      	ldr	r2, [r7, #0]
 8001ea2:	429a      	cmp	r2, r3
 8001ea4:	d910      	bls.n	8001ec8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ea6:	4b67      	ldr	r3, [pc, #412]	; (8002044 <HAL_RCC_ClockConfig+0x1c4>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f023 020f 	bic.w	r2, r3, #15
 8001eae:	4965      	ldr	r1, [pc, #404]	; (8002044 <HAL_RCC_ClockConfig+0x1c4>)
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eb6:	4b63      	ldr	r3, [pc, #396]	; (8002044 <HAL_RCC_ClockConfig+0x1c4>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f003 030f 	and.w	r3, r3, #15
 8001ebe:	683a      	ldr	r2, [r7, #0]
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	d001      	beq.n	8001ec8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e0b8      	b.n	800203a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f003 0302 	and.w	r3, r3, #2
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d020      	beq.n	8001f16 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f003 0304 	and.w	r3, r3, #4
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d005      	beq.n	8001eec <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ee0:	4b59      	ldr	r3, [pc, #356]	; (8002048 <HAL_RCC_ClockConfig+0x1c8>)
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	4a58      	ldr	r2, [pc, #352]	; (8002048 <HAL_RCC_ClockConfig+0x1c8>)
 8001ee6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001eea:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f003 0308 	and.w	r3, r3, #8
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d005      	beq.n	8001f04 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ef8:	4b53      	ldr	r3, [pc, #332]	; (8002048 <HAL_RCC_ClockConfig+0x1c8>)
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	4a52      	ldr	r2, [pc, #328]	; (8002048 <HAL_RCC_ClockConfig+0x1c8>)
 8001efe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001f02:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f04:	4b50      	ldr	r3, [pc, #320]	; (8002048 <HAL_RCC_ClockConfig+0x1c8>)
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	494d      	ldr	r1, [pc, #308]	; (8002048 <HAL_RCC_ClockConfig+0x1c8>)
 8001f12:	4313      	orrs	r3, r2
 8001f14:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 0301 	and.w	r3, r3, #1
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d040      	beq.n	8001fa4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	d107      	bne.n	8001f3a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f2a:	4b47      	ldr	r3, [pc, #284]	; (8002048 <HAL_RCC_ClockConfig+0x1c8>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d115      	bne.n	8001f62 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e07f      	b.n	800203a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	2b02      	cmp	r3, #2
 8001f40:	d107      	bne.n	8001f52 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f42:	4b41      	ldr	r3, [pc, #260]	; (8002048 <HAL_RCC_ClockConfig+0x1c8>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d109      	bne.n	8001f62 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e073      	b.n	800203a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f52:	4b3d      	ldr	r3, [pc, #244]	; (8002048 <HAL_RCC_ClockConfig+0x1c8>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 0302 	and.w	r3, r3, #2
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d101      	bne.n	8001f62 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e06b      	b.n	800203a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f62:	4b39      	ldr	r3, [pc, #228]	; (8002048 <HAL_RCC_ClockConfig+0x1c8>)
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	f023 0203 	bic.w	r2, r3, #3
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	4936      	ldr	r1, [pc, #216]	; (8002048 <HAL_RCC_ClockConfig+0x1c8>)
 8001f70:	4313      	orrs	r3, r2
 8001f72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f74:	f7ff f94c 	bl	8001210 <HAL_GetTick>
 8001f78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f7a:	e00a      	b.n	8001f92 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f7c:	f7ff f948 	bl	8001210 <HAL_GetTick>
 8001f80:	4602      	mov	r2, r0
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	1ad3      	subs	r3, r2, r3
 8001f86:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d901      	bls.n	8001f92 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	e053      	b.n	800203a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f92:	4b2d      	ldr	r3, [pc, #180]	; (8002048 <HAL_RCC_ClockConfig+0x1c8>)
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	f003 020c 	and.w	r2, r3, #12
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	d1eb      	bne.n	8001f7c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001fa4:	4b27      	ldr	r3, [pc, #156]	; (8002044 <HAL_RCC_ClockConfig+0x1c4>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f003 030f 	and.w	r3, r3, #15
 8001fac:	683a      	ldr	r2, [r7, #0]
 8001fae:	429a      	cmp	r2, r3
 8001fb0:	d210      	bcs.n	8001fd4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fb2:	4b24      	ldr	r3, [pc, #144]	; (8002044 <HAL_RCC_ClockConfig+0x1c4>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f023 020f 	bic.w	r2, r3, #15
 8001fba:	4922      	ldr	r1, [pc, #136]	; (8002044 <HAL_RCC_ClockConfig+0x1c4>)
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fc2:	4b20      	ldr	r3, [pc, #128]	; (8002044 <HAL_RCC_ClockConfig+0x1c4>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 030f 	and.w	r3, r3, #15
 8001fca:	683a      	ldr	r2, [r7, #0]
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d001      	beq.n	8001fd4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	e032      	b.n	800203a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f003 0304 	and.w	r3, r3, #4
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d008      	beq.n	8001ff2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fe0:	4b19      	ldr	r3, [pc, #100]	; (8002048 <HAL_RCC_ClockConfig+0x1c8>)
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	4916      	ldr	r1, [pc, #88]	; (8002048 <HAL_RCC_ClockConfig+0x1c8>)
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 0308 	and.w	r3, r3, #8
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d009      	beq.n	8002012 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001ffe:	4b12      	ldr	r3, [pc, #72]	; (8002048 <HAL_RCC_ClockConfig+0x1c8>)
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	691b      	ldr	r3, [r3, #16]
 800200a:	00db      	lsls	r3, r3, #3
 800200c:	490e      	ldr	r1, [pc, #56]	; (8002048 <HAL_RCC_ClockConfig+0x1c8>)
 800200e:	4313      	orrs	r3, r2
 8002010:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002012:	f000 f821 	bl	8002058 <HAL_RCC_GetSysClockFreq>
 8002016:	4602      	mov	r2, r0
 8002018:	4b0b      	ldr	r3, [pc, #44]	; (8002048 <HAL_RCC_ClockConfig+0x1c8>)
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	091b      	lsrs	r3, r3, #4
 800201e:	f003 030f 	and.w	r3, r3, #15
 8002022:	490a      	ldr	r1, [pc, #40]	; (800204c <HAL_RCC_ClockConfig+0x1cc>)
 8002024:	5ccb      	ldrb	r3, [r1, r3]
 8002026:	fa22 f303 	lsr.w	r3, r2, r3
 800202a:	4a09      	ldr	r2, [pc, #36]	; (8002050 <HAL_RCC_ClockConfig+0x1d0>)
 800202c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800202e:	4b09      	ldr	r3, [pc, #36]	; (8002054 <HAL_RCC_ClockConfig+0x1d4>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4618      	mov	r0, r3
 8002034:	f7ff f8a8 	bl	8001188 <HAL_InitTick>

  return HAL_OK;
 8002038:	2300      	movs	r3, #0
}
 800203a:	4618      	mov	r0, r3
 800203c:	3710      	adds	r7, #16
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	40023c00 	.word	0x40023c00
 8002048:	40023800 	.word	0x40023800
 800204c:	0800863c 	.word	0x0800863c
 8002050:	20000120 	.word	0x20000120
 8002054:	20000124 	.word	0x20000124

08002058 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002058:	b5b0      	push	{r4, r5, r7, lr}
 800205a:	b084      	sub	sp, #16
 800205c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800205e:	2100      	movs	r1, #0
 8002060:	6079      	str	r1, [r7, #4]
 8002062:	2100      	movs	r1, #0
 8002064:	60f9      	str	r1, [r7, #12]
 8002066:	2100      	movs	r1, #0
 8002068:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 800206a:	2100      	movs	r1, #0
 800206c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800206e:	4952      	ldr	r1, [pc, #328]	; (80021b8 <HAL_RCC_GetSysClockFreq+0x160>)
 8002070:	6889      	ldr	r1, [r1, #8]
 8002072:	f001 010c 	and.w	r1, r1, #12
 8002076:	2908      	cmp	r1, #8
 8002078:	d00d      	beq.n	8002096 <HAL_RCC_GetSysClockFreq+0x3e>
 800207a:	2908      	cmp	r1, #8
 800207c:	f200 8094 	bhi.w	80021a8 <HAL_RCC_GetSysClockFreq+0x150>
 8002080:	2900      	cmp	r1, #0
 8002082:	d002      	beq.n	800208a <HAL_RCC_GetSysClockFreq+0x32>
 8002084:	2904      	cmp	r1, #4
 8002086:	d003      	beq.n	8002090 <HAL_RCC_GetSysClockFreq+0x38>
 8002088:	e08e      	b.n	80021a8 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800208a:	4b4c      	ldr	r3, [pc, #304]	; (80021bc <HAL_RCC_GetSysClockFreq+0x164>)
 800208c:	60bb      	str	r3, [r7, #8]
      break;
 800208e:	e08e      	b.n	80021ae <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002090:	4b4b      	ldr	r3, [pc, #300]	; (80021c0 <HAL_RCC_GetSysClockFreq+0x168>)
 8002092:	60bb      	str	r3, [r7, #8]
      break;
 8002094:	e08b      	b.n	80021ae <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002096:	4948      	ldr	r1, [pc, #288]	; (80021b8 <HAL_RCC_GetSysClockFreq+0x160>)
 8002098:	6849      	ldr	r1, [r1, #4]
 800209a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800209e:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80020a0:	4945      	ldr	r1, [pc, #276]	; (80021b8 <HAL_RCC_GetSysClockFreq+0x160>)
 80020a2:	6849      	ldr	r1, [r1, #4]
 80020a4:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80020a8:	2900      	cmp	r1, #0
 80020aa:	d024      	beq.n	80020f6 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020ac:	4942      	ldr	r1, [pc, #264]	; (80021b8 <HAL_RCC_GetSysClockFreq+0x160>)
 80020ae:	6849      	ldr	r1, [r1, #4]
 80020b0:	0989      	lsrs	r1, r1, #6
 80020b2:	4608      	mov	r0, r1
 80020b4:	f04f 0100 	mov.w	r1, #0
 80020b8:	f240 14ff 	movw	r4, #511	; 0x1ff
 80020bc:	f04f 0500 	mov.w	r5, #0
 80020c0:	ea00 0204 	and.w	r2, r0, r4
 80020c4:	ea01 0305 	and.w	r3, r1, r5
 80020c8:	493d      	ldr	r1, [pc, #244]	; (80021c0 <HAL_RCC_GetSysClockFreq+0x168>)
 80020ca:	fb01 f003 	mul.w	r0, r1, r3
 80020ce:	2100      	movs	r1, #0
 80020d0:	fb01 f102 	mul.w	r1, r1, r2
 80020d4:	1844      	adds	r4, r0, r1
 80020d6:	493a      	ldr	r1, [pc, #232]	; (80021c0 <HAL_RCC_GetSysClockFreq+0x168>)
 80020d8:	fba2 0101 	umull	r0, r1, r2, r1
 80020dc:	1863      	adds	r3, r4, r1
 80020de:	4619      	mov	r1, r3
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	461a      	mov	r2, r3
 80020e4:	f04f 0300 	mov.w	r3, #0
 80020e8:	f7fe f88e 	bl	8000208 <__aeabi_uldivmod>
 80020ec:	4602      	mov	r2, r0
 80020ee:	460b      	mov	r3, r1
 80020f0:	4613      	mov	r3, r2
 80020f2:	60fb      	str	r3, [r7, #12]
 80020f4:	e04a      	b.n	800218c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020f6:	4b30      	ldr	r3, [pc, #192]	; (80021b8 <HAL_RCC_GetSysClockFreq+0x160>)
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	099b      	lsrs	r3, r3, #6
 80020fc:	461a      	mov	r2, r3
 80020fe:	f04f 0300 	mov.w	r3, #0
 8002102:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002106:	f04f 0100 	mov.w	r1, #0
 800210a:	ea02 0400 	and.w	r4, r2, r0
 800210e:	ea03 0501 	and.w	r5, r3, r1
 8002112:	4620      	mov	r0, r4
 8002114:	4629      	mov	r1, r5
 8002116:	f04f 0200 	mov.w	r2, #0
 800211a:	f04f 0300 	mov.w	r3, #0
 800211e:	014b      	lsls	r3, r1, #5
 8002120:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002124:	0142      	lsls	r2, r0, #5
 8002126:	4610      	mov	r0, r2
 8002128:	4619      	mov	r1, r3
 800212a:	1b00      	subs	r0, r0, r4
 800212c:	eb61 0105 	sbc.w	r1, r1, r5
 8002130:	f04f 0200 	mov.w	r2, #0
 8002134:	f04f 0300 	mov.w	r3, #0
 8002138:	018b      	lsls	r3, r1, #6
 800213a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800213e:	0182      	lsls	r2, r0, #6
 8002140:	1a12      	subs	r2, r2, r0
 8002142:	eb63 0301 	sbc.w	r3, r3, r1
 8002146:	f04f 0000 	mov.w	r0, #0
 800214a:	f04f 0100 	mov.w	r1, #0
 800214e:	00d9      	lsls	r1, r3, #3
 8002150:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002154:	00d0      	lsls	r0, r2, #3
 8002156:	4602      	mov	r2, r0
 8002158:	460b      	mov	r3, r1
 800215a:	1912      	adds	r2, r2, r4
 800215c:	eb45 0303 	adc.w	r3, r5, r3
 8002160:	f04f 0000 	mov.w	r0, #0
 8002164:	f04f 0100 	mov.w	r1, #0
 8002168:	0299      	lsls	r1, r3, #10
 800216a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800216e:	0290      	lsls	r0, r2, #10
 8002170:	4602      	mov	r2, r0
 8002172:	460b      	mov	r3, r1
 8002174:	4610      	mov	r0, r2
 8002176:	4619      	mov	r1, r3
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	461a      	mov	r2, r3
 800217c:	f04f 0300 	mov.w	r3, #0
 8002180:	f7fe f842 	bl	8000208 <__aeabi_uldivmod>
 8002184:	4602      	mov	r2, r0
 8002186:	460b      	mov	r3, r1
 8002188:	4613      	mov	r3, r2
 800218a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800218c:	4b0a      	ldr	r3, [pc, #40]	; (80021b8 <HAL_RCC_GetSysClockFreq+0x160>)
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	0c1b      	lsrs	r3, r3, #16
 8002192:	f003 0303 	and.w	r3, r3, #3
 8002196:	3301      	adds	r3, #1
 8002198:	005b      	lsls	r3, r3, #1
 800219a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800219c:	68fa      	ldr	r2, [r7, #12]
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80021a4:	60bb      	str	r3, [r7, #8]
      break;
 80021a6:	e002      	b.n	80021ae <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80021a8:	4b04      	ldr	r3, [pc, #16]	; (80021bc <HAL_RCC_GetSysClockFreq+0x164>)
 80021aa:	60bb      	str	r3, [r7, #8]
      break;
 80021ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021ae:	68bb      	ldr	r3, [r7, #8]
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	3710      	adds	r7, #16
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bdb0      	pop	{r4, r5, r7, pc}
 80021b8:	40023800 	.word	0x40023800
 80021bc:	00f42400 	.word	0x00f42400
 80021c0:	017d7840 	.word	0x017d7840

080021c4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021c4:	b480      	push	{r7}
 80021c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021c8:	4b03      	ldr	r3, [pc, #12]	; (80021d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80021ca:	681b      	ldr	r3, [r3, #0]
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr
 80021d6:	bf00      	nop
 80021d8:	20000120 	.word	0x20000120

080021dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80021e0:	f7ff fff0 	bl	80021c4 <HAL_RCC_GetHCLKFreq>
 80021e4:	4602      	mov	r2, r0
 80021e6:	4b05      	ldr	r3, [pc, #20]	; (80021fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	0a9b      	lsrs	r3, r3, #10
 80021ec:	f003 0307 	and.w	r3, r3, #7
 80021f0:	4903      	ldr	r1, [pc, #12]	; (8002200 <HAL_RCC_GetPCLK1Freq+0x24>)
 80021f2:	5ccb      	ldrb	r3, [r1, r3]
 80021f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	40023800 	.word	0x40023800
 8002200:	0800864c 	.word	0x0800864c

08002204 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002208:	f7ff ffdc 	bl	80021c4 <HAL_RCC_GetHCLKFreq>
 800220c:	4602      	mov	r2, r0
 800220e:	4b05      	ldr	r3, [pc, #20]	; (8002224 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	0b5b      	lsrs	r3, r3, #13
 8002214:	f003 0307 	and.w	r3, r3, #7
 8002218:	4903      	ldr	r1, [pc, #12]	; (8002228 <HAL_RCC_GetPCLK2Freq+0x24>)
 800221a:	5ccb      	ldrb	r3, [r1, r3]
 800221c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002220:	4618      	mov	r0, r3
 8002222:	bd80      	pop	{r7, pc}
 8002224:	40023800 	.word	0x40023800
 8002228:	0800864c 	.word	0x0800864c

0800222c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b088      	sub	sp, #32
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002234:	2300      	movs	r3, #0
 8002236:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002238:	2300      	movs	r3, #0
 800223a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800223c:	2300      	movs	r3, #0
 800223e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002240:	2300      	movs	r3, #0
 8002242:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002244:	2300      	movs	r3, #0
 8002246:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f003 0301 	and.w	r3, r3, #1
 8002250:	2b00      	cmp	r3, #0
 8002252:	d012      	beq.n	800227a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002254:	4b69      	ldr	r3, [pc, #420]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	4a68      	ldr	r2, [pc, #416]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800225a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800225e:	6093      	str	r3, [r2, #8]
 8002260:	4b66      	ldr	r3, [pc, #408]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002262:	689a      	ldr	r2, [r3, #8]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002268:	4964      	ldr	r1, [pc, #400]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800226a:	4313      	orrs	r3, r2
 800226c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002272:	2b00      	cmp	r3, #0
 8002274:	d101      	bne.n	800227a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002276:	2301      	movs	r3, #1
 8002278:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002282:	2b00      	cmp	r3, #0
 8002284:	d017      	beq.n	80022b6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002286:	4b5d      	ldr	r3, [pc, #372]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002288:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800228c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002294:	4959      	ldr	r1, [pc, #356]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002296:	4313      	orrs	r3, r2
 8002298:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80022a4:	d101      	bne.n	80022aa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80022a6:	2301      	movs	r3, #1
 80022a8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d101      	bne.n	80022b6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80022b2:	2301      	movs	r3, #1
 80022b4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d017      	beq.n	80022f2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80022c2:	4b4e      	ldr	r3, [pc, #312]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80022c8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d0:	494a      	ldr	r1, [pc, #296]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022d2:	4313      	orrs	r3, r2
 80022d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022e0:	d101      	bne.n	80022e6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80022e2:	2301      	movs	r3, #1
 80022e4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d101      	bne.n	80022f2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80022ee:	2301      	movs	r3, #1
 80022f0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d001      	beq.n	8002302 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80022fe:	2301      	movs	r3, #1
 8002300:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 0320 	and.w	r3, r3, #32
 800230a:	2b00      	cmp	r3, #0
 800230c:	f000 808b 	beq.w	8002426 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002310:	4b3a      	ldr	r3, [pc, #232]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002314:	4a39      	ldr	r2, [pc, #228]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002316:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800231a:	6413      	str	r3, [r2, #64]	; 0x40
 800231c:	4b37      	ldr	r3, [pc, #220]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800231e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002320:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002324:	60bb      	str	r3, [r7, #8]
 8002326:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002328:	4b35      	ldr	r3, [pc, #212]	; (8002400 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a34      	ldr	r2, [pc, #208]	; (8002400 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800232e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002332:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002334:	f7fe ff6c 	bl	8001210 <HAL_GetTick>
 8002338:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800233a:	e008      	b.n	800234e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800233c:	f7fe ff68 	bl	8001210 <HAL_GetTick>
 8002340:	4602      	mov	r2, r0
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	1ad3      	subs	r3, r2, r3
 8002346:	2b64      	cmp	r3, #100	; 0x64
 8002348:	d901      	bls.n	800234e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800234a:	2303      	movs	r3, #3
 800234c:	e357      	b.n	80029fe <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800234e:	4b2c      	ldr	r3, [pc, #176]	; (8002400 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002356:	2b00      	cmp	r3, #0
 8002358:	d0f0      	beq.n	800233c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800235a:	4b28      	ldr	r3, [pc, #160]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800235c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800235e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002362:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d035      	beq.n	80023d6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800236e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002372:	693a      	ldr	r2, [r7, #16]
 8002374:	429a      	cmp	r2, r3
 8002376:	d02e      	beq.n	80023d6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002378:	4b20      	ldr	r3, [pc, #128]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800237a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800237c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002380:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002382:	4b1e      	ldr	r3, [pc, #120]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002384:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002386:	4a1d      	ldr	r2, [pc, #116]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002388:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800238c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800238e:	4b1b      	ldr	r3, [pc, #108]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002390:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002392:	4a1a      	ldr	r2, [pc, #104]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002394:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002398:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800239a:	4a18      	ldr	r2, [pc, #96]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80023a0:	4b16      	ldr	r3, [pc, #88]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023a4:	f003 0301 	and.w	r3, r3, #1
 80023a8:	2b01      	cmp	r3, #1
 80023aa:	d114      	bne.n	80023d6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023ac:	f7fe ff30 	bl	8001210 <HAL_GetTick>
 80023b0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023b2:	e00a      	b.n	80023ca <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023b4:	f7fe ff2c 	bl	8001210 <HAL_GetTick>
 80023b8:	4602      	mov	r2, r0
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	1ad3      	subs	r3, r2, r3
 80023be:	f241 3288 	movw	r2, #5000	; 0x1388
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d901      	bls.n	80023ca <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80023c6:	2303      	movs	r3, #3
 80023c8:	e319      	b.n	80029fe <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023ca:	4b0c      	ldr	r3, [pc, #48]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023ce:	f003 0302 	and.w	r3, r3, #2
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d0ee      	beq.n	80023b4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80023e2:	d111      	bne.n	8002408 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80023e4:	4b05      	ldr	r3, [pc, #20]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80023f0:	4b04      	ldr	r3, [pc, #16]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80023f2:	400b      	ands	r3, r1
 80023f4:	4901      	ldr	r1, [pc, #4]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023f6:	4313      	orrs	r3, r2
 80023f8:	608b      	str	r3, [r1, #8]
 80023fa:	e00b      	b.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80023fc:	40023800 	.word	0x40023800
 8002400:	40007000 	.word	0x40007000
 8002404:	0ffffcff 	.word	0x0ffffcff
 8002408:	4bb1      	ldr	r3, [pc, #708]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	4ab0      	ldr	r2, [pc, #704]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800240e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002412:	6093      	str	r3, [r2, #8]
 8002414:	4bae      	ldr	r3, [pc, #696]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002416:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800241c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002420:	49ab      	ldr	r1, [pc, #684]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002422:	4313      	orrs	r3, r2
 8002424:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 0310 	and.w	r3, r3, #16
 800242e:	2b00      	cmp	r3, #0
 8002430:	d010      	beq.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002432:	4ba7      	ldr	r3, [pc, #668]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002434:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002438:	4aa5      	ldr	r2, [pc, #660]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800243a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800243e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002442:	4ba3      	ldr	r3, [pc, #652]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002444:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800244c:	49a0      	ldr	r1, [pc, #640]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800244e:	4313      	orrs	r3, r2
 8002450:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800245c:	2b00      	cmp	r3, #0
 800245e:	d00a      	beq.n	8002476 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002460:	4b9b      	ldr	r3, [pc, #620]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002462:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002466:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800246e:	4998      	ldr	r1, [pc, #608]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002470:	4313      	orrs	r3, r2
 8002472:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800247e:	2b00      	cmp	r3, #0
 8002480:	d00a      	beq.n	8002498 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002482:	4b93      	ldr	r3, [pc, #588]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002484:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002488:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002490:	498f      	ldr	r1, [pc, #572]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002492:	4313      	orrs	r3, r2
 8002494:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d00a      	beq.n	80024ba <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80024a4:	4b8a      	ldr	r3, [pc, #552]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80024a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024aa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024b2:	4987      	ldr	r1, [pc, #540]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80024b4:	4313      	orrs	r3, r2
 80024b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d00a      	beq.n	80024dc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80024c6:	4b82      	ldr	r3, [pc, #520]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80024c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024cc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024d4:	497e      	ldr	r1, [pc, #504]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80024d6:	4313      	orrs	r3, r2
 80024d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d00a      	beq.n	80024fe <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80024e8:	4b79      	ldr	r3, [pc, #484]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80024ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024ee:	f023 0203 	bic.w	r2, r3, #3
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024f6:	4976      	ldr	r1, [pc, #472]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80024f8:	4313      	orrs	r3, r2
 80024fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002506:	2b00      	cmp	r3, #0
 8002508:	d00a      	beq.n	8002520 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800250a:	4b71      	ldr	r3, [pc, #452]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800250c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002510:	f023 020c 	bic.w	r2, r3, #12
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002518:	496d      	ldr	r1, [pc, #436]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800251a:	4313      	orrs	r3, r2
 800251c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002528:	2b00      	cmp	r3, #0
 800252a:	d00a      	beq.n	8002542 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800252c:	4b68      	ldr	r3, [pc, #416]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800252e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002532:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800253a:	4965      	ldr	r1, [pc, #404]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800253c:	4313      	orrs	r3, r2
 800253e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800254a:	2b00      	cmp	r3, #0
 800254c:	d00a      	beq.n	8002564 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800254e:	4b60      	ldr	r3, [pc, #384]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002550:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002554:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800255c:	495c      	ldr	r1, [pc, #368]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800255e:	4313      	orrs	r3, r2
 8002560:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800256c:	2b00      	cmp	r3, #0
 800256e:	d00a      	beq.n	8002586 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002570:	4b57      	ldr	r3, [pc, #348]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002572:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002576:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800257e:	4954      	ldr	r1, [pc, #336]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002580:	4313      	orrs	r3, r2
 8002582:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800258e:	2b00      	cmp	r3, #0
 8002590:	d00a      	beq.n	80025a8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002592:	4b4f      	ldr	r3, [pc, #316]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002594:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002598:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025a0:	494b      	ldr	r1, [pc, #300]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80025a2:	4313      	orrs	r3, r2
 80025a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d00a      	beq.n	80025ca <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80025b4:	4b46      	ldr	r3, [pc, #280]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80025b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025ba:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025c2:	4943      	ldr	r1, [pc, #268]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80025c4:	4313      	orrs	r3, r2
 80025c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d00a      	beq.n	80025ec <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80025d6:	4b3e      	ldr	r3, [pc, #248]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80025d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025dc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025e4:	493a      	ldr	r1, [pc, #232]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80025e6:	4313      	orrs	r3, r2
 80025e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d00a      	beq.n	800260e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80025f8:	4b35      	ldr	r3, [pc, #212]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80025fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025fe:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002606:	4932      	ldr	r1, [pc, #200]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002608:	4313      	orrs	r3, r2
 800260a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002616:	2b00      	cmp	r3, #0
 8002618:	d011      	beq.n	800263e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800261a:	4b2d      	ldr	r3, [pc, #180]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800261c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002620:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002628:	4929      	ldr	r1, [pc, #164]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800262a:	4313      	orrs	r3, r2
 800262c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002634:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002638:	d101      	bne.n	800263e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800263a:	2301      	movs	r3, #1
 800263c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 0308 	and.w	r3, r3, #8
 8002646:	2b00      	cmp	r3, #0
 8002648:	d001      	beq.n	800264e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800264a:	2301      	movs	r3, #1
 800264c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002656:	2b00      	cmp	r3, #0
 8002658:	d00a      	beq.n	8002670 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800265a:	4b1d      	ldr	r3, [pc, #116]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800265c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002660:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002668:	4919      	ldr	r1, [pc, #100]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800266a:	4313      	orrs	r3, r2
 800266c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002678:	2b00      	cmp	r3, #0
 800267a:	d00b      	beq.n	8002694 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800267c:	4b14      	ldr	r3, [pc, #80]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800267e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002682:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800268c:	4910      	ldr	r1, [pc, #64]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800268e:	4313      	orrs	r3, r2
 8002690:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002694:	69fb      	ldr	r3, [r7, #28]
 8002696:	2b01      	cmp	r3, #1
 8002698:	d006      	beq.n	80026a8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	f000 80d9 	beq.w	800285a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80026a8:	4b09      	ldr	r3, [pc, #36]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a08      	ldr	r2, [pc, #32]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80026ae:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80026b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026b4:	f7fe fdac 	bl	8001210 <HAL_GetTick>
 80026b8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80026ba:	e00b      	b.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80026bc:	f7fe fda8 	bl	8001210 <HAL_GetTick>
 80026c0:	4602      	mov	r2, r0
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	2b64      	cmp	r3, #100	; 0x64
 80026c8:	d904      	bls.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80026ca:	2303      	movs	r3, #3
 80026cc:	e197      	b.n	80029fe <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80026ce:	bf00      	nop
 80026d0:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80026d4:	4b6c      	ldr	r3, [pc, #432]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d1ed      	bne.n	80026bc <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 0301 	and.w	r3, r3, #1
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d021      	beq.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d11d      	bne.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80026f4:	4b64      	ldr	r3, [pc, #400]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80026f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026fa:	0c1b      	lsrs	r3, r3, #16
 80026fc:	f003 0303 	and.w	r3, r3, #3
 8002700:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002702:	4b61      	ldr	r3, [pc, #388]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002704:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002708:	0e1b      	lsrs	r3, r3, #24
 800270a:	f003 030f 	and.w	r3, r3, #15
 800270e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	019a      	lsls	r2, r3, #6
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	041b      	lsls	r3, r3, #16
 800271a:	431a      	orrs	r2, r3
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	061b      	lsls	r3, r3, #24
 8002720:	431a      	orrs	r2, r3
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	071b      	lsls	r3, r3, #28
 8002728:	4957      	ldr	r1, [pc, #348]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800272a:	4313      	orrs	r3, r2
 800272c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002738:	2b00      	cmp	r3, #0
 800273a:	d004      	beq.n	8002746 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002740:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002744:	d00a      	beq.n	800275c <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800274e:	2b00      	cmp	r3, #0
 8002750:	d02e      	beq.n	80027b0 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002756:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800275a:	d129      	bne.n	80027b0 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800275c:	4b4a      	ldr	r3, [pc, #296]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800275e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002762:	0c1b      	lsrs	r3, r3, #16
 8002764:	f003 0303 	and.w	r3, r3, #3
 8002768:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800276a:	4b47      	ldr	r3, [pc, #284]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800276c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002770:	0f1b      	lsrs	r3, r3, #28
 8002772:	f003 0307 	and.w	r3, r3, #7
 8002776:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	019a      	lsls	r2, r3, #6
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	041b      	lsls	r3, r3, #16
 8002782:	431a      	orrs	r2, r3
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	061b      	lsls	r3, r3, #24
 800278a:	431a      	orrs	r2, r3
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	071b      	lsls	r3, r3, #28
 8002790:	493d      	ldr	r1, [pc, #244]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002792:	4313      	orrs	r3, r2
 8002794:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002798:	4b3b      	ldr	r3, [pc, #236]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800279a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800279e:	f023 021f 	bic.w	r2, r3, #31
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a6:	3b01      	subs	r3, #1
 80027a8:	4937      	ldr	r1, [pc, #220]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80027aa:	4313      	orrs	r3, r2
 80027ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d01d      	beq.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80027bc:	4b32      	ldr	r3, [pc, #200]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80027be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027c2:	0e1b      	lsrs	r3, r3, #24
 80027c4:	f003 030f 	and.w	r3, r3, #15
 80027c8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80027ca:	4b2f      	ldr	r3, [pc, #188]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80027cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027d0:	0f1b      	lsrs	r3, r3, #28
 80027d2:	f003 0307 	and.w	r3, r3, #7
 80027d6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	019a      	lsls	r2, r3, #6
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	691b      	ldr	r3, [r3, #16]
 80027e2:	041b      	lsls	r3, r3, #16
 80027e4:	431a      	orrs	r2, r3
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	061b      	lsls	r3, r3, #24
 80027ea:	431a      	orrs	r2, r3
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	071b      	lsls	r3, r3, #28
 80027f0:	4925      	ldr	r1, [pc, #148]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80027f2:	4313      	orrs	r3, r2
 80027f4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002800:	2b00      	cmp	r3, #0
 8002802:	d011      	beq.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	019a      	lsls	r2, r3, #6
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	691b      	ldr	r3, [r3, #16]
 800280e:	041b      	lsls	r3, r3, #16
 8002810:	431a      	orrs	r2, r3
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	68db      	ldr	r3, [r3, #12]
 8002816:	061b      	lsls	r3, r3, #24
 8002818:	431a      	orrs	r2, r3
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	071b      	lsls	r3, r3, #28
 8002820:	4919      	ldr	r1, [pc, #100]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002822:	4313      	orrs	r3, r2
 8002824:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002828:	4b17      	ldr	r3, [pc, #92]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a16      	ldr	r2, [pc, #88]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800282e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002832:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002834:	f7fe fcec 	bl	8001210 <HAL_GetTick>
 8002838:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800283a:	e008      	b.n	800284e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800283c:	f7fe fce8 	bl	8001210 <HAL_GetTick>
 8002840:	4602      	mov	r2, r0
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	1ad3      	subs	r3, r2, r3
 8002846:	2b64      	cmp	r3, #100	; 0x64
 8002848:	d901      	bls.n	800284e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800284a:	2303      	movs	r3, #3
 800284c:	e0d7      	b.n	80029fe <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800284e:	4b0e      	ldr	r3, [pc, #56]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002856:	2b00      	cmp	r3, #0
 8002858:	d0f0      	beq.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800285a:	69bb      	ldr	r3, [r7, #24]
 800285c:	2b01      	cmp	r3, #1
 800285e:	f040 80cd 	bne.w	80029fc <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002862:	4b09      	ldr	r3, [pc, #36]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a08      	ldr	r2, [pc, #32]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002868:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800286c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800286e:	f7fe fccf 	bl	8001210 <HAL_GetTick>
 8002872:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002874:	e00a      	b.n	800288c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002876:	f7fe fccb 	bl	8001210 <HAL_GetTick>
 800287a:	4602      	mov	r2, r0
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	1ad3      	subs	r3, r2, r3
 8002880:	2b64      	cmp	r3, #100	; 0x64
 8002882:	d903      	bls.n	800288c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002884:	2303      	movs	r3, #3
 8002886:	e0ba      	b.n	80029fe <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8002888:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800288c:	4b5e      	ldr	r3, [pc, #376]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002894:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002898:	d0ed      	beq.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d003      	beq.n	80028ae <HAL_RCCEx_PeriphCLKConfig+0x682>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d009      	beq.n	80028c2 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d02e      	beq.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d12a      	bne.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80028c2:	4b51      	ldr	r3, [pc, #324]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80028c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028c8:	0c1b      	lsrs	r3, r3, #16
 80028ca:	f003 0303 	and.w	r3, r3, #3
 80028ce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80028d0:	4b4d      	ldr	r3, [pc, #308]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80028d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028d6:	0f1b      	lsrs	r3, r3, #28
 80028d8:	f003 0307 	and.w	r3, r3, #7
 80028dc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	695b      	ldr	r3, [r3, #20]
 80028e2:	019a      	lsls	r2, r3, #6
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	041b      	lsls	r3, r3, #16
 80028e8:	431a      	orrs	r2, r3
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	699b      	ldr	r3, [r3, #24]
 80028ee:	061b      	lsls	r3, r3, #24
 80028f0:	431a      	orrs	r2, r3
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	071b      	lsls	r3, r3, #28
 80028f6:	4944      	ldr	r1, [pc, #272]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80028f8:	4313      	orrs	r3, r2
 80028fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80028fe:	4b42      	ldr	r3, [pc, #264]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002900:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002904:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800290c:	3b01      	subs	r3, #1
 800290e:	021b      	lsls	r3, r3, #8
 8002910:	493d      	ldr	r1, [pc, #244]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002912:	4313      	orrs	r3, r2
 8002914:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002920:	2b00      	cmp	r3, #0
 8002922:	d022      	beq.n	800296a <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002928:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800292c:	d11d      	bne.n	800296a <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800292e:	4b36      	ldr	r3, [pc, #216]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002930:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002934:	0e1b      	lsrs	r3, r3, #24
 8002936:	f003 030f 	and.w	r3, r3, #15
 800293a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800293c:	4b32      	ldr	r3, [pc, #200]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800293e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002942:	0f1b      	lsrs	r3, r3, #28
 8002944:	f003 0307 	and.w	r3, r3, #7
 8002948:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	695b      	ldr	r3, [r3, #20]
 800294e:	019a      	lsls	r2, r3, #6
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6a1b      	ldr	r3, [r3, #32]
 8002954:	041b      	lsls	r3, r3, #16
 8002956:	431a      	orrs	r2, r3
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	061b      	lsls	r3, r3, #24
 800295c:	431a      	orrs	r2, r3
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	071b      	lsls	r3, r3, #28
 8002962:	4929      	ldr	r1, [pc, #164]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002964:	4313      	orrs	r3, r2
 8002966:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 0308 	and.w	r3, r3, #8
 8002972:	2b00      	cmp	r3, #0
 8002974:	d028      	beq.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002976:	4b24      	ldr	r3, [pc, #144]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002978:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800297c:	0e1b      	lsrs	r3, r3, #24
 800297e:	f003 030f 	and.w	r3, r3, #15
 8002982:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002984:	4b20      	ldr	r3, [pc, #128]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002986:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800298a:	0c1b      	lsrs	r3, r3, #16
 800298c:	f003 0303 	and.w	r3, r3, #3
 8002990:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	695b      	ldr	r3, [r3, #20]
 8002996:	019a      	lsls	r2, r3, #6
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	041b      	lsls	r3, r3, #16
 800299c:	431a      	orrs	r2, r3
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	061b      	lsls	r3, r3, #24
 80029a2:	431a      	orrs	r2, r3
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	69db      	ldr	r3, [r3, #28]
 80029a8:	071b      	lsls	r3, r3, #28
 80029aa:	4917      	ldr	r1, [pc, #92]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80029ac:	4313      	orrs	r3, r2
 80029ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80029b2:	4b15      	ldr	r3, [pc, #84]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80029b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029b8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029c0:	4911      	ldr	r1, [pc, #68]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80029c2:	4313      	orrs	r3, r2
 80029c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80029c8:	4b0f      	ldr	r3, [pc, #60]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a0e      	ldr	r2, [pc, #56]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80029ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029d4:	f7fe fc1c 	bl	8001210 <HAL_GetTick>
 80029d8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80029da:	e008      	b.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80029dc:	f7fe fc18 	bl	8001210 <HAL_GetTick>
 80029e0:	4602      	mov	r2, r0
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	2b64      	cmp	r3, #100	; 0x64
 80029e8:	d901      	bls.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80029ea:	2303      	movs	r3, #3
 80029ec:	e007      	b.n	80029fe <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80029ee:	4b06      	ldr	r3, [pc, #24]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80029f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80029fa:	d1ef      	bne.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80029fc:	2300      	movs	r3, #0
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	3720      	adds	r7, #32
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}
 8002a06:	bf00      	nop
 8002a08:	40023800 	.word	0x40023800

08002a0c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b082      	sub	sp, #8
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d101      	bne.n	8002a1e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e022      	b.n	8002a64 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d105      	bne.n	8002a36 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8002a30:	6878      	ldr	r0, [r7, #4]
 8002a32:	f7fe fa43 	bl	8000ebc <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2203      	movs	r2, #3
 8002a3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	f000 f814 	bl	8002a6c <HAL_SD_InitCard>
 8002a44:	4603      	mov	r3, r0
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d001      	beq.n	8002a4e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e00a      	b.n	8002a64 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2200      	movs	r2, #0
 8002a52:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2200      	movs	r2, #0
 8002a58:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002a62:	2300      	movs	r3, #0
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	3708      	adds	r7, #8
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}

08002a6c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8002a6c:	b5b0      	push	{r4, r5, r7, lr}
 8002a6e:	b08e      	sub	sp, #56	; 0x38
 8002a70:	af04      	add	r7, sp, #16
 8002a72:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8002a74:	2300      	movs	r3, #0
 8002a76:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8002a80:	2300      	movs	r3, #0
 8002a82:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8002a84:	2300      	movs	r3, #0
 8002a86:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8002a88:	2376      	movs	r3, #118	; 0x76
 8002a8a:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681d      	ldr	r5, [r3, #0]
 8002a90:	466c      	mov	r4, sp
 8002a92:	f107 0314 	add.w	r3, r7, #20
 8002a96:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002a9a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002a9e:	f107 0308 	add.w	r3, r7, #8
 8002aa2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002aa4:	4628      	mov	r0, r5
 8002aa6:	f002 f803 	bl	8004ab0 <SDMMC_Init>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8002ab0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d001      	beq.n	8002abc <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	e056      	b.n	8002b6a <HAL_SD_InitCard+0xfe>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	685a      	ldr	r2, [r3, #4]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002aca:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f002 f837 	bl	8004b44 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	685a      	ldr	r2, [r3, #4]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ae4:	605a      	str	r2, [r3, #4]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	f000 fe66 	bl	80037b8 <SD_PowerON>
 8002aec:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002aee:	6a3b      	ldr	r3, [r7, #32]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d00b      	beq.n	8002b0c <HAL_SD_InitCard+0xa0>
  {
    hsd->State = HAL_SD_STATE_READY;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2201      	movs	r2, #1
 8002af8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b00:	6a3b      	ldr	r3, [r7, #32]
 8002b02:	431a      	orrs	r2, r3
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	e02e      	b.n	8002b6a <HAL_SD_InitCard+0xfe>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8002b0c:	6878      	ldr	r0, [r7, #4]
 8002b0e:	f000 fd87 	bl	8003620 <SD_InitCard>
 8002b12:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002b14:	6a3b      	ldr	r3, [r7, #32]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d00b      	beq.n	8002b32 <HAL_SD_InitCard+0xc6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b26:	6a3b      	ldr	r3, [r7, #32]
 8002b28:	431a      	orrs	r2, r3
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e01b      	b.n	8002b6a <HAL_SD_InitCard+0xfe>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f002 f896 	bl	8004c6c <SDMMC_CmdBlockLength>
 8002b40:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002b42:	6a3b      	ldr	r3, [r7, #32]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d00f      	beq.n	8002b68 <HAL_SD_InitCard+0xfc>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a09      	ldr	r2, [pc, #36]	; (8002b74 <HAL_SD_InitCard+0x108>)
 8002b4e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b54:	6a3b      	ldr	r3, [r7, #32]
 8002b56:	431a      	orrs	r2, r3
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2201      	movs	r2, #1
 8002b60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8002b64:	2301      	movs	r3, #1
 8002b66:	e000      	b.n	8002b6a <HAL_SD_InitCard+0xfe>
  }

  return HAL_OK;
 8002b68:	2300      	movs	r3, #0
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	3728      	adds	r7, #40	; 0x28
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bdb0      	pop	{r4, r5, r7, pc}
 8002b72:	bf00      	nop
 8002b74:	004005ff 	.word	0x004005ff

08002b78 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b092      	sub	sp, #72	; 0x48
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	60f8      	str	r0, [r7, #12]
 8002b80:	60b9      	str	r1, [r7, #8]
 8002b82:	607a      	str	r2, [r7, #4]
 8002b84:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8002b86:	f7fe fb43 	bl	8001210 <HAL_GetTick>
 8002b8a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d107      	bne.n	8002baa <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b9e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e1bd      	b.n	8002f26 <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	f040 81b0 	bne.w	8002f18 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002bbe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	441a      	add	r2, r3
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	d907      	bls.n	8002bdc <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bd0:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	e1a4      	b.n	8002f26 <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	2203      	movs	r2, #3
 8002be0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	2200      	movs	r2, #0
 8002bea:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	d002      	beq.n	8002bfa <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8002bf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bf6:	025b      	lsls	r3, r3, #9
 8002bf8:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002bfa:	f04f 33ff 	mov.w	r3, #4294967295
 8002bfe:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	025b      	lsls	r3, r3, #9
 8002c04:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8002c06:	2390      	movs	r3, #144	; 0x90
 8002c08:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8002c0a:	2302      	movs	r3, #2
 8002c0c:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8002c12:	2301      	movs	r3, #1
 8002c14:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f107 0214 	add.w	r2, r7, #20
 8002c1e:	4611      	mov	r1, r2
 8002c20:	4618      	mov	r0, r3
 8002c22:	f001 fff7 	bl	8004c14 <SDMMC_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	d90a      	bls.n	8002c42 <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2202      	movs	r2, #2
 8002c30:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f002 f85b 	bl	8004cf4 <SDMMC_CmdReadMultiBlock>
 8002c3e:	6478      	str	r0, [r7, #68]	; 0x44
 8002c40:	e009      	b.n	8002c56 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	2201      	movs	r2, #1
 8002c46:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f002 f82e 	bl	8004cb0 <SDMMC_CmdReadSingleBlock>
 8002c54:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8002c56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d012      	beq.n	8002c82 <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a7a      	ldr	r2, [pc, #488]	; (8002e4c <HAL_SD_ReadBlocks+0x2d4>)
 8002c62:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c6a:	431a      	orrs	r2, r3
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	2201      	movs	r2, #1
 8002c74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e151      	b.n	8002f26 <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 8002c82:	69bb      	ldr	r3, [r7, #24]
 8002c84:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8002c86:	e061      	b.n	8002d4c <HAL_SD_ReadBlocks+0x1d4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c8e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d03c      	beq.n	8002d10 <HAL_SD_ReadBlocks+0x198>
 8002c96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d039      	beq.n	8002d10 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	643b      	str	r3, [r7, #64]	; 0x40
 8002ca0:	e033      	b.n	8002d0a <HAL_SD_ReadBlocks+0x192>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f001 ff2e 	bl	8004b08 <SDMMC_ReadFIFO>
 8002cac:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8002cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cb0:	b2da      	uxtb	r2, r3
 8002cb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cb4:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8002cb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cb8:	3301      	adds	r3, #1
 8002cba:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002cbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cbe:	3b01      	subs	r3, #1
 8002cc0:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8002cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cc4:	0a1b      	lsrs	r3, r3, #8
 8002cc6:	b2da      	uxtb	r2, r3
 8002cc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cca:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8002ccc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cce:	3301      	adds	r3, #1
 8002cd0:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002cd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cd4:	3b01      	subs	r3, #1
 8002cd6:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8002cd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cda:	0c1b      	lsrs	r3, r3, #16
 8002cdc:	b2da      	uxtb	r2, r3
 8002cde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ce0:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8002ce2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ce4:	3301      	adds	r3, #1
 8002ce6:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002ce8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cea:	3b01      	subs	r3, #1
 8002cec:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8002cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cf0:	0e1b      	lsrs	r3, r3, #24
 8002cf2:	b2da      	uxtb	r2, r3
 8002cf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cf6:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8002cf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cfa:	3301      	adds	r3, #1
 8002cfc:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002cfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d00:	3b01      	subs	r3, #1
 8002d02:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8002d04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d06:	3301      	adds	r3, #1
 8002d08:	643b      	str	r3, [r7, #64]	; 0x40
 8002d0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d0c:	2b07      	cmp	r3, #7
 8002d0e:	d9c8      	bls.n	8002ca2 <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8002d10:	f7fe fa7e 	bl	8001210 <HAL_GetTick>
 8002d14:	4602      	mov	r2, r0
 8002d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d18:	1ad3      	subs	r3, r2, r3
 8002d1a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d902      	bls.n	8002d26 <HAL_SD_ReadBlocks+0x1ae>
 8002d20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d112      	bne.n	8002d4c <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a48      	ldr	r2, [pc, #288]	; (8002e4c <HAL_SD_ReadBlocks+0x2d4>)
 8002d2c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d32:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	2200      	movs	r2, #0
 8002d46:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8002d48:	2303      	movs	r3, #3
 8002d4a:	e0ec      	b.n	8002f26 <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d52:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d096      	beq.n	8002c88 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d022      	beq.n	8002dae <HAL_SD_ReadBlocks+0x236>
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	2b01      	cmp	r3, #1
 8002d6c:	d91f      	bls.n	8002dae <HAL_SD_ReadBlocks+0x236>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d72:	2b03      	cmp	r3, #3
 8002d74:	d01b      	beq.n	8002dae <HAL_SD_ReadBlocks+0x236>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f002 f820 	bl	8004dc0 <SDMMC_CmdStopTransfer>
 8002d80:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8002d82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d012      	beq.n	8002dae <HAL_SD_ReadBlocks+0x236>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a2f      	ldr	r2, [pc, #188]	; (8002e4c <HAL_SD_ReadBlocks+0x2d4>)
 8002d8e:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d96:	431a      	orrs	r2, r3
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2201      	movs	r2, #1
 8002da0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	2200      	movs	r2, #0
 8002da8:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	e0bb      	b.n	8002f26 <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002db4:	f003 0308 	and.w	r3, r3, #8
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d012      	beq.n	8002de2 <HAL_SD_ReadBlocks+0x26a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a22      	ldr	r2, [pc, #136]	; (8002e4c <HAL_SD_ReadBlocks+0x2d4>)
 8002dc2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dc8:	f043 0208 	orr.w	r2, r3, #8
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e0a1      	b.n	8002f26 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002de8:	f003 0302 	and.w	r3, r3, #2
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d012      	beq.n	8002e16 <HAL_SD_ReadBlocks+0x29e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a15      	ldr	r2, [pc, #84]	; (8002e4c <HAL_SD_ReadBlocks+0x2d4>)
 8002df6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dfc:	f043 0202 	orr.w	r2, r3, #2
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2201      	movs	r2, #1
 8002e08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	e087      	b.n	8002f26 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e1c:	f003 0320 	and.w	r3, r3, #32
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d064      	beq.n	8002eee <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a08      	ldr	r2, [pc, #32]	; (8002e4c <HAL_SD_ReadBlocks+0x2d4>)
 8002e2a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e30:	f043 0220 	orr.w	r2, r3, #32
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	2200      	movs	r2, #0
 8002e44:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	e06d      	b.n	8002f26 <HAL_SD_ReadBlocks+0x3ae>
 8002e4a:	bf00      	nop
 8002e4c:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4618      	mov	r0, r3
 8002e56:	f001 fe57 	bl	8004b08 <SDMMC_ReadFIFO>
 8002e5a:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8002e5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e5e:	b2da      	uxtb	r2, r3
 8002e60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e62:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8002e64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e66:	3301      	adds	r3, #1
 8002e68:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8002e6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e6c:	3b01      	subs	r3, #1
 8002e6e:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8002e70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e72:	0a1b      	lsrs	r3, r3, #8
 8002e74:	b2da      	uxtb	r2, r3
 8002e76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e78:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8002e7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e7c:	3301      	adds	r3, #1
 8002e7e:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8002e80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e82:	3b01      	subs	r3, #1
 8002e84:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8002e86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e88:	0c1b      	lsrs	r3, r3, #16
 8002e8a:	b2da      	uxtb	r2, r3
 8002e8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e8e:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8002e90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e92:	3301      	adds	r3, #1
 8002e94:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8002e96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e98:	3b01      	subs	r3, #1
 8002e9a:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8002e9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e9e:	0e1b      	lsrs	r3, r3, #24
 8002ea0:	b2da      	uxtb	r2, r3
 8002ea2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ea4:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8002ea6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ea8:	3301      	adds	r3, #1
 8002eaa:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8002eac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002eae:	3b01      	subs	r3, #1
 8002eb0:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8002eb2:	f7fe f9ad 	bl	8001210 <HAL_GetTick>
 8002eb6:	4602      	mov	r2, r0
 8002eb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eba:	1ad3      	subs	r3, r2, r3
 8002ebc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002ebe:	429a      	cmp	r2, r3
 8002ec0:	d902      	bls.n	8002ec8 <HAL_SD_ReadBlocks+0x350>
 8002ec2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d112      	bne.n	8002eee <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a18      	ldr	r2, [pc, #96]	; (8002f30 <HAL_SD_ReadBlocks+0x3b8>)
 8002ece:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ed4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2201      	movs	r2, #1
 8002ee0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	e01b      	b.n	8002f26 <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ef4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d002      	beq.n	8002f02 <HAL_SD_ReadBlocks+0x38a>
 8002efc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d1a6      	bne.n	8002e50 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f240 523a 	movw	r2, #1338	; 0x53a
 8002f0a:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2201      	movs	r2, #1
 8002f10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8002f14:	2300      	movs	r3, #0
 8002f16:	e006      	b.n	8002f26 <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f1c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002f24:	2301      	movs	r3, #1
  }
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	3748      	adds	r7, #72	; 0x48
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	bf00      	nop
 8002f30:	004005ff 	.word	0x004005ff

08002f34 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b092      	sub	sp, #72	; 0x48
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	60f8      	str	r0, [r7, #12]
 8002f3c:	60b9      	str	r1, [r7, #8]
 8002f3e:	607a      	str	r2, [r7, #4]
 8002f40:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8002f42:	f7fe f965 	bl	8001210 <HAL_GetTick>
 8002f46:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d107      	bne.n	8002f66 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f5a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e165      	b.n	8003232 <HAL_SD_WriteBlocks+0x2fe>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	f040 8158 	bne.w	8003224 <HAL_SD_WriteBlocks+0x2f0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	2200      	movs	r2, #0
 8002f78:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002f7a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	441a      	add	r2, r3
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f84:	429a      	cmp	r2, r3
 8002f86:	d907      	bls.n	8002f98 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f8c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	e14c      	b.n	8003232 <HAL_SD_WriteBlocks+0x2fe>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2203      	movs	r2, #3
 8002f9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d002      	beq.n	8002fb6 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8002fb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fb2:	025b      	lsls	r3, r3, #9
 8002fb4:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002fb6:	f04f 33ff 	mov.w	r3, #4294967295
 8002fba:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	025b      	lsls	r3, r3, #9
 8002fc0:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8002fc2:	2390      	movs	r3, #144	; 0x90
 8002fc4:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f107 0218 	add.w	r2, r7, #24
 8002fda:	4611      	mov	r1, r2
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f001 fe19 	bl	8004c14 <SDMMC_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	d90a      	bls.n	8002ffe <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2220      	movs	r2, #32
 8002fec:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f001 fec1 	bl	8004d7c <SDMMC_CmdWriteMultiBlock>
 8002ffa:	6478      	str	r0, [r7, #68]	; 0x44
 8002ffc:	e009      	b.n	8003012 <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2210      	movs	r2, #16
 8003002:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800300a:	4618      	mov	r0, r3
 800300c:	f001 fe94 	bl	8004d38 <SDMMC_CmdWriteSingleBlock>
 8003010:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8003012:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003014:	2b00      	cmp	r3, #0
 8003016:	d012      	beq.n	800303e <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a87      	ldr	r2, [pc, #540]	; (800323c <HAL_SD_WriteBlocks+0x308>)
 800301e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003024:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003026:	431a      	orrs	r2, r3
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	2201      	movs	r2, #1
 8003030:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2200      	movs	r2, #0
 8003038:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	e0f9      	b.n	8003232 <HAL_SD_WriteBlocks+0x2fe>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800303e:	69fb      	ldr	r3, [r7, #28]
 8003040:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8003042:	e065      	b.n	8003110 <HAL_SD_WriteBlocks+0x1dc>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800304a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800304e:	2b00      	cmp	r3, #0
 8003050:	d040      	beq.n	80030d4 <HAL_SD_WriteBlocks+0x1a0>
 8003052:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003054:	2b00      	cmp	r3, #0
 8003056:	d03d      	beq.n	80030d4 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8003058:	2300      	movs	r3, #0
 800305a:	643b      	str	r3, [r7, #64]	; 0x40
 800305c:	e037      	b.n	80030ce <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 800305e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003060:	781b      	ldrb	r3, [r3, #0]
 8003062:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003064:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003066:	3301      	adds	r3, #1
 8003068:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800306a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800306c:	3b01      	subs	r3, #1
 800306e:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8003070:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003072:	781b      	ldrb	r3, [r3, #0]
 8003074:	021a      	lsls	r2, r3, #8
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	4313      	orrs	r3, r2
 800307a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800307c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800307e:	3301      	adds	r3, #1
 8003080:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003082:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003084:	3b01      	subs	r3, #1
 8003086:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8003088:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800308a:	781b      	ldrb	r3, [r3, #0]
 800308c:	041a      	lsls	r2, r3, #16
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	4313      	orrs	r3, r2
 8003092:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003094:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003096:	3301      	adds	r3, #1
 8003098:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800309a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800309c:	3b01      	subs	r3, #1
 800309e:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 80030a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030a2:	781b      	ldrb	r3, [r3, #0]
 80030a4:	061a      	lsls	r2, r3, #24
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	4313      	orrs	r3, r2
 80030aa:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80030ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030ae:	3301      	adds	r3, #1
 80030b0:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80030b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030b4:	3b01      	subs	r3, #1
 80030b6:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f107 0214 	add.w	r2, r7, #20
 80030c0:	4611      	mov	r1, r2
 80030c2:	4618      	mov	r0, r3
 80030c4:	f001 fd2d 	bl	8004b22 <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 80030c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030ca:	3301      	adds	r3, #1
 80030cc:	643b      	str	r3, [r7, #64]	; 0x40
 80030ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030d0:	2b07      	cmp	r3, #7
 80030d2:	d9c4      	bls.n	800305e <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80030d4:	f7fe f89c 	bl	8001210 <HAL_GetTick>
 80030d8:	4602      	mov	r2, r0
 80030da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030dc:	1ad3      	subs	r3, r2, r3
 80030de:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80030e0:	429a      	cmp	r2, r3
 80030e2:	d902      	bls.n	80030ea <HAL_SD_WriteBlocks+0x1b6>
 80030e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d112      	bne.n	8003110 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a53      	ldr	r2, [pc, #332]	; (800323c <HAL_SD_WriteBlocks+0x308>)
 80030f0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80030f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030f8:	431a      	orrs	r2, r3
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	2201      	movs	r2, #1
 8003102:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	2200      	movs	r2, #0
 800310a:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800310c:	2303      	movs	r3, #3
 800310e:	e090      	b.n	8003232 <HAL_SD_WriteBlocks+0x2fe>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003116:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 800311a:	2b00      	cmp	r3, #0
 800311c:	d092      	beq.n	8003044 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003124:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003128:	2b00      	cmp	r3, #0
 800312a:	d022      	beq.n	8003172 <HAL_SD_WriteBlocks+0x23e>
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	2b01      	cmp	r3, #1
 8003130:	d91f      	bls.n	8003172 <HAL_SD_WriteBlocks+0x23e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003136:	2b03      	cmp	r3, #3
 8003138:	d01b      	beq.n	8003172 <HAL_SD_WriteBlocks+0x23e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4618      	mov	r0, r3
 8003140:	f001 fe3e 	bl	8004dc0 <SDMMC_CmdStopTransfer>
 8003144:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8003146:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003148:	2b00      	cmp	r3, #0
 800314a:	d012      	beq.n	8003172 <HAL_SD_WriteBlocks+0x23e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a3a      	ldr	r2, [pc, #232]	; (800323c <HAL_SD_WriteBlocks+0x308>)
 8003152:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003158:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800315a:	431a      	orrs	r2, r3
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2201      	movs	r2, #1
 8003164:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2200      	movs	r2, #0
 800316c:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e05f      	b.n	8003232 <HAL_SD_WriteBlocks+0x2fe>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003178:	f003 0308 	and.w	r3, r3, #8
 800317c:	2b00      	cmp	r3, #0
 800317e:	d012      	beq.n	80031a6 <HAL_SD_WriteBlocks+0x272>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a2d      	ldr	r2, [pc, #180]	; (800323c <HAL_SD_WriteBlocks+0x308>)
 8003186:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800318c:	f043 0208 	orr.w	r2, r3, #8
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	2201      	movs	r2, #1
 8003198:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	2200      	movs	r2, #0
 80031a0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e045      	b.n	8003232 <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031ac:	f003 0302 	and.w	r3, r3, #2
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d012      	beq.n	80031da <HAL_SD_WriteBlocks+0x2a6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a20      	ldr	r2, [pc, #128]	; (800323c <HAL_SD_WriteBlocks+0x308>)
 80031ba:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031c0:	f043 0202 	orr.w	r2, r3, #2
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2201      	movs	r2, #1
 80031cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	2200      	movs	r2, #0
 80031d4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e02b      	b.n	8003232 <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031e0:	f003 0310 	and.w	r3, r3, #16
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d012      	beq.n	800320e <HAL_SD_WriteBlocks+0x2da>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a13      	ldr	r2, [pc, #76]	; (800323c <HAL_SD_WriteBlocks+0x308>)
 80031ee:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031f4:	f043 0210 	orr.w	r2, r3, #16
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2201      	movs	r2, #1
 8003200:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2200      	movs	r2, #0
 8003208:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	e011      	b.n	8003232 <HAL_SD_WriteBlocks+0x2fe>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f240 523a 	movw	r2, #1338	; 0x53a
 8003216:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2201      	movs	r2, #1
 800321c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8003220:	2300      	movs	r3, #0
 8003222:	e006      	b.n	8003232 <HAL_SD_WriteBlocks+0x2fe>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003228:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003230:	2301      	movs	r3, #1
  }
}
 8003232:	4618      	mov	r0, r3
 8003234:	3748      	adds	r7, #72	; 0x48
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}
 800323a:	bf00      	nop
 800323c:	004005ff 	.word	0x004005ff

08003240 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8003240:	b480      	push	{r7}
 8003242:	b083      	sub	sp, #12
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
 8003248:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800324e:	0f9b      	lsrs	r3, r3, #30
 8003250:	b2da      	uxtb	r2, r3
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800325a:	0e9b      	lsrs	r3, r3, #26
 800325c:	b2db      	uxtb	r3, r3
 800325e:	f003 030f 	and.w	r3, r3, #15
 8003262:	b2da      	uxtb	r2, r3
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800326c:	0e1b      	lsrs	r3, r3, #24
 800326e:	b2db      	uxtb	r3, r3
 8003270:	f003 0303 	and.w	r3, r3, #3
 8003274:	b2da      	uxtb	r2, r3
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800327e:	0c1b      	lsrs	r3, r3, #16
 8003280:	b2da      	uxtb	r2, r3
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800328a:	0a1b      	lsrs	r3, r3, #8
 800328c:	b2da      	uxtb	r2, r3
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003296:	b2da      	uxtb	r2, r3
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80032a0:	0d1b      	lsrs	r3, r3, #20
 80032a2:	b29a      	uxth	r2, r3
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80032ac:	0c1b      	lsrs	r3, r3, #16
 80032ae:	b2db      	uxtb	r3, r3
 80032b0:	f003 030f 	and.w	r3, r3, #15
 80032b4:	b2da      	uxtb	r2, r3
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80032be:	0bdb      	lsrs	r3, r3, #15
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	f003 0301 	and.w	r3, r3, #1
 80032c6:	b2da      	uxtb	r2, r3
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80032d0:	0b9b      	lsrs	r3, r3, #14
 80032d2:	b2db      	uxtb	r3, r3
 80032d4:	f003 0301 	and.w	r3, r3, #1
 80032d8:	b2da      	uxtb	r2, r3
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80032e2:	0b5b      	lsrs	r3, r3, #13
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	f003 0301 	and.w	r3, r3, #1
 80032ea:	b2da      	uxtb	r2, r3
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80032f4:	0b1b      	lsrs	r3, r3, #12
 80032f6:	b2db      	uxtb	r3, r3
 80032f8:	f003 0301 	and.w	r3, r3, #1
 80032fc:	b2da      	uxtb	r2, r3
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	2200      	movs	r2, #0
 8003306:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800330c:	2b00      	cmp	r3, #0
 800330e:	d163      	bne.n	80033d8 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003314:	009a      	lsls	r2, r3, #2
 8003316:	f640 73fc 	movw	r3, #4092	; 0xffc
 800331a:	4013      	ands	r3, r2
 800331c:	687a      	ldr	r2, [r7, #4]
 800331e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8003320:	0f92      	lsrs	r2, r2, #30
 8003322:	431a      	orrs	r2, r3
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800332c:	0edb      	lsrs	r3, r3, #27
 800332e:	b2db      	uxtb	r3, r3
 8003330:	f003 0307 	and.w	r3, r3, #7
 8003334:	b2da      	uxtb	r2, r3
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800333e:	0e1b      	lsrs	r3, r3, #24
 8003340:	b2db      	uxtb	r3, r3
 8003342:	f003 0307 	and.w	r3, r3, #7
 8003346:	b2da      	uxtb	r2, r3
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003350:	0d5b      	lsrs	r3, r3, #21
 8003352:	b2db      	uxtb	r3, r3
 8003354:	f003 0307 	and.w	r3, r3, #7
 8003358:	b2da      	uxtb	r2, r3
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003362:	0c9b      	lsrs	r3, r3, #18
 8003364:	b2db      	uxtb	r3, r3
 8003366:	f003 0307 	and.w	r3, r3, #7
 800336a:	b2da      	uxtb	r2, r3
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003374:	0bdb      	lsrs	r3, r3, #15
 8003376:	b2db      	uxtb	r3, r3
 8003378:	f003 0307 	and.w	r3, r3, #7
 800337c:	b2da      	uxtb	r2, r3
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	691b      	ldr	r3, [r3, #16]
 8003386:	1c5a      	adds	r2, r3, #1
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	7e1b      	ldrb	r3, [r3, #24]
 8003390:	b2db      	uxtb	r3, r3
 8003392:	f003 0307 	and.w	r3, r3, #7
 8003396:	3302      	adds	r3, #2
 8003398:	2201      	movs	r2, #1
 800339a:	fa02 f303 	lsl.w	r3, r2, r3
 800339e:	687a      	ldr	r2, [r7, #4]
 80033a0:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80033a2:	fb02 f203 	mul.w	r2, r2, r3
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	7a1b      	ldrb	r3, [r3, #8]
 80033ae:	b2db      	uxtb	r3, r3
 80033b0:	f003 030f 	and.w	r3, r3, #15
 80033b4:	2201      	movs	r2, #1
 80033b6:	409a      	lsls	r2, r3
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033c0:	687a      	ldr	r2, [r7, #4]
 80033c2:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80033c4:	0a52      	lsrs	r2, r2, #9
 80033c6:	fb02 f203 	mul.w	r2, r2, r3
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033d4:	661a      	str	r2, [r3, #96]	; 0x60
 80033d6:	e031      	b.n	800343c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d11d      	bne.n	800341c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80033e4:	041b      	lsls	r3, r3, #16
 80033e6:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033ee:	0c1b      	lsrs	r3, r3, #16
 80033f0:	431a      	orrs	r2, r3
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	691b      	ldr	r3, [r3, #16]
 80033fa:	3301      	adds	r3, #1
 80033fc:	029a      	lsls	r2, r3, #10
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003410:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	661a      	str	r2, [r3, #96]	; 0x60
 800341a:	e00f      	b.n	800343c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a58      	ldr	r2, [pc, #352]	; (8003584 <HAL_SD_GetCardCSD+0x344>)
 8003422:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003428:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2201      	movs	r2, #1
 8003434:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8003438:	2301      	movs	r3, #1
 800343a:	e09d      	b.n	8003578 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003440:	0b9b      	lsrs	r3, r3, #14
 8003442:	b2db      	uxtb	r3, r3
 8003444:	f003 0301 	and.w	r3, r3, #1
 8003448:	b2da      	uxtb	r2, r3
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003452:	09db      	lsrs	r3, r3, #7
 8003454:	b2db      	uxtb	r3, r3
 8003456:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800345a:	b2da      	uxtb	r2, r3
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003464:	b2db      	uxtb	r3, r3
 8003466:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800346a:	b2da      	uxtb	r2, r3
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003474:	0fdb      	lsrs	r3, r3, #31
 8003476:	b2da      	uxtb	r2, r3
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003480:	0f5b      	lsrs	r3, r3, #29
 8003482:	b2db      	uxtb	r3, r3
 8003484:	f003 0303 	and.w	r3, r3, #3
 8003488:	b2da      	uxtb	r2, r3
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003492:	0e9b      	lsrs	r3, r3, #26
 8003494:	b2db      	uxtb	r3, r3
 8003496:	f003 0307 	and.w	r3, r3, #7
 800349a:	b2da      	uxtb	r2, r3
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034a4:	0d9b      	lsrs	r3, r3, #22
 80034a6:	b2db      	uxtb	r3, r3
 80034a8:	f003 030f 	and.w	r3, r3, #15
 80034ac:	b2da      	uxtb	r2, r3
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034b6:	0d5b      	lsrs	r3, r3, #21
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	f003 0301 	and.w	r3, r3, #1
 80034be:	b2da      	uxtb	r2, r3
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	2200      	movs	r2, #0
 80034ca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034d2:	0c1b      	lsrs	r3, r3, #16
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	f003 0301 	and.w	r3, r3, #1
 80034da:	b2da      	uxtb	r2, r3
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034e6:	0bdb      	lsrs	r3, r3, #15
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	f003 0301 	and.w	r3, r3, #1
 80034ee:	b2da      	uxtb	r2, r3
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034fa:	0b9b      	lsrs	r3, r3, #14
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	f003 0301 	and.w	r3, r3, #1
 8003502:	b2da      	uxtb	r2, r3
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800350e:	0b5b      	lsrs	r3, r3, #13
 8003510:	b2db      	uxtb	r3, r3
 8003512:	f003 0301 	and.w	r3, r3, #1
 8003516:	b2da      	uxtb	r2, r3
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003522:	0b1b      	lsrs	r3, r3, #12
 8003524:	b2db      	uxtb	r3, r3
 8003526:	f003 0301 	and.w	r3, r3, #1
 800352a:	b2da      	uxtb	r2, r3
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003536:	0a9b      	lsrs	r3, r3, #10
 8003538:	b2db      	uxtb	r3, r3
 800353a:	f003 0303 	and.w	r3, r3, #3
 800353e:	b2da      	uxtb	r2, r3
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800354a:	0a1b      	lsrs	r3, r3, #8
 800354c:	b2db      	uxtb	r3, r3
 800354e:	f003 0303 	and.w	r3, r3, #3
 8003552:	b2da      	uxtb	r2, r3
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800355e:	085b      	lsrs	r3, r3, #1
 8003560:	b2db      	uxtb	r3, r3
 8003562:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003566:	b2da      	uxtb	r2, r3
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	2201      	movs	r2, #1
 8003572:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8003576:	2300      	movs	r3, #0
}
 8003578:	4618      	mov	r0, r3
 800357a:	370c      	adds	r7, #12
 800357c:	46bd      	mov	sp, r7
 800357e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003582:	4770      	bx	lr
 8003584:	004005ff 	.word	0x004005ff

08003588 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8003588:	b480      	push	{r7}
 800358a:	b083      	sub	sp, #12
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
 8003590:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80035d2:	2300      	movs	r3, #0
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	370c      	adds	r7, #12
 80035d8:	46bd      	mov	sp, r7
 80035da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035de:	4770      	bx	lr

080035e0 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b086      	sub	sp, #24
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80035e8:	2300      	movs	r3, #0
 80035ea:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80035ec:	f107 030c 	add.w	r3, r7, #12
 80035f0:	4619      	mov	r1, r3
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f000 f96e 	bl	80038d4 <SD_SendStatus>
 80035f8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d005      	beq.n	800360c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	431a      	orrs	r2, r3
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	0a5b      	lsrs	r3, r3, #9
 8003610:	f003 030f 	and.w	r3, r3, #15
 8003614:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8003616:	693b      	ldr	r3, [r7, #16]
}
 8003618:	4618      	mov	r0, r3
 800361a:	3718      	adds	r7, #24
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}

08003620 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003620:	b5b0      	push	{r4, r5, r7, lr}
 8003622:	b094      	sub	sp, #80	; 0x50
 8003624:	af04      	add	r7, sp, #16
 8003626:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8003628:	2301      	movs	r3, #1
 800362a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4618      	mov	r0, r3
 8003632:	f001 fa96 	bl	8004b62 <SDMMC_GetPowerState>
 8003636:	4603      	mov	r3, r0
 8003638:	2b00      	cmp	r3, #0
 800363a:	d102      	bne.n	8003642 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800363c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003640:	e0b6      	b.n	80037b0 <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003646:	2b03      	cmp	r3, #3
 8003648:	d02f      	beq.n	80036aa <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4618      	mov	r0, r3
 8003650:	f001 fc7e 	bl	8004f50 <SDMMC_CmdSendCID>
 8003654:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003656:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003658:	2b00      	cmp	r3, #0
 800365a:	d001      	beq.n	8003660 <SD_InitCard+0x40>
    {
      return errorstate;
 800365c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800365e:	e0a7      	b.n	80037b0 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	2100      	movs	r1, #0
 8003666:	4618      	mov	r0, r3
 8003668:	f001 fac1 	bl	8004bee <SDMMC_GetResponse>
 800366c:	4602      	mov	r2, r0
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	2104      	movs	r1, #4
 8003678:	4618      	mov	r0, r3
 800367a:	f001 fab8 	bl	8004bee <SDMMC_GetResponse>
 800367e:	4602      	mov	r2, r0
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	2108      	movs	r1, #8
 800368a:	4618      	mov	r0, r3
 800368c:	f001 faaf 	bl	8004bee <SDMMC_GetResponse>
 8003690:	4602      	mov	r2, r0
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	210c      	movs	r1, #12
 800369c:	4618      	mov	r0, r3
 800369e:	f001 faa6 	bl	8004bee <SDMMC_GetResponse>
 80036a2:	4602      	mov	r2, r0
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ae:	2b03      	cmp	r3, #3
 80036b0:	d00d      	beq.n	80036ce <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f107 020e 	add.w	r2, r7, #14
 80036ba:	4611      	mov	r1, r2
 80036bc:	4618      	mov	r0, r3
 80036be:	f001 fc84 	bl	8004fca <SDMMC_CmdSetRelAdd>
 80036c2:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80036c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d001      	beq.n	80036ce <SD_InitCard+0xae>
    {
      return errorstate;
 80036ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036cc:	e070      	b.n	80037b0 <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036d2:	2b03      	cmp	r3, #3
 80036d4:	d036      	beq.n	8003744 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80036d6:	89fb      	ldrh	r3, [r7, #14]
 80036d8:	461a      	mov	r2, r3
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036e6:	041b      	lsls	r3, r3, #16
 80036e8:	4619      	mov	r1, r3
 80036ea:	4610      	mov	r0, r2
 80036ec:	f001 fc4e 	bl	8004f8c <SDMMC_CmdSendCSD>
 80036f0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80036f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d001      	beq.n	80036fc <SD_InitCard+0xdc>
    {
      return errorstate;
 80036f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036fa:	e059      	b.n	80037b0 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	2100      	movs	r1, #0
 8003702:	4618      	mov	r0, r3
 8003704:	f001 fa73 	bl	8004bee <SDMMC_GetResponse>
 8003708:	4602      	mov	r2, r0
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	2104      	movs	r1, #4
 8003714:	4618      	mov	r0, r3
 8003716:	f001 fa6a 	bl	8004bee <SDMMC_GetResponse>
 800371a:	4602      	mov	r2, r0
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	2108      	movs	r1, #8
 8003726:	4618      	mov	r0, r3
 8003728:	f001 fa61 	bl	8004bee <SDMMC_GetResponse>
 800372c:	4602      	mov	r2, r0
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	210c      	movs	r1, #12
 8003738:	4618      	mov	r0, r3
 800373a:	f001 fa58 	bl	8004bee <SDMMC_GetResponse>
 800373e:	4602      	mov	r2, r0
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	2104      	movs	r1, #4
 800374a:	4618      	mov	r0, r3
 800374c:	f001 fa4f 	bl	8004bee <SDMMC_GetResponse>
 8003750:	4603      	mov	r3, r0
 8003752:	0d1a      	lsrs	r2, r3, #20
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8003758:	f107 0310 	add.w	r3, r7, #16
 800375c:	4619      	mov	r1, r3
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f7ff fd6e 	bl	8003240 <HAL_SD_GetCardCSD>
 8003764:	4603      	mov	r3, r0
 8003766:	2b00      	cmp	r3, #0
 8003768:	d002      	beq.n	8003770 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800376a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800376e:	e01f      	b.n	80037b0 <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6819      	ldr	r1, [r3, #0]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003778:	041b      	lsls	r3, r3, #16
 800377a:	461a      	mov	r2, r3
 800377c:	f04f 0300 	mov.w	r3, #0
 8003780:	4608      	mov	r0, r1
 8003782:	f001 fb3f 	bl	8004e04 <SDMMC_CmdSelDesel>
 8003786:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8003788:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800378a:	2b00      	cmp	r3, #0
 800378c:	d001      	beq.n	8003792 <SD_InitCard+0x172>
  {
    return errorstate;
 800378e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003790:	e00e      	b.n	80037b0 <SD_InitCard+0x190>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681d      	ldr	r5, [r3, #0]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	466c      	mov	r4, sp
 800379a:	f103 0210 	add.w	r2, r3, #16
 800379e:	ca07      	ldmia	r2, {r0, r1, r2}
 80037a0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80037a4:	3304      	adds	r3, #4
 80037a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80037a8:	4628      	mov	r0, r5
 80037aa:	f001 f981 	bl	8004ab0 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80037ae:	2300      	movs	r3, #0
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	3740      	adds	r7, #64	; 0x40
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bdb0      	pop	{r4, r5, r7, pc}

080037b8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b086      	sub	sp, #24
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80037c0:	2300      	movs	r3, #0
 80037c2:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80037c4:	2300      	movs	r3, #0
 80037c6:	617b      	str	r3, [r7, #20]
 80037c8:	2300      	movs	r3, #0
 80037ca:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4618      	mov	r0, r3
 80037d2:	f001 fb3a 	bl	8004e4a <SDMMC_CmdGoIdleState>
 80037d6:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d001      	beq.n	80037e2 <SD_PowerON+0x2a>
  {
    return errorstate;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	e072      	b.n	80038c8 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4618      	mov	r0, r3
 80037e8:	f001 fb4d 	bl	8004e86 <SDMMC_CmdOperCond>
 80037ec:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d00d      	beq.n	8003810 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2200      	movs	r2, #0
 80037f8:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4618      	mov	r0, r3
 8003800:	f001 fb23 	bl	8004e4a <SDMMC_CmdGoIdleState>
 8003804:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d004      	beq.n	8003816 <SD_PowerON+0x5e>
    {
      return errorstate;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	e05b      	b.n	80038c8 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2201      	movs	r2, #1
 8003814:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800381a:	2b01      	cmp	r3, #1
 800381c:	d137      	bne.n	800388e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	2100      	movs	r1, #0
 8003824:	4618      	mov	r0, r3
 8003826:	f001 fb4d 	bl	8004ec4 <SDMMC_CmdAppCommand>
 800382a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d02d      	beq.n	800388e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003832:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003836:	e047      	b.n	80038c8 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	2100      	movs	r1, #0
 800383e:	4618      	mov	r0, r3
 8003840:	f001 fb40 	bl	8004ec4 <SDMMC_CmdAppCommand>
 8003844:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d001      	beq.n	8003850 <SD_PowerON+0x98>
    {
      return errorstate;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	e03b      	b.n	80038c8 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	491e      	ldr	r1, [pc, #120]	; (80038d0 <SD_PowerON+0x118>)
 8003856:	4618      	mov	r0, r3
 8003858:	f001 fb56 	bl	8004f08 <SDMMC_CmdAppOperCommand>
 800385c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d002      	beq.n	800386a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003864:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003868:	e02e      	b.n	80038c8 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	2100      	movs	r1, #0
 8003870:	4618      	mov	r0, r3
 8003872:	f001 f9bc 	bl	8004bee <SDMMC_GetResponse>
 8003876:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	0fdb      	lsrs	r3, r3, #31
 800387c:	2b01      	cmp	r3, #1
 800387e:	d101      	bne.n	8003884 <SD_PowerON+0xcc>
 8003880:	2301      	movs	r3, #1
 8003882:	e000      	b.n	8003886 <SD_PowerON+0xce>
 8003884:	2300      	movs	r3, #0
 8003886:	613b      	str	r3, [r7, #16]

    count++;
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	3301      	adds	r3, #1
 800388c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003894:	4293      	cmp	r3, r2
 8003896:	d802      	bhi.n	800389e <SD_PowerON+0xe6>
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d0cc      	beq.n	8003838 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d902      	bls.n	80038ae <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80038a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80038ac:	e00c      	b.n	80038c8 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d003      	beq.n	80038c0 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2201      	movs	r2, #1
 80038bc:	645a      	str	r2, [r3, #68]	; 0x44
 80038be:	e002      	b.n	80038c6 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2200      	movs	r2, #0
 80038c4:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 80038c6:	2300      	movs	r3, #0
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	3718      	adds	r7, #24
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd80      	pop	{r7, pc}
 80038d0:	c1100000 	.word	0xc1100000

080038d4 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b084      	sub	sp, #16
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
 80038dc:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d102      	bne.n	80038ea <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80038e4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80038e8:	e018      	b.n	800391c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038f2:	041b      	lsls	r3, r3, #16
 80038f4:	4619      	mov	r1, r3
 80038f6:	4610      	mov	r0, r2
 80038f8:	f001 fb88 	bl	800500c <SDMMC_CmdSendStatus>
 80038fc:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d001      	beq.n	8003908 <SD_SendStatus+0x34>
  {
    return errorstate;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	e009      	b.n	800391c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	2100      	movs	r1, #0
 800390e:	4618      	mov	r0, r3
 8003910:	f001 f96d 	bl	8004bee <SDMMC_GetResponse>
 8003914:	4602      	mov	r2, r0
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800391a:	2300      	movs	r3, #0
}
 800391c:	4618      	mov	r0, r3
 800391e:	3710      	adds	r7, #16
 8003920:	46bd      	mov	sp, r7
 8003922:	bd80      	pop	{r7, pc}

08003924 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b082      	sub	sp, #8
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d101      	bne.n	8003936 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	e049      	b.n	80039ca <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800393c:	b2db      	uxtb	r3, r3
 800393e:	2b00      	cmp	r3, #0
 8003940:	d106      	bne.n	8003950 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2200      	movs	r2, #0
 8003946:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	f7fd fb18 	bl	8000f80 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2202      	movs	r2, #2
 8003954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681a      	ldr	r2, [r3, #0]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	3304      	adds	r3, #4
 8003960:	4619      	mov	r1, r3
 8003962:	4610      	mov	r0, r2
 8003964:	f000 fabc 	bl	8003ee0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2201      	movs	r2, #1
 800396c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2201      	movs	r2, #1
 8003974:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2201      	movs	r2, #1
 800397c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2201      	movs	r2, #1
 8003984:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2201      	movs	r2, #1
 800398c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2201      	movs	r2, #1
 8003994:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2201      	movs	r2, #1
 800399c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2201      	movs	r2, #1
 80039a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2201      	movs	r2, #1
 80039ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2201      	movs	r2, #1
 80039b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2201      	movs	r2, #1
 80039bc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2201      	movs	r2, #1
 80039c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80039c8:	2300      	movs	r3, #0
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	3708      	adds	r7, #8
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}
	...

080039d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b085      	sub	sp, #20
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039e2:	b2db      	uxtb	r3, r3
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	d001      	beq.n	80039ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	e054      	b.n	8003a96 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2202      	movs	r2, #2
 80039f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	68da      	ldr	r2, [r3, #12]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f042 0201 	orr.w	r2, r2, #1
 8003a02:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a26      	ldr	r2, [pc, #152]	; (8003aa4 <HAL_TIM_Base_Start_IT+0xd0>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d022      	beq.n	8003a54 <HAL_TIM_Base_Start_IT+0x80>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a16:	d01d      	beq.n	8003a54 <HAL_TIM_Base_Start_IT+0x80>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a22      	ldr	r2, [pc, #136]	; (8003aa8 <HAL_TIM_Base_Start_IT+0xd4>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d018      	beq.n	8003a54 <HAL_TIM_Base_Start_IT+0x80>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a21      	ldr	r2, [pc, #132]	; (8003aac <HAL_TIM_Base_Start_IT+0xd8>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d013      	beq.n	8003a54 <HAL_TIM_Base_Start_IT+0x80>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a1f      	ldr	r2, [pc, #124]	; (8003ab0 <HAL_TIM_Base_Start_IT+0xdc>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d00e      	beq.n	8003a54 <HAL_TIM_Base_Start_IT+0x80>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a1e      	ldr	r2, [pc, #120]	; (8003ab4 <HAL_TIM_Base_Start_IT+0xe0>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d009      	beq.n	8003a54 <HAL_TIM_Base_Start_IT+0x80>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a1c      	ldr	r2, [pc, #112]	; (8003ab8 <HAL_TIM_Base_Start_IT+0xe4>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d004      	beq.n	8003a54 <HAL_TIM_Base_Start_IT+0x80>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a1b      	ldr	r2, [pc, #108]	; (8003abc <HAL_TIM_Base_Start_IT+0xe8>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d115      	bne.n	8003a80 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	689a      	ldr	r2, [r3, #8]
 8003a5a:	4b19      	ldr	r3, [pc, #100]	; (8003ac0 <HAL_TIM_Base_Start_IT+0xec>)
 8003a5c:	4013      	ands	r3, r2
 8003a5e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2b06      	cmp	r3, #6
 8003a64:	d015      	beq.n	8003a92 <HAL_TIM_Base_Start_IT+0xbe>
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a6c:	d011      	beq.n	8003a92 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	681a      	ldr	r2, [r3, #0]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f042 0201 	orr.w	r2, r2, #1
 8003a7c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a7e:	e008      	b.n	8003a92 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f042 0201 	orr.w	r2, r2, #1
 8003a8e:	601a      	str	r2, [r3, #0]
 8003a90:	e000      	b.n	8003a94 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a92:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003a94:	2300      	movs	r3, #0
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	3714      	adds	r7, #20
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa0:	4770      	bx	lr
 8003aa2:	bf00      	nop
 8003aa4:	40010000 	.word	0x40010000
 8003aa8:	40000400 	.word	0x40000400
 8003aac:	40000800 	.word	0x40000800
 8003ab0:	40000c00 	.word	0x40000c00
 8003ab4:	40010400 	.word	0x40010400
 8003ab8:	40014000 	.word	0x40014000
 8003abc:	40001800 	.word	0x40001800
 8003ac0:	00010007 	.word	0x00010007

08003ac4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b082      	sub	sp, #8
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	691b      	ldr	r3, [r3, #16]
 8003ad2:	f003 0302 	and.w	r3, r3, #2
 8003ad6:	2b02      	cmp	r3, #2
 8003ad8:	d122      	bne.n	8003b20 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	68db      	ldr	r3, [r3, #12]
 8003ae0:	f003 0302 	and.w	r3, r3, #2
 8003ae4:	2b02      	cmp	r3, #2
 8003ae6:	d11b      	bne.n	8003b20 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f06f 0202 	mvn.w	r2, #2
 8003af0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2201      	movs	r2, #1
 8003af6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	699b      	ldr	r3, [r3, #24]
 8003afe:	f003 0303 	and.w	r3, r3, #3
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d003      	beq.n	8003b0e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f000 f9cc 	bl	8003ea4 <HAL_TIM_IC_CaptureCallback>
 8003b0c:	e005      	b.n	8003b1a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	f000 f9be 	bl	8003e90 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b14:	6878      	ldr	r0, [r7, #4]
 8003b16:	f000 f9cf 	bl	8003eb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	691b      	ldr	r3, [r3, #16]
 8003b26:	f003 0304 	and.w	r3, r3, #4
 8003b2a:	2b04      	cmp	r3, #4
 8003b2c:	d122      	bne.n	8003b74 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	68db      	ldr	r3, [r3, #12]
 8003b34:	f003 0304 	and.w	r3, r3, #4
 8003b38:	2b04      	cmp	r3, #4
 8003b3a:	d11b      	bne.n	8003b74 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f06f 0204 	mvn.w	r2, #4
 8003b44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2202      	movs	r2, #2
 8003b4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	699b      	ldr	r3, [r3, #24]
 8003b52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d003      	beq.n	8003b62 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f000 f9a2 	bl	8003ea4 <HAL_TIM_IC_CaptureCallback>
 8003b60:	e005      	b.n	8003b6e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b62:	6878      	ldr	r0, [r7, #4]
 8003b64:	f000 f994 	bl	8003e90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b68:	6878      	ldr	r0, [r7, #4]
 8003b6a:	f000 f9a5 	bl	8003eb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2200      	movs	r2, #0
 8003b72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	691b      	ldr	r3, [r3, #16]
 8003b7a:	f003 0308 	and.w	r3, r3, #8
 8003b7e:	2b08      	cmp	r3, #8
 8003b80:	d122      	bne.n	8003bc8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	68db      	ldr	r3, [r3, #12]
 8003b88:	f003 0308 	and.w	r3, r3, #8
 8003b8c:	2b08      	cmp	r3, #8
 8003b8e:	d11b      	bne.n	8003bc8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f06f 0208 	mvn.w	r2, #8
 8003b98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2204      	movs	r2, #4
 8003b9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	69db      	ldr	r3, [r3, #28]
 8003ba6:	f003 0303 	and.w	r3, r3, #3
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d003      	beq.n	8003bb6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	f000 f978 	bl	8003ea4 <HAL_TIM_IC_CaptureCallback>
 8003bb4:	e005      	b.n	8003bc2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	f000 f96a 	bl	8003e90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bbc:	6878      	ldr	r0, [r7, #4]
 8003bbe:	f000 f97b 	bl	8003eb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	691b      	ldr	r3, [r3, #16]
 8003bce:	f003 0310 	and.w	r3, r3, #16
 8003bd2:	2b10      	cmp	r3, #16
 8003bd4:	d122      	bne.n	8003c1c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	68db      	ldr	r3, [r3, #12]
 8003bdc:	f003 0310 	and.w	r3, r3, #16
 8003be0:	2b10      	cmp	r3, #16
 8003be2:	d11b      	bne.n	8003c1c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f06f 0210 	mvn.w	r2, #16
 8003bec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2208      	movs	r2, #8
 8003bf2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	69db      	ldr	r3, [r3, #28]
 8003bfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d003      	beq.n	8003c0a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f000 f94e 	bl	8003ea4 <HAL_TIM_IC_CaptureCallback>
 8003c08:	e005      	b.n	8003c16 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	f000 f940 	bl	8003e90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c10:	6878      	ldr	r0, [r7, #4]
 8003c12:	f000 f951 	bl	8003eb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	691b      	ldr	r3, [r3, #16]
 8003c22:	f003 0301 	and.w	r3, r3, #1
 8003c26:	2b01      	cmp	r3, #1
 8003c28:	d10e      	bne.n	8003c48 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	68db      	ldr	r3, [r3, #12]
 8003c30:	f003 0301 	and.w	r3, r3, #1
 8003c34:	2b01      	cmp	r3, #1
 8003c36:	d107      	bne.n	8003c48 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f06f 0201 	mvn.w	r2, #1
 8003c40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	f7fc fe56 	bl	80008f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	691b      	ldr	r3, [r3, #16]
 8003c4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c52:	2b80      	cmp	r3, #128	; 0x80
 8003c54:	d10e      	bne.n	8003c74 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	68db      	ldr	r3, [r3, #12]
 8003c5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c60:	2b80      	cmp	r3, #128	; 0x80
 8003c62:	d107      	bne.n	8003c74 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003c6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f000 fb08 	bl	8004284 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	691b      	ldr	r3, [r3, #16]
 8003c7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c82:	d10e      	bne.n	8003ca2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	68db      	ldr	r3, [r3, #12]
 8003c8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c8e:	2b80      	cmp	r3, #128	; 0x80
 8003c90:	d107      	bne.n	8003ca2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003c9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003c9c:	6878      	ldr	r0, [r7, #4]
 8003c9e:	f000 fafb 	bl	8004298 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	691b      	ldr	r3, [r3, #16]
 8003ca8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cac:	2b40      	cmp	r3, #64	; 0x40
 8003cae:	d10e      	bne.n	8003cce <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	68db      	ldr	r3, [r3, #12]
 8003cb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cba:	2b40      	cmp	r3, #64	; 0x40
 8003cbc:	d107      	bne.n	8003cce <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003cc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003cc8:	6878      	ldr	r0, [r7, #4]
 8003cca:	f000 f8ff 	bl	8003ecc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	691b      	ldr	r3, [r3, #16]
 8003cd4:	f003 0320 	and.w	r3, r3, #32
 8003cd8:	2b20      	cmp	r3, #32
 8003cda:	d10e      	bne.n	8003cfa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	68db      	ldr	r3, [r3, #12]
 8003ce2:	f003 0320 	and.w	r3, r3, #32
 8003ce6:	2b20      	cmp	r3, #32
 8003ce8:	d107      	bne.n	8003cfa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f06f 0220 	mvn.w	r2, #32
 8003cf2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003cf4:	6878      	ldr	r0, [r7, #4]
 8003cf6:	f000 fabb 	bl	8004270 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003cfa:	bf00      	nop
 8003cfc:	3708      	adds	r7, #8
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}
	...

08003d04 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b084      	sub	sp, #16
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
 8003d0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	d101      	bne.n	8003d1c <HAL_TIM_ConfigClockSource+0x18>
 8003d18:	2302      	movs	r3, #2
 8003d1a:	e0b3      	b.n	8003e84 <HAL_TIM_ConfigClockSource+0x180>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2201      	movs	r2, #1
 8003d20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2202      	movs	r2, #2
 8003d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	689b      	ldr	r3, [r3, #8]
 8003d32:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003d34:	68fa      	ldr	r2, [r7, #12]
 8003d36:	4b55      	ldr	r3, [pc, #340]	; (8003e8c <HAL_TIM_ConfigClockSource+0x188>)
 8003d38:	4013      	ands	r3, r2
 8003d3a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d42:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	68fa      	ldr	r2, [r7, #12]
 8003d4a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d54:	d03e      	beq.n	8003dd4 <HAL_TIM_ConfigClockSource+0xd0>
 8003d56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d5a:	f200 8087 	bhi.w	8003e6c <HAL_TIM_ConfigClockSource+0x168>
 8003d5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d62:	f000 8085 	beq.w	8003e70 <HAL_TIM_ConfigClockSource+0x16c>
 8003d66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d6a:	d87f      	bhi.n	8003e6c <HAL_TIM_ConfigClockSource+0x168>
 8003d6c:	2b70      	cmp	r3, #112	; 0x70
 8003d6e:	d01a      	beq.n	8003da6 <HAL_TIM_ConfigClockSource+0xa2>
 8003d70:	2b70      	cmp	r3, #112	; 0x70
 8003d72:	d87b      	bhi.n	8003e6c <HAL_TIM_ConfigClockSource+0x168>
 8003d74:	2b60      	cmp	r3, #96	; 0x60
 8003d76:	d050      	beq.n	8003e1a <HAL_TIM_ConfigClockSource+0x116>
 8003d78:	2b60      	cmp	r3, #96	; 0x60
 8003d7a:	d877      	bhi.n	8003e6c <HAL_TIM_ConfigClockSource+0x168>
 8003d7c:	2b50      	cmp	r3, #80	; 0x50
 8003d7e:	d03c      	beq.n	8003dfa <HAL_TIM_ConfigClockSource+0xf6>
 8003d80:	2b50      	cmp	r3, #80	; 0x50
 8003d82:	d873      	bhi.n	8003e6c <HAL_TIM_ConfigClockSource+0x168>
 8003d84:	2b40      	cmp	r3, #64	; 0x40
 8003d86:	d058      	beq.n	8003e3a <HAL_TIM_ConfigClockSource+0x136>
 8003d88:	2b40      	cmp	r3, #64	; 0x40
 8003d8a:	d86f      	bhi.n	8003e6c <HAL_TIM_ConfigClockSource+0x168>
 8003d8c:	2b30      	cmp	r3, #48	; 0x30
 8003d8e:	d064      	beq.n	8003e5a <HAL_TIM_ConfigClockSource+0x156>
 8003d90:	2b30      	cmp	r3, #48	; 0x30
 8003d92:	d86b      	bhi.n	8003e6c <HAL_TIM_ConfigClockSource+0x168>
 8003d94:	2b20      	cmp	r3, #32
 8003d96:	d060      	beq.n	8003e5a <HAL_TIM_ConfigClockSource+0x156>
 8003d98:	2b20      	cmp	r3, #32
 8003d9a:	d867      	bhi.n	8003e6c <HAL_TIM_ConfigClockSource+0x168>
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d05c      	beq.n	8003e5a <HAL_TIM_ConfigClockSource+0x156>
 8003da0:	2b10      	cmp	r3, #16
 8003da2:	d05a      	beq.n	8003e5a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003da4:	e062      	b.n	8003e6c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6818      	ldr	r0, [r3, #0]
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	6899      	ldr	r1, [r3, #8]
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	685a      	ldr	r2, [r3, #4]
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	68db      	ldr	r3, [r3, #12]
 8003db6:	f000 f9ad 	bl	8004114 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003dc8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	68fa      	ldr	r2, [r7, #12]
 8003dd0:	609a      	str	r2, [r3, #8]
      break;
 8003dd2:	e04e      	b.n	8003e72 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6818      	ldr	r0, [r3, #0]
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	6899      	ldr	r1, [r3, #8]
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	685a      	ldr	r2, [r3, #4]
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	68db      	ldr	r3, [r3, #12]
 8003de4:	f000 f996 	bl	8004114 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	689a      	ldr	r2, [r3, #8]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003df6:	609a      	str	r2, [r3, #8]
      break;
 8003df8:	e03b      	b.n	8003e72 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6818      	ldr	r0, [r3, #0]
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	6859      	ldr	r1, [r3, #4]
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	68db      	ldr	r3, [r3, #12]
 8003e06:	461a      	mov	r2, r3
 8003e08:	f000 f90a 	bl	8004020 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	2150      	movs	r1, #80	; 0x50
 8003e12:	4618      	mov	r0, r3
 8003e14:	f000 f963 	bl	80040de <TIM_ITRx_SetConfig>
      break;
 8003e18:	e02b      	b.n	8003e72 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6818      	ldr	r0, [r3, #0]
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	6859      	ldr	r1, [r3, #4]
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	68db      	ldr	r3, [r3, #12]
 8003e26:	461a      	mov	r2, r3
 8003e28:	f000 f929 	bl	800407e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	2160      	movs	r1, #96	; 0x60
 8003e32:	4618      	mov	r0, r3
 8003e34:	f000 f953 	bl	80040de <TIM_ITRx_SetConfig>
      break;
 8003e38:	e01b      	b.n	8003e72 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6818      	ldr	r0, [r3, #0]
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	6859      	ldr	r1, [r3, #4]
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	68db      	ldr	r3, [r3, #12]
 8003e46:	461a      	mov	r2, r3
 8003e48:	f000 f8ea 	bl	8004020 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	2140      	movs	r1, #64	; 0x40
 8003e52:	4618      	mov	r0, r3
 8003e54:	f000 f943 	bl	80040de <TIM_ITRx_SetConfig>
      break;
 8003e58:	e00b      	b.n	8003e72 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4619      	mov	r1, r3
 8003e64:	4610      	mov	r0, r2
 8003e66:	f000 f93a 	bl	80040de <TIM_ITRx_SetConfig>
        break;
 8003e6a:	e002      	b.n	8003e72 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003e6c:	bf00      	nop
 8003e6e:	e000      	b.n	8003e72 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003e70:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2201      	movs	r2, #1
 8003e76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e82:	2300      	movs	r3, #0
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	3710      	adds	r7, #16
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}
 8003e8c:	fffeff88 	.word	0xfffeff88

08003e90 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b083      	sub	sp, #12
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003e98:	bf00      	nop
 8003e9a:	370c      	adds	r7, #12
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea2:	4770      	bx	lr

08003ea4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b083      	sub	sp, #12
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003eac:	bf00      	nop
 8003eae:	370c      	adds	r7, #12
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb6:	4770      	bx	lr

08003eb8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b083      	sub	sp, #12
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003ec0:	bf00      	nop
 8003ec2:	370c      	adds	r7, #12
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eca:	4770      	bx	lr

08003ecc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b083      	sub	sp, #12
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003ed4:	bf00      	nop
 8003ed6:	370c      	adds	r7, #12
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ede:	4770      	bx	lr

08003ee0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b085      	sub	sp, #20
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
 8003ee8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	4a40      	ldr	r2, [pc, #256]	; (8003ff4 <TIM_Base_SetConfig+0x114>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d013      	beq.n	8003f20 <TIM_Base_SetConfig+0x40>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003efe:	d00f      	beq.n	8003f20 <TIM_Base_SetConfig+0x40>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	4a3d      	ldr	r2, [pc, #244]	; (8003ff8 <TIM_Base_SetConfig+0x118>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d00b      	beq.n	8003f20 <TIM_Base_SetConfig+0x40>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	4a3c      	ldr	r2, [pc, #240]	; (8003ffc <TIM_Base_SetConfig+0x11c>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d007      	beq.n	8003f20 <TIM_Base_SetConfig+0x40>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	4a3b      	ldr	r2, [pc, #236]	; (8004000 <TIM_Base_SetConfig+0x120>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d003      	beq.n	8003f20 <TIM_Base_SetConfig+0x40>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	4a3a      	ldr	r2, [pc, #232]	; (8004004 <TIM_Base_SetConfig+0x124>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d108      	bne.n	8003f32 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	68fa      	ldr	r2, [r7, #12]
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	4a2f      	ldr	r2, [pc, #188]	; (8003ff4 <TIM_Base_SetConfig+0x114>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d02b      	beq.n	8003f92 <TIM_Base_SetConfig+0xb2>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f40:	d027      	beq.n	8003f92 <TIM_Base_SetConfig+0xb2>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	4a2c      	ldr	r2, [pc, #176]	; (8003ff8 <TIM_Base_SetConfig+0x118>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d023      	beq.n	8003f92 <TIM_Base_SetConfig+0xb2>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	4a2b      	ldr	r2, [pc, #172]	; (8003ffc <TIM_Base_SetConfig+0x11c>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d01f      	beq.n	8003f92 <TIM_Base_SetConfig+0xb2>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	4a2a      	ldr	r2, [pc, #168]	; (8004000 <TIM_Base_SetConfig+0x120>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d01b      	beq.n	8003f92 <TIM_Base_SetConfig+0xb2>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	4a29      	ldr	r2, [pc, #164]	; (8004004 <TIM_Base_SetConfig+0x124>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d017      	beq.n	8003f92 <TIM_Base_SetConfig+0xb2>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	4a28      	ldr	r2, [pc, #160]	; (8004008 <TIM_Base_SetConfig+0x128>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d013      	beq.n	8003f92 <TIM_Base_SetConfig+0xb2>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	4a27      	ldr	r2, [pc, #156]	; (800400c <TIM_Base_SetConfig+0x12c>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d00f      	beq.n	8003f92 <TIM_Base_SetConfig+0xb2>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	4a26      	ldr	r2, [pc, #152]	; (8004010 <TIM_Base_SetConfig+0x130>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d00b      	beq.n	8003f92 <TIM_Base_SetConfig+0xb2>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	4a25      	ldr	r2, [pc, #148]	; (8004014 <TIM_Base_SetConfig+0x134>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d007      	beq.n	8003f92 <TIM_Base_SetConfig+0xb2>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	4a24      	ldr	r2, [pc, #144]	; (8004018 <TIM_Base_SetConfig+0x138>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d003      	beq.n	8003f92 <TIM_Base_SetConfig+0xb2>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	4a23      	ldr	r2, [pc, #140]	; (800401c <TIM_Base_SetConfig+0x13c>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d108      	bne.n	8003fa4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	68db      	ldr	r3, [r3, #12]
 8003f9e:	68fa      	ldr	r2, [r7, #12]
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	695b      	ldr	r3, [r3, #20]
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	68fa      	ldr	r2, [r7, #12]
 8003fb6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	689a      	ldr	r2, [r3, #8]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	681a      	ldr	r2, [r3, #0]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	4a0a      	ldr	r2, [pc, #40]	; (8003ff4 <TIM_Base_SetConfig+0x114>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d003      	beq.n	8003fd8 <TIM_Base_SetConfig+0xf8>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	4a0c      	ldr	r2, [pc, #48]	; (8004004 <TIM_Base_SetConfig+0x124>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d103      	bne.n	8003fe0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	691a      	ldr	r2, [r3, #16]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	615a      	str	r2, [r3, #20]
}
 8003fe6:	bf00      	nop
 8003fe8:	3714      	adds	r7, #20
 8003fea:	46bd      	mov	sp, r7
 8003fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff0:	4770      	bx	lr
 8003ff2:	bf00      	nop
 8003ff4:	40010000 	.word	0x40010000
 8003ff8:	40000400 	.word	0x40000400
 8003ffc:	40000800 	.word	0x40000800
 8004000:	40000c00 	.word	0x40000c00
 8004004:	40010400 	.word	0x40010400
 8004008:	40014000 	.word	0x40014000
 800400c:	40014400 	.word	0x40014400
 8004010:	40014800 	.word	0x40014800
 8004014:	40001800 	.word	0x40001800
 8004018:	40001c00 	.word	0x40001c00
 800401c:	40002000 	.word	0x40002000

08004020 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004020:	b480      	push	{r7}
 8004022:	b087      	sub	sp, #28
 8004024:	af00      	add	r7, sp, #0
 8004026:	60f8      	str	r0, [r7, #12]
 8004028:	60b9      	str	r1, [r7, #8]
 800402a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	6a1b      	ldr	r3, [r3, #32]
 8004030:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	6a1b      	ldr	r3, [r3, #32]
 8004036:	f023 0201 	bic.w	r2, r3, #1
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	699b      	ldr	r3, [r3, #24]
 8004042:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800404a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	011b      	lsls	r3, r3, #4
 8004050:	693a      	ldr	r2, [r7, #16]
 8004052:	4313      	orrs	r3, r2
 8004054:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	f023 030a 	bic.w	r3, r3, #10
 800405c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800405e:	697a      	ldr	r2, [r7, #20]
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	4313      	orrs	r3, r2
 8004064:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	693a      	ldr	r2, [r7, #16]
 800406a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	697a      	ldr	r2, [r7, #20]
 8004070:	621a      	str	r2, [r3, #32]
}
 8004072:	bf00      	nop
 8004074:	371c      	adds	r7, #28
 8004076:	46bd      	mov	sp, r7
 8004078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407c:	4770      	bx	lr

0800407e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800407e:	b480      	push	{r7}
 8004080:	b087      	sub	sp, #28
 8004082:	af00      	add	r7, sp, #0
 8004084:	60f8      	str	r0, [r7, #12]
 8004086:	60b9      	str	r1, [r7, #8]
 8004088:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	6a1b      	ldr	r3, [r3, #32]
 800408e:	f023 0210 	bic.w	r2, r3, #16
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	699b      	ldr	r3, [r3, #24]
 800409a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	6a1b      	ldr	r3, [r3, #32]
 80040a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80040a8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	031b      	lsls	r3, r3, #12
 80040ae:	697a      	ldr	r2, [r7, #20]
 80040b0:	4313      	orrs	r3, r2
 80040b2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80040ba:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	011b      	lsls	r3, r3, #4
 80040c0:	693a      	ldr	r2, [r7, #16]
 80040c2:	4313      	orrs	r3, r2
 80040c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	697a      	ldr	r2, [r7, #20]
 80040ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	693a      	ldr	r2, [r7, #16]
 80040d0:	621a      	str	r2, [r3, #32]
}
 80040d2:	bf00      	nop
 80040d4:	371c      	adds	r7, #28
 80040d6:	46bd      	mov	sp, r7
 80040d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040dc:	4770      	bx	lr

080040de <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80040de:	b480      	push	{r7}
 80040e0:	b085      	sub	sp, #20
 80040e2:	af00      	add	r7, sp, #0
 80040e4:	6078      	str	r0, [r7, #4]
 80040e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80040f6:	683a      	ldr	r2, [r7, #0]
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	4313      	orrs	r3, r2
 80040fc:	f043 0307 	orr.w	r3, r3, #7
 8004100:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	68fa      	ldr	r2, [r7, #12]
 8004106:	609a      	str	r2, [r3, #8]
}
 8004108:	bf00      	nop
 800410a:	3714      	adds	r7, #20
 800410c:	46bd      	mov	sp, r7
 800410e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004112:	4770      	bx	lr

08004114 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004114:	b480      	push	{r7}
 8004116:	b087      	sub	sp, #28
 8004118:	af00      	add	r7, sp, #0
 800411a:	60f8      	str	r0, [r7, #12]
 800411c:	60b9      	str	r1, [r7, #8]
 800411e:	607a      	str	r2, [r7, #4]
 8004120:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	689b      	ldr	r3, [r3, #8]
 8004126:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800412e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	021a      	lsls	r2, r3, #8
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	431a      	orrs	r2, r3
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	4313      	orrs	r3, r2
 800413c:	697a      	ldr	r2, [r7, #20]
 800413e:	4313      	orrs	r3, r2
 8004140:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	697a      	ldr	r2, [r7, #20]
 8004146:	609a      	str	r2, [r3, #8]
}
 8004148:	bf00      	nop
 800414a:	371c      	adds	r7, #28
 800414c:	46bd      	mov	sp, r7
 800414e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004152:	4770      	bx	lr

08004154 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004154:	b480      	push	{r7}
 8004156:	b085      	sub	sp, #20
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
 800415c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004164:	2b01      	cmp	r3, #1
 8004166:	d101      	bne.n	800416c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004168:	2302      	movs	r3, #2
 800416a:	e06d      	b.n	8004248 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2201      	movs	r2, #1
 8004170:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2202      	movs	r2, #2
 8004178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a30      	ldr	r2, [pc, #192]	; (8004254 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d004      	beq.n	80041a0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a2f      	ldr	r2, [pc, #188]	; (8004258 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d108      	bne.n	80041b2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80041a6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	68fa      	ldr	r2, [r7, #12]
 80041ae:	4313      	orrs	r3, r2
 80041b0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041b8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	68fa      	ldr	r2, [r7, #12]
 80041c0:	4313      	orrs	r3, r2
 80041c2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	68fa      	ldr	r2, [r7, #12]
 80041ca:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a20      	ldr	r2, [pc, #128]	; (8004254 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d022      	beq.n	800421c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041de:	d01d      	beq.n	800421c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a1d      	ldr	r2, [pc, #116]	; (800425c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d018      	beq.n	800421c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a1c      	ldr	r2, [pc, #112]	; (8004260 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d013      	beq.n	800421c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a1a      	ldr	r2, [pc, #104]	; (8004264 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d00e      	beq.n	800421c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a15      	ldr	r2, [pc, #84]	; (8004258 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d009      	beq.n	800421c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a16      	ldr	r2, [pc, #88]	; (8004268 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d004      	beq.n	800421c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a15      	ldr	r2, [pc, #84]	; (800426c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d10c      	bne.n	8004236 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004222:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	689b      	ldr	r3, [r3, #8]
 8004228:	68ba      	ldr	r2, [r7, #8]
 800422a:	4313      	orrs	r3, r2
 800422c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	68ba      	ldr	r2, [r7, #8]
 8004234:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2201      	movs	r2, #1
 800423a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2200      	movs	r2, #0
 8004242:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004246:	2300      	movs	r3, #0
}
 8004248:	4618      	mov	r0, r3
 800424a:	3714      	adds	r7, #20
 800424c:	46bd      	mov	sp, r7
 800424e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004252:	4770      	bx	lr
 8004254:	40010000 	.word	0x40010000
 8004258:	40010400 	.word	0x40010400
 800425c:	40000400 	.word	0x40000400
 8004260:	40000800 	.word	0x40000800
 8004264:	40000c00 	.word	0x40000c00
 8004268:	40014000 	.word	0x40014000
 800426c:	40001800 	.word	0x40001800

08004270 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004270:	b480      	push	{r7}
 8004272:	b083      	sub	sp, #12
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004278:	bf00      	nop
 800427a:	370c      	adds	r7, #12
 800427c:	46bd      	mov	sp, r7
 800427e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004282:	4770      	bx	lr

08004284 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004284:	b480      	push	{r7}
 8004286:	b083      	sub	sp, #12
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800428c:	bf00      	nop
 800428e:	370c      	adds	r7, #12
 8004290:	46bd      	mov	sp, r7
 8004292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004296:	4770      	bx	lr

08004298 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004298:	b480      	push	{r7}
 800429a:	b083      	sub	sp, #12
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80042a0:	bf00      	nop
 80042a2:	370c      	adds	r7, #12
 80042a4:	46bd      	mov	sp, r7
 80042a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042aa:	4770      	bx	lr

080042ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b082      	sub	sp, #8
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d101      	bne.n	80042be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80042ba:	2301      	movs	r3, #1
 80042bc:	e040      	b.n	8004340 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d106      	bne.n	80042d4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2200      	movs	r2, #0
 80042ca:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f7fc fe7a 	bl	8000fc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2224      	movs	r2, #36	; 0x24
 80042d8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	681a      	ldr	r2, [r3, #0]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f022 0201 	bic.w	r2, r2, #1
 80042e8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80042ea:	6878      	ldr	r0, [r7, #4]
 80042ec:	f000 f82c 	bl	8004348 <UART_SetConfig>
 80042f0:	4603      	mov	r3, r0
 80042f2:	2b01      	cmp	r3, #1
 80042f4:	d101      	bne.n	80042fa <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	e022      	b.n	8004340 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d002      	beq.n	8004308 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f000 fa82 	bl	800480c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	685a      	ldr	r2, [r3, #4]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004316:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	689a      	ldr	r2, [r3, #8]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004326:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	681a      	ldr	r2, [r3, #0]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f042 0201 	orr.w	r2, r2, #1
 8004336:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004338:	6878      	ldr	r0, [r7, #4]
 800433a:	f000 fb09 	bl	8004950 <UART_CheckIdleState>
 800433e:	4603      	mov	r3, r0
}
 8004340:	4618      	mov	r0, r3
 8004342:	3708      	adds	r7, #8
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}

08004348 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b088      	sub	sp, #32
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004350:	2300      	movs	r3, #0
 8004352:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	689a      	ldr	r2, [r3, #8]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	691b      	ldr	r3, [r3, #16]
 800435c:	431a      	orrs	r2, r3
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	695b      	ldr	r3, [r3, #20]
 8004362:	431a      	orrs	r2, r3
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	69db      	ldr	r3, [r3, #28]
 8004368:	4313      	orrs	r3, r2
 800436a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	681a      	ldr	r2, [r3, #0]
 8004372:	4ba7      	ldr	r3, [pc, #668]	; (8004610 <UART_SetConfig+0x2c8>)
 8004374:	4013      	ands	r3, r2
 8004376:	687a      	ldr	r2, [r7, #4]
 8004378:	6812      	ldr	r2, [r2, #0]
 800437a:	6979      	ldr	r1, [r7, #20]
 800437c:	430b      	orrs	r3, r1
 800437e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	68da      	ldr	r2, [r3, #12]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	430a      	orrs	r2, r1
 8004394:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	699b      	ldr	r3, [r3, #24]
 800439a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6a1b      	ldr	r3, [r3, #32]
 80043a0:	697a      	ldr	r2, [r7, #20]
 80043a2:	4313      	orrs	r3, r2
 80043a4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	689b      	ldr	r3, [r3, #8]
 80043ac:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	697a      	ldr	r2, [r7, #20]
 80043b6:	430a      	orrs	r2, r1
 80043b8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a95      	ldr	r2, [pc, #596]	; (8004614 <UART_SetConfig+0x2cc>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d120      	bne.n	8004406 <UART_SetConfig+0xbe>
 80043c4:	4b94      	ldr	r3, [pc, #592]	; (8004618 <UART_SetConfig+0x2d0>)
 80043c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043ca:	f003 0303 	and.w	r3, r3, #3
 80043ce:	2b03      	cmp	r3, #3
 80043d0:	d816      	bhi.n	8004400 <UART_SetConfig+0xb8>
 80043d2:	a201      	add	r2, pc, #4	; (adr r2, 80043d8 <UART_SetConfig+0x90>)
 80043d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043d8:	080043e9 	.word	0x080043e9
 80043dc:	080043f5 	.word	0x080043f5
 80043e0:	080043ef 	.word	0x080043ef
 80043e4:	080043fb 	.word	0x080043fb
 80043e8:	2301      	movs	r3, #1
 80043ea:	77fb      	strb	r3, [r7, #31]
 80043ec:	e14f      	b.n	800468e <UART_SetConfig+0x346>
 80043ee:	2302      	movs	r3, #2
 80043f0:	77fb      	strb	r3, [r7, #31]
 80043f2:	e14c      	b.n	800468e <UART_SetConfig+0x346>
 80043f4:	2304      	movs	r3, #4
 80043f6:	77fb      	strb	r3, [r7, #31]
 80043f8:	e149      	b.n	800468e <UART_SetConfig+0x346>
 80043fa:	2308      	movs	r3, #8
 80043fc:	77fb      	strb	r3, [r7, #31]
 80043fe:	e146      	b.n	800468e <UART_SetConfig+0x346>
 8004400:	2310      	movs	r3, #16
 8004402:	77fb      	strb	r3, [r7, #31]
 8004404:	e143      	b.n	800468e <UART_SetConfig+0x346>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a84      	ldr	r2, [pc, #528]	; (800461c <UART_SetConfig+0x2d4>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d132      	bne.n	8004476 <UART_SetConfig+0x12e>
 8004410:	4b81      	ldr	r3, [pc, #516]	; (8004618 <UART_SetConfig+0x2d0>)
 8004412:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004416:	f003 030c 	and.w	r3, r3, #12
 800441a:	2b0c      	cmp	r3, #12
 800441c:	d828      	bhi.n	8004470 <UART_SetConfig+0x128>
 800441e:	a201      	add	r2, pc, #4	; (adr r2, 8004424 <UART_SetConfig+0xdc>)
 8004420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004424:	08004459 	.word	0x08004459
 8004428:	08004471 	.word	0x08004471
 800442c:	08004471 	.word	0x08004471
 8004430:	08004471 	.word	0x08004471
 8004434:	08004465 	.word	0x08004465
 8004438:	08004471 	.word	0x08004471
 800443c:	08004471 	.word	0x08004471
 8004440:	08004471 	.word	0x08004471
 8004444:	0800445f 	.word	0x0800445f
 8004448:	08004471 	.word	0x08004471
 800444c:	08004471 	.word	0x08004471
 8004450:	08004471 	.word	0x08004471
 8004454:	0800446b 	.word	0x0800446b
 8004458:	2300      	movs	r3, #0
 800445a:	77fb      	strb	r3, [r7, #31]
 800445c:	e117      	b.n	800468e <UART_SetConfig+0x346>
 800445e:	2302      	movs	r3, #2
 8004460:	77fb      	strb	r3, [r7, #31]
 8004462:	e114      	b.n	800468e <UART_SetConfig+0x346>
 8004464:	2304      	movs	r3, #4
 8004466:	77fb      	strb	r3, [r7, #31]
 8004468:	e111      	b.n	800468e <UART_SetConfig+0x346>
 800446a:	2308      	movs	r3, #8
 800446c:	77fb      	strb	r3, [r7, #31]
 800446e:	e10e      	b.n	800468e <UART_SetConfig+0x346>
 8004470:	2310      	movs	r3, #16
 8004472:	77fb      	strb	r3, [r7, #31]
 8004474:	e10b      	b.n	800468e <UART_SetConfig+0x346>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a69      	ldr	r2, [pc, #420]	; (8004620 <UART_SetConfig+0x2d8>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d120      	bne.n	80044c2 <UART_SetConfig+0x17a>
 8004480:	4b65      	ldr	r3, [pc, #404]	; (8004618 <UART_SetConfig+0x2d0>)
 8004482:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004486:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800448a:	2b30      	cmp	r3, #48	; 0x30
 800448c:	d013      	beq.n	80044b6 <UART_SetConfig+0x16e>
 800448e:	2b30      	cmp	r3, #48	; 0x30
 8004490:	d814      	bhi.n	80044bc <UART_SetConfig+0x174>
 8004492:	2b20      	cmp	r3, #32
 8004494:	d009      	beq.n	80044aa <UART_SetConfig+0x162>
 8004496:	2b20      	cmp	r3, #32
 8004498:	d810      	bhi.n	80044bc <UART_SetConfig+0x174>
 800449a:	2b00      	cmp	r3, #0
 800449c:	d002      	beq.n	80044a4 <UART_SetConfig+0x15c>
 800449e:	2b10      	cmp	r3, #16
 80044a0:	d006      	beq.n	80044b0 <UART_SetConfig+0x168>
 80044a2:	e00b      	b.n	80044bc <UART_SetConfig+0x174>
 80044a4:	2300      	movs	r3, #0
 80044a6:	77fb      	strb	r3, [r7, #31]
 80044a8:	e0f1      	b.n	800468e <UART_SetConfig+0x346>
 80044aa:	2302      	movs	r3, #2
 80044ac:	77fb      	strb	r3, [r7, #31]
 80044ae:	e0ee      	b.n	800468e <UART_SetConfig+0x346>
 80044b0:	2304      	movs	r3, #4
 80044b2:	77fb      	strb	r3, [r7, #31]
 80044b4:	e0eb      	b.n	800468e <UART_SetConfig+0x346>
 80044b6:	2308      	movs	r3, #8
 80044b8:	77fb      	strb	r3, [r7, #31]
 80044ba:	e0e8      	b.n	800468e <UART_SetConfig+0x346>
 80044bc:	2310      	movs	r3, #16
 80044be:	77fb      	strb	r3, [r7, #31]
 80044c0:	e0e5      	b.n	800468e <UART_SetConfig+0x346>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a57      	ldr	r2, [pc, #348]	; (8004624 <UART_SetConfig+0x2dc>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d120      	bne.n	800450e <UART_SetConfig+0x1c6>
 80044cc:	4b52      	ldr	r3, [pc, #328]	; (8004618 <UART_SetConfig+0x2d0>)
 80044ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044d2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80044d6:	2bc0      	cmp	r3, #192	; 0xc0
 80044d8:	d013      	beq.n	8004502 <UART_SetConfig+0x1ba>
 80044da:	2bc0      	cmp	r3, #192	; 0xc0
 80044dc:	d814      	bhi.n	8004508 <UART_SetConfig+0x1c0>
 80044de:	2b80      	cmp	r3, #128	; 0x80
 80044e0:	d009      	beq.n	80044f6 <UART_SetConfig+0x1ae>
 80044e2:	2b80      	cmp	r3, #128	; 0x80
 80044e4:	d810      	bhi.n	8004508 <UART_SetConfig+0x1c0>
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d002      	beq.n	80044f0 <UART_SetConfig+0x1a8>
 80044ea:	2b40      	cmp	r3, #64	; 0x40
 80044ec:	d006      	beq.n	80044fc <UART_SetConfig+0x1b4>
 80044ee:	e00b      	b.n	8004508 <UART_SetConfig+0x1c0>
 80044f0:	2300      	movs	r3, #0
 80044f2:	77fb      	strb	r3, [r7, #31]
 80044f4:	e0cb      	b.n	800468e <UART_SetConfig+0x346>
 80044f6:	2302      	movs	r3, #2
 80044f8:	77fb      	strb	r3, [r7, #31]
 80044fa:	e0c8      	b.n	800468e <UART_SetConfig+0x346>
 80044fc:	2304      	movs	r3, #4
 80044fe:	77fb      	strb	r3, [r7, #31]
 8004500:	e0c5      	b.n	800468e <UART_SetConfig+0x346>
 8004502:	2308      	movs	r3, #8
 8004504:	77fb      	strb	r3, [r7, #31]
 8004506:	e0c2      	b.n	800468e <UART_SetConfig+0x346>
 8004508:	2310      	movs	r3, #16
 800450a:	77fb      	strb	r3, [r7, #31]
 800450c:	e0bf      	b.n	800468e <UART_SetConfig+0x346>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a45      	ldr	r2, [pc, #276]	; (8004628 <UART_SetConfig+0x2e0>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d125      	bne.n	8004564 <UART_SetConfig+0x21c>
 8004518:	4b3f      	ldr	r3, [pc, #252]	; (8004618 <UART_SetConfig+0x2d0>)
 800451a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800451e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004522:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004526:	d017      	beq.n	8004558 <UART_SetConfig+0x210>
 8004528:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800452c:	d817      	bhi.n	800455e <UART_SetConfig+0x216>
 800452e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004532:	d00b      	beq.n	800454c <UART_SetConfig+0x204>
 8004534:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004538:	d811      	bhi.n	800455e <UART_SetConfig+0x216>
 800453a:	2b00      	cmp	r3, #0
 800453c:	d003      	beq.n	8004546 <UART_SetConfig+0x1fe>
 800453e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004542:	d006      	beq.n	8004552 <UART_SetConfig+0x20a>
 8004544:	e00b      	b.n	800455e <UART_SetConfig+0x216>
 8004546:	2300      	movs	r3, #0
 8004548:	77fb      	strb	r3, [r7, #31]
 800454a:	e0a0      	b.n	800468e <UART_SetConfig+0x346>
 800454c:	2302      	movs	r3, #2
 800454e:	77fb      	strb	r3, [r7, #31]
 8004550:	e09d      	b.n	800468e <UART_SetConfig+0x346>
 8004552:	2304      	movs	r3, #4
 8004554:	77fb      	strb	r3, [r7, #31]
 8004556:	e09a      	b.n	800468e <UART_SetConfig+0x346>
 8004558:	2308      	movs	r3, #8
 800455a:	77fb      	strb	r3, [r7, #31]
 800455c:	e097      	b.n	800468e <UART_SetConfig+0x346>
 800455e:	2310      	movs	r3, #16
 8004560:	77fb      	strb	r3, [r7, #31]
 8004562:	e094      	b.n	800468e <UART_SetConfig+0x346>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a30      	ldr	r2, [pc, #192]	; (800462c <UART_SetConfig+0x2e4>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d125      	bne.n	80045ba <UART_SetConfig+0x272>
 800456e:	4b2a      	ldr	r3, [pc, #168]	; (8004618 <UART_SetConfig+0x2d0>)
 8004570:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004574:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004578:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800457c:	d017      	beq.n	80045ae <UART_SetConfig+0x266>
 800457e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004582:	d817      	bhi.n	80045b4 <UART_SetConfig+0x26c>
 8004584:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004588:	d00b      	beq.n	80045a2 <UART_SetConfig+0x25a>
 800458a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800458e:	d811      	bhi.n	80045b4 <UART_SetConfig+0x26c>
 8004590:	2b00      	cmp	r3, #0
 8004592:	d003      	beq.n	800459c <UART_SetConfig+0x254>
 8004594:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004598:	d006      	beq.n	80045a8 <UART_SetConfig+0x260>
 800459a:	e00b      	b.n	80045b4 <UART_SetConfig+0x26c>
 800459c:	2301      	movs	r3, #1
 800459e:	77fb      	strb	r3, [r7, #31]
 80045a0:	e075      	b.n	800468e <UART_SetConfig+0x346>
 80045a2:	2302      	movs	r3, #2
 80045a4:	77fb      	strb	r3, [r7, #31]
 80045a6:	e072      	b.n	800468e <UART_SetConfig+0x346>
 80045a8:	2304      	movs	r3, #4
 80045aa:	77fb      	strb	r3, [r7, #31]
 80045ac:	e06f      	b.n	800468e <UART_SetConfig+0x346>
 80045ae:	2308      	movs	r3, #8
 80045b0:	77fb      	strb	r3, [r7, #31]
 80045b2:	e06c      	b.n	800468e <UART_SetConfig+0x346>
 80045b4:	2310      	movs	r3, #16
 80045b6:	77fb      	strb	r3, [r7, #31]
 80045b8:	e069      	b.n	800468e <UART_SetConfig+0x346>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a1c      	ldr	r2, [pc, #112]	; (8004630 <UART_SetConfig+0x2e8>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d137      	bne.n	8004634 <UART_SetConfig+0x2ec>
 80045c4:	4b14      	ldr	r3, [pc, #80]	; (8004618 <UART_SetConfig+0x2d0>)
 80045c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045ca:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80045ce:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80045d2:	d017      	beq.n	8004604 <UART_SetConfig+0x2bc>
 80045d4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80045d8:	d817      	bhi.n	800460a <UART_SetConfig+0x2c2>
 80045da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045de:	d00b      	beq.n	80045f8 <UART_SetConfig+0x2b0>
 80045e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045e4:	d811      	bhi.n	800460a <UART_SetConfig+0x2c2>
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d003      	beq.n	80045f2 <UART_SetConfig+0x2aa>
 80045ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045ee:	d006      	beq.n	80045fe <UART_SetConfig+0x2b6>
 80045f0:	e00b      	b.n	800460a <UART_SetConfig+0x2c2>
 80045f2:	2300      	movs	r3, #0
 80045f4:	77fb      	strb	r3, [r7, #31]
 80045f6:	e04a      	b.n	800468e <UART_SetConfig+0x346>
 80045f8:	2302      	movs	r3, #2
 80045fa:	77fb      	strb	r3, [r7, #31]
 80045fc:	e047      	b.n	800468e <UART_SetConfig+0x346>
 80045fe:	2304      	movs	r3, #4
 8004600:	77fb      	strb	r3, [r7, #31]
 8004602:	e044      	b.n	800468e <UART_SetConfig+0x346>
 8004604:	2308      	movs	r3, #8
 8004606:	77fb      	strb	r3, [r7, #31]
 8004608:	e041      	b.n	800468e <UART_SetConfig+0x346>
 800460a:	2310      	movs	r3, #16
 800460c:	77fb      	strb	r3, [r7, #31]
 800460e:	e03e      	b.n	800468e <UART_SetConfig+0x346>
 8004610:	efff69f3 	.word	0xefff69f3
 8004614:	40011000 	.word	0x40011000
 8004618:	40023800 	.word	0x40023800
 800461c:	40004400 	.word	0x40004400
 8004620:	40004800 	.word	0x40004800
 8004624:	40004c00 	.word	0x40004c00
 8004628:	40005000 	.word	0x40005000
 800462c:	40011400 	.word	0x40011400
 8004630:	40007800 	.word	0x40007800
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a71      	ldr	r2, [pc, #452]	; (8004800 <UART_SetConfig+0x4b8>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d125      	bne.n	800468a <UART_SetConfig+0x342>
 800463e:	4b71      	ldr	r3, [pc, #452]	; (8004804 <UART_SetConfig+0x4bc>)
 8004640:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004644:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004648:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800464c:	d017      	beq.n	800467e <UART_SetConfig+0x336>
 800464e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004652:	d817      	bhi.n	8004684 <UART_SetConfig+0x33c>
 8004654:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004658:	d00b      	beq.n	8004672 <UART_SetConfig+0x32a>
 800465a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800465e:	d811      	bhi.n	8004684 <UART_SetConfig+0x33c>
 8004660:	2b00      	cmp	r3, #0
 8004662:	d003      	beq.n	800466c <UART_SetConfig+0x324>
 8004664:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004668:	d006      	beq.n	8004678 <UART_SetConfig+0x330>
 800466a:	e00b      	b.n	8004684 <UART_SetConfig+0x33c>
 800466c:	2300      	movs	r3, #0
 800466e:	77fb      	strb	r3, [r7, #31]
 8004670:	e00d      	b.n	800468e <UART_SetConfig+0x346>
 8004672:	2302      	movs	r3, #2
 8004674:	77fb      	strb	r3, [r7, #31]
 8004676:	e00a      	b.n	800468e <UART_SetConfig+0x346>
 8004678:	2304      	movs	r3, #4
 800467a:	77fb      	strb	r3, [r7, #31]
 800467c:	e007      	b.n	800468e <UART_SetConfig+0x346>
 800467e:	2308      	movs	r3, #8
 8004680:	77fb      	strb	r3, [r7, #31]
 8004682:	e004      	b.n	800468e <UART_SetConfig+0x346>
 8004684:	2310      	movs	r3, #16
 8004686:	77fb      	strb	r3, [r7, #31]
 8004688:	e001      	b.n	800468e <UART_SetConfig+0x346>
 800468a:	2310      	movs	r3, #16
 800468c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	69db      	ldr	r3, [r3, #28]
 8004692:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004696:	d15b      	bne.n	8004750 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8004698:	7ffb      	ldrb	r3, [r7, #31]
 800469a:	2b08      	cmp	r3, #8
 800469c:	d827      	bhi.n	80046ee <UART_SetConfig+0x3a6>
 800469e:	a201      	add	r2, pc, #4	; (adr r2, 80046a4 <UART_SetConfig+0x35c>)
 80046a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046a4:	080046c9 	.word	0x080046c9
 80046a8:	080046d1 	.word	0x080046d1
 80046ac:	080046d9 	.word	0x080046d9
 80046b0:	080046ef 	.word	0x080046ef
 80046b4:	080046df 	.word	0x080046df
 80046b8:	080046ef 	.word	0x080046ef
 80046bc:	080046ef 	.word	0x080046ef
 80046c0:	080046ef 	.word	0x080046ef
 80046c4:	080046e7 	.word	0x080046e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80046c8:	f7fd fd88 	bl	80021dc <HAL_RCC_GetPCLK1Freq>
 80046cc:	61b8      	str	r0, [r7, #24]
        break;
 80046ce:	e013      	b.n	80046f8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80046d0:	f7fd fd98 	bl	8002204 <HAL_RCC_GetPCLK2Freq>
 80046d4:	61b8      	str	r0, [r7, #24]
        break;
 80046d6:	e00f      	b.n	80046f8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80046d8:	4b4b      	ldr	r3, [pc, #300]	; (8004808 <UART_SetConfig+0x4c0>)
 80046da:	61bb      	str	r3, [r7, #24]
        break;
 80046dc:	e00c      	b.n	80046f8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80046de:	f7fd fcbb 	bl	8002058 <HAL_RCC_GetSysClockFreq>
 80046e2:	61b8      	str	r0, [r7, #24]
        break;
 80046e4:	e008      	b.n	80046f8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80046e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80046ea:	61bb      	str	r3, [r7, #24]
        break;
 80046ec:	e004      	b.n	80046f8 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 80046ee:	2300      	movs	r3, #0
 80046f0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80046f2:	2301      	movs	r3, #1
 80046f4:	77bb      	strb	r3, [r7, #30]
        break;
 80046f6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80046f8:	69bb      	ldr	r3, [r7, #24]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d074      	beq.n	80047e8 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80046fe:	69bb      	ldr	r3, [r7, #24]
 8004700:	005a      	lsls	r2, r3, #1
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	085b      	lsrs	r3, r3, #1
 8004708:	441a      	add	r2, r3
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004712:	b29b      	uxth	r3, r3
 8004714:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	2b0f      	cmp	r3, #15
 800471a:	d916      	bls.n	800474a <UART_SetConfig+0x402>
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004722:	d212      	bcs.n	800474a <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004724:	693b      	ldr	r3, [r7, #16]
 8004726:	b29b      	uxth	r3, r3
 8004728:	f023 030f 	bic.w	r3, r3, #15
 800472c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	085b      	lsrs	r3, r3, #1
 8004732:	b29b      	uxth	r3, r3
 8004734:	f003 0307 	and.w	r3, r3, #7
 8004738:	b29a      	uxth	r2, r3
 800473a:	89fb      	ldrh	r3, [r7, #14]
 800473c:	4313      	orrs	r3, r2
 800473e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	89fa      	ldrh	r2, [r7, #14]
 8004746:	60da      	str	r2, [r3, #12]
 8004748:	e04e      	b.n	80047e8 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800474a:	2301      	movs	r3, #1
 800474c:	77bb      	strb	r3, [r7, #30]
 800474e:	e04b      	b.n	80047e8 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004750:	7ffb      	ldrb	r3, [r7, #31]
 8004752:	2b08      	cmp	r3, #8
 8004754:	d827      	bhi.n	80047a6 <UART_SetConfig+0x45e>
 8004756:	a201      	add	r2, pc, #4	; (adr r2, 800475c <UART_SetConfig+0x414>)
 8004758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800475c:	08004781 	.word	0x08004781
 8004760:	08004789 	.word	0x08004789
 8004764:	08004791 	.word	0x08004791
 8004768:	080047a7 	.word	0x080047a7
 800476c:	08004797 	.word	0x08004797
 8004770:	080047a7 	.word	0x080047a7
 8004774:	080047a7 	.word	0x080047a7
 8004778:	080047a7 	.word	0x080047a7
 800477c:	0800479f 	.word	0x0800479f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004780:	f7fd fd2c 	bl	80021dc <HAL_RCC_GetPCLK1Freq>
 8004784:	61b8      	str	r0, [r7, #24]
        break;
 8004786:	e013      	b.n	80047b0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004788:	f7fd fd3c 	bl	8002204 <HAL_RCC_GetPCLK2Freq>
 800478c:	61b8      	str	r0, [r7, #24]
        break;
 800478e:	e00f      	b.n	80047b0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004790:	4b1d      	ldr	r3, [pc, #116]	; (8004808 <UART_SetConfig+0x4c0>)
 8004792:	61bb      	str	r3, [r7, #24]
        break;
 8004794:	e00c      	b.n	80047b0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004796:	f7fd fc5f 	bl	8002058 <HAL_RCC_GetSysClockFreq>
 800479a:	61b8      	str	r0, [r7, #24]
        break;
 800479c:	e008      	b.n	80047b0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800479e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80047a2:	61bb      	str	r3, [r7, #24]
        break;
 80047a4:	e004      	b.n	80047b0 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 80047a6:	2300      	movs	r3, #0
 80047a8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
 80047ac:	77bb      	strb	r3, [r7, #30]
        break;
 80047ae:	bf00      	nop
    }

    if (pclk != 0U)
 80047b0:	69bb      	ldr	r3, [r7, #24]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d018      	beq.n	80047e8 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	085a      	lsrs	r2, r3, #1
 80047bc:	69bb      	ldr	r3, [r7, #24]
 80047be:	441a      	add	r2, r3
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80047c8:	b29b      	uxth	r3, r3
 80047ca:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	2b0f      	cmp	r3, #15
 80047d0:	d908      	bls.n	80047e4 <UART_SetConfig+0x49c>
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047d8:	d204      	bcs.n	80047e4 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	693a      	ldr	r2, [r7, #16]
 80047e0:	60da      	str	r2, [r3, #12]
 80047e2:	e001      	b.n	80047e8 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80047e4:	2301      	movs	r3, #1
 80047e6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2200      	movs	r2, #0
 80047ec:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2200      	movs	r2, #0
 80047f2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80047f4:	7fbb      	ldrb	r3, [r7, #30]
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	3720      	adds	r7, #32
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}
 80047fe:	bf00      	nop
 8004800:	40007c00 	.word	0x40007c00
 8004804:	40023800 	.word	0x40023800
 8004808:	00f42400 	.word	0x00f42400

0800480c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800480c:	b480      	push	{r7}
 800480e:	b083      	sub	sp, #12
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004818:	f003 0301 	and.w	r3, r3, #1
 800481c:	2b00      	cmp	r3, #0
 800481e:	d00a      	beq.n	8004836 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	430a      	orrs	r2, r1
 8004834:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800483a:	f003 0302 	and.w	r3, r3, #2
 800483e:	2b00      	cmp	r3, #0
 8004840:	d00a      	beq.n	8004858 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	430a      	orrs	r2, r1
 8004856:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800485c:	f003 0304 	and.w	r3, r3, #4
 8004860:	2b00      	cmp	r3, #0
 8004862:	d00a      	beq.n	800487a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	430a      	orrs	r2, r1
 8004878:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800487e:	f003 0308 	and.w	r3, r3, #8
 8004882:	2b00      	cmp	r3, #0
 8004884:	d00a      	beq.n	800489c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	430a      	orrs	r2, r1
 800489a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a0:	f003 0310 	and.w	r3, r3, #16
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d00a      	beq.n	80048be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	430a      	orrs	r2, r1
 80048bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c2:	f003 0320 	and.w	r3, r3, #32
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d00a      	beq.n	80048e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	689b      	ldr	r3, [r3, #8]
 80048d0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	430a      	orrs	r2, r1
 80048de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d01a      	beq.n	8004922 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	430a      	orrs	r2, r1
 8004900:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004906:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800490a:	d10a      	bne.n	8004922 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	430a      	orrs	r2, r1
 8004920:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004926:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800492a:	2b00      	cmp	r3, #0
 800492c:	d00a      	beq.n	8004944 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	430a      	orrs	r2, r1
 8004942:	605a      	str	r2, [r3, #4]
  }
}
 8004944:	bf00      	nop
 8004946:	370c      	adds	r7, #12
 8004948:	46bd      	mov	sp, r7
 800494a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494e:	4770      	bx	lr

08004950 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b086      	sub	sp, #24
 8004954:	af02      	add	r7, sp, #8
 8004956:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2200      	movs	r2, #0
 800495c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004960:	f7fc fc56 	bl	8001210 <HAL_GetTick>
 8004964:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f003 0308 	and.w	r3, r3, #8
 8004970:	2b08      	cmp	r3, #8
 8004972:	d10e      	bne.n	8004992 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004974:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004978:	9300      	str	r3, [sp, #0]
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	2200      	movs	r2, #0
 800497e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	f000 f817 	bl	80049b6 <UART_WaitOnFlagUntilTimeout>
 8004988:	4603      	mov	r3, r0
 800498a:	2b00      	cmp	r3, #0
 800498c:	d001      	beq.n	8004992 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800498e:	2303      	movs	r3, #3
 8004990:	e00d      	b.n	80049ae <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2220      	movs	r2, #32
 8004996:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2220      	movs	r2, #32
 800499c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2200      	movs	r2, #0
 80049a2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2200      	movs	r2, #0
 80049a8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80049ac:	2300      	movs	r3, #0
}
 80049ae:	4618      	mov	r0, r3
 80049b0:	3710      	adds	r7, #16
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}

080049b6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80049b6:	b580      	push	{r7, lr}
 80049b8:	b084      	sub	sp, #16
 80049ba:	af00      	add	r7, sp, #0
 80049bc:	60f8      	str	r0, [r7, #12]
 80049be:	60b9      	str	r1, [r7, #8]
 80049c0:	603b      	str	r3, [r7, #0]
 80049c2:	4613      	mov	r3, r2
 80049c4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049c6:	e05e      	b.n	8004a86 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049c8:	69bb      	ldr	r3, [r7, #24]
 80049ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049ce:	d05a      	beq.n	8004a86 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049d0:	f7fc fc1e 	bl	8001210 <HAL_GetTick>
 80049d4:	4602      	mov	r2, r0
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	1ad3      	subs	r3, r2, r3
 80049da:	69ba      	ldr	r2, [r7, #24]
 80049dc:	429a      	cmp	r2, r3
 80049de:	d302      	bcc.n	80049e6 <UART_WaitOnFlagUntilTimeout+0x30>
 80049e0:	69bb      	ldr	r3, [r7, #24]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d11b      	bne.n	8004a1e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	681a      	ldr	r2, [r3, #0]
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80049f4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	689a      	ldr	r2, [r3, #8]
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f022 0201 	bic.w	r2, r2, #1
 8004a04:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2220      	movs	r2, #32
 8004a0a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	2220      	movs	r2, #32
 8004a10:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2200      	movs	r2, #0
 8004a16:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004a1a:	2303      	movs	r3, #3
 8004a1c:	e043      	b.n	8004aa6 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f003 0304 	and.w	r3, r3, #4
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d02c      	beq.n	8004a86 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	69db      	ldr	r3, [r3, #28]
 8004a32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a3a:	d124      	bne.n	8004a86 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004a44:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	681a      	ldr	r2, [r3, #0]
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004a54:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	689a      	ldr	r2, [r3, #8]
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f022 0201 	bic.w	r2, r2, #1
 8004a64:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	2220      	movs	r2, #32
 8004a6a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	2220      	movs	r2, #32
 8004a70:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	2220      	movs	r2, #32
 8004a76:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004a82:	2303      	movs	r3, #3
 8004a84:	e00f      	b.n	8004aa6 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	69da      	ldr	r2, [r3, #28]
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	4013      	ands	r3, r2
 8004a90:	68ba      	ldr	r2, [r7, #8]
 8004a92:	429a      	cmp	r2, r3
 8004a94:	bf0c      	ite	eq
 8004a96:	2301      	moveq	r3, #1
 8004a98:	2300      	movne	r3, #0
 8004a9a:	b2db      	uxtb	r3, r3
 8004a9c:	461a      	mov	r2, r3
 8004a9e:	79fb      	ldrb	r3, [r7, #7]
 8004aa0:	429a      	cmp	r2, r3
 8004aa2:	d091      	beq.n	80049c8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004aa4:	2300      	movs	r3, #0
}
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	3710      	adds	r7, #16
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bd80      	pop	{r7, pc}
	...

08004ab0 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8004ab0:	b084      	sub	sp, #16
 8004ab2:	b480      	push	{r7}
 8004ab4:	b085      	sub	sp, #20
 8004ab6:	af00      	add	r7, sp, #0
 8004ab8:	6078      	str	r0, [r7, #4]
 8004aba:	f107 001c 	add.w	r0, r7, #28
 8004abe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8004ac6:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8004ac8:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8004aca:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8004acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8004ace:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8004ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8004ad2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8004ad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8004ad6:	431a      	orrs	r2, r3
             Init.ClockDiv
 8004ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8004ada:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8004adc:	68fa      	ldr	r2, [r7, #12]
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	685a      	ldr	r2, [r3, #4]
 8004ae6:	4b07      	ldr	r3, [pc, #28]	; (8004b04 <SDMMC_Init+0x54>)
 8004ae8:	4013      	ands	r3, r2
 8004aea:	68fa      	ldr	r2, [r7, #12]
 8004aec:	431a      	orrs	r2, r3
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8004af2:	2300      	movs	r3, #0
}
 8004af4:	4618      	mov	r0, r3
 8004af6:	3714      	adds	r7, #20
 8004af8:	46bd      	mov	sp, r7
 8004afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afe:	b004      	add	sp, #16
 8004b00:	4770      	bx	lr
 8004b02:	bf00      	nop
 8004b04:	ffff8100 	.word	0xffff8100

08004b08 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b083      	sub	sp, #12
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	370c      	adds	r7, #12
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b20:	4770      	bx	lr

08004b22 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 8004b22:	b480      	push	{r7}
 8004b24:	b083      	sub	sp, #12
 8004b26:	af00      	add	r7, sp, #0
 8004b28:	6078      	str	r0, [r7, #4]
 8004b2a:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	681a      	ldr	r2, [r3, #0]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004b36:	2300      	movs	r3, #0
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	370c      	adds	r7, #12
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b42:	4770      	bx	lr

08004b44 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b082      	sub	sp, #8
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2203      	movs	r2, #3
 8004b50:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8004b52:	2002      	movs	r0, #2
 8004b54:	f7fc fb68 	bl	8001228 <HAL_Delay>
  
  return HAL_OK;
 8004b58:	2300      	movs	r3, #0
}
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	3708      	adds	r7, #8
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd80      	pop	{r7, pc}

08004b62 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 8004b62:	b480      	push	{r7}
 8004b64:	b083      	sub	sp, #12
 8004b66:	af00      	add	r7, sp, #0
 8004b68:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f003 0303 	and.w	r3, r3, #3
}
 8004b72:	4618      	mov	r0, r3
 8004b74:	370c      	adds	r7, #12
 8004b76:	46bd      	mov	sp, r7
 8004b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7c:	4770      	bx	lr
	...

08004b80 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8004b80:	b480      	push	{r7}
 8004b82:	b085      	sub	sp, #20
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
 8004b88:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	681a      	ldr	r2, [r3, #0]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004b9e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8004ba4:	431a      	orrs	r2, r3
                       Command->CPSM);
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8004baa:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004bac:	68fa      	ldr	r2, [r7, #12]
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	68da      	ldr	r2, [r3, #12]
 8004bb6:	4b06      	ldr	r3, [pc, #24]	; (8004bd0 <SDMMC_SendCommand+0x50>)
 8004bb8:	4013      	ands	r3, r2
 8004bba:	68fa      	ldr	r2, [r7, #12]
 8004bbc:	431a      	orrs	r2, r3
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8004bc2:	2300      	movs	r3, #0
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	3714      	adds	r7, #20
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bce:	4770      	bx	lr
 8004bd0:	fffff000 	.word	0xfffff000

08004bd4 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b083      	sub	sp, #12
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	691b      	ldr	r3, [r3, #16]
 8004be0:	b2db      	uxtb	r3, r3
}
 8004be2:	4618      	mov	r0, r3
 8004be4:	370c      	adds	r7, #12
 8004be6:	46bd      	mov	sp, r7
 8004be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bec:	4770      	bx	lr

08004bee <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8004bee:	b480      	push	{r7}
 8004bf0:	b085      	sub	sp, #20
 8004bf2:	af00      	add	r7, sp, #0
 8004bf4:	6078      	str	r0, [r7, #4]
 8004bf6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	3314      	adds	r3, #20
 8004bfc:	461a      	mov	r2, r3
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	4413      	add	r3, r2
 8004c02:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
}  
 8004c08:	4618      	mov	r0, r3
 8004c0a:	3714      	adds	r7, #20
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c12:	4770      	bx	lr

08004c14 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8004c14:	b480      	push	{r7}
 8004c16:	b085      	sub	sp, #20
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
 8004c1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004c1e:	2300      	movs	r3, #0
 8004c20:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	681a      	ldr	r2, [r3, #0]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	685a      	ldr	r2, [r3, #4]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004c3a:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8004c40:	431a      	orrs	r2, r3
                       Data->DPSM);
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8004c46:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004c48:	68fa      	ldr	r2, [r7, #12]
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c52:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	431a      	orrs	r2, r3
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8004c5e:	2300      	movs	r3, #0

}
 8004c60:	4618      	mov	r0, r3
 8004c62:	3714      	adds	r7, #20
 8004c64:	46bd      	mov	sp, r7
 8004c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6a:	4770      	bx	lr

08004c6c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b088      	sub	sp, #32
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
 8004c74:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8004c7a:	2310      	movs	r3, #16
 8004c7c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004c7e:	2340      	movs	r3, #64	; 0x40
 8004c80:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004c82:	2300      	movs	r3, #0
 8004c84:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004c86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c8a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004c8c:	f107 0308 	add.w	r3, r7, #8
 8004c90:	4619      	mov	r1, r3
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	f7ff ff74 	bl	8004b80 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8004c98:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c9c:	2110      	movs	r1, #16
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f000 fa02 	bl	80050a8 <SDMMC_GetCmdResp1>
 8004ca4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004ca6:	69fb      	ldr	r3, [r7, #28]
}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	3720      	adds	r7, #32
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bd80      	pop	{r7, pc}

08004cb0 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b088      	sub	sp, #32
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
 8004cb8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8004cbe:	2311      	movs	r3, #17
 8004cc0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004cc2:	2340      	movs	r3, #64	; 0x40
 8004cc4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004cca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004cce:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004cd0:	f107 0308 	add.w	r3, r7, #8
 8004cd4:	4619      	mov	r1, r3
 8004cd6:	6878      	ldr	r0, [r7, #4]
 8004cd8:	f7ff ff52 	bl	8004b80 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8004cdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ce0:	2111      	movs	r1, #17
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	f000 f9e0 	bl	80050a8 <SDMMC_GetCmdResp1>
 8004ce8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004cea:	69fb      	ldr	r3, [r7, #28]
}
 8004cec:	4618      	mov	r0, r3
 8004cee:	3720      	adds	r7, #32
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bd80      	pop	{r7, pc}

08004cf4 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b088      	sub	sp, #32
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
 8004cfc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8004d02:	2312      	movs	r3, #18
 8004d04:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004d06:	2340      	movs	r3, #64	; 0x40
 8004d08:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004d0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d12:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004d14:	f107 0308 	add.w	r3, r7, #8
 8004d18:	4619      	mov	r1, r3
 8004d1a:	6878      	ldr	r0, [r7, #4]
 8004d1c:	f7ff ff30 	bl	8004b80 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8004d20:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d24:	2112      	movs	r1, #18
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	f000 f9be 	bl	80050a8 <SDMMC_GetCmdResp1>
 8004d2c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004d2e:	69fb      	ldr	r3, [r7, #28]
}
 8004d30:	4618      	mov	r0, r3
 8004d32:	3720      	adds	r7, #32
 8004d34:	46bd      	mov	sp, r7
 8004d36:	bd80      	pop	{r7, pc}

08004d38 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b088      	sub	sp, #32
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
 8004d40:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8004d46:	2318      	movs	r3, #24
 8004d48:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004d4a:	2340      	movs	r3, #64	; 0x40
 8004d4c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004d4e:	2300      	movs	r3, #0
 8004d50:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004d52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d56:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004d58:	f107 0308 	add.w	r3, r7, #8
 8004d5c:	4619      	mov	r1, r3
 8004d5e:	6878      	ldr	r0, [r7, #4]
 8004d60:	f7ff ff0e 	bl	8004b80 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8004d64:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d68:	2118      	movs	r1, #24
 8004d6a:	6878      	ldr	r0, [r7, #4]
 8004d6c:	f000 f99c 	bl	80050a8 <SDMMC_GetCmdResp1>
 8004d70:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004d72:	69fb      	ldr	r3, [r7, #28]
}
 8004d74:	4618      	mov	r0, r3
 8004d76:	3720      	adds	r7, #32
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	bd80      	pop	{r7, pc}

08004d7c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b088      	sub	sp, #32
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
 8004d84:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8004d8a:	2319      	movs	r3, #25
 8004d8c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004d8e:	2340      	movs	r3, #64	; 0x40
 8004d90:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004d92:	2300      	movs	r3, #0
 8004d94:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004d96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d9a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004d9c:	f107 0308 	add.w	r3, r7, #8
 8004da0:	4619      	mov	r1, r3
 8004da2:	6878      	ldr	r0, [r7, #4]
 8004da4:	f7ff feec 	bl	8004b80 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8004da8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dac:	2119      	movs	r1, #25
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	f000 f97a 	bl	80050a8 <SDMMC_GetCmdResp1>
 8004db4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004db6:	69fb      	ldr	r3, [r7, #28]
}
 8004db8:	4618      	mov	r0, r3
 8004dba:	3720      	adds	r7, #32
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	bd80      	pop	{r7, pc}

08004dc0 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b088      	sub	sp, #32
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8004dc8:	2300      	movs	r3, #0
 8004dca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8004dcc:	230c      	movs	r3, #12
 8004dce:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004dd0:	2340      	movs	r3, #64	; 0x40
 8004dd2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004dd8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ddc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004dde:	f107 0308 	add.w	r3, r7, #8
 8004de2:	4619      	mov	r1, r3
 8004de4:	6878      	ldr	r0, [r7, #4]
 8004de6:	f7ff fecb 	bl	8004b80 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8004dea:	4a05      	ldr	r2, [pc, #20]	; (8004e00 <SDMMC_CmdStopTransfer+0x40>)
 8004dec:	210c      	movs	r1, #12
 8004dee:	6878      	ldr	r0, [r7, #4]
 8004df0:	f000 f95a 	bl	80050a8 <SDMMC_GetCmdResp1>
 8004df4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004df6:	69fb      	ldr	r3, [r7, #28]
}
 8004df8:	4618      	mov	r0, r3
 8004dfa:	3720      	adds	r7, #32
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bd80      	pop	{r7, pc}
 8004e00:	05f5e100 	.word	0x05f5e100

08004e04 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b08a      	sub	sp, #40	; 0x28
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	60f8      	str	r0, [r7, #12]
 8004e0c:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8004e14:	2307      	movs	r3, #7
 8004e16:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004e18:	2340      	movs	r3, #64	; 0x40
 8004e1a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004e20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e24:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004e26:	f107 0310 	add.w	r3, r7, #16
 8004e2a:	4619      	mov	r1, r3
 8004e2c:	68f8      	ldr	r0, [r7, #12]
 8004e2e:	f7ff fea7 	bl	8004b80 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8004e32:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e36:	2107      	movs	r1, #7
 8004e38:	68f8      	ldr	r0, [r7, #12]
 8004e3a:	f000 f935 	bl	80050a8 <SDMMC_GetCmdResp1>
 8004e3e:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8004e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004e42:	4618      	mov	r0, r3
 8004e44:	3728      	adds	r7, #40	; 0x28
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bd80      	pop	{r7, pc}

08004e4a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8004e4a:	b580      	push	{r7, lr}
 8004e4c:	b088      	sub	sp, #32
 8004e4e:	af00      	add	r7, sp, #0
 8004e50:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8004e52:	2300      	movs	r3, #0
 8004e54:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8004e56:	2300      	movs	r3, #0
 8004e58:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004e5e:	2300      	movs	r3, #0
 8004e60:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004e62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e66:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004e68:	f107 0308 	add.w	r3, r7, #8
 8004e6c:	4619      	mov	r1, r3
 8004e6e:	6878      	ldr	r0, [r7, #4]
 8004e70:	f7ff fe86 	bl	8004b80 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8004e74:	6878      	ldr	r0, [r7, #4]
 8004e76:	f000 f8eb 	bl	8005050 <SDMMC_GetCmdError>
 8004e7a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004e7c:	69fb      	ldr	r3, [r7, #28]
}
 8004e7e:	4618      	mov	r0, r3
 8004e80:	3720      	adds	r7, #32
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}

08004e86 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8004e86:	b580      	push	{r7, lr}
 8004e88:	b088      	sub	sp, #32
 8004e8a:	af00      	add	r7, sp, #0
 8004e8c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8004e8e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8004e92:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8004e94:	2308      	movs	r3, #8
 8004e96:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004e98:	2340      	movs	r3, #64	; 0x40
 8004e9a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004ea0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ea4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004ea6:	f107 0308 	add.w	r3, r7, #8
 8004eaa:	4619      	mov	r1, r3
 8004eac:	6878      	ldr	r0, [r7, #4]
 8004eae:	f7ff fe67 	bl	8004b80 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8004eb2:	6878      	ldr	r0, [r7, #4]
 8004eb4:	f000 fae2 	bl	800547c <SDMMC_GetCmdResp7>
 8004eb8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004eba:	69fb      	ldr	r3, [r7, #28]
}
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	3720      	adds	r7, #32
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bd80      	pop	{r7, pc}

08004ec4 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b088      	sub	sp, #32
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
 8004ecc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8004ed2:	2337      	movs	r3, #55	; 0x37
 8004ed4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004ed6:	2340      	movs	r3, #64	; 0x40
 8004ed8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004eda:	2300      	movs	r3, #0
 8004edc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004ede:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ee2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004ee4:	f107 0308 	add.w	r3, r7, #8
 8004ee8:	4619      	mov	r1, r3
 8004eea:	6878      	ldr	r0, [r7, #4]
 8004eec:	f7ff fe48 	bl	8004b80 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8004ef0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ef4:	2137      	movs	r1, #55	; 0x37
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f000 f8d6 	bl	80050a8 <SDMMC_GetCmdResp1>
 8004efc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004efe:	69fb      	ldr	r3, [r7, #28]
}
 8004f00:	4618      	mov	r0, r3
 8004f02:	3720      	adds	r7, #32
 8004f04:	46bd      	mov	sp, r7
 8004f06:	bd80      	pop	{r7, pc}

08004f08 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b088      	sub	sp, #32
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
 8004f10:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8004f12:	683a      	ldr	r2, [r7, #0]
 8004f14:	4b0d      	ldr	r3, [pc, #52]	; (8004f4c <SDMMC_CmdAppOperCommand+0x44>)
 8004f16:	4313      	orrs	r3, r2
 8004f18:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8004f1a:	2329      	movs	r3, #41	; 0x29
 8004f1c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004f1e:	2340      	movs	r3, #64	; 0x40
 8004f20:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004f22:	2300      	movs	r3, #0
 8004f24:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004f26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f2a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004f2c:	f107 0308 	add.w	r3, r7, #8
 8004f30:	4619      	mov	r1, r3
 8004f32:	6878      	ldr	r0, [r7, #4]
 8004f34:	f7ff fe24 	bl	8004b80 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8004f38:	6878      	ldr	r0, [r7, #4]
 8004f3a:	f000 f9eb 	bl	8005314 <SDMMC_GetCmdResp3>
 8004f3e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004f40:	69fb      	ldr	r3, [r7, #28]
}
 8004f42:	4618      	mov	r0, r3
 8004f44:	3720      	adds	r7, #32
 8004f46:	46bd      	mov	sp, r7
 8004f48:	bd80      	pop	{r7, pc}
 8004f4a:	bf00      	nop
 8004f4c:	80100000 	.word	0x80100000

08004f50 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b088      	sub	sp, #32
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8004f58:	2300      	movs	r3, #0
 8004f5a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8004f5c:	2302      	movs	r3, #2
 8004f5e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8004f60:	23c0      	movs	r3, #192	; 0xc0
 8004f62:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004f64:	2300      	movs	r3, #0
 8004f66:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004f68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f6c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004f6e:	f107 0308 	add.w	r3, r7, #8
 8004f72:	4619      	mov	r1, r3
 8004f74:	6878      	ldr	r0, [r7, #4]
 8004f76:	f7ff fe03 	bl	8004b80 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8004f7a:	6878      	ldr	r0, [r7, #4]
 8004f7c:	f000 f982 	bl	8005284 <SDMMC_GetCmdResp2>
 8004f80:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004f82:	69fb      	ldr	r3, [r7, #28]
}
 8004f84:	4618      	mov	r0, r3
 8004f86:	3720      	adds	r7, #32
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	bd80      	pop	{r7, pc}

08004f8c <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b088      	sub	sp, #32
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
 8004f94:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8004f9a:	2309      	movs	r3, #9
 8004f9c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8004f9e:	23c0      	movs	r3, #192	; 0xc0
 8004fa0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004fa6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004faa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004fac:	f107 0308 	add.w	r3, r7, #8
 8004fb0:	4619      	mov	r1, r3
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	f7ff fde4 	bl	8004b80 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8004fb8:	6878      	ldr	r0, [r7, #4]
 8004fba:	f000 f963 	bl	8005284 <SDMMC_GetCmdResp2>
 8004fbe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004fc0:	69fb      	ldr	r3, [r7, #28]
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	3720      	adds	r7, #32
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}

08004fca <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8004fca:	b580      	push	{r7, lr}
 8004fcc:	b088      	sub	sp, #32
 8004fce:	af00      	add	r7, sp, #0
 8004fd0:	6078      	str	r0, [r7, #4]
 8004fd2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8004fd8:	2303      	movs	r3, #3
 8004fda:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004fdc:	2340      	movs	r3, #64	; 0x40
 8004fde:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004fe4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004fe8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004fea:	f107 0308 	add.w	r3, r7, #8
 8004fee:	4619      	mov	r1, r3
 8004ff0:	6878      	ldr	r0, [r7, #4]
 8004ff2:	f7ff fdc5 	bl	8004b80 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8004ff6:	683a      	ldr	r2, [r7, #0]
 8004ff8:	2103      	movs	r1, #3
 8004ffa:	6878      	ldr	r0, [r7, #4]
 8004ffc:	f000 f9c8 	bl	8005390 <SDMMC_GetCmdResp6>
 8005000:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005002:	69fb      	ldr	r3, [r7, #28]
}
 8005004:	4618      	mov	r0, r3
 8005006:	3720      	adds	r7, #32
 8005008:	46bd      	mov	sp, r7
 800500a:	bd80      	pop	{r7, pc}

0800500c <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b088      	sub	sp, #32
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
 8005014:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800501a:	230d      	movs	r3, #13
 800501c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800501e:	2340      	movs	r3, #64	; 0x40
 8005020:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005022:	2300      	movs	r3, #0
 8005024:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005026:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800502a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800502c:	f107 0308 	add.w	r3, r7, #8
 8005030:	4619      	mov	r1, r3
 8005032:	6878      	ldr	r0, [r7, #4]
 8005034:	f7ff fda4 	bl	8004b80 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8005038:	f241 3288 	movw	r2, #5000	; 0x1388
 800503c:	210d      	movs	r1, #13
 800503e:	6878      	ldr	r0, [r7, #4]
 8005040:	f000 f832 	bl	80050a8 <SDMMC_GetCmdResp1>
 8005044:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005046:	69fb      	ldr	r3, [r7, #28]
}
 8005048:	4618      	mov	r0, r3
 800504a:	3720      	adds	r7, #32
 800504c:	46bd      	mov	sp, r7
 800504e:	bd80      	pop	{r7, pc}

08005050 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8005050:	b480      	push	{r7}
 8005052:	b085      	sub	sp, #20
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005058:	4b11      	ldr	r3, [pc, #68]	; (80050a0 <SDMMC_GetCmdError+0x50>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a11      	ldr	r2, [pc, #68]	; (80050a4 <SDMMC_GetCmdError+0x54>)
 800505e:	fba2 2303 	umull	r2, r3, r2, r3
 8005062:	0a5b      	lsrs	r3, r3, #9
 8005064:	f241 3288 	movw	r2, #5000	; 0x1388
 8005068:	fb02 f303 	mul.w	r3, r2, r3
 800506c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	1e5a      	subs	r2, r3, #1
 8005072:	60fa      	str	r2, [r7, #12]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d102      	bne.n	800507e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005078:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800507c:	e009      	b.n	8005092 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005082:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005086:	2b00      	cmp	r3, #0
 8005088:	d0f1      	beq.n	800506e <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	22c5      	movs	r2, #197	; 0xc5
 800508e:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8005090:	2300      	movs	r3, #0
}
 8005092:	4618      	mov	r0, r3
 8005094:	3714      	adds	r7, #20
 8005096:	46bd      	mov	sp, r7
 8005098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509c:	4770      	bx	lr
 800509e:	bf00      	nop
 80050a0:	20000120 	.word	0x20000120
 80050a4:	10624dd3 	.word	0x10624dd3

080050a8 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b088      	sub	sp, #32
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	60f8      	str	r0, [r7, #12]
 80050b0:	460b      	mov	r3, r1
 80050b2:	607a      	str	r2, [r7, #4]
 80050b4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80050b6:	4b70      	ldr	r3, [pc, #448]	; (8005278 <SDMMC_GetCmdResp1+0x1d0>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a70      	ldr	r2, [pc, #448]	; (800527c <SDMMC_GetCmdResp1+0x1d4>)
 80050bc:	fba2 2303 	umull	r2, r3, r2, r3
 80050c0:	0a5a      	lsrs	r2, r3, #9
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	fb02 f303 	mul.w	r3, r2, r3
 80050c8:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80050ca:	69fb      	ldr	r3, [r7, #28]
 80050cc:	1e5a      	subs	r2, r3, #1
 80050ce:	61fa      	str	r2, [r7, #28]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d102      	bne.n	80050da <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80050d4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80050d8:	e0c9      	b.n	800526e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050de:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80050e0:	69bb      	ldr	r3, [r7, #24]
 80050e2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d0ef      	beq.n	80050ca <SDMMC_GetCmdResp1+0x22>
 80050ea:	69bb      	ldr	r3, [r7, #24]
 80050ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d1ea      	bne.n	80050ca <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050f8:	f003 0304 	and.w	r3, r3, #4
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d004      	beq.n	800510a <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	2204      	movs	r2, #4
 8005104:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005106:	2304      	movs	r3, #4
 8005108:	e0b1      	b.n	800526e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800510e:	f003 0301 	and.w	r3, r3, #1
 8005112:	2b00      	cmp	r3, #0
 8005114:	d004      	beq.n	8005120 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	2201      	movs	r2, #1
 800511a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800511c:	2301      	movs	r3, #1
 800511e:	e0a6      	b.n	800526e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	22c5      	movs	r2, #197	; 0xc5
 8005124:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8005126:	68f8      	ldr	r0, [r7, #12]
 8005128:	f7ff fd54 	bl	8004bd4 <SDMMC_GetCommandResponse>
 800512c:	4603      	mov	r3, r0
 800512e:	461a      	mov	r2, r3
 8005130:	7afb      	ldrb	r3, [r7, #11]
 8005132:	4293      	cmp	r3, r2
 8005134:	d001      	beq.n	800513a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005136:	2301      	movs	r3, #1
 8005138:	e099      	b.n	800526e <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800513a:	2100      	movs	r1, #0
 800513c:	68f8      	ldr	r0, [r7, #12]
 800513e:	f7ff fd56 	bl	8004bee <SDMMC_GetResponse>
 8005142:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8005144:	697a      	ldr	r2, [r7, #20]
 8005146:	4b4e      	ldr	r3, [pc, #312]	; (8005280 <SDMMC_GetCmdResp1+0x1d8>)
 8005148:	4013      	ands	r3, r2
 800514a:	2b00      	cmp	r3, #0
 800514c:	d101      	bne.n	8005152 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800514e:	2300      	movs	r3, #0
 8005150:	e08d      	b.n	800526e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8005152:	697b      	ldr	r3, [r7, #20]
 8005154:	2b00      	cmp	r3, #0
 8005156:	da02      	bge.n	800515e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8005158:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800515c:	e087      	b.n	800526e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800515e:	697b      	ldr	r3, [r7, #20]
 8005160:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005164:	2b00      	cmp	r3, #0
 8005166:	d001      	beq.n	800516c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8005168:	2340      	movs	r3, #64	; 0x40
 800516a:	e080      	b.n	800526e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005172:	2b00      	cmp	r3, #0
 8005174:	d001      	beq.n	800517a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8005176:	2380      	movs	r3, #128	; 0x80
 8005178:	e079      	b.n	800526e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800517a:	697b      	ldr	r3, [r7, #20]
 800517c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005180:	2b00      	cmp	r3, #0
 8005182:	d002      	beq.n	800518a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8005184:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005188:	e071      	b.n	800526e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800518a:	697b      	ldr	r3, [r7, #20]
 800518c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005190:	2b00      	cmp	r3, #0
 8005192:	d002      	beq.n	800519a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8005194:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005198:	e069      	b.n	800526e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d002      	beq.n	80051aa <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80051a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80051a8:	e061      	b.n	800526e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d002      	beq.n	80051ba <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80051b4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80051b8:	e059      	b.n	800526e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d002      	beq.n	80051ca <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80051c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80051c8:	e051      	b.n	800526e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80051ca:	697b      	ldr	r3, [r7, #20]
 80051cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d002      	beq.n	80051da <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80051d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80051d8:	e049      	b.n	800526e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d002      	beq.n	80051ea <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80051e4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80051e8:	e041      	b.n	800526e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d002      	beq.n	80051fa <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80051f4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051f8:	e039      	b.n	800526e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005200:	2b00      	cmp	r3, #0
 8005202:	d002      	beq.n	800520a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8005204:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005208:	e031      	b.n	800526e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005210:	2b00      	cmp	r3, #0
 8005212:	d002      	beq.n	800521a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8005214:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005218:	e029      	b.n	800526e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800521a:	697b      	ldr	r3, [r7, #20]
 800521c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005220:	2b00      	cmp	r3, #0
 8005222:	d002      	beq.n	800522a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8005224:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005228:	e021      	b.n	800526e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800522a:	697b      	ldr	r3, [r7, #20]
 800522c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005230:	2b00      	cmp	r3, #0
 8005232:	d002      	beq.n	800523a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8005234:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005238:	e019      	b.n	800526e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800523a:	697b      	ldr	r3, [r7, #20]
 800523c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005240:	2b00      	cmp	r3, #0
 8005242:	d002      	beq.n	800524a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8005244:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005248:	e011      	b.n	800526e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005250:	2b00      	cmp	r3, #0
 8005252:	d002      	beq.n	800525a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8005254:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005258:	e009      	b.n	800526e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	f003 0308 	and.w	r3, r3, #8
 8005260:	2b00      	cmp	r3, #0
 8005262:	d002      	beq.n	800526a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8005264:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8005268:	e001      	b.n	800526e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800526a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800526e:	4618      	mov	r0, r3
 8005270:	3720      	adds	r7, #32
 8005272:	46bd      	mov	sp, r7
 8005274:	bd80      	pop	{r7, pc}
 8005276:	bf00      	nop
 8005278:	20000120 	.word	0x20000120
 800527c:	10624dd3 	.word	0x10624dd3
 8005280:	fdffe008 	.word	0xfdffe008

08005284 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8005284:	b480      	push	{r7}
 8005286:	b085      	sub	sp, #20
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800528c:	4b1f      	ldr	r3, [pc, #124]	; (800530c <SDMMC_GetCmdResp2+0x88>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4a1f      	ldr	r2, [pc, #124]	; (8005310 <SDMMC_GetCmdResp2+0x8c>)
 8005292:	fba2 2303 	umull	r2, r3, r2, r3
 8005296:	0a5b      	lsrs	r3, r3, #9
 8005298:	f241 3288 	movw	r2, #5000	; 0x1388
 800529c:	fb02 f303 	mul.w	r3, r2, r3
 80052a0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	1e5a      	subs	r2, r3, #1
 80052a6:	60fa      	str	r2, [r7, #12]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d102      	bne.n	80052b2 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80052ac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80052b0:	e026      	b.n	8005300 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052b6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d0ef      	beq.n	80052a2 <SDMMC_GetCmdResp2+0x1e>
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d1ea      	bne.n	80052a2 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052d0:	f003 0304 	and.w	r3, r3, #4
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d004      	beq.n	80052e2 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2204      	movs	r2, #4
 80052dc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80052de:	2304      	movs	r3, #4
 80052e0:	e00e      	b.n	8005300 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052e6:	f003 0301 	and.w	r3, r3, #1
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d004      	beq.n	80052f8 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2201      	movs	r2, #1
 80052f2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80052f4:	2301      	movs	r3, #1
 80052f6:	e003      	b.n	8005300 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	22c5      	movs	r2, #197	; 0xc5
 80052fc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80052fe:	2300      	movs	r3, #0
}
 8005300:	4618      	mov	r0, r3
 8005302:	3714      	adds	r7, #20
 8005304:	46bd      	mov	sp, r7
 8005306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530a:	4770      	bx	lr
 800530c:	20000120 	.word	0x20000120
 8005310:	10624dd3 	.word	0x10624dd3

08005314 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8005314:	b480      	push	{r7}
 8005316:	b085      	sub	sp, #20
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800531c:	4b1a      	ldr	r3, [pc, #104]	; (8005388 <SDMMC_GetCmdResp3+0x74>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a1a      	ldr	r2, [pc, #104]	; (800538c <SDMMC_GetCmdResp3+0x78>)
 8005322:	fba2 2303 	umull	r2, r3, r2, r3
 8005326:	0a5b      	lsrs	r3, r3, #9
 8005328:	f241 3288 	movw	r2, #5000	; 0x1388
 800532c:	fb02 f303 	mul.w	r3, r2, r3
 8005330:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	1e5a      	subs	r2, r3, #1
 8005336:	60fa      	str	r2, [r7, #12]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d102      	bne.n	8005342 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800533c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005340:	e01b      	b.n	800537a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005346:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800534e:	2b00      	cmp	r3, #0
 8005350:	d0ef      	beq.n	8005332 <SDMMC_GetCmdResp3+0x1e>
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005358:	2b00      	cmp	r3, #0
 800535a:	d1ea      	bne.n	8005332 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005360:	f003 0304 	and.w	r3, r3, #4
 8005364:	2b00      	cmp	r3, #0
 8005366:	d004      	beq.n	8005372 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2204      	movs	r2, #4
 800536c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800536e:	2304      	movs	r3, #4
 8005370:	e003      	b.n	800537a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	22c5      	movs	r2, #197	; 0xc5
 8005376:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005378:	2300      	movs	r3, #0
}
 800537a:	4618      	mov	r0, r3
 800537c:	3714      	adds	r7, #20
 800537e:	46bd      	mov	sp, r7
 8005380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005384:	4770      	bx	lr
 8005386:	bf00      	nop
 8005388:	20000120 	.word	0x20000120
 800538c:	10624dd3 	.word	0x10624dd3

08005390 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b088      	sub	sp, #32
 8005394:	af00      	add	r7, sp, #0
 8005396:	60f8      	str	r0, [r7, #12]
 8005398:	460b      	mov	r3, r1
 800539a:	607a      	str	r2, [r7, #4]
 800539c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800539e:	4b35      	ldr	r3, [pc, #212]	; (8005474 <SDMMC_GetCmdResp6+0xe4>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4a35      	ldr	r2, [pc, #212]	; (8005478 <SDMMC_GetCmdResp6+0xe8>)
 80053a4:	fba2 2303 	umull	r2, r3, r2, r3
 80053a8:	0a5b      	lsrs	r3, r3, #9
 80053aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80053ae:	fb02 f303 	mul.w	r3, r2, r3
 80053b2:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80053b4:	69fb      	ldr	r3, [r7, #28]
 80053b6:	1e5a      	subs	r2, r3, #1
 80053b8:	61fa      	str	r2, [r7, #28]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d102      	bne.n	80053c4 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80053be:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80053c2:	e052      	b.n	800546a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053c8:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80053ca:	69bb      	ldr	r3, [r7, #24]
 80053cc:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d0ef      	beq.n	80053b4 <SDMMC_GetCmdResp6+0x24>
 80053d4:	69bb      	ldr	r3, [r7, #24]
 80053d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d1ea      	bne.n	80053b4 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053e2:	f003 0304 	and.w	r3, r3, #4
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d004      	beq.n	80053f4 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	2204      	movs	r2, #4
 80053ee:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80053f0:	2304      	movs	r3, #4
 80053f2:	e03a      	b.n	800546a <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053f8:	f003 0301 	and.w	r3, r3, #1
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d004      	beq.n	800540a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	2201      	movs	r2, #1
 8005404:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005406:	2301      	movs	r3, #1
 8005408:	e02f      	b.n	800546a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800540a:	68f8      	ldr	r0, [r7, #12]
 800540c:	f7ff fbe2 	bl	8004bd4 <SDMMC_GetCommandResponse>
 8005410:	4603      	mov	r3, r0
 8005412:	461a      	mov	r2, r3
 8005414:	7afb      	ldrb	r3, [r7, #11]
 8005416:	4293      	cmp	r3, r2
 8005418:	d001      	beq.n	800541e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800541a:	2301      	movs	r3, #1
 800541c:	e025      	b.n	800546a <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	22c5      	movs	r2, #197	; 0xc5
 8005422:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8005424:	2100      	movs	r1, #0
 8005426:	68f8      	ldr	r0, [r7, #12]
 8005428:	f7ff fbe1 	bl	8004bee <SDMMC_GetResponse>
 800542c:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8005434:	2b00      	cmp	r3, #0
 8005436:	d106      	bne.n	8005446 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	0c1b      	lsrs	r3, r3, #16
 800543c:	b29a      	uxth	r2, r3
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8005442:	2300      	movs	r3, #0
 8005444:	e011      	b.n	800546a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8005446:	697b      	ldr	r3, [r7, #20]
 8005448:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800544c:	2b00      	cmp	r3, #0
 800544e:	d002      	beq.n	8005456 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005450:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005454:	e009      	b.n	800546a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8005456:	697b      	ldr	r3, [r7, #20]
 8005458:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800545c:	2b00      	cmp	r3, #0
 800545e:	d002      	beq.n	8005466 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005460:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005464:	e001      	b.n	800546a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005466:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800546a:	4618      	mov	r0, r3
 800546c:	3720      	adds	r7, #32
 800546e:	46bd      	mov	sp, r7
 8005470:	bd80      	pop	{r7, pc}
 8005472:	bf00      	nop
 8005474:	20000120 	.word	0x20000120
 8005478:	10624dd3 	.word	0x10624dd3

0800547c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800547c:	b480      	push	{r7}
 800547e:	b085      	sub	sp, #20
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005484:	4b22      	ldr	r3, [pc, #136]	; (8005510 <SDMMC_GetCmdResp7+0x94>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a22      	ldr	r2, [pc, #136]	; (8005514 <SDMMC_GetCmdResp7+0x98>)
 800548a:	fba2 2303 	umull	r2, r3, r2, r3
 800548e:	0a5b      	lsrs	r3, r3, #9
 8005490:	f241 3288 	movw	r2, #5000	; 0x1388
 8005494:	fb02 f303 	mul.w	r3, r2, r3
 8005498:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	1e5a      	subs	r2, r3, #1
 800549e:	60fa      	str	r2, [r7, #12]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d102      	bne.n	80054aa <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80054a4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80054a8:	e02c      	b.n	8005504 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054ae:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d0ef      	beq.n	800549a <SDMMC_GetCmdResp7+0x1e>
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d1ea      	bne.n	800549a <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054c8:	f003 0304 	and.w	r3, r3, #4
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d004      	beq.n	80054da <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2204      	movs	r2, #4
 80054d4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80054d6:	2304      	movs	r3, #4
 80054d8:	e014      	b.n	8005504 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054de:	f003 0301 	and.w	r3, r3, #1
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d004      	beq.n	80054f0 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2201      	movs	r2, #1
 80054ea:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80054ec:	2301      	movs	r3, #1
 80054ee:	e009      	b.n	8005504 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d002      	beq.n	8005502 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2240      	movs	r2, #64	; 0x40
 8005500:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005502:	2300      	movs	r3, #0
  
}
 8005504:	4618      	mov	r0, r3
 8005506:	3714      	adds	r7, #20
 8005508:	46bd      	mov	sp, r7
 800550a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550e:	4770      	bx	lr
 8005510:	20000120 	.word	0x20000120
 8005514:	10624dd3 	.word	0x10624dd3

08005518 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800551c:	4904      	ldr	r1, [pc, #16]	; (8005530 <MX_FATFS_Init+0x18>)
 800551e:	4805      	ldr	r0, [pc, #20]	; (8005534 <MX_FATFS_Init+0x1c>)
 8005520:	f002 ff58 	bl	80083d4 <FATFS_LinkDriver>
 8005524:	4603      	mov	r3, r0
 8005526:	461a      	mov	r2, r3
 8005528:	4b03      	ldr	r3, [pc, #12]	; (8005538 <MX_FATFS_Init+0x20>)
 800552a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800552c:	bf00      	nop
 800552e:	bd80      	pop	{r7, pc}
 8005530:	2001fb5c 	.word	0x2001fb5c
 8005534:	08008654 	.word	0x08008654
 8005538:	2001fb58 	.word	0x2001fb58

0800553c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800553c:	b480      	push	{r7}
 800553e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8005540:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8005542:	4618      	mov	r0, r3
 8005544:	46bd      	mov	sp, r7
 8005546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554a:	4770      	bx	lr

0800554c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b082      	sub	sp, #8
 8005550:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8005552:	2300      	movs	r3, #0
 8005554:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8005556:	f000 f86b 	bl	8005630 <BSP_SD_IsDetected>
 800555a:	4603      	mov	r3, r0
 800555c:	2b01      	cmp	r3, #1
 800555e:	d001      	beq.n	8005564 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8005560:	2302      	movs	r3, #2
 8005562:	e005      	b.n	8005570 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8005564:	4804      	ldr	r0, [pc, #16]	; (8005578 <BSP_SD_Init+0x2c>)
 8005566:	f7fd fa51 	bl	8002a0c <HAL_SD_Init>
 800556a:	4603      	mov	r3, r0
 800556c:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800556e:	79fb      	ldrb	r3, [r7, #7]
}
 8005570:	4618      	mov	r0, r3
 8005572:	3708      	adds	r7, #8
 8005574:	46bd      	mov	sp, r7
 8005576:	bd80      	pop	{r7, pc}
 8005578:	200003b0 	.word	0x200003b0

0800557c <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b088      	sub	sp, #32
 8005580:	af02      	add	r7, sp, #8
 8005582:	60f8      	str	r0, [r7, #12]
 8005584:	60b9      	str	r1, [r7, #8]
 8005586:	607a      	str	r2, [r7, #4]
 8005588:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800558a:	2300      	movs	r3, #0
 800558c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	9300      	str	r3, [sp, #0]
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	68ba      	ldr	r2, [r7, #8]
 8005596:	68f9      	ldr	r1, [r7, #12]
 8005598:	4806      	ldr	r0, [pc, #24]	; (80055b4 <BSP_SD_ReadBlocks+0x38>)
 800559a:	f7fd faed 	bl	8002b78 <HAL_SD_ReadBlocks>
 800559e:	4603      	mov	r3, r0
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d001      	beq.n	80055a8 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 80055a4:	2301      	movs	r3, #1
 80055a6:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80055a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80055aa:	4618      	mov	r0, r3
 80055ac:	3718      	adds	r7, #24
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bd80      	pop	{r7, pc}
 80055b2:	bf00      	nop
 80055b4:	200003b0 	.word	0x200003b0

080055b8 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b088      	sub	sp, #32
 80055bc:	af02      	add	r7, sp, #8
 80055be:	60f8      	str	r0, [r7, #12]
 80055c0:	60b9      	str	r1, [r7, #8]
 80055c2:	607a      	str	r2, [r7, #4]
 80055c4:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 80055c6:	2300      	movs	r3, #0
 80055c8:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	9300      	str	r3, [sp, #0]
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	68ba      	ldr	r2, [r7, #8]
 80055d2:	68f9      	ldr	r1, [r7, #12]
 80055d4:	4806      	ldr	r0, [pc, #24]	; (80055f0 <BSP_SD_WriteBlocks+0x38>)
 80055d6:	f7fd fcad 	bl	8002f34 <HAL_SD_WriteBlocks>
 80055da:	4603      	mov	r3, r0
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d001      	beq.n	80055e4 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 80055e0:	2301      	movs	r3, #1
 80055e2:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80055e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80055e6:	4618      	mov	r0, r3
 80055e8:	3718      	adds	r7, #24
 80055ea:	46bd      	mov	sp, r7
 80055ec:	bd80      	pop	{r7, pc}
 80055ee:	bf00      	nop
 80055f0:	200003b0 	.word	0x200003b0

080055f4 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80055f8:	4805      	ldr	r0, [pc, #20]	; (8005610 <BSP_SD_GetCardState+0x1c>)
 80055fa:	f7fd fff1 	bl	80035e0 <HAL_SD_GetCardState>
 80055fe:	4603      	mov	r3, r0
 8005600:	2b04      	cmp	r3, #4
 8005602:	bf14      	ite	ne
 8005604:	2301      	movne	r3, #1
 8005606:	2300      	moveq	r3, #0
 8005608:	b2db      	uxtb	r3, r3
}
 800560a:	4618      	mov	r0, r3
 800560c:	bd80      	pop	{r7, pc}
 800560e:	bf00      	nop
 8005610:	200003b0 	.word	0x200003b0

08005614 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b082      	sub	sp, #8
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800561c:	6879      	ldr	r1, [r7, #4]
 800561e:	4803      	ldr	r0, [pc, #12]	; (800562c <BSP_SD_GetCardInfo+0x18>)
 8005620:	f7fd ffb2 	bl	8003588 <HAL_SD_GetCardInfo>
}
 8005624:	bf00      	nop
 8005626:	3708      	adds	r7, #8
 8005628:	46bd      	mov	sp, r7
 800562a:	bd80      	pop	{r7, pc}
 800562c:	200003b0 	.word	0x200003b0

08005630 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8005630:	b480      	push	{r7}
 8005632:	b083      	sub	sp, #12
 8005634:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8005636:	2301      	movs	r3, #1
 8005638:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 800563a:	79fb      	ldrb	r3, [r7, #7]
 800563c:	b2db      	uxtb	r3, r3
}
 800563e:	4618      	mov	r0, r3
 8005640:	370c      	adds	r7, #12
 8005642:	46bd      	mov	sp, r7
 8005644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005648:	4770      	bx	lr
	...

0800564c <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b082      	sub	sp, #8
 8005650:	af00      	add	r7, sp, #0
 8005652:	4603      	mov	r3, r0
 8005654:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8005656:	4b0b      	ldr	r3, [pc, #44]	; (8005684 <SD_CheckStatus+0x38>)
 8005658:	2201      	movs	r2, #1
 800565a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800565c:	f7ff ffca 	bl	80055f4 <BSP_SD_GetCardState>
 8005660:	4603      	mov	r3, r0
 8005662:	2b00      	cmp	r3, #0
 8005664:	d107      	bne.n	8005676 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8005666:	4b07      	ldr	r3, [pc, #28]	; (8005684 <SD_CheckStatus+0x38>)
 8005668:	781b      	ldrb	r3, [r3, #0]
 800566a:	b2db      	uxtb	r3, r3
 800566c:	f023 0301 	bic.w	r3, r3, #1
 8005670:	b2da      	uxtb	r2, r3
 8005672:	4b04      	ldr	r3, [pc, #16]	; (8005684 <SD_CheckStatus+0x38>)
 8005674:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8005676:	4b03      	ldr	r3, [pc, #12]	; (8005684 <SD_CheckStatus+0x38>)
 8005678:	781b      	ldrb	r3, [r3, #0]
 800567a:	b2db      	uxtb	r3, r3
}
 800567c:	4618      	mov	r0, r3
 800567e:	3708      	adds	r7, #8
 8005680:	46bd      	mov	sp, r7
 8005682:	bd80      	pop	{r7, pc}
 8005684:	20000129 	.word	0x20000129

08005688 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b082      	sub	sp, #8
 800568c:	af00      	add	r7, sp, #0
 800568e:	4603      	mov	r3, r0
 8005690:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8005692:	4b0b      	ldr	r3, [pc, #44]	; (80056c0 <SD_initialize+0x38>)
 8005694:	2201      	movs	r2, #1
 8005696:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8005698:	f7ff ff58 	bl	800554c <BSP_SD_Init>
 800569c:	4603      	mov	r3, r0
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d107      	bne.n	80056b2 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 80056a2:	79fb      	ldrb	r3, [r7, #7]
 80056a4:	4618      	mov	r0, r3
 80056a6:	f7ff ffd1 	bl	800564c <SD_CheckStatus>
 80056aa:	4603      	mov	r3, r0
 80056ac:	461a      	mov	r2, r3
 80056ae:	4b04      	ldr	r3, [pc, #16]	; (80056c0 <SD_initialize+0x38>)
 80056b0:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80056b2:	4b03      	ldr	r3, [pc, #12]	; (80056c0 <SD_initialize+0x38>)
 80056b4:	781b      	ldrb	r3, [r3, #0]
 80056b6:	b2db      	uxtb	r3, r3
}
 80056b8:	4618      	mov	r0, r3
 80056ba:	3708      	adds	r7, #8
 80056bc:	46bd      	mov	sp, r7
 80056be:	bd80      	pop	{r7, pc}
 80056c0:	20000129 	.word	0x20000129

080056c4 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b082      	sub	sp, #8
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	4603      	mov	r3, r0
 80056cc:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80056ce:	79fb      	ldrb	r3, [r7, #7]
 80056d0:	4618      	mov	r0, r3
 80056d2:	f7ff ffbb 	bl	800564c <SD_CheckStatus>
 80056d6:	4603      	mov	r3, r0
}
 80056d8:	4618      	mov	r0, r3
 80056da:	3708      	adds	r7, #8
 80056dc:	46bd      	mov	sp, r7
 80056de:	bd80      	pop	{r7, pc}

080056e0 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b086      	sub	sp, #24
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	60b9      	str	r1, [r7, #8]
 80056e8:	607a      	str	r2, [r7, #4]
 80056ea:	603b      	str	r3, [r7, #0]
 80056ec:	4603      	mov	r3, r0
 80056ee:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80056f0:	2301      	movs	r3, #1
 80056f2:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 80056f4:	f04f 33ff 	mov.w	r3, #4294967295
 80056f8:	683a      	ldr	r2, [r7, #0]
 80056fa:	6879      	ldr	r1, [r7, #4]
 80056fc:	68b8      	ldr	r0, [r7, #8]
 80056fe:	f7ff ff3d 	bl	800557c <BSP_SD_ReadBlocks>
 8005702:	4603      	mov	r3, r0
 8005704:	2b00      	cmp	r3, #0
 8005706:	d107      	bne.n	8005718 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8005708:	bf00      	nop
 800570a:	f7ff ff73 	bl	80055f4 <BSP_SD_GetCardState>
 800570e:	4603      	mov	r3, r0
 8005710:	2b00      	cmp	r3, #0
 8005712:	d1fa      	bne.n	800570a <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8005714:	2300      	movs	r3, #0
 8005716:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8005718:	7dfb      	ldrb	r3, [r7, #23]
}
 800571a:	4618      	mov	r0, r3
 800571c:	3718      	adds	r7, #24
 800571e:	46bd      	mov	sp, r7
 8005720:	bd80      	pop	{r7, pc}

08005722 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8005722:	b580      	push	{r7, lr}
 8005724:	b086      	sub	sp, #24
 8005726:	af00      	add	r7, sp, #0
 8005728:	60b9      	str	r1, [r7, #8]
 800572a:	607a      	str	r2, [r7, #4]
 800572c:	603b      	str	r3, [r7, #0]
 800572e:	4603      	mov	r3, r0
 8005730:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005732:	2301      	movs	r3, #1
 8005734:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8005736:	f04f 33ff 	mov.w	r3, #4294967295
 800573a:	683a      	ldr	r2, [r7, #0]
 800573c:	6879      	ldr	r1, [r7, #4]
 800573e:	68b8      	ldr	r0, [r7, #8]
 8005740:	f7ff ff3a 	bl	80055b8 <BSP_SD_WriteBlocks>
 8005744:	4603      	mov	r3, r0
 8005746:	2b00      	cmp	r3, #0
 8005748:	d107      	bne.n	800575a <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800574a:	bf00      	nop
 800574c:	f7ff ff52 	bl	80055f4 <BSP_SD_GetCardState>
 8005750:	4603      	mov	r3, r0
 8005752:	2b00      	cmp	r3, #0
 8005754:	d1fa      	bne.n	800574c <SD_write+0x2a>
    {
    }
    res = RES_OK;
 8005756:	2300      	movs	r3, #0
 8005758:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800575a:	7dfb      	ldrb	r3, [r7, #23]
}
 800575c:	4618      	mov	r0, r3
 800575e:	3718      	adds	r7, #24
 8005760:	46bd      	mov	sp, r7
 8005762:	bd80      	pop	{r7, pc}

08005764 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b08c      	sub	sp, #48	; 0x30
 8005768:	af00      	add	r7, sp, #0
 800576a:	4603      	mov	r3, r0
 800576c:	603a      	str	r2, [r7, #0]
 800576e:	71fb      	strb	r3, [r7, #7]
 8005770:	460b      	mov	r3, r1
 8005772:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8005774:	2301      	movs	r3, #1
 8005776:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800577a:	4b25      	ldr	r3, [pc, #148]	; (8005810 <SD_ioctl+0xac>)
 800577c:	781b      	ldrb	r3, [r3, #0]
 800577e:	b2db      	uxtb	r3, r3
 8005780:	f003 0301 	and.w	r3, r3, #1
 8005784:	2b00      	cmp	r3, #0
 8005786:	d001      	beq.n	800578c <SD_ioctl+0x28>
 8005788:	2303      	movs	r3, #3
 800578a:	e03c      	b.n	8005806 <SD_ioctl+0xa2>

  switch (cmd)
 800578c:	79bb      	ldrb	r3, [r7, #6]
 800578e:	2b03      	cmp	r3, #3
 8005790:	d834      	bhi.n	80057fc <SD_ioctl+0x98>
 8005792:	a201      	add	r2, pc, #4	; (adr r2, 8005798 <SD_ioctl+0x34>)
 8005794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005798:	080057a9 	.word	0x080057a9
 800579c:	080057b1 	.word	0x080057b1
 80057a0:	080057c9 	.word	0x080057c9
 80057a4:	080057e3 	.word	0x080057e3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80057a8:	2300      	movs	r3, #0
 80057aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80057ae:	e028      	b.n	8005802 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80057b0:	f107 030c 	add.w	r3, r7, #12
 80057b4:	4618      	mov	r0, r3
 80057b6:	f7ff ff2d 	bl	8005614 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80057ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80057c0:	2300      	movs	r3, #0
 80057c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80057c6:	e01c      	b.n	8005802 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80057c8:	f107 030c 	add.w	r3, r7, #12
 80057cc:	4618      	mov	r0, r3
 80057ce:	f7ff ff21 	bl	8005614 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80057d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057d4:	b29a      	uxth	r2, r3
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80057da:	2300      	movs	r3, #0
 80057dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80057e0:	e00f      	b.n	8005802 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80057e2:	f107 030c 	add.w	r3, r7, #12
 80057e6:	4618      	mov	r0, r3
 80057e8:	f7ff ff14 	bl	8005614 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80057ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ee:	0a5a      	lsrs	r2, r3, #9
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80057f4:	2300      	movs	r3, #0
 80057f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80057fa:	e002      	b.n	8005802 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80057fc:	2304      	movs	r3, #4
 80057fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8005802:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8005806:	4618      	mov	r0, r3
 8005808:	3730      	adds	r7, #48	; 0x30
 800580a:	46bd      	mov	sp, r7
 800580c:	bd80      	pop	{r7, pc}
 800580e:	bf00      	nop
 8005810:	20000129 	.word	0x20000129

08005814 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b084      	sub	sp, #16
 8005818:	af00      	add	r7, sp, #0
 800581a:	4603      	mov	r3, r0
 800581c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800581e:	79fb      	ldrb	r3, [r7, #7]
 8005820:	4a08      	ldr	r2, [pc, #32]	; (8005844 <disk_status+0x30>)
 8005822:	009b      	lsls	r3, r3, #2
 8005824:	4413      	add	r3, r2
 8005826:	685b      	ldr	r3, [r3, #4]
 8005828:	685b      	ldr	r3, [r3, #4]
 800582a:	79fa      	ldrb	r2, [r7, #7]
 800582c:	4905      	ldr	r1, [pc, #20]	; (8005844 <disk_status+0x30>)
 800582e:	440a      	add	r2, r1
 8005830:	7a12      	ldrb	r2, [r2, #8]
 8005832:	4610      	mov	r0, r2
 8005834:	4798      	blx	r3
 8005836:	4603      	mov	r3, r0
 8005838:	73fb      	strb	r3, [r7, #15]
  return stat;
 800583a:	7bfb      	ldrb	r3, [r7, #15]
}
 800583c:	4618      	mov	r0, r3
 800583e:	3710      	adds	r7, #16
 8005840:	46bd      	mov	sp, r7
 8005842:	bd80      	pop	{r7, pc}
 8005844:	20000170 	.word	0x20000170

08005848 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b084      	sub	sp, #16
 800584c:	af00      	add	r7, sp, #0
 800584e:	4603      	mov	r3, r0
 8005850:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8005852:	2300      	movs	r3, #0
 8005854:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8005856:	79fb      	ldrb	r3, [r7, #7]
 8005858:	4a0d      	ldr	r2, [pc, #52]	; (8005890 <disk_initialize+0x48>)
 800585a:	5cd3      	ldrb	r3, [r2, r3]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d111      	bne.n	8005884 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8005860:	79fb      	ldrb	r3, [r7, #7]
 8005862:	4a0b      	ldr	r2, [pc, #44]	; (8005890 <disk_initialize+0x48>)
 8005864:	2101      	movs	r1, #1
 8005866:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8005868:	79fb      	ldrb	r3, [r7, #7]
 800586a:	4a09      	ldr	r2, [pc, #36]	; (8005890 <disk_initialize+0x48>)
 800586c:	009b      	lsls	r3, r3, #2
 800586e:	4413      	add	r3, r2
 8005870:	685b      	ldr	r3, [r3, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	79fa      	ldrb	r2, [r7, #7]
 8005876:	4906      	ldr	r1, [pc, #24]	; (8005890 <disk_initialize+0x48>)
 8005878:	440a      	add	r2, r1
 800587a:	7a12      	ldrb	r2, [r2, #8]
 800587c:	4610      	mov	r0, r2
 800587e:	4798      	blx	r3
 8005880:	4603      	mov	r3, r0
 8005882:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8005884:	7bfb      	ldrb	r3, [r7, #15]
}
 8005886:	4618      	mov	r0, r3
 8005888:	3710      	adds	r7, #16
 800588a:	46bd      	mov	sp, r7
 800588c:	bd80      	pop	{r7, pc}
 800588e:	bf00      	nop
 8005890:	20000170 	.word	0x20000170

08005894 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005894:	b590      	push	{r4, r7, lr}
 8005896:	b087      	sub	sp, #28
 8005898:	af00      	add	r7, sp, #0
 800589a:	60b9      	str	r1, [r7, #8]
 800589c:	607a      	str	r2, [r7, #4]
 800589e:	603b      	str	r3, [r7, #0]
 80058a0:	4603      	mov	r3, r0
 80058a2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80058a4:	7bfb      	ldrb	r3, [r7, #15]
 80058a6:	4a0a      	ldr	r2, [pc, #40]	; (80058d0 <disk_read+0x3c>)
 80058a8:	009b      	lsls	r3, r3, #2
 80058aa:	4413      	add	r3, r2
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	689c      	ldr	r4, [r3, #8]
 80058b0:	7bfb      	ldrb	r3, [r7, #15]
 80058b2:	4a07      	ldr	r2, [pc, #28]	; (80058d0 <disk_read+0x3c>)
 80058b4:	4413      	add	r3, r2
 80058b6:	7a18      	ldrb	r0, [r3, #8]
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	687a      	ldr	r2, [r7, #4]
 80058bc:	68b9      	ldr	r1, [r7, #8]
 80058be:	47a0      	blx	r4
 80058c0:	4603      	mov	r3, r0
 80058c2:	75fb      	strb	r3, [r7, #23]
  return res;
 80058c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80058c6:	4618      	mov	r0, r3
 80058c8:	371c      	adds	r7, #28
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bd90      	pop	{r4, r7, pc}
 80058ce:	bf00      	nop
 80058d0:	20000170 	.word	0x20000170

080058d4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80058d4:	b590      	push	{r4, r7, lr}
 80058d6:	b087      	sub	sp, #28
 80058d8:	af00      	add	r7, sp, #0
 80058da:	60b9      	str	r1, [r7, #8]
 80058dc:	607a      	str	r2, [r7, #4]
 80058de:	603b      	str	r3, [r7, #0]
 80058e0:	4603      	mov	r3, r0
 80058e2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80058e4:	7bfb      	ldrb	r3, [r7, #15]
 80058e6:	4a0a      	ldr	r2, [pc, #40]	; (8005910 <disk_write+0x3c>)
 80058e8:	009b      	lsls	r3, r3, #2
 80058ea:	4413      	add	r3, r2
 80058ec:	685b      	ldr	r3, [r3, #4]
 80058ee:	68dc      	ldr	r4, [r3, #12]
 80058f0:	7bfb      	ldrb	r3, [r7, #15]
 80058f2:	4a07      	ldr	r2, [pc, #28]	; (8005910 <disk_write+0x3c>)
 80058f4:	4413      	add	r3, r2
 80058f6:	7a18      	ldrb	r0, [r3, #8]
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	687a      	ldr	r2, [r7, #4]
 80058fc:	68b9      	ldr	r1, [r7, #8]
 80058fe:	47a0      	blx	r4
 8005900:	4603      	mov	r3, r0
 8005902:	75fb      	strb	r3, [r7, #23]
  return res;
 8005904:	7dfb      	ldrb	r3, [r7, #23]
}
 8005906:	4618      	mov	r0, r3
 8005908:	371c      	adds	r7, #28
 800590a:	46bd      	mov	sp, r7
 800590c:	bd90      	pop	{r4, r7, pc}
 800590e:	bf00      	nop
 8005910:	20000170 	.word	0x20000170

08005914 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b084      	sub	sp, #16
 8005918:	af00      	add	r7, sp, #0
 800591a:	4603      	mov	r3, r0
 800591c:	603a      	str	r2, [r7, #0]
 800591e:	71fb      	strb	r3, [r7, #7]
 8005920:	460b      	mov	r3, r1
 8005922:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8005924:	79fb      	ldrb	r3, [r7, #7]
 8005926:	4a09      	ldr	r2, [pc, #36]	; (800594c <disk_ioctl+0x38>)
 8005928:	009b      	lsls	r3, r3, #2
 800592a:	4413      	add	r3, r2
 800592c:	685b      	ldr	r3, [r3, #4]
 800592e:	691b      	ldr	r3, [r3, #16]
 8005930:	79fa      	ldrb	r2, [r7, #7]
 8005932:	4906      	ldr	r1, [pc, #24]	; (800594c <disk_ioctl+0x38>)
 8005934:	440a      	add	r2, r1
 8005936:	7a10      	ldrb	r0, [r2, #8]
 8005938:	79b9      	ldrb	r1, [r7, #6]
 800593a:	683a      	ldr	r2, [r7, #0]
 800593c:	4798      	blx	r3
 800593e:	4603      	mov	r3, r0
 8005940:	73fb      	strb	r3, [r7, #15]
  return res;
 8005942:	7bfb      	ldrb	r3, [r7, #15]
}
 8005944:	4618      	mov	r0, r3
 8005946:	3710      	adds	r7, #16
 8005948:	46bd      	mov	sp, r7
 800594a:	bd80      	pop	{r7, pc}
 800594c:	20000170 	.word	0x20000170

08005950 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8005950:	b480      	push	{r7}
 8005952:	b085      	sub	sp, #20
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	3301      	adds	r3, #1
 800595c:	781b      	ldrb	r3, [r3, #0]
 800595e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8005960:	89fb      	ldrh	r3, [r7, #14]
 8005962:	021b      	lsls	r3, r3, #8
 8005964:	b21a      	sxth	r2, r3
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	781b      	ldrb	r3, [r3, #0]
 800596a:	b21b      	sxth	r3, r3
 800596c:	4313      	orrs	r3, r2
 800596e:	b21b      	sxth	r3, r3
 8005970:	81fb      	strh	r3, [r7, #14]
	return rv;
 8005972:	89fb      	ldrh	r3, [r7, #14]
}
 8005974:	4618      	mov	r0, r3
 8005976:	3714      	adds	r7, #20
 8005978:	46bd      	mov	sp, r7
 800597a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597e:	4770      	bx	lr

08005980 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8005980:	b480      	push	{r7}
 8005982:	b085      	sub	sp, #20
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	3303      	adds	r3, #3
 800598c:	781b      	ldrb	r3, [r3, #0]
 800598e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	021b      	lsls	r3, r3, #8
 8005994:	687a      	ldr	r2, [r7, #4]
 8005996:	3202      	adds	r2, #2
 8005998:	7812      	ldrb	r2, [r2, #0]
 800599a:	4313      	orrs	r3, r2
 800599c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	021b      	lsls	r3, r3, #8
 80059a2:	687a      	ldr	r2, [r7, #4]
 80059a4:	3201      	adds	r2, #1
 80059a6:	7812      	ldrb	r2, [r2, #0]
 80059a8:	4313      	orrs	r3, r2
 80059aa:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	021b      	lsls	r3, r3, #8
 80059b0:	687a      	ldr	r2, [r7, #4]
 80059b2:	7812      	ldrb	r2, [r2, #0]
 80059b4:	4313      	orrs	r3, r2
 80059b6:	60fb      	str	r3, [r7, #12]
	return rv;
 80059b8:	68fb      	ldr	r3, [r7, #12]
}
 80059ba:	4618      	mov	r0, r3
 80059bc:	3714      	adds	r7, #20
 80059be:	46bd      	mov	sp, r7
 80059c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c4:	4770      	bx	lr

080059c6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80059c6:	b480      	push	{r7}
 80059c8:	b083      	sub	sp, #12
 80059ca:	af00      	add	r7, sp, #0
 80059cc:	6078      	str	r0, [r7, #4]
 80059ce:	460b      	mov	r3, r1
 80059d0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	1c5a      	adds	r2, r3, #1
 80059d6:	607a      	str	r2, [r7, #4]
 80059d8:	887a      	ldrh	r2, [r7, #2]
 80059da:	b2d2      	uxtb	r2, r2
 80059dc:	701a      	strb	r2, [r3, #0]
 80059de:	887b      	ldrh	r3, [r7, #2]
 80059e0:	0a1b      	lsrs	r3, r3, #8
 80059e2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	1c5a      	adds	r2, r3, #1
 80059e8:	607a      	str	r2, [r7, #4]
 80059ea:	887a      	ldrh	r2, [r7, #2]
 80059ec:	b2d2      	uxtb	r2, r2
 80059ee:	701a      	strb	r2, [r3, #0]
}
 80059f0:	bf00      	nop
 80059f2:	370c      	adds	r7, #12
 80059f4:	46bd      	mov	sp, r7
 80059f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fa:	4770      	bx	lr

080059fc <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80059fc:	b480      	push	{r7}
 80059fe:	b083      	sub	sp, #12
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
 8005a04:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	1c5a      	adds	r2, r3, #1
 8005a0a:	607a      	str	r2, [r7, #4]
 8005a0c:	683a      	ldr	r2, [r7, #0]
 8005a0e:	b2d2      	uxtb	r2, r2
 8005a10:	701a      	strb	r2, [r3, #0]
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	0a1b      	lsrs	r3, r3, #8
 8005a16:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	1c5a      	adds	r2, r3, #1
 8005a1c:	607a      	str	r2, [r7, #4]
 8005a1e:	683a      	ldr	r2, [r7, #0]
 8005a20:	b2d2      	uxtb	r2, r2
 8005a22:	701a      	strb	r2, [r3, #0]
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	0a1b      	lsrs	r3, r3, #8
 8005a28:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	1c5a      	adds	r2, r3, #1
 8005a2e:	607a      	str	r2, [r7, #4]
 8005a30:	683a      	ldr	r2, [r7, #0]
 8005a32:	b2d2      	uxtb	r2, r2
 8005a34:	701a      	strb	r2, [r3, #0]
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	0a1b      	lsrs	r3, r3, #8
 8005a3a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	1c5a      	adds	r2, r3, #1
 8005a40:	607a      	str	r2, [r7, #4]
 8005a42:	683a      	ldr	r2, [r7, #0]
 8005a44:	b2d2      	uxtb	r2, r2
 8005a46:	701a      	strb	r2, [r3, #0]
}
 8005a48:	bf00      	nop
 8005a4a:	370c      	adds	r7, #12
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a52:	4770      	bx	lr

08005a54 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8005a54:	b480      	push	{r7}
 8005a56:	b087      	sub	sp, #28
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	60f8      	str	r0, [r7, #12]
 8005a5c:	60b9      	str	r1, [r7, #8]
 8005a5e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d00d      	beq.n	8005a8a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8005a6e:	693a      	ldr	r2, [r7, #16]
 8005a70:	1c53      	adds	r3, r2, #1
 8005a72:	613b      	str	r3, [r7, #16]
 8005a74:	697b      	ldr	r3, [r7, #20]
 8005a76:	1c59      	adds	r1, r3, #1
 8005a78:	6179      	str	r1, [r7, #20]
 8005a7a:	7812      	ldrb	r2, [r2, #0]
 8005a7c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	3b01      	subs	r3, #1
 8005a82:	607b      	str	r3, [r7, #4]
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d1f1      	bne.n	8005a6e <mem_cpy+0x1a>
	}
}
 8005a8a:	bf00      	nop
 8005a8c:	371c      	adds	r7, #28
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a94:	4770      	bx	lr

08005a96 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8005a96:	b480      	push	{r7}
 8005a98:	b087      	sub	sp, #28
 8005a9a:	af00      	add	r7, sp, #0
 8005a9c:	60f8      	str	r0, [r7, #12]
 8005a9e:	60b9      	str	r1, [r7, #8]
 8005aa0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8005aa6:	697b      	ldr	r3, [r7, #20]
 8005aa8:	1c5a      	adds	r2, r3, #1
 8005aaa:	617a      	str	r2, [r7, #20]
 8005aac:	68ba      	ldr	r2, [r7, #8]
 8005aae:	b2d2      	uxtb	r2, r2
 8005ab0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	3b01      	subs	r3, #1
 8005ab6:	607b      	str	r3, [r7, #4]
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d1f3      	bne.n	8005aa6 <mem_set+0x10>
}
 8005abe:	bf00      	nop
 8005ac0:	bf00      	nop
 8005ac2:	371c      	adds	r7, #28
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aca:	4770      	bx	lr

08005acc <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8005acc:	b480      	push	{r7}
 8005ace:	b089      	sub	sp, #36	; 0x24
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	60f8      	str	r0, [r7, #12]
 8005ad4:	60b9      	str	r1, [r7, #8]
 8005ad6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	61fb      	str	r3, [r7, #28]
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8005ae4:	69fb      	ldr	r3, [r7, #28]
 8005ae6:	1c5a      	adds	r2, r3, #1
 8005ae8:	61fa      	str	r2, [r7, #28]
 8005aea:	781b      	ldrb	r3, [r3, #0]
 8005aec:	4619      	mov	r1, r3
 8005aee:	69bb      	ldr	r3, [r7, #24]
 8005af0:	1c5a      	adds	r2, r3, #1
 8005af2:	61ba      	str	r2, [r7, #24]
 8005af4:	781b      	ldrb	r3, [r3, #0]
 8005af6:	1acb      	subs	r3, r1, r3
 8005af8:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	3b01      	subs	r3, #1
 8005afe:	607b      	str	r3, [r7, #4]
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d002      	beq.n	8005b0c <mem_cmp+0x40>
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d0eb      	beq.n	8005ae4 <mem_cmp+0x18>

	return r;
 8005b0c:	697b      	ldr	r3, [r7, #20]
}
 8005b0e:	4618      	mov	r0, r3
 8005b10:	3724      	adds	r7, #36	; 0x24
 8005b12:	46bd      	mov	sp, r7
 8005b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b18:	4770      	bx	lr

08005b1a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8005b1a:	b480      	push	{r7}
 8005b1c:	b083      	sub	sp, #12
 8005b1e:	af00      	add	r7, sp, #0
 8005b20:	6078      	str	r0, [r7, #4]
 8005b22:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8005b24:	e002      	b.n	8005b2c <chk_chr+0x12>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	3301      	adds	r3, #1
 8005b2a:	607b      	str	r3, [r7, #4]
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	781b      	ldrb	r3, [r3, #0]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d005      	beq.n	8005b40 <chk_chr+0x26>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	781b      	ldrb	r3, [r3, #0]
 8005b38:	461a      	mov	r2, r3
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d1f2      	bne.n	8005b26 <chk_chr+0xc>
	return *str;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	781b      	ldrb	r3, [r3, #0]
}
 8005b44:	4618      	mov	r0, r3
 8005b46:	370c      	adds	r7, #12
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4e:	4770      	bx	lr

08005b50 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005b50:	b480      	push	{r7}
 8005b52:	b085      	sub	sp, #20
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
 8005b58:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	60bb      	str	r3, [r7, #8]
 8005b5e:	68bb      	ldr	r3, [r7, #8]
 8005b60:	60fb      	str	r3, [r7, #12]
 8005b62:	e029      	b.n	8005bb8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8005b64:	4a27      	ldr	r2, [pc, #156]	; (8005c04 <chk_lock+0xb4>)
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	011b      	lsls	r3, r3, #4
 8005b6a:	4413      	add	r3, r2
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d01d      	beq.n	8005bae <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005b72:	4a24      	ldr	r2, [pc, #144]	; (8005c04 <chk_lock+0xb4>)
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	011b      	lsls	r3, r3, #4
 8005b78:	4413      	add	r3, r2
 8005b7a:	681a      	ldr	r2, [r3, #0]
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	429a      	cmp	r2, r3
 8005b82:	d116      	bne.n	8005bb2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8005b84:	4a1f      	ldr	r2, [pc, #124]	; (8005c04 <chk_lock+0xb4>)
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	011b      	lsls	r3, r3, #4
 8005b8a:	4413      	add	r3, r2
 8005b8c:	3304      	adds	r3, #4
 8005b8e:	681a      	ldr	r2, [r3, #0]
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005b94:	429a      	cmp	r2, r3
 8005b96:	d10c      	bne.n	8005bb2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005b98:	4a1a      	ldr	r2, [pc, #104]	; (8005c04 <chk_lock+0xb4>)
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	011b      	lsls	r3, r3, #4
 8005b9e:	4413      	add	r3, r2
 8005ba0:	3308      	adds	r3, #8
 8005ba2:	681a      	ldr	r2, [r3, #0]
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8005ba8:	429a      	cmp	r2, r3
 8005baa:	d102      	bne.n	8005bb2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005bac:	e007      	b.n	8005bbe <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8005bae:	2301      	movs	r3, #1
 8005bb0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	3301      	adds	r3, #1
 8005bb6:	60fb      	str	r3, [r7, #12]
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	2b01      	cmp	r3, #1
 8005bbc:	d9d2      	bls.n	8005b64 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	2b02      	cmp	r3, #2
 8005bc2:	d109      	bne.n	8005bd8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d102      	bne.n	8005bd0 <chk_lock+0x80>
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	2b02      	cmp	r3, #2
 8005bce:	d101      	bne.n	8005bd4 <chk_lock+0x84>
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	e010      	b.n	8005bf6 <chk_lock+0xa6>
 8005bd4:	2312      	movs	r3, #18
 8005bd6:	e00e      	b.n	8005bf6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d108      	bne.n	8005bf0 <chk_lock+0xa0>
 8005bde:	4a09      	ldr	r2, [pc, #36]	; (8005c04 <chk_lock+0xb4>)
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	011b      	lsls	r3, r3, #4
 8005be4:	4413      	add	r3, r2
 8005be6:	330c      	adds	r3, #12
 8005be8:	881b      	ldrh	r3, [r3, #0]
 8005bea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005bee:	d101      	bne.n	8005bf4 <chk_lock+0xa4>
 8005bf0:	2310      	movs	r3, #16
 8005bf2:	e000      	b.n	8005bf6 <chk_lock+0xa6>
 8005bf4:	2300      	movs	r3, #0
}
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	3714      	adds	r7, #20
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c00:	4770      	bx	lr
 8005c02:	bf00      	nop
 8005c04:	20000150 	.word	0x20000150

08005c08 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8005c08:	b480      	push	{r7}
 8005c0a:	b083      	sub	sp, #12
 8005c0c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005c0e:	2300      	movs	r3, #0
 8005c10:	607b      	str	r3, [r7, #4]
 8005c12:	e002      	b.n	8005c1a <enq_lock+0x12>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	3301      	adds	r3, #1
 8005c18:	607b      	str	r3, [r7, #4]
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2b01      	cmp	r3, #1
 8005c1e:	d806      	bhi.n	8005c2e <enq_lock+0x26>
 8005c20:	4a09      	ldr	r2, [pc, #36]	; (8005c48 <enq_lock+0x40>)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	011b      	lsls	r3, r3, #4
 8005c26:	4413      	add	r3, r2
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d1f2      	bne.n	8005c14 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2b02      	cmp	r3, #2
 8005c32:	bf14      	ite	ne
 8005c34:	2301      	movne	r3, #1
 8005c36:	2300      	moveq	r3, #0
 8005c38:	b2db      	uxtb	r3, r3
}
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	370c      	adds	r7, #12
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c44:	4770      	bx	lr
 8005c46:	bf00      	nop
 8005c48:	20000150 	.word	0x20000150

08005c4c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	b085      	sub	sp, #20
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
 8005c54:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005c56:	2300      	movs	r3, #0
 8005c58:	60fb      	str	r3, [r7, #12]
 8005c5a:	e01f      	b.n	8005c9c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8005c5c:	4a41      	ldr	r2, [pc, #260]	; (8005d64 <inc_lock+0x118>)
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	011b      	lsls	r3, r3, #4
 8005c62:	4413      	add	r3, r2
 8005c64:	681a      	ldr	r2, [r3, #0]
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	429a      	cmp	r2, r3
 8005c6c:	d113      	bne.n	8005c96 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8005c6e:	4a3d      	ldr	r2, [pc, #244]	; (8005d64 <inc_lock+0x118>)
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	011b      	lsls	r3, r3, #4
 8005c74:	4413      	add	r3, r2
 8005c76:	3304      	adds	r3, #4
 8005c78:	681a      	ldr	r2, [r3, #0]
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8005c7e:	429a      	cmp	r2, r3
 8005c80:	d109      	bne.n	8005c96 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8005c82:	4a38      	ldr	r2, [pc, #224]	; (8005d64 <inc_lock+0x118>)
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	011b      	lsls	r3, r3, #4
 8005c88:	4413      	add	r3, r2
 8005c8a:	3308      	adds	r3, #8
 8005c8c:	681a      	ldr	r2, [r3, #0]
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8005c92:	429a      	cmp	r2, r3
 8005c94:	d006      	beq.n	8005ca4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	3301      	adds	r3, #1
 8005c9a:	60fb      	str	r3, [r7, #12]
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	2b01      	cmp	r3, #1
 8005ca0:	d9dc      	bls.n	8005c5c <inc_lock+0x10>
 8005ca2:	e000      	b.n	8005ca6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8005ca4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	2b02      	cmp	r3, #2
 8005caa:	d132      	bne.n	8005d12 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005cac:	2300      	movs	r3, #0
 8005cae:	60fb      	str	r3, [r7, #12]
 8005cb0:	e002      	b.n	8005cb8 <inc_lock+0x6c>
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	3301      	adds	r3, #1
 8005cb6:	60fb      	str	r3, [r7, #12]
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	2b01      	cmp	r3, #1
 8005cbc:	d806      	bhi.n	8005ccc <inc_lock+0x80>
 8005cbe:	4a29      	ldr	r2, [pc, #164]	; (8005d64 <inc_lock+0x118>)
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	011b      	lsls	r3, r3, #4
 8005cc4:	4413      	add	r3, r2
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d1f2      	bne.n	8005cb2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	2b02      	cmp	r3, #2
 8005cd0:	d101      	bne.n	8005cd6 <inc_lock+0x8a>
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	e040      	b.n	8005d58 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681a      	ldr	r2, [r3, #0]
 8005cda:	4922      	ldr	r1, [pc, #136]	; (8005d64 <inc_lock+0x118>)
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	011b      	lsls	r3, r3, #4
 8005ce0:	440b      	add	r3, r1
 8005ce2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	689a      	ldr	r2, [r3, #8]
 8005ce8:	491e      	ldr	r1, [pc, #120]	; (8005d64 <inc_lock+0x118>)
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	011b      	lsls	r3, r3, #4
 8005cee:	440b      	add	r3, r1
 8005cf0:	3304      	adds	r3, #4
 8005cf2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	695a      	ldr	r2, [r3, #20]
 8005cf8:	491a      	ldr	r1, [pc, #104]	; (8005d64 <inc_lock+0x118>)
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	011b      	lsls	r3, r3, #4
 8005cfe:	440b      	add	r3, r1
 8005d00:	3308      	adds	r3, #8
 8005d02:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8005d04:	4a17      	ldr	r2, [pc, #92]	; (8005d64 <inc_lock+0x118>)
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	011b      	lsls	r3, r3, #4
 8005d0a:	4413      	add	r3, r2
 8005d0c:	330c      	adds	r3, #12
 8005d0e:	2200      	movs	r2, #0
 8005d10:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d009      	beq.n	8005d2c <inc_lock+0xe0>
 8005d18:	4a12      	ldr	r2, [pc, #72]	; (8005d64 <inc_lock+0x118>)
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	011b      	lsls	r3, r3, #4
 8005d1e:	4413      	add	r3, r2
 8005d20:	330c      	adds	r3, #12
 8005d22:	881b      	ldrh	r3, [r3, #0]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d001      	beq.n	8005d2c <inc_lock+0xe0>
 8005d28:	2300      	movs	r3, #0
 8005d2a:	e015      	b.n	8005d58 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d108      	bne.n	8005d44 <inc_lock+0xf8>
 8005d32:	4a0c      	ldr	r2, [pc, #48]	; (8005d64 <inc_lock+0x118>)
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	011b      	lsls	r3, r3, #4
 8005d38:	4413      	add	r3, r2
 8005d3a:	330c      	adds	r3, #12
 8005d3c:	881b      	ldrh	r3, [r3, #0]
 8005d3e:	3301      	adds	r3, #1
 8005d40:	b29a      	uxth	r2, r3
 8005d42:	e001      	b.n	8005d48 <inc_lock+0xfc>
 8005d44:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005d48:	4906      	ldr	r1, [pc, #24]	; (8005d64 <inc_lock+0x118>)
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	011b      	lsls	r3, r3, #4
 8005d4e:	440b      	add	r3, r1
 8005d50:	330c      	adds	r3, #12
 8005d52:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	3301      	adds	r3, #1
}
 8005d58:	4618      	mov	r0, r3
 8005d5a:	3714      	adds	r7, #20
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d62:	4770      	bx	lr
 8005d64:	20000150 	.word	0x20000150

08005d68 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8005d68:	b480      	push	{r7}
 8005d6a:	b085      	sub	sp, #20
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	3b01      	subs	r3, #1
 8005d74:	607b      	str	r3, [r7, #4]
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2b01      	cmp	r3, #1
 8005d7a:	d825      	bhi.n	8005dc8 <dec_lock+0x60>
		n = Files[i].ctr;
 8005d7c:	4a17      	ldr	r2, [pc, #92]	; (8005ddc <dec_lock+0x74>)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	011b      	lsls	r3, r3, #4
 8005d82:	4413      	add	r3, r2
 8005d84:	330c      	adds	r3, #12
 8005d86:	881b      	ldrh	r3, [r3, #0]
 8005d88:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8005d8a:	89fb      	ldrh	r3, [r7, #14]
 8005d8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d90:	d101      	bne.n	8005d96 <dec_lock+0x2e>
 8005d92:	2300      	movs	r3, #0
 8005d94:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8005d96:	89fb      	ldrh	r3, [r7, #14]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d002      	beq.n	8005da2 <dec_lock+0x3a>
 8005d9c:	89fb      	ldrh	r3, [r7, #14]
 8005d9e:	3b01      	subs	r3, #1
 8005da0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8005da2:	4a0e      	ldr	r2, [pc, #56]	; (8005ddc <dec_lock+0x74>)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	011b      	lsls	r3, r3, #4
 8005da8:	4413      	add	r3, r2
 8005daa:	330c      	adds	r3, #12
 8005dac:	89fa      	ldrh	r2, [r7, #14]
 8005dae:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8005db0:	89fb      	ldrh	r3, [r7, #14]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d105      	bne.n	8005dc2 <dec_lock+0x5a>
 8005db6:	4a09      	ldr	r2, [pc, #36]	; (8005ddc <dec_lock+0x74>)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	011b      	lsls	r3, r3, #4
 8005dbc:	4413      	add	r3, r2
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	737b      	strb	r3, [r7, #13]
 8005dc6:	e001      	b.n	8005dcc <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8005dc8:	2302      	movs	r3, #2
 8005dca:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8005dcc:	7b7b      	ldrb	r3, [r7, #13]
}
 8005dce:	4618      	mov	r0, r3
 8005dd0:	3714      	adds	r7, #20
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd8:	4770      	bx	lr
 8005dda:	bf00      	nop
 8005ddc:	20000150 	.word	0x20000150

08005de0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8005de0:	b480      	push	{r7}
 8005de2:	b085      	sub	sp, #20
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8005de8:	2300      	movs	r3, #0
 8005dea:	60fb      	str	r3, [r7, #12]
 8005dec:	e010      	b.n	8005e10 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8005dee:	4a0d      	ldr	r2, [pc, #52]	; (8005e24 <clear_lock+0x44>)
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	011b      	lsls	r3, r3, #4
 8005df4:	4413      	add	r3, r2
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	687a      	ldr	r2, [r7, #4]
 8005dfa:	429a      	cmp	r2, r3
 8005dfc:	d105      	bne.n	8005e0a <clear_lock+0x2a>
 8005dfe:	4a09      	ldr	r2, [pc, #36]	; (8005e24 <clear_lock+0x44>)
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	011b      	lsls	r3, r3, #4
 8005e04:	4413      	add	r3, r2
 8005e06:	2200      	movs	r2, #0
 8005e08:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	3301      	adds	r3, #1
 8005e0e:	60fb      	str	r3, [r7, #12]
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	2b01      	cmp	r3, #1
 8005e14:	d9eb      	bls.n	8005dee <clear_lock+0xe>
	}
}
 8005e16:	bf00      	nop
 8005e18:	bf00      	nop
 8005e1a:	3714      	adds	r7, #20
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e22:	4770      	bx	lr
 8005e24:	20000150 	.word	0x20000150

08005e28 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b086      	sub	sp, #24
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8005e30:	2300      	movs	r3, #0
 8005e32:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	78db      	ldrb	r3, [r3, #3]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d034      	beq.n	8005ea6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e40:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	7858      	ldrb	r0, [r3, #1]
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005e4c:	2301      	movs	r3, #1
 8005e4e:	697a      	ldr	r2, [r7, #20]
 8005e50:	f7ff fd40 	bl	80058d4 <disk_write>
 8005e54:	4603      	mov	r3, r0
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d002      	beq.n	8005e60 <sync_window+0x38>
			res = FR_DISK_ERR;
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	73fb      	strb	r3, [r7, #15]
 8005e5e:	e022      	b.n	8005ea6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2200      	movs	r2, #0
 8005e64:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e6a:	697a      	ldr	r2, [r7, #20]
 8005e6c:	1ad2      	subs	r2, r2, r3
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	69db      	ldr	r3, [r3, #28]
 8005e72:	429a      	cmp	r2, r3
 8005e74:	d217      	bcs.n	8005ea6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	789b      	ldrb	r3, [r3, #2]
 8005e7a:	613b      	str	r3, [r7, #16]
 8005e7c:	e010      	b.n	8005ea0 <sync_window+0x78>
					wsect += fs->fsize;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	69db      	ldr	r3, [r3, #28]
 8005e82:	697a      	ldr	r2, [r7, #20]
 8005e84:	4413      	add	r3, r2
 8005e86:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	7858      	ldrb	r0, [r3, #1]
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005e92:	2301      	movs	r3, #1
 8005e94:	697a      	ldr	r2, [r7, #20]
 8005e96:	f7ff fd1d 	bl	80058d4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005e9a:	693b      	ldr	r3, [r7, #16]
 8005e9c:	3b01      	subs	r3, #1
 8005e9e:	613b      	str	r3, [r7, #16]
 8005ea0:	693b      	ldr	r3, [r7, #16]
 8005ea2:	2b01      	cmp	r3, #1
 8005ea4:	d8eb      	bhi.n	8005e7e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8005ea6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	3718      	adds	r7, #24
 8005eac:	46bd      	mov	sp, r7
 8005eae:	bd80      	pop	{r7, pc}

08005eb0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b084      	sub	sp, #16
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
 8005eb8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8005eba:	2300      	movs	r3, #0
 8005ebc:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ec2:	683a      	ldr	r2, [r7, #0]
 8005ec4:	429a      	cmp	r2, r3
 8005ec6:	d01b      	beq.n	8005f00 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8005ec8:	6878      	ldr	r0, [r7, #4]
 8005eca:	f7ff ffad 	bl	8005e28 <sync_window>
 8005ece:	4603      	mov	r3, r0
 8005ed0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8005ed2:	7bfb      	ldrb	r3, [r7, #15]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d113      	bne.n	8005f00 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	7858      	ldrb	r0, [r3, #1]
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	683a      	ldr	r2, [r7, #0]
 8005ee6:	f7ff fcd5 	bl	8005894 <disk_read>
 8005eea:	4603      	mov	r3, r0
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d004      	beq.n	8005efa <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8005ef0:	f04f 33ff 	mov.w	r3, #4294967295
 8005ef4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8005ef6:	2301      	movs	r3, #1
 8005ef8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	683a      	ldr	r2, [r7, #0]
 8005efe:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8005f00:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f02:	4618      	mov	r0, r3
 8005f04:	3710      	adds	r7, #16
 8005f06:	46bd      	mov	sp, r7
 8005f08:	bd80      	pop	{r7, pc}
	...

08005f0c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b084      	sub	sp, #16
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8005f14:	6878      	ldr	r0, [r7, #4]
 8005f16:	f7ff ff87 	bl	8005e28 <sync_window>
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8005f1e:	7bfb      	ldrb	r3, [r7, #15]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d158      	bne.n	8005fd6 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	781b      	ldrb	r3, [r3, #0]
 8005f28:	2b03      	cmp	r3, #3
 8005f2a:	d148      	bne.n	8005fbe <sync_fs+0xb2>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	791b      	ldrb	r3, [r3, #4]
 8005f30:	2b01      	cmp	r3, #1
 8005f32:	d144      	bne.n	8005fbe <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	3334      	adds	r3, #52	; 0x34
 8005f38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f3c:	2100      	movs	r1, #0
 8005f3e:	4618      	mov	r0, r3
 8005f40:	f7ff fda9 	bl	8005a96 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	3334      	adds	r3, #52	; 0x34
 8005f48:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005f4c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8005f50:	4618      	mov	r0, r3
 8005f52:	f7ff fd38 	bl	80059c6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	3334      	adds	r3, #52	; 0x34
 8005f5a:	4921      	ldr	r1, [pc, #132]	; (8005fe0 <sync_fs+0xd4>)
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	f7ff fd4d 	bl	80059fc <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	3334      	adds	r3, #52	; 0x34
 8005f66:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8005f6a:	491e      	ldr	r1, [pc, #120]	; (8005fe4 <sync_fs+0xd8>)
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	f7ff fd45 	bl	80059fc <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	3334      	adds	r3, #52	; 0x34
 8005f76:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	695b      	ldr	r3, [r3, #20]
 8005f7e:	4619      	mov	r1, r3
 8005f80:	4610      	mov	r0, r2
 8005f82:	f7ff fd3b 	bl	80059fc <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	3334      	adds	r3, #52	; 0x34
 8005f8a:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	691b      	ldr	r3, [r3, #16]
 8005f92:	4619      	mov	r1, r3
 8005f94:	4610      	mov	r0, r2
 8005f96:	f7ff fd31 	bl	80059fc <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6a1b      	ldr	r3, [r3, #32]
 8005f9e:	1c5a      	adds	r2, r3, #1
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	7858      	ldrb	r0, [r3, #1]
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	f7ff fc8e 	bl	80058d4 <disk_write>
			fs->fsi_flag = 0;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2200      	movs	r2, #0
 8005fbc:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	785b      	ldrb	r3, [r3, #1]
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	2100      	movs	r1, #0
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	f7ff fca4 	bl	8005914 <disk_ioctl>
 8005fcc:	4603      	mov	r3, r0
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d001      	beq.n	8005fd6 <sync_fs+0xca>
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8005fd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fd8:	4618      	mov	r0, r3
 8005fda:	3710      	adds	r7, #16
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	bd80      	pop	{r7, pc}
 8005fe0:	41615252 	.word	0x41615252
 8005fe4:	61417272 	.word	0x61417272

08005fe8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8005fe8:	b480      	push	{r7}
 8005fea:	b083      	sub	sp, #12
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
 8005ff0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	3b02      	subs	r3, #2
 8005ff6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	699b      	ldr	r3, [r3, #24]
 8005ffc:	3b02      	subs	r3, #2
 8005ffe:	683a      	ldr	r2, [r7, #0]
 8006000:	429a      	cmp	r2, r3
 8006002:	d301      	bcc.n	8006008 <clust2sect+0x20>
 8006004:	2300      	movs	r3, #0
 8006006:	e008      	b.n	800601a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	895b      	ldrh	r3, [r3, #10]
 800600c:	461a      	mov	r2, r3
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	fb03 f202 	mul.w	r2, r3, r2
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006018:	4413      	add	r3, r2
}
 800601a:	4618      	mov	r0, r3
 800601c:	370c      	adds	r7, #12
 800601e:	46bd      	mov	sp, r7
 8006020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006024:	4770      	bx	lr

08006026 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8006026:	b580      	push	{r7, lr}
 8006028:	b086      	sub	sp, #24
 800602a:	af00      	add	r7, sp, #0
 800602c:	6078      	str	r0, [r7, #4]
 800602e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	2b01      	cmp	r3, #1
 800603a:	d904      	bls.n	8006046 <get_fat+0x20>
 800603c:	693b      	ldr	r3, [r7, #16]
 800603e:	699b      	ldr	r3, [r3, #24]
 8006040:	683a      	ldr	r2, [r7, #0]
 8006042:	429a      	cmp	r2, r3
 8006044:	d302      	bcc.n	800604c <get_fat+0x26>
		val = 1;	/* Internal error */
 8006046:	2301      	movs	r3, #1
 8006048:	617b      	str	r3, [r7, #20]
 800604a:	e08f      	b.n	800616c <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800604c:	f04f 33ff 	mov.w	r3, #4294967295
 8006050:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8006052:	693b      	ldr	r3, [r7, #16]
 8006054:	781b      	ldrb	r3, [r3, #0]
 8006056:	2b03      	cmp	r3, #3
 8006058:	d062      	beq.n	8006120 <get_fat+0xfa>
 800605a:	2b03      	cmp	r3, #3
 800605c:	dc7c      	bgt.n	8006158 <get_fat+0x132>
 800605e:	2b01      	cmp	r3, #1
 8006060:	d002      	beq.n	8006068 <get_fat+0x42>
 8006062:	2b02      	cmp	r3, #2
 8006064:	d042      	beq.n	80060ec <get_fat+0xc6>
 8006066:	e077      	b.n	8006158 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	60fb      	str	r3, [r7, #12]
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	085b      	lsrs	r3, r3, #1
 8006070:	68fa      	ldr	r2, [r7, #12]
 8006072:	4413      	add	r3, r2
 8006074:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006076:	693b      	ldr	r3, [r7, #16]
 8006078:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	0a5b      	lsrs	r3, r3, #9
 800607e:	4413      	add	r3, r2
 8006080:	4619      	mov	r1, r3
 8006082:	6938      	ldr	r0, [r7, #16]
 8006084:	f7ff ff14 	bl	8005eb0 <move_window>
 8006088:	4603      	mov	r3, r0
 800608a:	2b00      	cmp	r3, #0
 800608c:	d167      	bne.n	800615e <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	1c5a      	adds	r2, r3, #1
 8006092:	60fa      	str	r2, [r7, #12]
 8006094:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006098:	693a      	ldr	r2, [r7, #16]
 800609a:	4413      	add	r3, r2
 800609c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80060a0:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80060a2:	693b      	ldr	r3, [r7, #16]
 80060a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	0a5b      	lsrs	r3, r3, #9
 80060aa:	4413      	add	r3, r2
 80060ac:	4619      	mov	r1, r3
 80060ae:	6938      	ldr	r0, [r7, #16]
 80060b0:	f7ff fefe 	bl	8005eb0 <move_window>
 80060b4:	4603      	mov	r3, r0
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d153      	bne.n	8006162 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060c0:	693a      	ldr	r2, [r7, #16]
 80060c2:	4413      	add	r3, r2
 80060c4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80060c8:	021b      	lsls	r3, r3, #8
 80060ca:	461a      	mov	r2, r3
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	4313      	orrs	r3, r2
 80060d0:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	f003 0301 	and.w	r3, r3, #1
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d002      	beq.n	80060e2 <get_fat+0xbc>
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	091b      	lsrs	r3, r3, #4
 80060e0:	e002      	b.n	80060e8 <get_fat+0xc2>
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80060e8:	617b      	str	r3, [r7, #20]
			break;
 80060ea:	e03f      	b.n	800616c <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80060ec:	693b      	ldr	r3, [r7, #16]
 80060ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	0a1b      	lsrs	r3, r3, #8
 80060f4:	4413      	add	r3, r2
 80060f6:	4619      	mov	r1, r3
 80060f8:	6938      	ldr	r0, [r7, #16]
 80060fa:	f7ff fed9 	bl	8005eb0 <move_window>
 80060fe:	4603      	mov	r3, r0
 8006100:	2b00      	cmp	r3, #0
 8006102:	d130      	bne.n	8006166 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8006104:	693b      	ldr	r3, [r7, #16]
 8006106:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	005b      	lsls	r3, r3, #1
 800610e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8006112:	4413      	add	r3, r2
 8006114:	4618      	mov	r0, r3
 8006116:	f7ff fc1b 	bl	8005950 <ld_word>
 800611a:	4603      	mov	r3, r0
 800611c:	617b      	str	r3, [r7, #20]
			break;
 800611e:	e025      	b.n	800616c <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006120:	693b      	ldr	r3, [r7, #16]
 8006122:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	09db      	lsrs	r3, r3, #7
 8006128:	4413      	add	r3, r2
 800612a:	4619      	mov	r1, r3
 800612c:	6938      	ldr	r0, [r7, #16]
 800612e:	f7ff febf 	bl	8005eb0 <move_window>
 8006132:	4603      	mov	r3, r0
 8006134:	2b00      	cmp	r3, #0
 8006136:	d118      	bne.n	800616a <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8006138:	693b      	ldr	r3, [r7, #16]
 800613a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	009b      	lsls	r3, r3, #2
 8006142:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8006146:	4413      	add	r3, r2
 8006148:	4618      	mov	r0, r3
 800614a:	f7ff fc19 	bl	8005980 <ld_dword>
 800614e:	4603      	mov	r3, r0
 8006150:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006154:	617b      	str	r3, [r7, #20]
			break;
 8006156:	e009      	b.n	800616c <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8006158:	2301      	movs	r3, #1
 800615a:	617b      	str	r3, [r7, #20]
 800615c:	e006      	b.n	800616c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800615e:	bf00      	nop
 8006160:	e004      	b.n	800616c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006162:	bf00      	nop
 8006164:	e002      	b.n	800616c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006166:	bf00      	nop
 8006168:	e000      	b.n	800616c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800616a:	bf00      	nop
		}
	}

	return val;
 800616c:	697b      	ldr	r3, [r7, #20]
}
 800616e:	4618      	mov	r0, r3
 8006170:	3718      	adds	r7, #24
 8006172:	46bd      	mov	sp, r7
 8006174:	bd80      	pop	{r7, pc}

08006176 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8006176:	b590      	push	{r4, r7, lr}
 8006178:	b089      	sub	sp, #36	; 0x24
 800617a:	af00      	add	r7, sp, #0
 800617c:	60f8      	str	r0, [r7, #12]
 800617e:	60b9      	str	r1, [r7, #8]
 8006180:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8006182:	2302      	movs	r3, #2
 8006184:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	2b01      	cmp	r3, #1
 800618a:	f240 80d2 	bls.w	8006332 <put_fat+0x1bc>
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	699b      	ldr	r3, [r3, #24]
 8006192:	68ba      	ldr	r2, [r7, #8]
 8006194:	429a      	cmp	r2, r3
 8006196:	f080 80cc 	bcs.w	8006332 <put_fat+0x1bc>
		switch (fs->fs_type) {
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	781b      	ldrb	r3, [r3, #0]
 800619e:	2b03      	cmp	r3, #3
 80061a0:	f000 8096 	beq.w	80062d0 <put_fat+0x15a>
 80061a4:	2b03      	cmp	r3, #3
 80061a6:	f300 80cd 	bgt.w	8006344 <put_fat+0x1ce>
 80061aa:	2b01      	cmp	r3, #1
 80061ac:	d002      	beq.n	80061b4 <put_fat+0x3e>
 80061ae:	2b02      	cmp	r3, #2
 80061b0:	d06e      	beq.n	8006290 <put_fat+0x11a>
 80061b2:	e0c7      	b.n	8006344 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	61bb      	str	r3, [r7, #24]
 80061b8:	69bb      	ldr	r3, [r7, #24]
 80061ba:	085b      	lsrs	r3, r3, #1
 80061bc:	69ba      	ldr	r2, [r7, #24]
 80061be:	4413      	add	r3, r2
 80061c0:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80061c6:	69bb      	ldr	r3, [r7, #24]
 80061c8:	0a5b      	lsrs	r3, r3, #9
 80061ca:	4413      	add	r3, r2
 80061cc:	4619      	mov	r1, r3
 80061ce:	68f8      	ldr	r0, [r7, #12]
 80061d0:	f7ff fe6e 	bl	8005eb0 <move_window>
 80061d4:	4603      	mov	r3, r0
 80061d6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80061d8:	7ffb      	ldrb	r3, [r7, #31]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	f040 80ab 	bne.w	8006336 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80061e6:	69bb      	ldr	r3, [r7, #24]
 80061e8:	1c59      	adds	r1, r3, #1
 80061ea:	61b9      	str	r1, [r7, #24]
 80061ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061f0:	4413      	add	r3, r2
 80061f2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	f003 0301 	and.w	r3, r3, #1
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d00d      	beq.n	800621a <put_fat+0xa4>
 80061fe:	697b      	ldr	r3, [r7, #20]
 8006200:	781b      	ldrb	r3, [r3, #0]
 8006202:	b25b      	sxtb	r3, r3
 8006204:	f003 030f 	and.w	r3, r3, #15
 8006208:	b25a      	sxtb	r2, r3
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	b2db      	uxtb	r3, r3
 800620e:	011b      	lsls	r3, r3, #4
 8006210:	b25b      	sxtb	r3, r3
 8006212:	4313      	orrs	r3, r2
 8006214:	b25b      	sxtb	r3, r3
 8006216:	b2db      	uxtb	r3, r3
 8006218:	e001      	b.n	800621e <put_fat+0xa8>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	b2db      	uxtb	r3, r3
 800621e:	697a      	ldr	r2, [r7, #20]
 8006220:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	2201      	movs	r2, #1
 8006226:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800622c:	69bb      	ldr	r3, [r7, #24]
 800622e:	0a5b      	lsrs	r3, r3, #9
 8006230:	4413      	add	r3, r2
 8006232:	4619      	mov	r1, r3
 8006234:	68f8      	ldr	r0, [r7, #12]
 8006236:	f7ff fe3b 	bl	8005eb0 <move_window>
 800623a:	4603      	mov	r3, r0
 800623c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800623e:	7ffb      	ldrb	r3, [r7, #31]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d17a      	bne.n	800633a <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800624a:	69bb      	ldr	r3, [r7, #24]
 800624c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006250:	4413      	add	r3, r2
 8006252:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	f003 0301 	and.w	r3, r3, #1
 800625a:	2b00      	cmp	r3, #0
 800625c:	d003      	beq.n	8006266 <put_fat+0xf0>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	091b      	lsrs	r3, r3, #4
 8006262:	b2db      	uxtb	r3, r3
 8006264:	e00e      	b.n	8006284 <put_fat+0x10e>
 8006266:	697b      	ldr	r3, [r7, #20]
 8006268:	781b      	ldrb	r3, [r3, #0]
 800626a:	b25b      	sxtb	r3, r3
 800626c:	f023 030f 	bic.w	r3, r3, #15
 8006270:	b25a      	sxtb	r2, r3
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	0a1b      	lsrs	r3, r3, #8
 8006276:	b25b      	sxtb	r3, r3
 8006278:	f003 030f 	and.w	r3, r3, #15
 800627c:	b25b      	sxtb	r3, r3
 800627e:	4313      	orrs	r3, r2
 8006280:	b25b      	sxtb	r3, r3
 8006282:	b2db      	uxtb	r3, r3
 8006284:	697a      	ldr	r2, [r7, #20]
 8006286:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	2201      	movs	r2, #1
 800628c:	70da      	strb	r2, [r3, #3]
			break;
 800628e:	e059      	b.n	8006344 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	0a1b      	lsrs	r3, r3, #8
 8006298:	4413      	add	r3, r2
 800629a:	4619      	mov	r1, r3
 800629c:	68f8      	ldr	r0, [r7, #12]
 800629e:	f7ff fe07 	bl	8005eb0 <move_window>
 80062a2:	4603      	mov	r3, r0
 80062a4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80062a6:	7ffb      	ldrb	r3, [r7, #31]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d148      	bne.n	800633e <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80062b2:	68bb      	ldr	r3, [r7, #8]
 80062b4:	005b      	lsls	r3, r3, #1
 80062b6:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80062ba:	4413      	add	r3, r2
 80062bc:	687a      	ldr	r2, [r7, #4]
 80062be:	b292      	uxth	r2, r2
 80062c0:	4611      	mov	r1, r2
 80062c2:	4618      	mov	r0, r3
 80062c4:	f7ff fb7f 	bl	80059c6 <st_word>
			fs->wflag = 1;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	2201      	movs	r2, #1
 80062cc:	70da      	strb	r2, [r3, #3]
			break;
 80062ce:	e039      	b.n	8006344 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	09db      	lsrs	r3, r3, #7
 80062d8:	4413      	add	r3, r2
 80062da:	4619      	mov	r1, r3
 80062dc:	68f8      	ldr	r0, [r7, #12]
 80062de:	f7ff fde7 	bl	8005eb0 <move_window>
 80062e2:	4603      	mov	r3, r0
 80062e4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80062e6:	7ffb      	ldrb	r3, [r7, #31]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d12a      	bne.n	8006342 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	009b      	lsls	r3, r3, #2
 80062fc:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8006300:	4413      	add	r3, r2
 8006302:	4618      	mov	r0, r3
 8006304:	f7ff fb3c 	bl	8005980 <ld_dword>
 8006308:	4603      	mov	r3, r0
 800630a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800630e:	4323      	orrs	r3, r4
 8006310:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8006318:	68bb      	ldr	r3, [r7, #8]
 800631a:	009b      	lsls	r3, r3, #2
 800631c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8006320:	4413      	add	r3, r2
 8006322:	6879      	ldr	r1, [r7, #4]
 8006324:	4618      	mov	r0, r3
 8006326:	f7ff fb69 	bl	80059fc <st_dword>
			fs->wflag = 1;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	2201      	movs	r2, #1
 800632e:	70da      	strb	r2, [r3, #3]
			break;
 8006330:	e008      	b.n	8006344 <put_fat+0x1ce>
		}
	}
 8006332:	bf00      	nop
 8006334:	e006      	b.n	8006344 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8006336:	bf00      	nop
 8006338:	e004      	b.n	8006344 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800633a:	bf00      	nop
 800633c:	e002      	b.n	8006344 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800633e:	bf00      	nop
 8006340:	e000      	b.n	8006344 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8006342:	bf00      	nop
	return res;
 8006344:	7ffb      	ldrb	r3, [r7, #31]
}
 8006346:	4618      	mov	r0, r3
 8006348:	3724      	adds	r7, #36	; 0x24
 800634a:	46bd      	mov	sp, r7
 800634c:	bd90      	pop	{r4, r7, pc}

0800634e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800634e:	b580      	push	{r7, lr}
 8006350:	b088      	sub	sp, #32
 8006352:	af00      	add	r7, sp, #0
 8006354:	60f8      	str	r0, [r7, #12]
 8006356:	60b9      	str	r1, [r7, #8]
 8006358:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800635a:	2300      	movs	r3, #0
 800635c:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	2b01      	cmp	r3, #1
 8006368:	d904      	bls.n	8006374 <remove_chain+0x26>
 800636a:	69bb      	ldr	r3, [r7, #24]
 800636c:	699b      	ldr	r3, [r3, #24]
 800636e:	68ba      	ldr	r2, [r7, #8]
 8006370:	429a      	cmp	r2, r3
 8006372:	d301      	bcc.n	8006378 <remove_chain+0x2a>
 8006374:	2302      	movs	r3, #2
 8006376:	e04b      	b.n	8006410 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d00c      	beq.n	8006398 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800637e:	f04f 32ff 	mov.w	r2, #4294967295
 8006382:	6879      	ldr	r1, [r7, #4]
 8006384:	69b8      	ldr	r0, [r7, #24]
 8006386:	f7ff fef6 	bl	8006176 <put_fat>
 800638a:	4603      	mov	r3, r0
 800638c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800638e:	7ffb      	ldrb	r3, [r7, #31]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d001      	beq.n	8006398 <remove_chain+0x4a>
 8006394:	7ffb      	ldrb	r3, [r7, #31]
 8006396:	e03b      	b.n	8006410 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8006398:	68b9      	ldr	r1, [r7, #8]
 800639a:	68f8      	ldr	r0, [r7, #12]
 800639c:	f7ff fe43 	bl	8006026 <get_fat>
 80063a0:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80063a2:	697b      	ldr	r3, [r7, #20]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d031      	beq.n	800640c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80063a8:	697b      	ldr	r3, [r7, #20]
 80063aa:	2b01      	cmp	r3, #1
 80063ac:	d101      	bne.n	80063b2 <remove_chain+0x64>
 80063ae:	2302      	movs	r3, #2
 80063b0:	e02e      	b.n	8006410 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80063b2:	697b      	ldr	r3, [r7, #20]
 80063b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063b8:	d101      	bne.n	80063be <remove_chain+0x70>
 80063ba:	2301      	movs	r3, #1
 80063bc:	e028      	b.n	8006410 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80063be:	2200      	movs	r2, #0
 80063c0:	68b9      	ldr	r1, [r7, #8]
 80063c2:	69b8      	ldr	r0, [r7, #24]
 80063c4:	f7ff fed7 	bl	8006176 <put_fat>
 80063c8:	4603      	mov	r3, r0
 80063ca:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80063cc:	7ffb      	ldrb	r3, [r7, #31]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d001      	beq.n	80063d6 <remove_chain+0x88>
 80063d2:	7ffb      	ldrb	r3, [r7, #31]
 80063d4:	e01c      	b.n	8006410 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80063d6:	69bb      	ldr	r3, [r7, #24]
 80063d8:	695a      	ldr	r2, [r3, #20]
 80063da:	69bb      	ldr	r3, [r7, #24]
 80063dc:	699b      	ldr	r3, [r3, #24]
 80063de:	3b02      	subs	r3, #2
 80063e0:	429a      	cmp	r2, r3
 80063e2:	d20b      	bcs.n	80063fc <remove_chain+0xae>
			fs->free_clst++;
 80063e4:	69bb      	ldr	r3, [r7, #24]
 80063e6:	695b      	ldr	r3, [r3, #20]
 80063e8:	1c5a      	adds	r2, r3, #1
 80063ea:	69bb      	ldr	r3, [r7, #24]
 80063ec:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 80063ee:	69bb      	ldr	r3, [r7, #24]
 80063f0:	791b      	ldrb	r3, [r3, #4]
 80063f2:	f043 0301 	orr.w	r3, r3, #1
 80063f6:	b2da      	uxtb	r2, r3
 80063f8:	69bb      	ldr	r3, [r7, #24]
 80063fa:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80063fc:	697b      	ldr	r3, [r7, #20]
 80063fe:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8006400:	69bb      	ldr	r3, [r7, #24]
 8006402:	699b      	ldr	r3, [r3, #24]
 8006404:	68ba      	ldr	r2, [r7, #8]
 8006406:	429a      	cmp	r2, r3
 8006408:	d3c6      	bcc.n	8006398 <remove_chain+0x4a>
 800640a:	e000      	b.n	800640e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800640c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800640e:	2300      	movs	r3, #0
}
 8006410:	4618      	mov	r0, r3
 8006412:	3720      	adds	r7, #32
 8006414:	46bd      	mov	sp, r7
 8006416:	bd80      	pop	{r7, pc}

08006418 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b088      	sub	sp, #32
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
 8006420:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d10d      	bne.n	800644a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800642e:	693b      	ldr	r3, [r7, #16]
 8006430:	691b      	ldr	r3, [r3, #16]
 8006432:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8006434:	69bb      	ldr	r3, [r7, #24]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d004      	beq.n	8006444 <create_chain+0x2c>
 800643a:	693b      	ldr	r3, [r7, #16]
 800643c:	699b      	ldr	r3, [r3, #24]
 800643e:	69ba      	ldr	r2, [r7, #24]
 8006440:	429a      	cmp	r2, r3
 8006442:	d31b      	bcc.n	800647c <create_chain+0x64>
 8006444:	2301      	movs	r3, #1
 8006446:	61bb      	str	r3, [r7, #24]
 8006448:	e018      	b.n	800647c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800644a:	6839      	ldr	r1, [r7, #0]
 800644c:	6878      	ldr	r0, [r7, #4]
 800644e:	f7ff fdea 	bl	8006026 <get_fat>
 8006452:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	2b01      	cmp	r3, #1
 8006458:	d801      	bhi.n	800645e <create_chain+0x46>
 800645a:	2301      	movs	r3, #1
 800645c:	e070      	b.n	8006540 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006464:	d101      	bne.n	800646a <create_chain+0x52>
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	e06a      	b.n	8006540 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800646a:	693b      	ldr	r3, [r7, #16]
 800646c:	699b      	ldr	r3, [r3, #24]
 800646e:	68fa      	ldr	r2, [r7, #12]
 8006470:	429a      	cmp	r2, r3
 8006472:	d201      	bcs.n	8006478 <create_chain+0x60>
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	e063      	b.n	8006540 <create_chain+0x128>
		scl = clst;
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800647c:	69bb      	ldr	r3, [r7, #24]
 800647e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8006480:	69fb      	ldr	r3, [r7, #28]
 8006482:	3301      	adds	r3, #1
 8006484:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8006486:	693b      	ldr	r3, [r7, #16]
 8006488:	699b      	ldr	r3, [r3, #24]
 800648a:	69fa      	ldr	r2, [r7, #28]
 800648c:	429a      	cmp	r2, r3
 800648e:	d307      	bcc.n	80064a0 <create_chain+0x88>
				ncl = 2;
 8006490:	2302      	movs	r3, #2
 8006492:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8006494:	69fa      	ldr	r2, [r7, #28]
 8006496:	69bb      	ldr	r3, [r7, #24]
 8006498:	429a      	cmp	r2, r3
 800649a:	d901      	bls.n	80064a0 <create_chain+0x88>
 800649c:	2300      	movs	r3, #0
 800649e:	e04f      	b.n	8006540 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80064a0:	69f9      	ldr	r1, [r7, #28]
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	f7ff fdbf 	bl	8006026 <get_fat>
 80064a8:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d00e      	beq.n	80064ce <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	2b01      	cmp	r3, #1
 80064b4:	d003      	beq.n	80064be <create_chain+0xa6>
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064bc:	d101      	bne.n	80064c2 <create_chain+0xaa>
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	e03e      	b.n	8006540 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80064c2:	69fa      	ldr	r2, [r7, #28]
 80064c4:	69bb      	ldr	r3, [r7, #24]
 80064c6:	429a      	cmp	r2, r3
 80064c8:	d1da      	bne.n	8006480 <create_chain+0x68>
 80064ca:	2300      	movs	r3, #0
 80064cc:	e038      	b.n	8006540 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80064ce:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80064d0:	f04f 32ff 	mov.w	r2, #4294967295
 80064d4:	69f9      	ldr	r1, [r7, #28]
 80064d6:	6938      	ldr	r0, [r7, #16]
 80064d8:	f7ff fe4d 	bl	8006176 <put_fat>
 80064dc:	4603      	mov	r3, r0
 80064de:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80064e0:	7dfb      	ldrb	r3, [r7, #23]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d109      	bne.n	80064fa <create_chain+0xe2>
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d006      	beq.n	80064fa <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80064ec:	69fa      	ldr	r2, [r7, #28]
 80064ee:	6839      	ldr	r1, [r7, #0]
 80064f0:	6938      	ldr	r0, [r7, #16]
 80064f2:	f7ff fe40 	bl	8006176 <put_fat>
 80064f6:	4603      	mov	r3, r0
 80064f8:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80064fa:	7dfb      	ldrb	r3, [r7, #23]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d116      	bne.n	800652e <create_chain+0x116>
		fs->last_clst = ncl;
 8006500:	693b      	ldr	r3, [r7, #16]
 8006502:	69fa      	ldr	r2, [r7, #28]
 8006504:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8006506:	693b      	ldr	r3, [r7, #16]
 8006508:	695a      	ldr	r2, [r3, #20]
 800650a:	693b      	ldr	r3, [r7, #16]
 800650c:	699b      	ldr	r3, [r3, #24]
 800650e:	3b02      	subs	r3, #2
 8006510:	429a      	cmp	r2, r3
 8006512:	d804      	bhi.n	800651e <create_chain+0x106>
 8006514:	693b      	ldr	r3, [r7, #16]
 8006516:	695b      	ldr	r3, [r3, #20]
 8006518:	1e5a      	subs	r2, r3, #1
 800651a:	693b      	ldr	r3, [r7, #16]
 800651c:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800651e:	693b      	ldr	r3, [r7, #16]
 8006520:	791b      	ldrb	r3, [r3, #4]
 8006522:	f043 0301 	orr.w	r3, r3, #1
 8006526:	b2da      	uxtb	r2, r3
 8006528:	693b      	ldr	r3, [r7, #16]
 800652a:	711a      	strb	r2, [r3, #4]
 800652c:	e007      	b.n	800653e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800652e:	7dfb      	ldrb	r3, [r7, #23]
 8006530:	2b01      	cmp	r3, #1
 8006532:	d102      	bne.n	800653a <create_chain+0x122>
 8006534:	f04f 33ff 	mov.w	r3, #4294967295
 8006538:	e000      	b.n	800653c <create_chain+0x124>
 800653a:	2301      	movs	r3, #1
 800653c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800653e:	69fb      	ldr	r3, [r7, #28]
}
 8006540:	4618      	mov	r0, r3
 8006542:	3720      	adds	r7, #32
 8006544:	46bd      	mov	sp, r7
 8006546:	bd80      	pop	{r7, pc}

08006548 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8006548:	b480      	push	{r7}
 800654a:	b087      	sub	sp, #28
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
 8006550:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800655c:	3304      	adds	r3, #4
 800655e:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	0a5b      	lsrs	r3, r3, #9
 8006564:	68fa      	ldr	r2, [r7, #12]
 8006566:	8952      	ldrh	r2, [r2, #10]
 8006568:	fbb3 f3f2 	udiv	r3, r3, r2
 800656c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800656e:	693b      	ldr	r3, [r7, #16]
 8006570:	1d1a      	adds	r2, r3, #4
 8006572:	613a      	str	r2, [r7, #16]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d101      	bne.n	8006582 <clmt_clust+0x3a>
 800657e:	2300      	movs	r3, #0
 8006580:	e010      	b.n	80065a4 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8006582:	697a      	ldr	r2, [r7, #20]
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	429a      	cmp	r2, r3
 8006588:	d307      	bcc.n	800659a <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800658a:	697a      	ldr	r2, [r7, #20]
 800658c:	68bb      	ldr	r3, [r7, #8]
 800658e:	1ad3      	subs	r3, r2, r3
 8006590:	617b      	str	r3, [r7, #20]
 8006592:	693b      	ldr	r3, [r7, #16]
 8006594:	3304      	adds	r3, #4
 8006596:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006598:	e7e9      	b.n	800656e <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800659a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800659c:	693b      	ldr	r3, [r7, #16]
 800659e:	681a      	ldr	r2, [r3, #0]
 80065a0:	697b      	ldr	r3, [r7, #20]
 80065a2:	4413      	add	r3, r2
}
 80065a4:	4618      	mov	r0, r3
 80065a6:	371c      	adds	r7, #28
 80065a8:	46bd      	mov	sp, r7
 80065aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ae:	4770      	bx	lr

080065b0 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b086      	sub	sp, #24
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
 80065b8:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80065c6:	d204      	bcs.n	80065d2 <dir_sdi+0x22>
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	f003 031f 	and.w	r3, r3, #31
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d001      	beq.n	80065d6 <dir_sdi+0x26>
		return FR_INT_ERR;
 80065d2:	2302      	movs	r3, #2
 80065d4:	e063      	b.n	800669e <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	683a      	ldr	r2, [r7, #0]
 80065da:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	689b      	ldr	r3, [r3, #8]
 80065e0:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80065e2:	697b      	ldr	r3, [r7, #20]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d106      	bne.n	80065f6 <dir_sdi+0x46>
 80065e8:	693b      	ldr	r3, [r7, #16]
 80065ea:	781b      	ldrb	r3, [r3, #0]
 80065ec:	2b02      	cmp	r3, #2
 80065ee:	d902      	bls.n	80065f6 <dir_sdi+0x46>
		clst = fs->dirbase;
 80065f0:	693b      	ldr	r3, [r7, #16]
 80065f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065f4:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80065f6:	697b      	ldr	r3, [r7, #20]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d10c      	bne.n	8006616 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	095b      	lsrs	r3, r3, #5
 8006600:	693a      	ldr	r2, [r7, #16]
 8006602:	8912      	ldrh	r2, [r2, #8]
 8006604:	4293      	cmp	r3, r2
 8006606:	d301      	bcc.n	800660c <dir_sdi+0x5c>
 8006608:	2302      	movs	r3, #2
 800660a:	e048      	b.n	800669e <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800660c:	693b      	ldr	r3, [r7, #16]
 800660e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	61da      	str	r2, [r3, #28]
 8006614:	e029      	b.n	800666a <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8006616:	693b      	ldr	r3, [r7, #16]
 8006618:	895b      	ldrh	r3, [r3, #10]
 800661a:	025b      	lsls	r3, r3, #9
 800661c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800661e:	e019      	b.n	8006654 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6979      	ldr	r1, [r7, #20]
 8006624:	4618      	mov	r0, r3
 8006626:	f7ff fcfe 	bl	8006026 <get_fat>
 800662a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800662c:	697b      	ldr	r3, [r7, #20]
 800662e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006632:	d101      	bne.n	8006638 <dir_sdi+0x88>
 8006634:	2301      	movs	r3, #1
 8006636:	e032      	b.n	800669e <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8006638:	697b      	ldr	r3, [r7, #20]
 800663a:	2b01      	cmp	r3, #1
 800663c:	d904      	bls.n	8006648 <dir_sdi+0x98>
 800663e:	693b      	ldr	r3, [r7, #16]
 8006640:	699b      	ldr	r3, [r3, #24]
 8006642:	697a      	ldr	r2, [r7, #20]
 8006644:	429a      	cmp	r2, r3
 8006646:	d301      	bcc.n	800664c <dir_sdi+0x9c>
 8006648:	2302      	movs	r3, #2
 800664a:	e028      	b.n	800669e <dir_sdi+0xee>
			ofs -= csz;
 800664c:	683a      	ldr	r2, [r7, #0]
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	1ad3      	subs	r3, r2, r3
 8006652:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006654:	683a      	ldr	r2, [r7, #0]
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	429a      	cmp	r2, r3
 800665a:	d2e1      	bcs.n	8006620 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800665c:	6979      	ldr	r1, [r7, #20]
 800665e:	6938      	ldr	r0, [r7, #16]
 8006660:	f7ff fcc2 	bl	8005fe8 <clust2sect>
 8006664:	4602      	mov	r2, r0
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	697a      	ldr	r2, [r7, #20]
 800666e:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	69db      	ldr	r3, [r3, #28]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d101      	bne.n	800667c <dir_sdi+0xcc>
 8006678:	2302      	movs	r3, #2
 800667a:	e010      	b.n	800669e <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	69da      	ldr	r2, [r3, #28]
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	0a5b      	lsrs	r3, r3, #9
 8006684:	441a      	add	r2, r3
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800668a:	693b      	ldr	r3, [r7, #16]
 800668c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006696:	441a      	add	r2, r3
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800669c:	2300      	movs	r3, #0
}
 800669e:	4618      	mov	r0, r3
 80066a0:	3718      	adds	r7, #24
 80066a2:	46bd      	mov	sp, r7
 80066a4:	bd80      	pop	{r7, pc}

080066a6 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80066a6:	b580      	push	{r7, lr}
 80066a8:	b086      	sub	sp, #24
 80066aa:	af00      	add	r7, sp, #0
 80066ac:	6078      	str	r0, [r7, #4]
 80066ae:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	695b      	ldr	r3, [r3, #20]
 80066ba:	3320      	adds	r3, #32
 80066bc:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	69db      	ldr	r3, [r3, #28]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d003      	beq.n	80066ce <dir_next+0x28>
 80066c6:	68bb      	ldr	r3, [r7, #8]
 80066c8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80066cc:	d301      	bcc.n	80066d2 <dir_next+0x2c>
 80066ce:	2304      	movs	r3, #4
 80066d0:	e0aa      	b.n	8006828 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80066d2:	68bb      	ldr	r3, [r7, #8]
 80066d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066d8:	2b00      	cmp	r3, #0
 80066da:	f040 8098 	bne.w	800680e <dir_next+0x168>
		dp->sect++;				/* Next sector */
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	69db      	ldr	r3, [r3, #28]
 80066e2:	1c5a      	adds	r2, r3, #1
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	699b      	ldr	r3, [r3, #24]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d10b      	bne.n	8006708 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	095b      	lsrs	r3, r3, #5
 80066f4:	68fa      	ldr	r2, [r7, #12]
 80066f6:	8912      	ldrh	r2, [r2, #8]
 80066f8:	4293      	cmp	r3, r2
 80066fa:	f0c0 8088 	bcc.w	800680e <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2200      	movs	r2, #0
 8006702:	61da      	str	r2, [r3, #28]
 8006704:	2304      	movs	r3, #4
 8006706:	e08f      	b.n	8006828 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8006708:	68bb      	ldr	r3, [r7, #8]
 800670a:	0a5b      	lsrs	r3, r3, #9
 800670c:	68fa      	ldr	r2, [r7, #12]
 800670e:	8952      	ldrh	r2, [r2, #10]
 8006710:	3a01      	subs	r2, #1
 8006712:	4013      	ands	r3, r2
 8006714:	2b00      	cmp	r3, #0
 8006716:	d17a      	bne.n	800680e <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8006718:	687a      	ldr	r2, [r7, #4]
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	699b      	ldr	r3, [r3, #24]
 800671e:	4619      	mov	r1, r3
 8006720:	4610      	mov	r0, r2
 8006722:	f7ff fc80 	bl	8006026 <get_fat>
 8006726:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8006728:	697b      	ldr	r3, [r7, #20]
 800672a:	2b01      	cmp	r3, #1
 800672c:	d801      	bhi.n	8006732 <dir_next+0x8c>
 800672e:	2302      	movs	r3, #2
 8006730:	e07a      	b.n	8006828 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8006732:	697b      	ldr	r3, [r7, #20]
 8006734:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006738:	d101      	bne.n	800673e <dir_next+0x98>
 800673a:	2301      	movs	r3, #1
 800673c:	e074      	b.n	8006828 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	699b      	ldr	r3, [r3, #24]
 8006742:	697a      	ldr	r2, [r7, #20]
 8006744:	429a      	cmp	r2, r3
 8006746:	d358      	bcc.n	80067fa <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d104      	bne.n	8006758 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2200      	movs	r2, #0
 8006752:	61da      	str	r2, [r3, #28]
 8006754:	2304      	movs	r3, #4
 8006756:	e067      	b.n	8006828 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8006758:	687a      	ldr	r2, [r7, #4]
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	699b      	ldr	r3, [r3, #24]
 800675e:	4619      	mov	r1, r3
 8006760:	4610      	mov	r0, r2
 8006762:	f7ff fe59 	bl	8006418 <create_chain>
 8006766:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8006768:	697b      	ldr	r3, [r7, #20]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d101      	bne.n	8006772 <dir_next+0xcc>
 800676e:	2307      	movs	r3, #7
 8006770:	e05a      	b.n	8006828 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8006772:	697b      	ldr	r3, [r7, #20]
 8006774:	2b01      	cmp	r3, #1
 8006776:	d101      	bne.n	800677c <dir_next+0xd6>
 8006778:	2302      	movs	r3, #2
 800677a:	e055      	b.n	8006828 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800677c:	697b      	ldr	r3, [r7, #20]
 800677e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006782:	d101      	bne.n	8006788 <dir_next+0xe2>
 8006784:	2301      	movs	r3, #1
 8006786:	e04f      	b.n	8006828 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8006788:	68f8      	ldr	r0, [r7, #12]
 800678a:	f7ff fb4d 	bl	8005e28 <sync_window>
 800678e:	4603      	mov	r3, r0
 8006790:	2b00      	cmp	r3, #0
 8006792:	d001      	beq.n	8006798 <dir_next+0xf2>
 8006794:	2301      	movs	r3, #1
 8006796:	e047      	b.n	8006828 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	3334      	adds	r3, #52	; 0x34
 800679c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80067a0:	2100      	movs	r1, #0
 80067a2:	4618      	mov	r0, r3
 80067a4:	f7ff f977 	bl	8005a96 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80067a8:	2300      	movs	r3, #0
 80067aa:	613b      	str	r3, [r7, #16]
 80067ac:	6979      	ldr	r1, [r7, #20]
 80067ae:	68f8      	ldr	r0, [r7, #12]
 80067b0:	f7ff fc1a 	bl	8005fe8 <clust2sect>
 80067b4:	4602      	mov	r2, r0
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	631a      	str	r2, [r3, #48]	; 0x30
 80067ba:	e012      	b.n	80067e2 <dir_next+0x13c>
						fs->wflag = 1;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	2201      	movs	r2, #1
 80067c0:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80067c2:	68f8      	ldr	r0, [r7, #12]
 80067c4:	f7ff fb30 	bl	8005e28 <sync_window>
 80067c8:	4603      	mov	r3, r0
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d001      	beq.n	80067d2 <dir_next+0x12c>
 80067ce:	2301      	movs	r3, #1
 80067d0:	e02a      	b.n	8006828 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80067d2:	693b      	ldr	r3, [r7, #16]
 80067d4:	3301      	adds	r3, #1
 80067d6:	613b      	str	r3, [r7, #16]
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067dc:	1c5a      	adds	r2, r3, #1
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	631a      	str	r2, [r3, #48]	; 0x30
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	895b      	ldrh	r3, [r3, #10]
 80067e6:	461a      	mov	r2, r3
 80067e8:	693b      	ldr	r3, [r7, #16]
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d3e6      	bcc.n	80067bc <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80067f2:	693b      	ldr	r3, [r7, #16]
 80067f4:	1ad2      	subs	r2, r2, r3
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	697a      	ldr	r2, [r7, #20]
 80067fe:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8006800:	6979      	ldr	r1, [r7, #20]
 8006802:	68f8      	ldr	r0, [r7, #12]
 8006804:	f7ff fbf0 	bl	8005fe8 <clust2sect>
 8006808:	4602      	mov	r2, r0
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	68ba      	ldr	r2, [r7, #8]
 8006812:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800681a:	68bb      	ldr	r3, [r7, #8]
 800681c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006820:	441a      	add	r2, r3
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006826:	2300      	movs	r3, #0
}
 8006828:	4618      	mov	r0, r3
 800682a:	3718      	adds	r7, #24
 800682c:	46bd      	mov	sp, r7
 800682e:	bd80      	pop	{r7, pc}

08006830 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b086      	sub	sp, #24
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
 8006838:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8006840:	2100      	movs	r1, #0
 8006842:	6878      	ldr	r0, [r7, #4]
 8006844:	f7ff feb4 	bl	80065b0 <dir_sdi>
 8006848:	4603      	mov	r3, r0
 800684a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800684c:	7dfb      	ldrb	r3, [r7, #23]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d12b      	bne.n	80068aa <dir_alloc+0x7a>
		n = 0;
 8006852:	2300      	movs	r3, #0
 8006854:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	69db      	ldr	r3, [r3, #28]
 800685a:	4619      	mov	r1, r3
 800685c:	68f8      	ldr	r0, [r7, #12]
 800685e:	f7ff fb27 	bl	8005eb0 <move_window>
 8006862:	4603      	mov	r3, r0
 8006864:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006866:	7dfb      	ldrb	r3, [r7, #23]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d11d      	bne.n	80068a8 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6a1b      	ldr	r3, [r3, #32]
 8006870:	781b      	ldrb	r3, [r3, #0]
 8006872:	2be5      	cmp	r3, #229	; 0xe5
 8006874:	d004      	beq.n	8006880 <dir_alloc+0x50>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6a1b      	ldr	r3, [r3, #32]
 800687a:	781b      	ldrb	r3, [r3, #0]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d107      	bne.n	8006890 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8006880:	693b      	ldr	r3, [r7, #16]
 8006882:	3301      	adds	r3, #1
 8006884:	613b      	str	r3, [r7, #16]
 8006886:	693a      	ldr	r2, [r7, #16]
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	429a      	cmp	r2, r3
 800688c:	d102      	bne.n	8006894 <dir_alloc+0x64>
 800688e:	e00c      	b.n	80068aa <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8006890:	2300      	movs	r3, #0
 8006892:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8006894:	2101      	movs	r1, #1
 8006896:	6878      	ldr	r0, [r7, #4]
 8006898:	f7ff ff05 	bl	80066a6 <dir_next>
 800689c:	4603      	mov	r3, r0
 800689e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80068a0:	7dfb      	ldrb	r3, [r7, #23]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d0d7      	beq.n	8006856 <dir_alloc+0x26>
 80068a6:	e000      	b.n	80068aa <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80068a8:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80068aa:	7dfb      	ldrb	r3, [r7, #23]
 80068ac:	2b04      	cmp	r3, #4
 80068ae:	d101      	bne.n	80068b4 <dir_alloc+0x84>
 80068b0:	2307      	movs	r3, #7
 80068b2:	75fb      	strb	r3, [r7, #23]
	return res;
 80068b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80068b6:	4618      	mov	r0, r3
 80068b8:	3718      	adds	r7, #24
 80068ba:	46bd      	mov	sp, r7
 80068bc:	bd80      	pop	{r7, pc}

080068be <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80068be:	b580      	push	{r7, lr}
 80068c0:	b084      	sub	sp, #16
 80068c2:	af00      	add	r7, sp, #0
 80068c4:	6078      	str	r0, [r7, #4]
 80068c6:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	331a      	adds	r3, #26
 80068cc:	4618      	mov	r0, r3
 80068ce:	f7ff f83f 	bl	8005950 <ld_word>
 80068d2:	4603      	mov	r3, r0
 80068d4:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	781b      	ldrb	r3, [r3, #0]
 80068da:	2b03      	cmp	r3, #3
 80068dc:	d109      	bne.n	80068f2 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	3314      	adds	r3, #20
 80068e2:	4618      	mov	r0, r3
 80068e4:	f7ff f834 	bl	8005950 <ld_word>
 80068e8:	4603      	mov	r3, r0
 80068ea:	041b      	lsls	r3, r3, #16
 80068ec:	68fa      	ldr	r2, [r7, #12]
 80068ee:	4313      	orrs	r3, r2
 80068f0:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80068f2:	68fb      	ldr	r3, [r7, #12]
}
 80068f4:	4618      	mov	r0, r3
 80068f6:	3710      	adds	r7, #16
 80068f8:	46bd      	mov	sp, r7
 80068fa:	bd80      	pop	{r7, pc}

080068fc <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b084      	sub	sp, #16
 8006900:	af00      	add	r7, sp, #0
 8006902:	60f8      	str	r0, [r7, #12]
 8006904:	60b9      	str	r1, [r7, #8]
 8006906:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	331a      	adds	r3, #26
 800690c:	687a      	ldr	r2, [r7, #4]
 800690e:	b292      	uxth	r2, r2
 8006910:	4611      	mov	r1, r2
 8006912:	4618      	mov	r0, r3
 8006914:	f7ff f857 	bl	80059c6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	781b      	ldrb	r3, [r3, #0]
 800691c:	2b03      	cmp	r3, #3
 800691e:	d109      	bne.n	8006934 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	f103 0214 	add.w	r2, r3, #20
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	0c1b      	lsrs	r3, r3, #16
 800692a:	b29b      	uxth	r3, r3
 800692c:	4619      	mov	r1, r3
 800692e:	4610      	mov	r0, r2
 8006930:	f7ff f849 	bl	80059c6 <st_word>
	}
}
 8006934:	bf00      	nop
 8006936:	3710      	adds	r7, #16
 8006938:	46bd      	mov	sp, r7
 800693a:	bd80      	pop	{r7, pc}

0800693c <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800693c:	b590      	push	{r4, r7, lr}
 800693e:	b087      	sub	sp, #28
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
 8006944:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	331a      	adds	r3, #26
 800694a:	4618      	mov	r0, r3
 800694c:	f7ff f800 	bl	8005950 <ld_word>
 8006950:	4603      	mov	r3, r0
 8006952:	2b00      	cmp	r3, #0
 8006954:	d001      	beq.n	800695a <cmp_lfn+0x1e>
 8006956:	2300      	movs	r3, #0
 8006958:	e059      	b.n	8006a0e <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	781b      	ldrb	r3, [r3, #0]
 800695e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006962:	1e5a      	subs	r2, r3, #1
 8006964:	4613      	mov	r3, r2
 8006966:	005b      	lsls	r3, r3, #1
 8006968:	4413      	add	r3, r2
 800696a:	009b      	lsls	r3, r3, #2
 800696c:	4413      	add	r3, r2
 800696e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8006970:	2301      	movs	r3, #1
 8006972:	81fb      	strh	r3, [r7, #14]
 8006974:	2300      	movs	r3, #0
 8006976:	613b      	str	r3, [r7, #16]
 8006978:	e033      	b.n	80069e2 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800697a:	4a27      	ldr	r2, [pc, #156]	; (8006a18 <cmp_lfn+0xdc>)
 800697c:	693b      	ldr	r3, [r7, #16]
 800697e:	4413      	add	r3, r2
 8006980:	781b      	ldrb	r3, [r3, #0]
 8006982:	461a      	mov	r2, r3
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	4413      	add	r3, r2
 8006988:	4618      	mov	r0, r3
 800698a:	f7fe ffe1 	bl	8005950 <ld_word>
 800698e:	4603      	mov	r3, r0
 8006990:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8006992:	89fb      	ldrh	r3, [r7, #14]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d01a      	beq.n	80069ce <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8006998:	697b      	ldr	r3, [r7, #20]
 800699a:	2bfe      	cmp	r3, #254	; 0xfe
 800699c:	d812      	bhi.n	80069c4 <cmp_lfn+0x88>
 800699e:	89bb      	ldrh	r3, [r7, #12]
 80069a0:	4618      	mov	r0, r3
 80069a2:	f001 fd63 	bl	800846c <ff_wtoupper>
 80069a6:	4603      	mov	r3, r0
 80069a8:	461c      	mov	r4, r3
 80069aa:	697b      	ldr	r3, [r7, #20]
 80069ac:	1c5a      	adds	r2, r3, #1
 80069ae:	617a      	str	r2, [r7, #20]
 80069b0:	005b      	lsls	r3, r3, #1
 80069b2:	687a      	ldr	r2, [r7, #4]
 80069b4:	4413      	add	r3, r2
 80069b6:	881b      	ldrh	r3, [r3, #0]
 80069b8:	4618      	mov	r0, r3
 80069ba:	f001 fd57 	bl	800846c <ff_wtoupper>
 80069be:	4603      	mov	r3, r0
 80069c0:	429c      	cmp	r4, r3
 80069c2:	d001      	beq.n	80069c8 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 80069c4:	2300      	movs	r3, #0
 80069c6:	e022      	b.n	8006a0e <cmp_lfn+0xd2>
			}
			wc = uc;
 80069c8:	89bb      	ldrh	r3, [r7, #12]
 80069ca:	81fb      	strh	r3, [r7, #14]
 80069cc:	e006      	b.n	80069dc <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80069ce:	89bb      	ldrh	r3, [r7, #12]
 80069d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80069d4:	4293      	cmp	r3, r2
 80069d6:	d001      	beq.n	80069dc <cmp_lfn+0xa0>
 80069d8:	2300      	movs	r3, #0
 80069da:	e018      	b.n	8006a0e <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80069dc:	693b      	ldr	r3, [r7, #16]
 80069de:	3301      	adds	r3, #1
 80069e0:	613b      	str	r3, [r7, #16]
 80069e2:	693b      	ldr	r3, [r7, #16]
 80069e4:	2b0c      	cmp	r3, #12
 80069e6:	d9c8      	bls.n	800697a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	781b      	ldrb	r3, [r3, #0]
 80069ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d00b      	beq.n	8006a0c <cmp_lfn+0xd0>
 80069f4:	89fb      	ldrh	r3, [r7, #14]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d008      	beq.n	8006a0c <cmp_lfn+0xd0>
 80069fa:	697b      	ldr	r3, [r7, #20]
 80069fc:	005b      	lsls	r3, r3, #1
 80069fe:	687a      	ldr	r2, [r7, #4]
 8006a00:	4413      	add	r3, r2
 8006a02:	881b      	ldrh	r3, [r3, #0]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d001      	beq.n	8006a0c <cmp_lfn+0xd0>
 8006a08:	2300      	movs	r3, #0
 8006a0a:	e000      	b.n	8006a0e <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8006a0c:	2301      	movs	r3, #1
}
 8006a0e:	4618      	mov	r0, r3
 8006a10:	371c      	adds	r7, #28
 8006a12:	46bd      	mov	sp, r7
 8006a14:	bd90      	pop	{r4, r7, pc}
 8006a16:	bf00      	nop
 8006a18:	080086e8 	.word	0x080086e8

08006a1c <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b088      	sub	sp, #32
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	60f8      	str	r0, [r7, #12]
 8006a24:	60b9      	str	r1, [r7, #8]
 8006a26:	4611      	mov	r1, r2
 8006a28:	461a      	mov	r2, r3
 8006a2a:	460b      	mov	r3, r1
 8006a2c:	71fb      	strb	r3, [r7, #7]
 8006a2e:	4613      	mov	r3, r2
 8006a30:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	330d      	adds	r3, #13
 8006a36:	79ba      	ldrb	r2, [r7, #6]
 8006a38:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8006a3a:	68bb      	ldr	r3, [r7, #8]
 8006a3c:	330b      	adds	r3, #11
 8006a3e:	220f      	movs	r2, #15
 8006a40:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8006a42:	68bb      	ldr	r3, [r7, #8]
 8006a44:	330c      	adds	r3, #12
 8006a46:	2200      	movs	r2, #0
 8006a48:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8006a4a:	68bb      	ldr	r3, [r7, #8]
 8006a4c:	331a      	adds	r3, #26
 8006a4e:	2100      	movs	r1, #0
 8006a50:	4618      	mov	r0, r3
 8006a52:	f7fe ffb8 	bl	80059c6 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8006a56:	79fb      	ldrb	r3, [r7, #7]
 8006a58:	1e5a      	subs	r2, r3, #1
 8006a5a:	4613      	mov	r3, r2
 8006a5c:	005b      	lsls	r3, r3, #1
 8006a5e:	4413      	add	r3, r2
 8006a60:	009b      	lsls	r3, r3, #2
 8006a62:	4413      	add	r3, r2
 8006a64:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8006a66:	2300      	movs	r3, #0
 8006a68:	82fb      	strh	r3, [r7, #22]
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8006a6e:	8afb      	ldrh	r3, [r7, #22]
 8006a70:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006a74:	4293      	cmp	r3, r2
 8006a76:	d007      	beq.n	8006a88 <put_lfn+0x6c>
 8006a78:	69fb      	ldr	r3, [r7, #28]
 8006a7a:	1c5a      	adds	r2, r3, #1
 8006a7c:	61fa      	str	r2, [r7, #28]
 8006a7e:	005b      	lsls	r3, r3, #1
 8006a80:	68fa      	ldr	r2, [r7, #12]
 8006a82:	4413      	add	r3, r2
 8006a84:	881b      	ldrh	r3, [r3, #0]
 8006a86:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8006a88:	4a17      	ldr	r2, [pc, #92]	; (8006ae8 <put_lfn+0xcc>)
 8006a8a:	69bb      	ldr	r3, [r7, #24]
 8006a8c:	4413      	add	r3, r2
 8006a8e:	781b      	ldrb	r3, [r3, #0]
 8006a90:	461a      	mov	r2, r3
 8006a92:	68bb      	ldr	r3, [r7, #8]
 8006a94:	4413      	add	r3, r2
 8006a96:	8afa      	ldrh	r2, [r7, #22]
 8006a98:	4611      	mov	r1, r2
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	f7fe ff93 	bl	80059c6 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8006aa0:	8afb      	ldrh	r3, [r7, #22]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d102      	bne.n	8006aac <put_lfn+0x90>
 8006aa6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006aaa:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8006aac:	69bb      	ldr	r3, [r7, #24]
 8006aae:	3301      	adds	r3, #1
 8006ab0:	61bb      	str	r3, [r7, #24]
 8006ab2:	69bb      	ldr	r3, [r7, #24]
 8006ab4:	2b0c      	cmp	r3, #12
 8006ab6:	d9da      	bls.n	8006a6e <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8006ab8:	8afb      	ldrh	r3, [r7, #22]
 8006aba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	d006      	beq.n	8006ad0 <put_lfn+0xb4>
 8006ac2:	69fb      	ldr	r3, [r7, #28]
 8006ac4:	005b      	lsls	r3, r3, #1
 8006ac6:	68fa      	ldr	r2, [r7, #12]
 8006ac8:	4413      	add	r3, r2
 8006aca:	881b      	ldrh	r3, [r3, #0]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d103      	bne.n	8006ad8 <put_lfn+0xbc>
 8006ad0:	79fb      	ldrb	r3, [r7, #7]
 8006ad2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ad6:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8006ad8:	68bb      	ldr	r3, [r7, #8]
 8006ada:	79fa      	ldrb	r2, [r7, #7]
 8006adc:	701a      	strb	r2, [r3, #0]
}
 8006ade:	bf00      	nop
 8006ae0:	3720      	adds	r7, #32
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	bd80      	pop	{r7, pc}
 8006ae6:	bf00      	nop
 8006ae8:	080086e8 	.word	0x080086e8

08006aec <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b08c      	sub	sp, #48	; 0x30
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	60f8      	str	r0, [r7, #12]
 8006af4:	60b9      	str	r1, [r7, #8]
 8006af6:	607a      	str	r2, [r7, #4]
 8006af8:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8006afa:	220b      	movs	r2, #11
 8006afc:	68b9      	ldr	r1, [r7, #8]
 8006afe:	68f8      	ldr	r0, [r7, #12]
 8006b00:	f7fe ffa8 	bl	8005a54 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	2b05      	cmp	r3, #5
 8006b08:	d929      	bls.n	8006b5e <gen_numname+0x72>
		sr = seq;
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8006b0e:	e020      	b.n	8006b52 <gen_numname+0x66>
			wc = *lfn++;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	1c9a      	adds	r2, r3, #2
 8006b14:	607a      	str	r2, [r7, #4]
 8006b16:	881b      	ldrh	r3, [r3, #0]
 8006b18:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b1e:	e015      	b.n	8006b4c <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 8006b20:	69fb      	ldr	r3, [r7, #28]
 8006b22:	005a      	lsls	r2, r3, #1
 8006b24:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006b26:	f003 0301 	and.w	r3, r3, #1
 8006b2a:	4413      	add	r3, r2
 8006b2c:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8006b2e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006b30:	085b      	lsrs	r3, r3, #1
 8006b32:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8006b34:	69fb      	ldr	r3, [r7, #28]
 8006b36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d003      	beq.n	8006b46 <gen_numname+0x5a>
 8006b3e:	69fa      	ldr	r2, [r7, #28]
 8006b40:	4b31      	ldr	r3, [pc, #196]	; (8006c08 <gen_numname+0x11c>)
 8006b42:	4053      	eors	r3, r2
 8006b44:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8006b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b48:	3301      	adds	r3, #1
 8006b4a:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b4e:	2b0f      	cmp	r3, #15
 8006b50:	d9e6      	bls.n	8006b20 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	881b      	ldrh	r3, [r3, #0]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d1da      	bne.n	8006b10 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8006b5a:	69fb      	ldr	r3, [r7, #28]
 8006b5c:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8006b5e:	2307      	movs	r3, #7
 8006b60:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	b2db      	uxtb	r3, r3
 8006b66:	f003 030f 	and.w	r3, r3, #15
 8006b6a:	b2db      	uxtb	r3, r3
 8006b6c:	3330      	adds	r3, #48	; 0x30
 8006b6e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8006b72:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006b76:	2b39      	cmp	r3, #57	; 0x39
 8006b78:	d904      	bls.n	8006b84 <gen_numname+0x98>
 8006b7a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006b7e:	3307      	adds	r3, #7
 8006b80:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8006b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b86:	1e5a      	subs	r2, r3, #1
 8006b88:	62ba      	str	r2, [r7, #40]	; 0x28
 8006b8a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8006b8e:	4413      	add	r3, r2
 8006b90:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8006b94:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	091b      	lsrs	r3, r3, #4
 8006b9c:	603b      	str	r3, [r7, #0]
	} while (seq);
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d1de      	bne.n	8006b62 <gen_numname+0x76>
	ns[i] = '~';
 8006ba4:	f107 0214 	add.w	r2, r7, #20
 8006ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006baa:	4413      	add	r3, r2
 8006bac:	227e      	movs	r2, #126	; 0x7e
 8006bae:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	627b      	str	r3, [r7, #36]	; 0x24
 8006bb4:	e002      	b.n	8006bbc <gen_numname+0xd0>
 8006bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bb8:	3301      	adds	r3, #1
 8006bba:	627b      	str	r3, [r7, #36]	; 0x24
 8006bbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bc0:	429a      	cmp	r2, r3
 8006bc2:	d205      	bcs.n	8006bd0 <gen_numname+0xe4>
 8006bc4:	68fa      	ldr	r2, [r7, #12]
 8006bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bc8:	4413      	add	r3, r2
 8006bca:	781b      	ldrb	r3, [r3, #0]
 8006bcc:	2b20      	cmp	r3, #32
 8006bce:	d1f2      	bne.n	8006bb6 <gen_numname+0xca>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8006bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bd2:	2b07      	cmp	r3, #7
 8006bd4:	d808      	bhi.n	8006be8 <gen_numname+0xfc>
 8006bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bd8:	1c5a      	adds	r2, r3, #1
 8006bda:	62ba      	str	r2, [r7, #40]	; 0x28
 8006bdc:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8006be0:	4413      	add	r3, r2
 8006be2:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8006be6:	e000      	b.n	8006bea <gen_numname+0xfe>
 8006be8:	2120      	movs	r1, #32
 8006bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bec:	1c5a      	adds	r2, r3, #1
 8006bee:	627a      	str	r2, [r7, #36]	; 0x24
 8006bf0:	68fa      	ldr	r2, [r7, #12]
 8006bf2:	4413      	add	r3, r2
 8006bf4:	460a      	mov	r2, r1
 8006bf6:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8006bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bfa:	2b07      	cmp	r3, #7
 8006bfc:	d9e8      	bls.n	8006bd0 <gen_numname+0xe4>
}
 8006bfe:	bf00      	nop
 8006c00:	bf00      	nop
 8006c02:	3730      	adds	r7, #48	; 0x30
 8006c04:	46bd      	mov	sp, r7
 8006c06:	bd80      	pop	{r7, pc}
 8006c08:	00011021 	.word	0x00011021

08006c0c <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8006c0c:	b480      	push	{r7}
 8006c0e:	b085      	sub	sp, #20
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8006c14:	2300      	movs	r3, #0
 8006c16:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8006c18:	230b      	movs	r3, #11
 8006c1a:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8006c1c:	7bfb      	ldrb	r3, [r7, #15]
 8006c1e:	b2da      	uxtb	r2, r3
 8006c20:	0852      	lsrs	r2, r2, #1
 8006c22:	01db      	lsls	r3, r3, #7
 8006c24:	4313      	orrs	r3, r2
 8006c26:	b2da      	uxtb	r2, r3
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	1c59      	adds	r1, r3, #1
 8006c2c:	6079      	str	r1, [r7, #4]
 8006c2e:	781b      	ldrb	r3, [r3, #0]
 8006c30:	4413      	add	r3, r2
 8006c32:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8006c34:	68bb      	ldr	r3, [r7, #8]
 8006c36:	3b01      	subs	r3, #1
 8006c38:	60bb      	str	r3, [r7, #8]
 8006c3a:	68bb      	ldr	r3, [r7, #8]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d1ed      	bne.n	8006c1c <sum_sfn+0x10>
	return sum;
 8006c40:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c42:	4618      	mov	r0, r3
 8006c44:	3714      	adds	r7, #20
 8006c46:	46bd      	mov	sp, r7
 8006c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4c:	4770      	bx	lr

08006c4e <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8006c4e:	b580      	push	{r7, lr}
 8006c50:	b086      	sub	sp, #24
 8006c52:	af00      	add	r7, sp, #0
 8006c54:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8006c5c:	2100      	movs	r1, #0
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	f7ff fca6 	bl	80065b0 <dir_sdi>
 8006c64:	4603      	mov	r3, r0
 8006c66:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8006c68:	7dfb      	ldrb	r3, [r7, #23]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d001      	beq.n	8006c72 <dir_find+0x24>
 8006c6e:	7dfb      	ldrb	r3, [r7, #23]
 8006c70:	e0a9      	b.n	8006dc6 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006c72:	23ff      	movs	r3, #255	; 0xff
 8006c74:	753b      	strb	r3, [r7, #20]
 8006c76:	7d3b      	ldrb	r3, [r7, #20]
 8006c78:	757b      	strb	r3, [r7, #21]
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	f04f 32ff 	mov.w	r2, #4294967295
 8006c80:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	69db      	ldr	r3, [r3, #28]
 8006c86:	4619      	mov	r1, r3
 8006c88:	6938      	ldr	r0, [r7, #16]
 8006c8a:	f7ff f911 	bl	8005eb0 <move_window>
 8006c8e:	4603      	mov	r3, r0
 8006c90:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006c92:	7dfb      	ldrb	r3, [r7, #23]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	f040 8090 	bne.w	8006dba <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6a1b      	ldr	r3, [r3, #32]
 8006c9e:	781b      	ldrb	r3, [r3, #0]
 8006ca0:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8006ca2:	7dbb      	ldrb	r3, [r7, #22]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d102      	bne.n	8006cae <dir_find+0x60>
 8006ca8:	2304      	movs	r3, #4
 8006caa:	75fb      	strb	r3, [r7, #23]
 8006cac:	e08a      	b.n	8006dc4 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6a1b      	ldr	r3, [r3, #32]
 8006cb2:	330b      	adds	r3, #11
 8006cb4:	781b      	ldrb	r3, [r3, #0]
 8006cb6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006cba:	73fb      	strb	r3, [r7, #15]
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	7bfa      	ldrb	r2, [r7, #15]
 8006cc0:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8006cc2:	7dbb      	ldrb	r3, [r7, #22]
 8006cc4:	2be5      	cmp	r3, #229	; 0xe5
 8006cc6:	d007      	beq.n	8006cd8 <dir_find+0x8a>
 8006cc8:	7bfb      	ldrb	r3, [r7, #15]
 8006cca:	f003 0308 	and.w	r3, r3, #8
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d009      	beq.n	8006ce6 <dir_find+0x98>
 8006cd2:	7bfb      	ldrb	r3, [r7, #15]
 8006cd4:	2b0f      	cmp	r3, #15
 8006cd6:	d006      	beq.n	8006ce6 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006cd8:	23ff      	movs	r3, #255	; 0xff
 8006cda:	757b      	strb	r3, [r7, #21]
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	f04f 32ff 	mov.w	r2, #4294967295
 8006ce2:	631a      	str	r2, [r3, #48]	; 0x30
 8006ce4:	e05e      	b.n	8006da4 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8006ce6:	7bfb      	ldrb	r3, [r7, #15]
 8006ce8:	2b0f      	cmp	r3, #15
 8006cea:	d136      	bne.n	8006d5a <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006cf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d154      	bne.n	8006da4 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8006cfa:	7dbb      	ldrb	r3, [r7, #22]
 8006cfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d00d      	beq.n	8006d20 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	6a1b      	ldr	r3, [r3, #32]
 8006d08:	7b5b      	ldrb	r3, [r3, #13]
 8006d0a:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8006d0c:	7dbb      	ldrb	r3, [r7, #22]
 8006d0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d12:	75bb      	strb	r3, [r7, #22]
 8006d14:	7dbb      	ldrb	r3, [r7, #22]
 8006d16:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	695a      	ldr	r2, [r3, #20]
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8006d20:	7dba      	ldrb	r2, [r7, #22]
 8006d22:	7d7b      	ldrb	r3, [r7, #21]
 8006d24:	429a      	cmp	r2, r3
 8006d26:	d115      	bne.n	8006d54 <dir_find+0x106>
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	6a1b      	ldr	r3, [r3, #32]
 8006d2c:	330d      	adds	r3, #13
 8006d2e:	781b      	ldrb	r3, [r3, #0]
 8006d30:	7d3a      	ldrb	r2, [r7, #20]
 8006d32:	429a      	cmp	r2, r3
 8006d34:	d10e      	bne.n	8006d54 <dir_find+0x106>
 8006d36:	693b      	ldr	r3, [r7, #16]
 8006d38:	68da      	ldr	r2, [r3, #12]
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6a1b      	ldr	r3, [r3, #32]
 8006d3e:	4619      	mov	r1, r3
 8006d40:	4610      	mov	r0, r2
 8006d42:	f7ff fdfb 	bl	800693c <cmp_lfn>
 8006d46:	4603      	mov	r3, r0
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d003      	beq.n	8006d54 <dir_find+0x106>
 8006d4c:	7d7b      	ldrb	r3, [r7, #21]
 8006d4e:	3b01      	subs	r3, #1
 8006d50:	b2db      	uxtb	r3, r3
 8006d52:	e000      	b.n	8006d56 <dir_find+0x108>
 8006d54:	23ff      	movs	r3, #255	; 0xff
 8006d56:	757b      	strb	r3, [r7, #21]
 8006d58:	e024      	b.n	8006da4 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8006d5a:	7d7b      	ldrb	r3, [r7, #21]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d109      	bne.n	8006d74 <dir_find+0x126>
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	6a1b      	ldr	r3, [r3, #32]
 8006d64:	4618      	mov	r0, r3
 8006d66:	f7ff ff51 	bl	8006c0c <sum_sfn>
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	461a      	mov	r2, r3
 8006d6e:	7d3b      	ldrb	r3, [r7, #20]
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d024      	beq.n	8006dbe <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006d7a:	f003 0301 	and.w	r3, r3, #1
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d10a      	bne.n	8006d98 <dir_find+0x14a>
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6a18      	ldr	r0, [r3, #32]
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	3324      	adds	r3, #36	; 0x24
 8006d8a:	220b      	movs	r2, #11
 8006d8c:	4619      	mov	r1, r3
 8006d8e:	f7fe fe9d 	bl	8005acc <mem_cmp>
 8006d92:	4603      	mov	r3, r0
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d014      	beq.n	8006dc2 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006d98:	23ff      	movs	r3, #255	; 0xff
 8006d9a:	757b      	strb	r3, [r7, #21]
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	f04f 32ff 	mov.w	r2, #4294967295
 8006da2:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8006da4:	2100      	movs	r1, #0
 8006da6:	6878      	ldr	r0, [r7, #4]
 8006da8:	f7ff fc7d 	bl	80066a6 <dir_next>
 8006dac:	4603      	mov	r3, r0
 8006dae:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8006db0:	7dfb      	ldrb	r3, [r7, #23]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	f43f af65 	beq.w	8006c82 <dir_find+0x34>
 8006db8:	e004      	b.n	8006dc4 <dir_find+0x176>
		if (res != FR_OK) break;
 8006dba:	bf00      	nop
 8006dbc:	e002      	b.n	8006dc4 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8006dbe:	bf00      	nop
 8006dc0:	e000      	b.n	8006dc4 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8006dc2:	bf00      	nop

	return res;
 8006dc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	3718      	adds	r7, #24
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	bd80      	pop	{r7, pc}
	...

08006dd0 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b08c      	sub	sp, #48	; 0x30
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006de4:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d001      	beq.n	8006df0 <dir_register+0x20>
 8006dec:	2306      	movs	r3, #6
 8006dee:	e0e0      	b.n	8006fb2 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8006df0:	2300      	movs	r3, #0
 8006df2:	627b      	str	r3, [r7, #36]	; 0x24
 8006df4:	e002      	b.n	8006dfc <dir_register+0x2c>
 8006df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006df8:	3301      	adds	r3, #1
 8006dfa:	627b      	str	r3, [r7, #36]	; 0x24
 8006dfc:	69fb      	ldr	r3, [r7, #28]
 8006dfe:	68da      	ldr	r2, [r3, #12]
 8006e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e02:	005b      	lsls	r3, r3, #1
 8006e04:	4413      	add	r3, r2
 8006e06:	881b      	ldrh	r3, [r3, #0]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d1f4      	bne.n	8006df6 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8006e12:	f107 030c 	add.w	r3, r7, #12
 8006e16:	220c      	movs	r2, #12
 8006e18:	4618      	mov	r0, r3
 8006e1a:	f7fe fe1b 	bl	8005a54 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8006e1e:	7dfb      	ldrb	r3, [r7, #23]
 8006e20:	f003 0301 	and.w	r3, r3, #1
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d032      	beq.n	8006e8e <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2240      	movs	r2, #64	; 0x40
 8006e2c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8006e30:	2301      	movs	r3, #1
 8006e32:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e34:	e016      	b.n	8006e64 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8006e3c:	69fb      	ldr	r3, [r7, #28]
 8006e3e:	68da      	ldr	r2, [r3, #12]
 8006e40:	f107 010c 	add.w	r1, r7, #12
 8006e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e46:	f7ff fe51 	bl	8006aec <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8006e4a:	6878      	ldr	r0, [r7, #4]
 8006e4c:	f7ff feff 	bl	8006c4e <dir_find>
 8006e50:	4603      	mov	r3, r0
 8006e52:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8006e56:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d106      	bne.n	8006e6c <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8006e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e60:	3301      	adds	r3, #1
 8006e62:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e66:	2b63      	cmp	r3, #99	; 0x63
 8006e68:	d9e5      	bls.n	8006e36 <dir_register+0x66>
 8006e6a:	e000      	b.n	8006e6e <dir_register+0x9e>
			if (res != FR_OK) break;
 8006e6c:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8006e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e70:	2b64      	cmp	r3, #100	; 0x64
 8006e72:	d101      	bne.n	8006e78 <dir_register+0xa8>
 8006e74:	2307      	movs	r3, #7
 8006e76:	e09c      	b.n	8006fb2 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8006e78:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006e7c:	2b04      	cmp	r3, #4
 8006e7e:	d002      	beq.n	8006e86 <dir_register+0xb6>
 8006e80:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006e84:	e095      	b.n	8006fb2 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8006e86:	7dfa      	ldrb	r2, [r7, #23]
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8006e8e:	7dfb      	ldrb	r3, [r7, #23]
 8006e90:	f003 0302 	and.w	r3, r3, #2
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d007      	beq.n	8006ea8 <dir_register+0xd8>
 8006e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e9a:	330c      	adds	r3, #12
 8006e9c:	4a47      	ldr	r2, [pc, #284]	; (8006fbc <dir_register+0x1ec>)
 8006e9e:	fba2 2303 	umull	r2, r3, r2, r3
 8006ea2:	089b      	lsrs	r3, r3, #2
 8006ea4:	3301      	adds	r3, #1
 8006ea6:	e000      	b.n	8006eaa <dir_register+0xda>
 8006ea8:	2301      	movs	r3, #1
 8006eaa:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8006eac:	6a39      	ldr	r1, [r7, #32]
 8006eae:	6878      	ldr	r0, [r7, #4]
 8006eb0:	f7ff fcbe 	bl	8006830 <dir_alloc>
 8006eb4:	4603      	mov	r3, r0
 8006eb6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8006eba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d148      	bne.n	8006f54 <dir_register+0x184>
 8006ec2:	6a3b      	ldr	r3, [r7, #32]
 8006ec4:	3b01      	subs	r3, #1
 8006ec6:	623b      	str	r3, [r7, #32]
 8006ec8:	6a3b      	ldr	r3, [r7, #32]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d042      	beq.n	8006f54 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	695a      	ldr	r2, [r3, #20]
 8006ed2:	6a3b      	ldr	r3, [r7, #32]
 8006ed4:	015b      	lsls	r3, r3, #5
 8006ed6:	1ad3      	subs	r3, r2, r3
 8006ed8:	4619      	mov	r1, r3
 8006eda:	6878      	ldr	r0, [r7, #4]
 8006edc:	f7ff fb68 	bl	80065b0 <dir_sdi>
 8006ee0:	4603      	mov	r3, r0
 8006ee2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8006ee6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d132      	bne.n	8006f54 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	3324      	adds	r3, #36	; 0x24
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	f7ff fe8a 	bl	8006c0c <sum_sfn>
 8006ef8:	4603      	mov	r3, r0
 8006efa:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	69db      	ldr	r3, [r3, #28]
 8006f00:	4619      	mov	r1, r3
 8006f02:	69f8      	ldr	r0, [r7, #28]
 8006f04:	f7fe ffd4 	bl	8005eb0 <move_window>
 8006f08:	4603      	mov	r3, r0
 8006f0a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8006f0e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d11d      	bne.n	8006f52 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8006f16:	69fb      	ldr	r3, [r7, #28]
 8006f18:	68d8      	ldr	r0, [r3, #12]
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6a19      	ldr	r1, [r3, #32]
 8006f1e:	6a3b      	ldr	r3, [r7, #32]
 8006f20:	b2da      	uxtb	r2, r3
 8006f22:	7efb      	ldrb	r3, [r7, #27]
 8006f24:	f7ff fd7a 	bl	8006a1c <put_lfn>
				fs->wflag = 1;
 8006f28:	69fb      	ldr	r3, [r7, #28]
 8006f2a:	2201      	movs	r2, #1
 8006f2c:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8006f2e:	2100      	movs	r1, #0
 8006f30:	6878      	ldr	r0, [r7, #4]
 8006f32:	f7ff fbb8 	bl	80066a6 <dir_next>
 8006f36:	4603      	mov	r3, r0
 8006f38:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8006f3c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d107      	bne.n	8006f54 <dir_register+0x184>
 8006f44:	6a3b      	ldr	r3, [r7, #32]
 8006f46:	3b01      	subs	r3, #1
 8006f48:	623b      	str	r3, [r7, #32]
 8006f4a:	6a3b      	ldr	r3, [r7, #32]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d1d5      	bne.n	8006efc <dir_register+0x12c>
 8006f50:	e000      	b.n	8006f54 <dir_register+0x184>
				if (res != FR_OK) break;
 8006f52:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8006f54:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d128      	bne.n	8006fae <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	69db      	ldr	r3, [r3, #28]
 8006f60:	4619      	mov	r1, r3
 8006f62:	69f8      	ldr	r0, [r7, #28]
 8006f64:	f7fe ffa4 	bl	8005eb0 <move_window>
 8006f68:	4603      	mov	r3, r0
 8006f6a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8006f6e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d11b      	bne.n	8006fae <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6a1b      	ldr	r3, [r3, #32]
 8006f7a:	2220      	movs	r2, #32
 8006f7c:	2100      	movs	r1, #0
 8006f7e:	4618      	mov	r0, r3
 8006f80:	f7fe fd89 	bl	8005a96 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	6a18      	ldr	r0, [r3, #32]
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	3324      	adds	r3, #36	; 0x24
 8006f8c:	220b      	movs	r2, #11
 8006f8e:	4619      	mov	r1, r3
 8006f90:	f7fe fd60 	bl	8005a54 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6a1b      	ldr	r3, [r3, #32]
 8006f9e:	330c      	adds	r3, #12
 8006fa0:	f002 0218 	and.w	r2, r2, #24
 8006fa4:	b2d2      	uxtb	r2, r2
 8006fa6:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8006fa8:	69fb      	ldr	r3, [r7, #28]
 8006faa:	2201      	movs	r2, #1
 8006fac:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8006fae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	3730      	adds	r7, #48	; 0x30
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	bd80      	pop	{r7, pc}
 8006fba:	bf00      	nop
 8006fbc:	4ec4ec4f 	.word	0x4ec4ec4f

08006fc0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b08a      	sub	sp, #40	; 0x28
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
 8006fc8:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	613b      	str	r3, [r7, #16]
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	68db      	ldr	r3, [r3, #12]
 8006fd6:	60fb      	str	r3, [r7, #12]
 8006fd8:	2300      	movs	r3, #0
 8006fda:	617b      	str	r3, [r7, #20]
 8006fdc:	697b      	ldr	r3, [r7, #20]
 8006fde:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8006fe0:	69bb      	ldr	r3, [r7, #24]
 8006fe2:	1c5a      	adds	r2, r3, #1
 8006fe4:	61ba      	str	r2, [r7, #24]
 8006fe6:	693a      	ldr	r2, [r7, #16]
 8006fe8:	4413      	add	r3, r2
 8006fea:	781b      	ldrb	r3, [r3, #0]
 8006fec:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8006fee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006ff0:	2b1f      	cmp	r3, #31
 8006ff2:	d940      	bls.n	8007076 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8006ff4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006ff6:	2b2f      	cmp	r3, #47	; 0x2f
 8006ff8:	d006      	beq.n	8007008 <create_name+0x48>
 8006ffa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006ffc:	2b5c      	cmp	r3, #92	; 0x5c
 8006ffe:	d110      	bne.n	8007022 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8007000:	e002      	b.n	8007008 <create_name+0x48>
 8007002:	69bb      	ldr	r3, [r7, #24]
 8007004:	3301      	adds	r3, #1
 8007006:	61bb      	str	r3, [r7, #24]
 8007008:	693a      	ldr	r2, [r7, #16]
 800700a:	69bb      	ldr	r3, [r7, #24]
 800700c:	4413      	add	r3, r2
 800700e:	781b      	ldrb	r3, [r3, #0]
 8007010:	2b2f      	cmp	r3, #47	; 0x2f
 8007012:	d0f6      	beq.n	8007002 <create_name+0x42>
 8007014:	693a      	ldr	r2, [r7, #16]
 8007016:	69bb      	ldr	r3, [r7, #24]
 8007018:	4413      	add	r3, r2
 800701a:	781b      	ldrb	r3, [r3, #0]
 800701c:	2b5c      	cmp	r3, #92	; 0x5c
 800701e:	d0f0      	beq.n	8007002 <create_name+0x42>
			break;
 8007020:	e02a      	b.n	8007078 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8007022:	697b      	ldr	r3, [r7, #20]
 8007024:	2bfe      	cmp	r3, #254	; 0xfe
 8007026:	d901      	bls.n	800702c <create_name+0x6c>
 8007028:	2306      	movs	r3, #6
 800702a:	e177      	b.n	800731c <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 800702c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800702e:	b2db      	uxtb	r3, r3
 8007030:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8007032:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007034:	2101      	movs	r1, #1
 8007036:	4618      	mov	r0, r3
 8007038:	f001 f9dc 	bl	80083f4 <ff_convert>
 800703c:	4603      	mov	r3, r0
 800703e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8007040:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007042:	2b00      	cmp	r3, #0
 8007044:	d101      	bne.n	800704a <create_name+0x8a>
 8007046:	2306      	movs	r3, #6
 8007048:	e168      	b.n	800731c <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800704a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800704c:	2b7f      	cmp	r3, #127	; 0x7f
 800704e:	d809      	bhi.n	8007064 <create_name+0xa4>
 8007050:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007052:	4619      	mov	r1, r3
 8007054:	48b3      	ldr	r0, [pc, #716]	; (8007324 <create_name+0x364>)
 8007056:	f7fe fd60 	bl	8005b1a <chk_chr>
 800705a:	4603      	mov	r3, r0
 800705c:	2b00      	cmp	r3, #0
 800705e:	d001      	beq.n	8007064 <create_name+0xa4>
 8007060:	2306      	movs	r3, #6
 8007062:	e15b      	b.n	800731c <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 8007064:	697b      	ldr	r3, [r7, #20]
 8007066:	1c5a      	adds	r2, r3, #1
 8007068:	617a      	str	r2, [r7, #20]
 800706a:	005b      	lsls	r3, r3, #1
 800706c:	68fa      	ldr	r2, [r7, #12]
 800706e:	4413      	add	r3, r2
 8007070:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007072:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8007074:	e7b4      	b.n	8006fe0 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8007076:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8007078:	693a      	ldr	r2, [r7, #16]
 800707a:	69bb      	ldr	r3, [r7, #24]
 800707c:	441a      	add	r2, r3
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8007082:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007084:	2b1f      	cmp	r3, #31
 8007086:	d801      	bhi.n	800708c <create_name+0xcc>
 8007088:	2304      	movs	r3, #4
 800708a:	e000      	b.n	800708e <create_name+0xce>
 800708c:	2300      	movs	r3, #0
 800708e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8007092:	e011      	b.n	80070b8 <create_name+0xf8>
		w = lfn[di - 1];
 8007094:	697a      	ldr	r2, [r7, #20]
 8007096:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800709a:	4413      	add	r3, r2
 800709c:	005b      	lsls	r3, r3, #1
 800709e:	68fa      	ldr	r2, [r7, #12]
 80070a0:	4413      	add	r3, r2
 80070a2:	881b      	ldrh	r3, [r3, #0]
 80070a4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 80070a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80070a8:	2b20      	cmp	r3, #32
 80070aa:	d002      	beq.n	80070b2 <create_name+0xf2>
 80070ac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80070ae:	2b2e      	cmp	r3, #46	; 0x2e
 80070b0:	d106      	bne.n	80070c0 <create_name+0x100>
		di--;
 80070b2:	697b      	ldr	r3, [r7, #20]
 80070b4:	3b01      	subs	r3, #1
 80070b6:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80070b8:	697b      	ldr	r3, [r7, #20]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d1ea      	bne.n	8007094 <create_name+0xd4>
 80070be:	e000      	b.n	80070c2 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 80070c0:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 80070c2:	697b      	ldr	r3, [r7, #20]
 80070c4:	005b      	lsls	r3, r3, #1
 80070c6:	68fa      	ldr	r2, [r7, #12]
 80070c8:	4413      	add	r3, r2
 80070ca:	2200      	movs	r2, #0
 80070cc:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 80070ce:	697b      	ldr	r3, [r7, #20]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d101      	bne.n	80070d8 <create_name+0x118>
 80070d4:	2306      	movs	r3, #6
 80070d6:	e121      	b.n	800731c <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	3324      	adds	r3, #36	; 0x24
 80070dc:	220b      	movs	r2, #11
 80070de:	2120      	movs	r1, #32
 80070e0:	4618      	mov	r0, r3
 80070e2:	f7fe fcd8 	bl	8005a96 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 80070e6:	2300      	movs	r3, #0
 80070e8:	61bb      	str	r3, [r7, #24]
 80070ea:	e002      	b.n	80070f2 <create_name+0x132>
 80070ec:	69bb      	ldr	r3, [r7, #24]
 80070ee:	3301      	adds	r3, #1
 80070f0:	61bb      	str	r3, [r7, #24]
 80070f2:	69bb      	ldr	r3, [r7, #24]
 80070f4:	005b      	lsls	r3, r3, #1
 80070f6:	68fa      	ldr	r2, [r7, #12]
 80070f8:	4413      	add	r3, r2
 80070fa:	881b      	ldrh	r3, [r3, #0]
 80070fc:	2b20      	cmp	r3, #32
 80070fe:	d0f5      	beq.n	80070ec <create_name+0x12c>
 8007100:	69bb      	ldr	r3, [r7, #24]
 8007102:	005b      	lsls	r3, r3, #1
 8007104:	68fa      	ldr	r2, [r7, #12]
 8007106:	4413      	add	r3, r2
 8007108:	881b      	ldrh	r3, [r3, #0]
 800710a:	2b2e      	cmp	r3, #46	; 0x2e
 800710c:	d0ee      	beq.n	80070ec <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800710e:	69bb      	ldr	r3, [r7, #24]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d009      	beq.n	8007128 <create_name+0x168>
 8007114:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007118:	f043 0303 	orr.w	r3, r3, #3
 800711c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8007120:	e002      	b.n	8007128 <create_name+0x168>
 8007122:	697b      	ldr	r3, [r7, #20]
 8007124:	3b01      	subs	r3, #1
 8007126:	617b      	str	r3, [r7, #20]
 8007128:	697b      	ldr	r3, [r7, #20]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d009      	beq.n	8007142 <create_name+0x182>
 800712e:	697a      	ldr	r2, [r7, #20]
 8007130:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8007134:	4413      	add	r3, r2
 8007136:	005b      	lsls	r3, r3, #1
 8007138:	68fa      	ldr	r2, [r7, #12]
 800713a:	4413      	add	r3, r2
 800713c:	881b      	ldrh	r3, [r3, #0]
 800713e:	2b2e      	cmp	r3, #46	; 0x2e
 8007140:	d1ef      	bne.n	8007122 <create_name+0x162>

	i = b = 0; ni = 8;
 8007142:	2300      	movs	r3, #0
 8007144:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007148:	2300      	movs	r3, #0
 800714a:	623b      	str	r3, [r7, #32]
 800714c:	2308      	movs	r3, #8
 800714e:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8007150:	69bb      	ldr	r3, [r7, #24]
 8007152:	1c5a      	adds	r2, r3, #1
 8007154:	61ba      	str	r2, [r7, #24]
 8007156:	005b      	lsls	r3, r3, #1
 8007158:	68fa      	ldr	r2, [r7, #12]
 800715a:	4413      	add	r3, r2
 800715c:	881b      	ldrh	r3, [r3, #0]
 800715e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8007160:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007162:	2b00      	cmp	r3, #0
 8007164:	f000 8090 	beq.w	8007288 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8007168:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800716a:	2b20      	cmp	r3, #32
 800716c:	d006      	beq.n	800717c <create_name+0x1bc>
 800716e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007170:	2b2e      	cmp	r3, #46	; 0x2e
 8007172:	d10a      	bne.n	800718a <create_name+0x1ca>
 8007174:	69ba      	ldr	r2, [r7, #24]
 8007176:	697b      	ldr	r3, [r7, #20]
 8007178:	429a      	cmp	r2, r3
 800717a:	d006      	beq.n	800718a <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800717c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007180:	f043 0303 	orr.w	r3, r3, #3
 8007184:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007188:	e07d      	b.n	8007286 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800718a:	6a3a      	ldr	r2, [r7, #32]
 800718c:	69fb      	ldr	r3, [r7, #28]
 800718e:	429a      	cmp	r2, r3
 8007190:	d203      	bcs.n	800719a <create_name+0x1da>
 8007192:	69ba      	ldr	r2, [r7, #24]
 8007194:	697b      	ldr	r3, [r7, #20]
 8007196:	429a      	cmp	r2, r3
 8007198:	d123      	bne.n	80071e2 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800719a:	69fb      	ldr	r3, [r7, #28]
 800719c:	2b0b      	cmp	r3, #11
 800719e:	d106      	bne.n	80071ae <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 80071a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80071a4:	f043 0303 	orr.w	r3, r3, #3
 80071a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80071ac:	e06f      	b.n	800728e <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 80071ae:	69ba      	ldr	r2, [r7, #24]
 80071b0:	697b      	ldr	r3, [r7, #20]
 80071b2:	429a      	cmp	r2, r3
 80071b4:	d005      	beq.n	80071c2 <create_name+0x202>
 80071b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80071ba:	f043 0303 	orr.w	r3, r3, #3
 80071be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 80071c2:	69ba      	ldr	r2, [r7, #24]
 80071c4:	697b      	ldr	r3, [r7, #20]
 80071c6:	429a      	cmp	r2, r3
 80071c8:	d860      	bhi.n	800728c <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 80071ca:	697b      	ldr	r3, [r7, #20]
 80071cc:	61bb      	str	r3, [r7, #24]
 80071ce:	2308      	movs	r3, #8
 80071d0:	623b      	str	r3, [r7, #32]
 80071d2:	230b      	movs	r3, #11
 80071d4:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 80071d6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80071da:	009b      	lsls	r3, r3, #2
 80071dc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80071e0:	e051      	b.n	8007286 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 80071e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80071e4:	2b7f      	cmp	r3, #127	; 0x7f
 80071e6:	d914      	bls.n	8007212 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 80071e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80071ea:	2100      	movs	r1, #0
 80071ec:	4618      	mov	r0, r3
 80071ee:	f001 f901 	bl	80083f4 <ff_convert>
 80071f2:	4603      	mov	r3, r0
 80071f4:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 80071f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d004      	beq.n	8007206 <create_name+0x246>
 80071fc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80071fe:	3b80      	subs	r3, #128	; 0x80
 8007200:	4a49      	ldr	r2, [pc, #292]	; (8007328 <create_name+0x368>)
 8007202:	5cd3      	ldrb	r3, [r2, r3]
 8007204:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8007206:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800720a:	f043 0302 	orr.w	r3, r3, #2
 800720e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8007212:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007214:	2b00      	cmp	r3, #0
 8007216:	d007      	beq.n	8007228 <create_name+0x268>
 8007218:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800721a:	4619      	mov	r1, r3
 800721c:	4843      	ldr	r0, [pc, #268]	; (800732c <create_name+0x36c>)
 800721e:	f7fe fc7c 	bl	8005b1a <chk_chr>
 8007222:	4603      	mov	r3, r0
 8007224:	2b00      	cmp	r3, #0
 8007226:	d008      	beq.n	800723a <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8007228:	235f      	movs	r3, #95	; 0x5f
 800722a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800722c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007230:	f043 0303 	orr.w	r3, r3, #3
 8007234:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007238:	e01b      	b.n	8007272 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800723a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800723c:	2b40      	cmp	r3, #64	; 0x40
 800723e:	d909      	bls.n	8007254 <create_name+0x294>
 8007240:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007242:	2b5a      	cmp	r3, #90	; 0x5a
 8007244:	d806      	bhi.n	8007254 <create_name+0x294>
					b |= 2;
 8007246:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800724a:	f043 0302 	orr.w	r3, r3, #2
 800724e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007252:	e00e      	b.n	8007272 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8007254:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007256:	2b60      	cmp	r3, #96	; 0x60
 8007258:	d90b      	bls.n	8007272 <create_name+0x2b2>
 800725a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800725c:	2b7a      	cmp	r3, #122	; 0x7a
 800725e:	d808      	bhi.n	8007272 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8007260:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007264:	f043 0301 	orr.w	r3, r3, #1
 8007268:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800726c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800726e:	3b20      	subs	r3, #32
 8007270:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8007272:	6a3b      	ldr	r3, [r7, #32]
 8007274:	1c5a      	adds	r2, r3, #1
 8007276:	623a      	str	r2, [r7, #32]
 8007278:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800727a:	b2d1      	uxtb	r1, r2
 800727c:	687a      	ldr	r2, [r7, #4]
 800727e:	4413      	add	r3, r2
 8007280:	460a      	mov	r2, r1
 8007282:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8007286:	e763      	b.n	8007150 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8007288:	bf00      	nop
 800728a:	e000      	b.n	800728e <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 800728c:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007294:	2be5      	cmp	r3, #229	; 0xe5
 8007296:	d103      	bne.n	80072a0 <create_name+0x2e0>
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2205      	movs	r2, #5
 800729c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 80072a0:	69fb      	ldr	r3, [r7, #28]
 80072a2:	2b08      	cmp	r3, #8
 80072a4:	d104      	bne.n	80072b0 <create_name+0x2f0>
 80072a6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80072aa:	009b      	lsls	r3, r3, #2
 80072ac:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 80072b0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80072b4:	f003 030c 	and.w	r3, r3, #12
 80072b8:	2b0c      	cmp	r3, #12
 80072ba:	d005      	beq.n	80072c8 <create_name+0x308>
 80072bc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80072c0:	f003 0303 	and.w	r3, r3, #3
 80072c4:	2b03      	cmp	r3, #3
 80072c6:	d105      	bne.n	80072d4 <create_name+0x314>
 80072c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80072cc:	f043 0302 	orr.w	r3, r3, #2
 80072d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 80072d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80072d8:	f003 0302 	and.w	r3, r3, #2
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d117      	bne.n	8007310 <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 80072e0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80072e4:	f003 0303 	and.w	r3, r3, #3
 80072e8:	2b01      	cmp	r3, #1
 80072ea:	d105      	bne.n	80072f8 <create_name+0x338>
 80072ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80072f0:	f043 0310 	orr.w	r3, r3, #16
 80072f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 80072f8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80072fc:	f003 030c 	and.w	r3, r3, #12
 8007300:	2b04      	cmp	r3, #4
 8007302:	d105      	bne.n	8007310 <create_name+0x350>
 8007304:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007308:	f043 0308 	orr.w	r3, r3, #8
 800730c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007316:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800731a:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800731c:	4618      	mov	r0, r3
 800731e:	3728      	adds	r7, #40	; 0x28
 8007320:	46bd      	mov	sp, r7
 8007322:	bd80      	pop	{r7, pc}
 8007324:	080085f4 	.word	0x080085f4
 8007328:	08008668 	.word	0x08008668
 800732c:	08008600 	.word	0x08008600

08007330 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b086      	sub	sp, #24
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
 8007338:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800733e:	693b      	ldr	r3, [r7, #16]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8007344:	e002      	b.n	800734c <follow_path+0x1c>
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	3301      	adds	r3, #1
 800734a:	603b      	str	r3, [r7, #0]
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	781b      	ldrb	r3, [r3, #0]
 8007350:	2b2f      	cmp	r3, #47	; 0x2f
 8007352:	d0f8      	beq.n	8007346 <follow_path+0x16>
 8007354:	683b      	ldr	r3, [r7, #0]
 8007356:	781b      	ldrb	r3, [r3, #0]
 8007358:	2b5c      	cmp	r3, #92	; 0x5c
 800735a:	d0f4      	beq.n	8007346 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800735c:	693b      	ldr	r3, [r7, #16]
 800735e:	2200      	movs	r2, #0
 8007360:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	781b      	ldrb	r3, [r3, #0]
 8007366:	2b1f      	cmp	r3, #31
 8007368:	d80a      	bhi.n	8007380 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2280      	movs	r2, #128	; 0x80
 800736e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8007372:	2100      	movs	r1, #0
 8007374:	6878      	ldr	r0, [r7, #4]
 8007376:	f7ff f91b 	bl	80065b0 <dir_sdi>
 800737a:	4603      	mov	r3, r0
 800737c:	75fb      	strb	r3, [r7, #23]
 800737e:	e043      	b.n	8007408 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007380:	463b      	mov	r3, r7
 8007382:	4619      	mov	r1, r3
 8007384:	6878      	ldr	r0, [r7, #4]
 8007386:	f7ff fe1b 	bl	8006fc0 <create_name>
 800738a:	4603      	mov	r3, r0
 800738c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800738e:	7dfb      	ldrb	r3, [r7, #23]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d134      	bne.n	80073fe <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8007394:	6878      	ldr	r0, [r7, #4]
 8007396:	f7ff fc5a 	bl	8006c4e <dir_find>
 800739a:	4603      	mov	r3, r0
 800739c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80073a4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80073a6:	7dfb      	ldrb	r3, [r7, #23]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d00a      	beq.n	80073c2 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80073ac:	7dfb      	ldrb	r3, [r7, #23]
 80073ae:	2b04      	cmp	r3, #4
 80073b0:	d127      	bne.n	8007402 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80073b2:	7afb      	ldrb	r3, [r7, #11]
 80073b4:	f003 0304 	and.w	r3, r3, #4
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d122      	bne.n	8007402 <follow_path+0xd2>
 80073bc:	2305      	movs	r3, #5
 80073be:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80073c0:	e01f      	b.n	8007402 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80073c2:	7afb      	ldrb	r3, [r7, #11]
 80073c4:	f003 0304 	and.w	r3, r3, #4
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d11c      	bne.n	8007406 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80073cc:	693b      	ldr	r3, [r7, #16]
 80073ce:	799b      	ldrb	r3, [r3, #6]
 80073d0:	f003 0310 	and.w	r3, r3, #16
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d102      	bne.n	80073de <follow_path+0xae>
				res = FR_NO_PATH; break;
 80073d8:	2305      	movs	r3, #5
 80073da:	75fb      	strb	r3, [r7, #23]
 80073dc:	e014      	b.n	8007408 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	695b      	ldr	r3, [r3, #20]
 80073e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073ec:	4413      	add	r3, r2
 80073ee:	4619      	mov	r1, r3
 80073f0:	68f8      	ldr	r0, [r7, #12]
 80073f2:	f7ff fa64 	bl	80068be <ld_clust>
 80073f6:	4602      	mov	r2, r0
 80073f8:	693b      	ldr	r3, [r7, #16]
 80073fa:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80073fc:	e7c0      	b.n	8007380 <follow_path+0x50>
			if (res != FR_OK) break;
 80073fe:	bf00      	nop
 8007400:	e002      	b.n	8007408 <follow_path+0xd8>
				break;
 8007402:	bf00      	nop
 8007404:	e000      	b.n	8007408 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007406:	bf00      	nop
			}
		}
	}

	return res;
 8007408:	7dfb      	ldrb	r3, [r7, #23]
}
 800740a:	4618      	mov	r0, r3
 800740c:	3718      	adds	r7, #24
 800740e:	46bd      	mov	sp, r7
 8007410:	bd80      	pop	{r7, pc}

08007412 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8007412:	b480      	push	{r7}
 8007414:	b087      	sub	sp, #28
 8007416:	af00      	add	r7, sp, #0
 8007418:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800741a:	f04f 33ff 	mov.w	r3, #4294967295
 800741e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d031      	beq.n	800748c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	617b      	str	r3, [r7, #20]
 800742e:	e002      	b.n	8007436 <get_ldnumber+0x24>
 8007430:	697b      	ldr	r3, [r7, #20]
 8007432:	3301      	adds	r3, #1
 8007434:	617b      	str	r3, [r7, #20]
 8007436:	697b      	ldr	r3, [r7, #20]
 8007438:	781b      	ldrb	r3, [r3, #0]
 800743a:	2b1f      	cmp	r3, #31
 800743c:	d903      	bls.n	8007446 <get_ldnumber+0x34>
 800743e:	697b      	ldr	r3, [r7, #20]
 8007440:	781b      	ldrb	r3, [r3, #0]
 8007442:	2b3a      	cmp	r3, #58	; 0x3a
 8007444:	d1f4      	bne.n	8007430 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8007446:	697b      	ldr	r3, [r7, #20]
 8007448:	781b      	ldrb	r3, [r3, #0]
 800744a:	2b3a      	cmp	r3, #58	; 0x3a
 800744c:	d11c      	bne.n	8007488 <get_ldnumber+0x76>
			tp = *path;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	1c5a      	adds	r2, r3, #1
 8007458:	60fa      	str	r2, [r7, #12]
 800745a:	781b      	ldrb	r3, [r3, #0]
 800745c:	3b30      	subs	r3, #48	; 0x30
 800745e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8007460:	68bb      	ldr	r3, [r7, #8]
 8007462:	2b09      	cmp	r3, #9
 8007464:	d80e      	bhi.n	8007484 <get_ldnumber+0x72>
 8007466:	68fa      	ldr	r2, [r7, #12]
 8007468:	697b      	ldr	r3, [r7, #20]
 800746a:	429a      	cmp	r2, r3
 800746c:	d10a      	bne.n	8007484 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800746e:	68bb      	ldr	r3, [r7, #8]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d107      	bne.n	8007484 <get_ldnumber+0x72>
					vol = (int)i;
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8007478:	697b      	ldr	r3, [r7, #20]
 800747a:	3301      	adds	r3, #1
 800747c:	617b      	str	r3, [r7, #20]
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	697a      	ldr	r2, [r7, #20]
 8007482:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8007484:	693b      	ldr	r3, [r7, #16]
 8007486:	e002      	b.n	800748e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8007488:	2300      	movs	r3, #0
 800748a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800748c:	693b      	ldr	r3, [r7, #16]
}
 800748e:	4618      	mov	r0, r3
 8007490:	371c      	adds	r7, #28
 8007492:	46bd      	mov	sp, r7
 8007494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007498:	4770      	bx	lr
	...

0800749c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b082      	sub	sp, #8
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
 80074a4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	2200      	movs	r2, #0
 80074aa:	70da      	strb	r2, [r3, #3]
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	f04f 32ff 	mov.w	r2, #4294967295
 80074b2:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80074b4:	6839      	ldr	r1, [r7, #0]
 80074b6:	6878      	ldr	r0, [r7, #4]
 80074b8:	f7fe fcfa 	bl	8005eb0 <move_window>
 80074bc:	4603      	mov	r3, r0
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d001      	beq.n	80074c6 <check_fs+0x2a>
 80074c2:	2304      	movs	r3, #4
 80074c4:	e038      	b.n	8007538 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	3334      	adds	r3, #52	; 0x34
 80074ca:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80074ce:	4618      	mov	r0, r3
 80074d0:	f7fe fa3e 	bl	8005950 <ld_word>
 80074d4:	4603      	mov	r3, r0
 80074d6:	461a      	mov	r2, r3
 80074d8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80074dc:	429a      	cmp	r2, r3
 80074de:	d001      	beq.n	80074e4 <check_fs+0x48>
 80074e0:	2303      	movs	r3, #3
 80074e2:	e029      	b.n	8007538 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80074ea:	2be9      	cmp	r3, #233	; 0xe9
 80074ec:	d009      	beq.n	8007502 <check_fs+0x66>
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80074f4:	2beb      	cmp	r3, #235	; 0xeb
 80074f6:	d11e      	bne.n	8007536 <check_fs+0x9a>
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80074fe:	2b90      	cmp	r3, #144	; 0x90
 8007500:	d119      	bne.n	8007536 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	3334      	adds	r3, #52	; 0x34
 8007506:	3336      	adds	r3, #54	; 0x36
 8007508:	4618      	mov	r0, r3
 800750a:	f7fe fa39 	bl	8005980 <ld_dword>
 800750e:	4603      	mov	r3, r0
 8007510:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007514:	4a0a      	ldr	r2, [pc, #40]	; (8007540 <check_fs+0xa4>)
 8007516:	4293      	cmp	r3, r2
 8007518:	d101      	bne.n	800751e <check_fs+0x82>
 800751a:	2300      	movs	r3, #0
 800751c:	e00c      	b.n	8007538 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	3334      	adds	r3, #52	; 0x34
 8007522:	3352      	adds	r3, #82	; 0x52
 8007524:	4618      	mov	r0, r3
 8007526:	f7fe fa2b 	bl	8005980 <ld_dword>
 800752a:	4603      	mov	r3, r0
 800752c:	4a05      	ldr	r2, [pc, #20]	; (8007544 <check_fs+0xa8>)
 800752e:	4293      	cmp	r3, r2
 8007530:	d101      	bne.n	8007536 <check_fs+0x9a>
 8007532:	2300      	movs	r3, #0
 8007534:	e000      	b.n	8007538 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8007536:	2302      	movs	r3, #2
}
 8007538:	4618      	mov	r0, r3
 800753a:	3708      	adds	r7, #8
 800753c:	46bd      	mov	sp, r7
 800753e:	bd80      	pop	{r7, pc}
 8007540:	00544146 	.word	0x00544146
 8007544:	33544146 	.word	0x33544146

08007548 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b096      	sub	sp, #88	; 0x58
 800754c:	af00      	add	r7, sp, #0
 800754e:	60f8      	str	r0, [r7, #12]
 8007550:	60b9      	str	r1, [r7, #8]
 8007552:	4613      	mov	r3, r2
 8007554:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8007556:	68bb      	ldr	r3, [r7, #8]
 8007558:	2200      	movs	r2, #0
 800755a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800755c:	68f8      	ldr	r0, [r7, #12]
 800755e:	f7ff ff58 	bl	8007412 <get_ldnumber>
 8007562:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8007564:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007566:	2b00      	cmp	r3, #0
 8007568:	da01      	bge.n	800756e <find_volume+0x26>
 800756a:	230b      	movs	r3, #11
 800756c:	e22e      	b.n	80079cc <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800756e:	4aa8      	ldr	r2, [pc, #672]	; (8007810 <find_volume+0x2c8>)
 8007570:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007572:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007576:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8007578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800757a:	2b00      	cmp	r3, #0
 800757c:	d101      	bne.n	8007582 <find_volume+0x3a>
 800757e:	230c      	movs	r3, #12
 8007580:	e224      	b.n	80079cc <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8007582:	68bb      	ldr	r3, [r7, #8]
 8007584:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007586:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8007588:	79fb      	ldrb	r3, [r7, #7]
 800758a:	f023 0301 	bic.w	r3, r3, #1
 800758e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8007590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007592:	781b      	ldrb	r3, [r3, #0]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d01a      	beq.n	80075ce <find_volume+0x86>
		stat = disk_status(fs->drv);
 8007598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800759a:	785b      	ldrb	r3, [r3, #1]
 800759c:	4618      	mov	r0, r3
 800759e:	f7fe f939 	bl	8005814 <disk_status>
 80075a2:	4603      	mov	r3, r0
 80075a4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80075a8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80075ac:	f003 0301 	and.w	r3, r3, #1
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d10c      	bne.n	80075ce <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80075b4:	79fb      	ldrb	r3, [r7, #7]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d007      	beq.n	80075ca <find_volume+0x82>
 80075ba:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80075be:	f003 0304 	and.w	r3, r3, #4
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d001      	beq.n	80075ca <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80075c6:	230a      	movs	r3, #10
 80075c8:	e200      	b.n	80079cc <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 80075ca:	2300      	movs	r3, #0
 80075cc:	e1fe      	b.n	80079cc <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80075ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075d0:	2200      	movs	r2, #0
 80075d2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80075d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075d6:	b2da      	uxtb	r2, r3
 80075d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075da:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80075dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075de:	785b      	ldrb	r3, [r3, #1]
 80075e0:	4618      	mov	r0, r3
 80075e2:	f7fe f931 	bl	8005848 <disk_initialize>
 80075e6:	4603      	mov	r3, r0
 80075e8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80075ec:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80075f0:	f003 0301 	and.w	r3, r3, #1
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d001      	beq.n	80075fc <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80075f8:	2303      	movs	r3, #3
 80075fa:	e1e7      	b.n	80079cc <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80075fc:	79fb      	ldrb	r3, [r7, #7]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d007      	beq.n	8007612 <find_volume+0xca>
 8007602:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007606:	f003 0304 	and.w	r3, r3, #4
 800760a:	2b00      	cmp	r3, #0
 800760c:	d001      	beq.n	8007612 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800760e:	230a      	movs	r3, #10
 8007610:	e1dc      	b.n	80079cc <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8007612:	2300      	movs	r3, #0
 8007614:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8007616:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007618:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800761a:	f7ff ff3f 	bl	800749c <check_fs>
 800761e:	4603      	mov	r3, r0
 8007620:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8007624:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007628:	2b02      	cmp	r3, #2
 800762a:	d14b      	bne.n	80076c4 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800762c:	2300      	movs	r3, #0
 800762e:	643b      	str	r3, [r7, #64]	; 0x40
 8007630:	e01f      	b.n	8007672 <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8007632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007634:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8007638:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800763a:	011b      	lsls	r3, r3, #4
 800763c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8007640:	4413      	add	r3, r2
 8007642:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8007644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007646:	3304      	adds	r3, #4
 8007648:	781b      	ldrb	r3, [r3, #0]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d006      	beq.n	800765c <find_volume+0x114>
 800764e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007650:	3308      	adds	r3, #8
 8007652:	4618      	mov	r0, r3
 8007654:	f7fe f994 	bl	8005980 <ld_dword>
 8007658:	4602      	mov	r2, r0
 800765a:	e000      	b.n	800765e <find_volume+0x116>
 800765c:	2200      	movs	r2, #0
 800765e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007660:	009b      	lsls	r3, r3, #2
 8007662:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8007666:	440b      	add	r3, r1
 8007668:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800766c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800766e:	3301      	adds	r3, #1
 8007670:	643b      	str	r3, [r7, #64]	; 0x40
 8007672:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007674:	2b03      	cmp	r3, #3
 8007676:	d9dc      	bls.n	8007632 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8007678:	2300      	movs	r3, #0
 800767a:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800767c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800767e:	2b00      	cmp	r3, #0
 8007680:	d002      	beq.n	8007688 <find_volume+0x140>
 8007682:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007684:	3b01      	subs	r3, #1
 8007686:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8007688:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800768a:	009b      	lsls	r3, r3, #2
 800768c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8007690:	4413      	add	r3, r2
 8007692:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8007696:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8007698:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800769a:	2b00      	cmp	r3, #0
 800769c:	d005      	beq.n	80076aa <find_volume+0x162>
 800769e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80076a0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80076a2:	f7ff fefb 	bl	800749c <check_fs>
 80076a6:	4603      	mov	r3, r0
 80076a8:	e000      	b.n	80076ac <find_volume+0x164>
 80076aa:	2303      	movs	r3, #3
 80076ac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80076b0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80076b4:	2b01      	cmp	r3, #1
 80076b6:	d905      	bls.n	80076c4 <find_volume+0x17c>
 80076b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80076ba:	3301      	adds	r3, #1
 80076bc:	643b      	str	r3, [r7, #64]	; 0x40
 80076be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80076c0:	2b03      	cmp	r3, #3
 80076c2:	d9e1      	bls.n	8007688 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80076c4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80076c8:	2b04      	cmp	r3, #4
 80076ca:	d101      	bne.n	80076d0 <find_volume+0x188>
 80076cc:	2301      	movs	r3, #1
 80076ce:	e17d      	b.n	80079cc <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80076d0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80076d4:	2b01      	cmp	r3, #1
 80076d6:	d901      	bls.n	80076dc <find_volume+0x194>
 80076d8:	230d      	movs	r3, #13
 80076da:	e177      	b.n	80079cc <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80076dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076de:	3334      	adds	r3, #52	; 0x34
 80076e0:	330b      	adds	r3, #11
 80076e2:	4618      	mov	r0, r3
 80076e4:	f7fe f934 	bl	8005950 <ld_word>
 80076e8:	4603      	mov	r3, r0
 80076ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80076ee:	d001      	beq.n	80076f4 <find_volume+0x1ac>
 80076f0:	230d      	movs	r3, #13
 80076f2:	e16b      	b.n	80079cc <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80076f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076f6:	3334      	adds	r3, #52	; 0x34
 80076f8:	3316      	adds	r3, #22
 80076fa:	4618      	mov	r0, r3
 80076fc:	f7fe f928 	bl	8005950 <ld_word>
 8007700:	4603      	mov	r3, r0
 8007702:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8007704:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007706:	2b00      	cmp	r3, #0
 8007708:	d106      	bne.n	8007718 <find_volume+0x1d0>
 800770a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800770c:	3334      	adds	r3, #52	; 0x34
 800770e:	3324      	adds	r3, #36	; 0x24
 8007710:	4618      	mov	r0, r3
 8007712:	f7fe f935 	bl	8005980 <ld_dword>
 8007716:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8007718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800771a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800771c:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800771e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007720:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8007724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007726:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8007728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800772a:	789b      	ldrb	r3, [r3, #2]
 800772c:	2b01      	cmp	r3, #1
 800772e:	d005      	beq.n	800773c <find_volume+0x1f4>
 8007730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007732:	789b      	ldrb	r3, [r3, #2]
 8007734:	2b02      	cmp	r3, #2
 8007736:	d001      	beq.n	800773c <find_volume+0x1f4>
 8007738:	230d      	movs	r3, #13
 800773a:	e147      	b.n	80079cc <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800773c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800773e:	789b      	ldrb	r3, [r3, #2]
 8007740:	461a      	mov	r2, r3
 8007742:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007744:	fb02 f303 	mul.w	r3, r2, r3
 8007748:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800774a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800774c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007750:	b29a      	uxth	r2, r3
 8007752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007754:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8007756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007758:	895b      	ldrh	r3, [r3, #10]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d008      	beq.n	8007770 <find_volume+0x228>
 800775e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007760:	895b      	ldrh	r3, [r3, #10]
 8007762:	461a      	mov	r2, r3
 8007764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007766:	895b      	ldrh	r3, [r3, #10]
 8007768:	3b01      	subs	r3, #1
 800776a:	4013      	ands	r3, r2
 800776c:	2b00      	cmp	r3, #0
 800776e:	d001      	beq.n	8007774 <find_volume+0x22c>
 8007770:	230d      	movs	r3, #13
 8007772:	e12b      	b.n	80079cc <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8007774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007776:	3334      	adds	r3, #52	; 0x34
 8007778:	3311      	adds	r3, #17
 800777a:	4618      	mov	r0, r3
 800777c:	f7fe f8e8 	bl	8005950 <ld_word>
 8007780:	4603      	mov	r3, r0
 8007782:	461a      	mov	r2, r3
 8007784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007786:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8007788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800778a:	891b      	ldrh	r3, [r3, #8]
 800778c:	f003 030f 	and.w	r3, r3, #15
 8007790:	b29b      	uxth	r3, r3
 8007792:	2b00      	cmp	r3, #0
 8007794:	d001      	beq.n	800779a <find_volume+0x252>
 8007796:	230d      	movs	r3, #13
 8007798:	e118      	b.n	80079cc <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800779a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800779c:	3334      	adds	r3, #52	; 0x34
 800779e:	3313      	adds	r3, #19
 80077a0:	4618      	mov	r0, r3
 80077a2:	f7fe f8d5 	bl	8005950 <ld_word>
 80077a6:	4603      	mov	r3, r0
 80077a8:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80077aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d106      	bne.n	80077be <find_volume+0x276>
 80077b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077b2:	3334      	adds	r3, #52	; 0x34
 80077b4:	3320      	adds	r3, #32
 80077b6:	4618      	mov	r0, r3
 80077b8:	f7fe f8e2 	bl	8005980 <ld_dword>
 80077bc:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80077be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077c0:	3334      	adds	r3, #52	; 0x34
 80077c2:	330e      	adds	r3, #14
 80077c4:	4618      	mov	r0, r3
 80077c6:	f7fe f8c3 	bl	8005950 <ld_word>
 80077ca:	4603      	mov	r3, r0
 80077cc:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80077ce:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d101      	bne.n	80077d8 <find_volume+0x290>
 80077d4:	230d      	movs	r3, #13
 80077d6:	e0f9      	b.n	80079cc <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80077d8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80077da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077dc:	4413      	add	r3, r2
 80077de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80077e0:	8912      	ldrh	r2, [r2, #8]
 80077e2:	0912      	lsrs	r2, r2, #4
 80077e4:	b292      	uxth	r2, r2
 80077e6:	4413      	add	r3, r2
 80077e8:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80077ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80077ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077ee:	429a      	cmp	r2, r3
 80077f0:	d201      	bcs.n	80077f6 <find_volume+0x2ae>
 80077f2:	230d      	movs	r3, #13
 80077f4:	e0ea      	b.n	80079cc <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80077f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80077f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077fa:	1ad3      	subs	r3, r2, r3
 80077fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80077fe:	8952      	ldrh	r2, [r2, #10]
 8007800:	fbb3 f3f2 	udiv	r3, r3, r2
 8007804:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8007806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007808:	2b00      	cmp	r3, #0
 800780a:	d103      	bne.n	8007814 <find_volume+0x2cc>
 800780c:	230d      	movs	r3, #13
 800780e:	e0dd      	b.n	80079cc <find_volume+0x484>
 8007810:	20000148 	.word	0x20000148
		fmt = FS_FAT32;
 8007814:	2303      	movs	r3, #3
 8007816:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800781a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800781c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8007820:	4293      	cmp	r3, r2
 8007822:	d802      	bhi.n	800782a <find_volume+0x2e2>
 8007824:	2302      	movs	r3, #2
 8007826:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800782a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800782c:	f640 72f5 	movw	r2, #4085	; 0xff5
 8007830:	4293      	cmp	r3, r2
 8007832:	d802      	bhi.n	800783a <find_volume+0x2f2>
 8007834:	2301      	movs	r3, #1
 8007836:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800783a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800783c:	1c9a      	adds	r2, r3, #2
 800783e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007840:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8007842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007844:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007846:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8007848:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800784a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800784c:	441a      	add	r2, r3
 800784e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007850:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8007852:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007856:	441a      	add	r2, r3
 8007858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800785a:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800785c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007860:	2b03      	cmp	r3, #3
 8007862:	d11e      	bne.n	80078a2 <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8007864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007866:	3334      	adds	r3, #52	; 0x34
 8007868:	332a      	adds	r3, #42	; 0x2a
 800786a:	4618      	mov	r0, r3
 800786c:	f7fe f870 	bl	8005950 <ld_word>
 8007870:	4603      	mov	r3, r0
 8007872:	2b00      	cmp	r3, #0
 8007874:	d001      	beq.n	800787a <find_volume+0x332>
 8007876:	230d      	movs	r3, #13
 8007878:	e0a8      	b.n	80079cc <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800787a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800787c:	891b      	ldrh	r3, [r3, #8]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d001      	beq.n	8007886 <find_volume+0x33e>
 8007882:	230d      	movs	r3, #13
 8007884:	e0a2      	b.n	80079cc <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8007886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007888:	3334      	adds	r3, #52	; 0x34
 800788a:	332c      	adds	r3, #44	; 0x2c
 800788c:	4618      	mov	r0, r3
 800788e:	f7fe f877 	bl	8005980 <ld_dword>
 8007892:	4602      	mov	r2, r0
 8007894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007896:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8007898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800789a:	699b      	ldr	r3, [r3, #24]
 800789c:	009b      	lsls	r3, r3, #2
 800789e:	647b      	str	r3, [r7, #68]	; 0x44
 80078a0:	e01f      	b.n	80078e2 <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80078a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078a4:	891b      	ldrh	r3, [r3, #8]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d101      	bne.n	80078ae <find_volume+0x366>
 80078aa:	230d      	movs	r3, #13
 80078ac:	e08e      	b.n	80079cc <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80078ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80078b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80078b4:	441a      	add	r2, r3
 80078b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078b8:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80078ba:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80078be:	2b02      	cmp	r3, #2
 80078c0:	d103      	bne.n	80078ca <find_volume+0x382>
 80078c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078c4:	699b      	ldr	r3, [r3, #24]
 80078c6:	005b      	lsls	r3, r3, #1
 80078c8:	e00a      	b.n	80078e0 <find_volume+0x398>
 80078ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078cc:	699a      	ldr	r2, [r3, #24]
 80078ce:	4613      	mov	r3, r2
 80078d0:	005b      	lsls	r3, r3, #1
 80078d2:	4413      	add	r3, r2
 80078d4:	085a      	lsrs	r2, r3, #1
 80078d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078d8:	699b      	ldr	r3, [r3, #24]
 80078da:	f003 0301 	and.w	r3, r3, #1
 80078de:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80078e0:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80078e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078e4:	69da      	ldr	r2, [r3, #28]
 80078e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80078e8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80078ec:	0a5b      	lsrs	r3, r3, #9
 80078ee:	429a      	cmp	r2, r3
 80078f0:	d201      	bcs.n	80078f6 <find_volume+0x3ae>
 80078f2:	230d      	movs	r3, #13
 80078f4:	e06a      	b.n	80079cc <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80078f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078f8:	f04f 32ff 	mov.w	r2, #4294967295
 80078fc:	615a      	str	r2, [r3, #20]
 80078fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007900:	695a      	ldr	r2, [r3, #20]
 8007902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007904:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8007906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007908:	2280      	movs	r2, #128	; 0x80
 800790a:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800790c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007910:	2b03      	cmp	r3, #3
 8007912:	d149      	bne.n	80079a8 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8007914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007916:	3334      	adds	r3, #52	; 0x34
 8007918:	3330      	adds	r3, #48	; 0x30
 800791a:	4618      	mov	r0, r3
 800791c:	f7fe f818 	bl	8005950 <ld_word>
 8007920:	4603      	mov	r3, r0
 8007922:	2b01      	cmp	r3, #1
 8007924:	d140      	bne.n	80079a8 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 8007926:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007928:	3301      	adds	r3, #1
 800792a:	4619      	mov	r1, r3
 800792c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800792e:	f7fe fabf 	bl	8005eb0 <move_window>
 8007932:	4603      	mov	r3, r0
 8007934:	2b00      	cmp	r3, #0
 8007936:	d137      	bne.n	80079a8 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 8007938:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800793a:	2200      	movs	r2, #0
 800793c:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800793e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007940:	3334      	adds	r3, #52	; 0x34
 8007942:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007946:	4618      	mov	r0, r3
 8007948:	f7fe f802 	bl	8005950 <ld_word>
 800794c:	4603      	mov	r3, r0
 800794e:	461a      	mov	r2, r3
 8007950:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8007954:	429a      	cmp	r2, r3
 8007956:	d127      	bne.n	80079a8 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8007958:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800795a:	3334      	adds	r3, #52	; 0x34
 800795c:	4618      	mov	r0, r3
 800795e:	f7fe f80f 	bl	8005980 <ld_dword>
 8007962:	4603      	mov	r3, r0
 8007964:	4a1b      	ldr	r2, [pc, #108]	; (80079d4 <find_volume+0x48c>)
 8007966:	4293      	cmp	r3, r2
 8007968:	d11e      	bne.n	80079a8 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800796a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800796c:	3334      	adds	r3, #52	; 0x34
 800796e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8007972:	4618      	mov	r0, r3
 8007974:	f7fe f804 	bl	8005980 <ld_dword>
 8007978:	4603      	mov	r3, r0
 800797a:	4a17      	ldr	r2, [pc, #92]	; (80079d8 <find_volume+0x490>)
 800797c:	4293      	cmp	r3, r2
 800797e:	d113      	bne.n	80079a8 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8007980:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007982:	3334      	adds	r3, #52	; 0x34
 8007984:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8007988:	4618      	mov	r0, r3
 800798a:	f7fd fff9 	bl	8005980 <ld_dword>
 800798e:	4602      	mov	r2, r0
 8007990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007992:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8007994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007996:	3334      	adds	r3, #52	; 0x34
 8007998:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800799c:	4618      	mov	r0, r3
 800799e:	f7fd ffef 	bl	8005980 <ld_dword>
 80079a2:	4602      	mov	r2, r0
 80079a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079a6:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80079a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079aa:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80079ae:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80079b0:	4b0a      	ldr	r3, [pc, #40]	; (80079dc <find_volume+0x494>)
 80079b2:	881b      	ldrh	r3, [r3, #0]
 80079b4:	3301      	adds	r3, #1
 80079b6:	b29a      	uxth	r2, r3
 80079b8:	4b08      	ldr	r3, [pc, #32]	; (80079dc <find_volume+0x494>)
 80079ba:	801a      	strh	r2, [r3, #0]
 80079bc:	4b07      	ldr	r3, [pc, #28]	; (80079dc <find_volume+0x494>)
 80079be:	881a      	ldrh	r2, [r3, #0]
 80079c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079c2:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80079c4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80079c6:	f7fe fa0b 	bl	8005de0 <clear_lock>
#endif
	return FR_OK;
 80079ca:	2300      	movs	r3, #0
}
 80079cc:	4618      	mov	r0, r3
 80079ce:	3758      	adds	r7, #88	; 0x58
 80079d0:	46bd      	mov	sp, r7
 80079d2:	bd80      	pop	{r7, pc}
 80079d4:	41615252 	.word	0x41615252
 80079d8:	61417272 	.word	0x61417272
 80079dc:	2000014c 	.word	0x2000014c

080079e0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b084      	sub	sp, #16
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
 80079e8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80079ea:	2309      	movs	r3, #9
 80079ec:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d01c      	beq.n	8007a2e <validate+0x4e>
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d018      	beq.n	8007a2e <validate+0x4e>
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	781b      	ldrb	r3, [r3, #0]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d013      	beq.n	8007a2e <validate+0x4e>
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	889a      	ldrh	r2, [r3, #4]
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	88db      	ldrh	r3, [r3, #6]
 8007a10:	429a      	cmp	r2, r3
 8007a12:	d10c      	bne.n	8007a2e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	785b      	ldrb	r3, [r3, #1]
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	f7fd fefa 	bl	8005814 <disk_status>
 8007a20:	4603      	mov	r3, r0
 8007a22:	f003 0301 	and.w	r3, r3, #1
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d101      	bne.n	8007a2e <validate+0x4e>
			res = FR_OK;
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8007a2e:	7bfb      	ldrb	r3, [r7, #15]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d102      	bne.n	8007a3a <validate+0x5a>
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	e000      	b.n	8007a3c <validate+0x5c>
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	683a      	ldr	r2, [r7, #0]
 8007a3e:	6013      	str	r3, [r2, #0]
	return res;
 8007a40:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a42:	4618      	mov	r0, r3
 8007a44:	3710      	adds	r7, #16
 8007a46:	46bd      	mov	sp, r7
 8007a48:	bd80      	pop	{r7, pc}
	...

08007a4c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b088      	sub	sp, #32
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	60f8      	str	r0, [r7, #12]
 8007a54:	60b9      	str	r1, [r7, #8]
 8007a56:	4613      	mov	r3, r2
 8007a58:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8007a5a:	68bb      	ldr	r3, [r7, #8]
 8007a5c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8007a5e:	f107 0310 	add.w	r3, r7, #16
 8007a62:	4618      	mov	r0, r3
 8007a64:	f7ff fcd5 	bl	8007412 <get_ldnumber>
 8007a68:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8007a6a:	69fb      	ldr	r3, [r7, #28]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	da01      	bge.n	8007a74 <f_mount+0x28>
 8007a70:	230b      	movs	r3, #11
 8007a72:	e02b      	b.n	8007acc <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8007a74:	4a17      	ldr	r2, [pc, #92]	; (8007ad4 <f_mount+0x88>)
 8007a76:	69fb      	ldr	r3, [r7, #28]
 8007a78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a7c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8007a7e:	69bb      	ldr	r3, [r7, #24]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d005      	beq.n	8007a90 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8007a84:	69b8      	ldr	r0, [r7, #24]
 8007a86:	f7fe f9ab 	bl	8005de0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8007a8a:	69bb      	ldr	r3, [r7, #24]
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d002      	beq.n	8007a9c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	2200      	movs	r2, #0
 8007a9a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8007a9c:	68fa      	ldr	r2, [r7, #12]
 8007a9e:	490d      	ldr	r1, [pc, #52]	; (8007ad4 <f_mount+0x88>)
 8007aa0:	69fb      	ldr	r3, [r7, #28]
 8007aa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d002      	beq.n	8007ab2 <f_mount+0x66>
 8007aac:	79fb      	ldrb	r3, [r7, #7]
 8007aae:	2b01      	cmp	r3, #1
 8007ab0:	d001      	beq.n	8007ab6 <f_mount+0x6a>
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	e00a      	b.n	8007acc <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8007ab6:	f107 010c 	add.w	r1, r7, #12
 8007aba:	f107 0308 	add.w	r3, r7, #8
 8007abe:	2200      	movs	r2, #0
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	f7ff fd41 	bl	8007548 <find_volume>
 8007ac6:	4603      	mov	r3, r0
 8007ac8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8007aca:	7dfb      	ldrb	r3, [r7, #23]
}
 8007acc:	4618      	mov	r0, r3
 8007ace:	3720      	adds	r7, #32
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	bd80      	pop	{r7, pc}
 8007ad4:	20000148 	.word	0x20000148

08007ad8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
 8007ade:	af00      	add	r7, sp, #0
 8007ae0:	f107 030c 	add.w	r3, r7, #12
 8007ae4:	6018      	str	r0, [r3, #0]
 8007ae6:	f107 0308 	add.w	r3, r7, #8
 8007aea:	6019      	str	r1, [r3, #0]
 8007aec:	1dfb      	adds	r3, r7, #7
 8007aee:	701a      	strb	r2, [r3, #0]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8007af0:	f107 030c 	add.w	r3, r7, #12
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d101      	bne.n	8007afe <f_open+0x26>
 8007afa:	2309      	movs	r3, #9
 8007afc:	e231      	b.n	8007f62 <f_open+0x48a>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8007afe:	1dfb      	adds	r3, r7, #7
 8007b00:	1dfa      	adds	r2, r7, #7
 8007b02:	7812      	ldrb	r2, [r2, #0]
 8007b04:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8007b08:	701a      	strb	r2, [r3, #0]
	res = find_volume(&path, &fs, mode);
 8007b0a:	1dfb      	adds	r3, r7, #7
 8007b0c:	781a      	ldrb	r2, [r3, #0]
 8007b0e:	f507 7105 	add.w	r1, r7, #532	; 0x214
 8007b12:	f107 0308 	add.w	r3, r7, #8
 8007b16:	4618      	mov	r0, r3
 8007b18:	f7ff fd16 	bl	8007548 <find_volume>
 8007b1c:	4603      	mov	r3, r0
 8007b1e:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
	if (res == FR_OK) {
 8007b22:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	f040 8210 	bne.w	8007f4c <f_open+0x474>
		dj.obj.fs = fs;
 8007b2c:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8007b30:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
		INIT_NAMBUF(fs);
 8007b34:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8007b38:	f107 0214 	add.w	r2, r7, #20
 8007b3c:	60da      	str	r2, [r3, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 8007b3e:	f107 0308 	add.w	r3, r7, #8
 8007b42:	681a      	ldr	r2, [r3, #0]
 8007b44:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8007b48:	4611      	mov	r1, r2
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	f7ff fbf0 	bl	8007330 <follow_path>
 8007b50:	4603      	mov	r3, r0
 8007b52:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8007b56:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d11b      	bne.n	8007b96 <f_open+0xbe>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8007b5e:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
 8007b62:	b25b      	sxtb	r3, r3
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	da03      	bge.n	8007b70 <f_open+0x98>
				res = FR_INVALID_NAME;
 8007b68:	2306      	movs	r3, #6
 8007b6a:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 8007b6e:	e012      	b.n	8007b96 <f_open+0xbe>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007b70:	1dfb      	adds	r3, r7, #7
 8007b72:	781b      	ldrb	r3, [r3, #0]
 8007b74:	f023 0301 	bic.w	r3, r3, #1
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	bf14      	ite	ne
 8007b7c:	2301      	movne	r3, #1
 8007b7e:	2300      	moveq	r3, #0
 8007b80:	b2db      	uxtb	r3, r3
 8007b82:	461a      	mov	r2, r3
 8007b84:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8007b88:	4611      	mov	r1, r2
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	f7fd ffe0 	bl	8005b50 <chk_lock>
 8007b90:	4603      	mov	r3, r0
 8007b92:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8007b96:	1dfb      	adds	r3, r7, #7
 8007b98:	781b      	ldrb	r3, [r3, #0]
 8007b9a:	f003 031c 	and.w	r3, r3, #28
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	f000 809b 	beq.w	8007cda <f_open+0x202>
			if (res != FR_OK) {					/* No file, create new */
 8007ba4:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d019      	beq.n	8007be0 <f_open+0x108>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8007bac:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8007bb0:	2b04      	cmp	r3, #4
 8007bb2:	d10e      	bne.n	8007bd2 <f_open+0xfa>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8007bb4:	f7fe f828 	bl	8005c08 <enq_lock>
 8007bb8:	4603      	mov	r3, r0
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d006      	beq.n	8007bcc <f_open+0xf4>
 8007bbe:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	f7ff f904 	bl	8006dd0 <dir_register>
 8007bc8:	4603      	mov	r3, r0
 8007bca:	e000      	b.n	8007bce <f_open+0xf6>
 8007bcc:	2312      	movs	r3, #18
 8007bce:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8007bd2:	1dfb      	adds	r3, r7, #7
 8007bd4:	1dfa      	adds	r2, r7, #7
 8007bd6:	7812      	ldrb	r2, [r2, #0]
 8007bd8:	f042 0208 	orr.w	r2, r2, #8
 8007bdc:	701a      	strb	r2, [r3, #0]
 8007bde:	e012      	b.n	8007c06 <f_open+0x12e>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8007be0:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 8007be4:	f003 0311 	and.w	r3, r3, #17
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d003      	beq.n	8007bf4 <f_open+0x11c>
					res = FR_DENIED;
 8007bec:	2307      	movs	r3, #7
 8007bee:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 8007bf2:	e008      	b.n	8007c06 <f_open+0x12e>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8007bf4:	1dfb      	adds	r3, r7, #7
 8007bf6:	781b      	ldrb	r3, [r3, #0]
 8007bf8:	f003 0304 	and.w	r3, r3, #4
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d002      	beq.n	8007c06 <f_open+0x12e>
 8007c00:	2308      	movs	r3, #8
 8007c02:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8007c06:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	f040 8082 	bne.w	8007d14 <f_open+0x23c>
 8007c10:	1dfb      	adds	r3, r7, #7
 8007c12:	781b      	ldrb	r3, [r3, #0]
 8007c14:	f003 0308 	and.w	r3, r3, #8
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d07b      	beq.n	8007d14 <f_open+0x23c>
				dw = GET_FATTIME();
 8007c1c:	f7fd fc8e 	bl	800553c <get_fattime>
 8007c20:	f8c7 0258 	str.w	r0, [r7, #600]	; 0x258
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8007c24:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8007c28:	330e      	adds	r3, #14
 8007c2a:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 8007c2e:	4618      	mov	r0, r3
 8007c30:	f7fd fee4 	bl	80059fc <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8007c34:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8007c38:	3316      	adds	r3, #22
 8007c3a:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 8007c3e:	4618      	mov	r0, r3
 8007c40:	f7fd fedc 	bl	80059fc <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8007c44:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8007c48:	330b      	adds	r3, #11
 8007c4a:	2220      	movs	r2, #32
 8007c4c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8007c4e:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8007c52:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 8007c56:	4611      	mov	r1, r2
 8007c58:	4618      	mov	r0, r3
 8007c5a:	f7fe fe30 	bl	80068be <ld_clust>
 8007c5e:	f8c7 0254 	str.w	r0, [r7, #596]	; 0x254
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8007c62:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8007c66:	f8d7 1238 	ldr.w	r1, [r7, #568]	; 0x238
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	f7fe fe45 	bl	80068fc <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8007c72:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8007c76:	331c      	adds	r3, #28
 8007c78:	2100      	movs	r1, #0
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	f7fd febe 	bl	80059fc <st_dword>
					fs->wflag = 1;
 8007c80:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8007c84:	2201      	movs	r2, #1
 8007c86:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8007c88:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d041      	beq.n	8007d14 <f_open+0x23c>
						dw = fs->winsect;
 8007c90:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8007c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c96:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
						res = remove_chain(&dj.obj, cl, 0);
 8007c9a:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	f8d7 1254 	ldr.w	r1, [r7, #596]	; 0x254
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	f7fe fb52 	bl	800634e <remove_chain>
 8007caa:	4603      	mov	r3, r0
 8007cac:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
						if (res == FR_OK) {
 8007cb0:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d12d      	bne.n	8007d14 <f_open+0x23c>
							res = move_window(fs, dw);
 8007cb8:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8007cbc:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	f7fe f8f5 	bl	8005eb0 <move_window>
 8007cc6:	4603      	mov	r3, r0
 8007cc8:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8007ccc:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8007cd0:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 8007cd4:	3a01      	subs	r2, #1
 8007cd6:	611a      	str	r2, [r3, #16]
 8007cd8:	e01c      	b.n	8007d14 <f_open+0x23c>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8007cda:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d118      	bne.n	8007d14 <f_open+0x23c>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8007ce2:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 8007ce6:	f003 0310 	and.w	r3, r3, #16
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d003      	beq.n	8007cf6 <f_open+0x21e>
					res = FR_NO_FILE;
 8007cee:	2304      	movs	r3, #4
 8007cf0:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 8007cf4:	e00e      	b.n	8007d14 <f_open+0x23c>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8007cf6:	1dfb      	adds	r3, r7, #7
 8007cf8:	781b      	ldrb	r3, [r3, #0]
 8007cfa:	f003 0302 	and.w	r3, r3, #2
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d008      	beq.n	8007d14 <f_open+0x23c>
 8007d02:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 8007d06:	f003 0301 	and.w	r3, r3, #1
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d002      	beq.n	8007d14 <f_open+0x23c>
						res = FR_DENIED;
 8007d0e:	2307      	movs	r3, #7
 8007d10:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
					}
				}
			}
		}
		if (res == FR_OK) {
 8007d14:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d136      	bne.n	8007d8a <f_open+0x2b2>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8007d1c:	1dfb      	adds	r3, r7, #7
 8007d1e:	781b      	ldrb	r3, [r3, #0]
 8007d20:	f003 0308 	and.w	r3, r3, #8
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d005      	beq.n	8007d34 <f_open+0x25c>
				mode |= FA_MODIFIED;
 8007d28:	1dfb      	adds	r3, r7, #7
 8007d2a:	1dfa      	adds	r2, r7, #7
 8007d2c:	7812      	ldrb	r2, [r2, #0]
 8007d2e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007d32:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8007d34:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8007d38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007d3a:	f107 030c 	add.w	r3, r7, #12
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8007d42:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 8007d46:	f107 030c 	add.w	r3, r7, #12
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007d4e:	1dfb      	adds	r3, r7, #7
 8007d50:	781b      	ldrb	r3, [r3, #0]
 8007d52:	f023 0301 	bic.w	r3, r3, #1
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	bf14      	ite	ne
 8007d5a:	2301      	movne	r3, #1
 8007d5c:	2300      	moveq	r3, #0
 8007d5e:	b2db      	uxtb	r3, r3
 8007d60:	461a      	mov	r2, r3
 8007d62:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8007d66:	4611      	mov	r1, r2
 8007d68:	4618      	mov	r0, r3
 8007d6a:	f7fd ff6f 	bl	8005c4c <inc_lock>
 8007d6e:	4602      	mov	r2, r0
 8007d70:	f107 030c 	add.w	r3, r7, #12
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8007d78:	f107 030c 	add.w	r3, r7, #12
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	691b      	ldr	r3, [r3, #16]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d102      	bne.n	8007d8a <f_open+0x2b2>
 8007d84:	2302      	movs	r3, #2
 8007d86:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				}
			}
		}
#endif

		if (res == FR_OK) {
 8007d8a:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	f040 80dc 	bne.w	8007f4c <f_open+0x474>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8007d94:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8007d98:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 8007d9c:	4611      	mov	r1, r2
 8007d9e:	4618      	mov	r0, r3
 8007da0:	f7fe fd8d 	bl	80068be <ld_clust>
 8007da4:	4602      	mov	r2, r0
 8007da6:	f107 030c 	add.w	r3, r7, #12
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8007dae:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8007db2:	331c      	adds	r3, #28
 8007db4:	4618      	mov	r0, r3
 8007db6:	f7fd fde3 	bl	8005980 <ld_dword>
 8007dba:	4602      	mov	r2, r0
 8007dbc:	f107 030c 	add.w	r3, r7, #12
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8007dc4:	f107 030c 	add.w	r3, r7, #12
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	2200      	movs	r2, #0
 8007dcc:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8007dce:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8007dd2:	f107 030c 	add.w	r3, r7, #12
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8007dda:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8007dde:	88da      	ldrh	r2, [r3, #6]
 8007de0:	f107 030c 	add.w	r3, r7, #12
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8007de8:	f107 030c 	add.w	r3, r7, #12
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	1dfa      	adds	r2, r7, #7
 8007df0:	7812      	ldrb	r2, [r2, #0]
 8007df2:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8007df4:	f107 030c 	add.w	r3, r7, #12
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8007dfe:	f107 030c 	add.w	r3, r7, #12
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	2200      	movs	r2, #0
 8007e06:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8007e08:	f107 030c 	add.w	r3, r7, #12
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	2200      	movs	r2, #0
 8007e10:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8007e12:	f107 030c 	add.w	r3, r7, #12
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	3330      	adds	r3, #48	; 0x30
 8007e1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007e1e:	2100      	movs	r1, #0
 8007e20:	4618      	mov	r0, r3
 8007e22:	f7fd fe38 	bl	8005a96 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8007e26:	1dfb      	adds	r3, r7, #7
 8007e28:	781b      	ldrb	r3, [r3, #0]
 8007e2a:	f003 0320 	and.w	r3, r3, #32
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	f000 808c 	beq.w	8007f4c <f_open+0x474>
 8007e34:	f107 030c 	add.w	r3, r7, #12
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	68db      	ldr	r3, [r3, #12]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	f000 8085 	beq.w	8007f4c <f_open+0x474>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8007e42:	f107 030c 	add.w	r3, r7, #12
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	68da      	ldr	r2, [r3, #12]
 8007e4a:	f107 030c 	add.w	r3, r7, #12
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8007e52:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8007e56:	895b      	ldrh	r3, [r3, #10]
 8007e58:	025b      	lsls	r3, r3, #9
 8007e5a:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8007e5e:	f107 030c 	add.w	r3, r7, #12
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	689b      	ldr	r3, [r3, #8]
 8007e66:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007e6a:	f107 030c 	add.w	r3, r7, #12
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	68db      	ldr	r3, [r3, #12]
 8007e72:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 8007e76:	e01f      	b.n	8007eb8 <f_open+0x3e0>
					clst = get_fat(&fp->obj, clst);
 8007e78:	f107 030c 	add.w	r3, r7, #12
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 8007e82:	4618      	mov	r0, r3
 8007e84:	f7fe f8cf 	bl	8006026 <get_fat>
 8007e88:	f8c7 0260 	str.w	r0, [r7, #608]	; 0x260
					if (clst <= 1) res = FR_INT_ERR;
 8007e8c:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8007e90:	2b01      	cmp	r3, #1
 8007e92:	d802      	bhi.n	8007e9a <f_open+0x3c2>
 8007e94:	2302      	movs	r3, #2
 8007e96:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8007e9a:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8007e9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ea2:	d102      	bne.n	8007eaa <f_open+0x3d2>
 8007ea4:	2301      	movs	r3, #1
 8007ea6:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007eaa:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 8007eae:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8007eb2:	1ad3      	subs	r3, r2, r3
 8007eb4:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 8007eb8:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d105      	bne.n	8007ecc <f_open+0x3f4>
 8007ec0:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 8007ec4:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8007ec8:	429a      	cmp	r2, r3
 8007eca:	d8d5      	bhi.n	8007e78 <f_open+0x3a0>
				}
				fp->clust = clst;
 8007ecc:	f107 030c 	add.w	r3, r7, #12
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	f8d7 2260 	ldr.w	r2, [r7, #608]	; 0x260
 8007ed6:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8007ed8:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d135      	bne.n	8007f4c <f_open+0x474>
 8007ee0:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8007ee4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d02f      	beq.n	8007f4c <f_open+0x474>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8007eec:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8007ef0:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	f7fe f877 	bl	8005fe8 <clust2sect>
 8007efa:	f8c7 024c 	str.w	r0, [r7, #588]	; 0x24c
 8007efe:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d103      	bne.n	8007f0e <f_open+0x436>
						res = FR_INT_ERR;
 8007f06:	2302      	movs	r3, #2
 8007f08:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 8007f0c:	e01e      	b.n	8007f4c <f_open+0x474>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8007f0e:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8007f12:	0a5a      	lsrs	r2, r3, #9
 8007f14:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007f18:	441a      	add	r2, r3
 8007f1a:	f107 030c 	add.w	r3, r7, #12
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8007f22:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8007f26:	7858      	ldrb	r0, [r3, #1]
 8007f28:	f107 030c 	add.w	r3, r7, #12
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007f32:	f107 030c 	add.w	r3, r7, #12
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	6a1a      	ldr	r2, [r3, #32]
 8007f3a:	2301      	movs	r3, #1
 8007f3c:	f7fd fcaa 	bl	8005894 <disk_read>
 8007f40:	4603      	mov	r3, r0
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d002      	beq.n	8007f4c <f_open+0x474>
 8007f46:	2301      	movs	r3, #1
 8007f48:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8007f4c:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d004      	beq.n	8007f5e <f_open+0x486>
 8007f54:	f107 030c 	add.w	r3, r7, #12
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8007f5e:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
}
 8007f62:	4618      	mov	r0, r3
 8007f64:	f507 771a 	add.w	r7, r7, #616	; 0x268
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	bd80      	pop	{r7, pc}

08007f6c <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b08e      	sub	sp, #56	; 0x38
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	60f8      	str	r0, [r7, #12]
 8007f74:	60b9      	str	r1, [r7, #8]
 8007f76:	607a      	str	r2, [r7, #4]
 8007f78:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8007f7a:	68bb      	ldr	r3, [r7, #8]
 8007f7c:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	2200      	movs	r2, #0
 8007f82:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	f107 0214 	add.w	r2, r7, #20
 8007f8a:	4611      	mov	r1, r2
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	f7ff fd27 	bl	80079e0 <validate>
 8007f92:	4603      	mov	r3, r0
 8007f94:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8007f98:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d107      	bne.n	8007fb0 <f_read+0x44>
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	7d5b      	ldrb	r3, [r3, #21]
 8007fa4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8007fa8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d002      	beq.n	8007fb6 <f_read+0x4a>
 8007fb0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007fb4:	e115      	b.n	80081e2 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	7d1b      	ldrb	r3, [r3, #20]
 8007fba:	f003 0301 	and.w	r3, r3, #1
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d101      	bne.n	8007fc6 <f_read+0x5a>
 8007fc2:	2307      	movs	r3, #7
 8007fc4:	e10d      	b.n	80081e2 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	68da      	ldr	r2, [r3, #12]
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	699b      	ldr	r3, [r3, #24]
 8007fce:	1ad3      	subs	r3, r2, r3
 8007fd0:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8007fd2:	687a      	ldr	r2, [r7, #4]
 8007fd4:	6a3b      	ldr	r3, [r7, #32]
 8007fd6:	429a      	cmp	r2, r3
 8007fd8:	f240 80fe 	bls.w	80081d8 <f_read+0x26c>
 8007fdc:	6a3b      	ldr	r3, [r7, #32]
 8007fde:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8007fe0:	e0fa      	b.n	80081d8 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	699b      	ldr	r3, [r3, #24]
 8007fe6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	f040 80c6 	bne.w	800817c <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	699b      	ldr	r3, [r3, #24]
 8007ff4:	0a5b      	lsrs	r3, r3, #9
 8007ff6:	697a      	ldr	r2, [r7, #20]
 8007ff8:	8952      	ldrh	r2, [r2, #10]
 8007ffa:	3a01      	subs	r2, #1
 8007ffc:	4013      	ands	r3, r2
 8007ffe:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8008000:	69fb      	ldr	r3, [r7, #28]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d12f      	bne.n	8008066 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	699b      	ldr	r3, [r3, #24]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d103      	bne.n	8008016 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	689b      	ldr	r3, [r3, #8]
 8008012:	633b      	str	r3, [r7, #48]	; 0x30
 8008014:	e013      	b.n	800803e <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800801a:	2b00      	cmp	r3, #0
 800801c:	d007      	beq.n	800802e <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	699b      	ldr	r3, [r3, #24]
 8008022:	4619      	mov	r1, r3
 8008024:	68f8      	ldr	r0, [r7, #12]
 8008026:	f7fe fa8f 	bl	8006548 <clmt_clust>
 800802a:	6338      	str	r0, [r7, #48]	; 0x30
 800802c:	e007      	b.n	800803e <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800802e:	68fa      	ldr	r2, [r7, #12]
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	69db      	ldr	r3, [r3, #28]
 8008034:	4619      	mov	r1, r3
 8008036:	4610      	mov	r0, r2
 8008038:	f7fd fff5 	bl	8006026 <get_fat>
 800803c:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800803e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008040:	2b01      	cmp	r3, #1
 8008042:	d804      	bhi.n	800804e <f_read+0xe2>
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	2202      	movs	r2, #2
 8008048:	755a      	strb	r2, [r3, #21]
 800804a:	2302      	movs	r3, #2
 800804c:	e0c9      	b.n	80081e2 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800804e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008050:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008054:	d104      	bne.n	8008060 <f_read+0xf4>
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	2201      	movs	r2, #1
 800805a:	755a      	strb	r2, [r3, #21]
 800805c:	2301      	movs	r3, #1
 800805e:	e0c0      	b.n	80081e2 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008064:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8008066:	697a      	ldr	r2, [r7, #20]
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	69db      	ldr	r3, [r3, #28]
 800806c:	4619      	mov	r1, r3
 800806e:	4610      	mov	r0, r2
 8008070:	f7fd ffba 	bl	8005fe8 <clust2sect>
 8008074:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008076:	69bb      	ldr	r3, [r7, #24]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d104      	bne.n	8008086 <f_read+0x11a>
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	2202      	movs	r2, #2
 8008080:	755a      	strb	r2, [r3, #21]
 8008082:	2302      	movs	r3, #2
 8008084:	e0ad      	b.n	80081e2 <f_read+0x276>
			sect += csect;
 8008086:	69ba      	ldr	r2, [r7, #24]
 8008088:	69fb      	ldr	r3, [r7, #28]
 800808a:	4413      	add	r3, r2
 800808c:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	0a5b      	lsrs	r3, r3, #9
 8008092:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8008094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008096:	2b00      	cmp	r3, #0
 8008098:	d039      	beq.n	800810e <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800809a:	69fa      	ldr	r2, [r7, #28]
 800809c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800809e:	4413      	add	r3, r2
 80080a0:	697a      	ldr	r2, [r7, #20]
 80080a2:	8952      	ldrh	r2, [r2, #10]
 80080a4:	4293      	cmp	r3, r2
 80080a6:	d905      	bls.n	80080b4 <f_read+0x148>
					cc = fs->csize - csect;
 80080a8:	697b      	ldr	r3, [r7, #20]
 80080aa:	895b      	ldrh	r3, [r3, #10]
 80080ac:	461a      	mov	r2, r3
 80080ae:	69fb      	ldr	r3, [r7, #28]
 80080b0:	1ad3      	subs	r3, r2, r3
 80080b2:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80080b4:	697b      	ldr	r3, [r7, #20]
 80080b6:	7858      	ldrb	r0, [r3, #1]
 80080b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080ba:	69ba      	ldr	r2, [r7, #24]
 80080bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80080be:	f7fd fbe9 	bl	8005894 <disk_read>
 80080c2:	4603      	mov	r3, r0
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d004      	beq.n	80080d2 <f_read+0x166>
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	2201      	movs	r2, #1
 80080cc:	755a      	strb	r2, [r3, #21]
 80080ce:	2301      	movs	r3, #1
 80080d0:	e087      	b.n	80081e2 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	7d1b      	ldrb	r3, [r3, #20]
 80080d6:	b25b      	sxtb	r3, r3
 80080d8:	2b00      	cmp	r3, #0
 80080da:	da14      	bge.n	8008106 <f_read+0x19a>
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	6a1a      	ldr	r2, [r3, #32]
 80080e0:	69bb      	ldr	r3, [r7, #24]
 80080e2:	1ad3      	subs	r3, r2, r3
 80080e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80080e6:	429a      	cmp	r2, r3
 80080e8:	d90d      	bls.n	8008106 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	6a1a      	ldr	r2, [r3, #32]
 80080ee:	69bb      	ldr	r3, [r7, #24]
 80080f0:	1ad3      	subs	r3, r2, r3
 80080f2:	025b      	lsls	r3, r3, #9
 80080f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080f6:	18d0      	adds	r0, r2, r3
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	3330      	adds	r3, #48	; 0x30
 80080fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008100:	4619      	mov	r1, r3
 8008102:	f7fd fca7 	bl	8005a54 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8008106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008108:	025b      	lsls	r3, r3, #9
 800810a:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800810c:	e050      	b.n	80081b0 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	6a1b      	ldr	r3, [r3, #32]
 8008112:	69ba      	ldr	r2, [r7, #24]
 8008114:	429a      	cmp	r2, r3
 8008116:	d02e      	beq.n	8008176 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	7d1b      	ldrb	r3, [r3, #20]
 800811c:	b25b      	sxtb	r3, r3
 800811e:	2b00      	cmp	r3, #0
 8008120:	da18      	bge.n	8008154 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008122:	697b      	ldr	r3, [r7, #20]
 8008124:	7858      	ldrb	r0, [r3, #1]
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	6a1a      	ldr	r2, [r3, #32]
 8008130:	2301      	movs	r3, #1
 8008132:	f7fd fbcf 	bl	80058d4 <disk_write>
 8008136:	4603      	mov	r3, r0
 8008138:	2b00      	cmp	r3, #0
 800813a:	d004      	beq.n	8008146 <f_read+0x1da>
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	2201      	movs	r2, #1
 8008140:	755a      	strb	r2, [r3, #21]
 8008142:	2301      	movs	r3, #1
 8008144:	e04d      	b.n	80081e2 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	7d1b      	ldrb	r3, [r3, #20]
 800814a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800814e:	b2da      	uxtb	r2, r3
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8008154:	697b      	ldr	r3, [r7, #20]
 8008156:	7858      	ldrb	r0, [r3, #1]
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800815e:	2301      	movs	r3, #1
 8008160:	69ba      	ldr	r2, [r7, #24]
 8008162:	f7fd fb97 	bl	8005894 <disk_read>
 8008166:	4603      	mov	r3, r0
 8008168:	2b00      	cmp	r3, #0
 800816a:	d004      	beq.n	8008176 <f_read+0x20a>
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	2201      	movs	r2, #1
 8008170:	755a      	strb	r2, [r3, #21]
 8008172:	2301      	movs	r3, #1
 8008174:	e035      	b.n	80081e2 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	69ba      	ldr	r2, [r7, #24]
 800817a:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	699b      	ldr	r3, [r3, #24]
 8008180:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008184:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8008188:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800818a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	429a      	cmp	r2, r3
 8008190:	d901      	bls.n	8008196 <f_read+0x22a>
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	699b      	ldr	r3, [r3, #24]
 80081a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081a4:	4413      	add	r3, r2
 80081a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80081a8:	4619      	mov	r1, r3
 80081aa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80081ac:	f7fd fc52 	bl	8005a54 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80081b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081b4:	4413      	add	r3, r2
 80081b6:	627b      	str	r3, [r7, #36]	; 0x24
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	699a      	ldr	r2, [r3, #24]
 80081bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081be:	441a      	add	r2, r3
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	619a      	str	r2, [r3, #24]
 80081c4:	683b      	ldr	r3, [r7, #0]
 80081c6:	681a      	ldr	r2, [r3, #0]
 80081c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081ca:	441a      	add	r2, r3
 80081cc:	683b      	ldr	r3, [r7, #0]
 80081ce:	601a      	str	r2, [r3, #0]
 80081d0:	687a      	ldr	r2, [r7, #4]
 80081d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081d4:	1ad3      	subs	r3, r2, r3
 80081d6:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	f47f af01 	bne.w	8007fe2 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 80081e0:	2300      	movs	r3, #0
}
 80081e2:	4618      	mov	r0, r3
 80081e4:	3738      	adds	r7, #56	; 0x38
 80081e6:	46bd      	mov	sp, r7
 80081e8:	bd80      	pop	{r7, pc}

080081ea <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80081ea:	b580      	push	{r7, lr}
 80081ec:	b086      	sub	sp, #24
 80081ee:	af00      	add	r7, sp, #0
 80081f0:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	f107 0208 	add.w	r2, r7, #8
 80081f8:	4611      	mov	r1, r2
 80081fa:	4618      	mov	r0, r3
 80081fc:	f7ff fbf0 	bl	80079e0 <validate>
 8008200:	4603      	mov	r3, r0
 8008202:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008204:	7dfb      	ldrb	r3, [r7, #23]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d168      	bne.n	80082dc <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	7d1b      	ldrb	r3, [r3, #20]
 800820e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008212:	2b00      	cmp	r3, #0
 8008214:	d062      	beq.n	80082dc <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	7d1b      	ldrb	r3, [r3, #20]
 800821a:	b25b      	sxtb	r3, r3
 800821c:	2b00      	cmp	r3, #0
 800821e:	da15      	bge.n	800824c <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8008220:	68bb      	ldr	r3, [r7, #8]
 8008222:	7858      	ldrb	r0, [r3, #1]
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	6a1a      	ldr	r2, [r3, #32]
 800822e:	2301      	movs	r3, #1
 8008230:	f7fd fb50 	bl	80058d4 <disk_write>
 8008234:	4603      	mov	r3, r0
 8008236:	2b00      	cmp	r3, #0
 8008238:	d001      	beq.n	800823e <f_sync+0x54>
 800823a:	2301      	movs	r3, #1
 800823c:	e04f      	b.n	80082de <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	7d1b      	ldrb	r3, [r3, #20]
 8008242:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008246:	b2da      	uxtb	r2, r3
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800824c:	f7fd f976 	bl	800553c <get_fattime>
 8008250:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8008252:	68ba      	ldr	r2, [r7, #8]
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008258:	4619      	mov	r1, r3
 800825a:	4610      	mov	r0, r2
 800825c:	f7fd fe28 	bl	8005eb0 <move_window>
 8008260:	4603      	mov	r3, r0
 8008262:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8008264:	7dfb      	ldrb	r3, [r7, #23]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d138      	bne.n	80082dc <f_sync+0xf2>
					dir = fp->dir_ptr;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800826e:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	330b      	adds	r3, #11
 8008274:	781a      	ldrb	r2, [r3, #0]
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	330b      	adds	r3, #11
 800827a:	f042 0220 	orr.w	r2, r2, #32
 800827e:	b2d2      	uxtb	r2, r2
 8008280:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	6818      	ldr	r0, [r3, #0]
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	689b      	ldr	r3, [r3, #8]
 800828a:	461a      	mov	r2, r3
 800828c:	68f9      	ldr	r1, [r7, #12]
 800828e:	f7fe fb35 	bl	80068fc <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	f103 021c 	add.w	r2, r3, #28
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	68db      	ldr	r3, [r3, #12]
 800829c:	4619      	mov	r1, r3
 800829e:	4610      	mov	r0, r2
 80082a0:	f7fd fbac 	bl	80059fc <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	3316      	adds	r3, #22
 80082a8:	6939      	ldr	r1, [r7, #16]
 80082aa:	4618      	mov	r0, r3
 80082ac:	f7fd fba6 	bl	80059fc <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	3312      	adds	r3, #18
 80082b4:	2100      	movs	r1, #0
 80082b6:	4618      	mov	r0, r3
 80082b8:	f7fd fb85 	bl	80059c6 <st_word>
					fs->wflag = 1;
 80082bc:	68bb      	ldr	r3, [r7, #8]
 80082be:	2201      	movs	r2, #1
 80082c0:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80082c2:	68bb      	ldr	r3, [r7, #8]
 80082c4:	4618      	mov	r0, r3
 80082c6:	f7fd fe21 	bl	8005f0c <sync_fs>
 80082ca:	4603      	mov	r3, r0
 80082cc:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	7d1b      	ldrb	r3, [r3, #20]
 80082d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80082d6:	b2da      	uxtb	r2, r3
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80082dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80082de:	4618      	mov	r0, r3
 80082e0:	3718      	adds	r7, #24
 80082e2:	46bd      	mov	sp, r7
 80082e4:	bd80      	pop	{r7, pc}

080082e6 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80082e6:	b580      	push	{r7, lr}
 80082e8:	b084      	sub	sp, #16
 80082ea:	af00      	add	r7, sp, #0
 80082ec:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80082ee:	6878      	ldr	r0, [r7, #4]
 80082f0:	f7ff ff7b 	bl	80081ea <f_sync>
 80082f4:	4603      	mov	r3, r0
 80082f6:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80082f8:	7bfb      	ldrb	r3, [r7, #15]
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d118      	bne.n	8008330 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	f107 0208 	add.w	r2, r7, #8
 8008304:	4611      	mov	r1, r2
 8008306:	4618      	mov	r0, r3
 8008308:	f7ff fb6a 	bl	80079e0 <validate>
 800830c:	4603      	mov	r3, r0
 800830e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008310:	7bfb      	ldrb	r3, [r7, #15]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d10c      	bne.n	8008330 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	691b      	ldr	r3, [r3, #16]
 800831a:	4618      	mov	r0, r3
 800831c:	f7fd fd24 	bl	8005d68 <dec_lock>
 8008320:	4603      	mov	r3, r0
 8008322:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8008324:	7bfb      	ldrb	r3, [r7, #15]
 8008326:	2b00      	cmp	r3, #0
 8008328:	d102      	bne.n	8008330 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	2200      	movs	r2, #0
 800832e:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8008330:	7bfb      	ldrb	r3, [r7, #15]
}
 8008332:	4618      	mov	r0, r3
 8008334:	3710      	adds	r7, #16
 8008336:	46bd      	mov	sp, r7
 8008338:	bd80      	pop	{r7, pc}
	...

0800833c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800833c:	b480      	push	{r7}
 800833e:	b087      	sub	sp, #28
 8008340:	af00      	add	r7, sp, #0
 8008342:	60f8      	str	r0, [r7, #12]
 8008344:	60b9      	str	r1, [r7, #8]
 8008346:	4613      	mov	r3, r2
 8008348:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800834a:	2301      	movs	r3, #1
 800834c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800834e:	2300      	movs	r3, #0
 8008350:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8008352:	4b1f      	ldr	r3, [pc, #124]	; (80083d0 <FATFS_LinkDriverEx+0x94>)
 8008354:	7a5b      	ldrb	r3, [r3, #9]
 8008356:	b2db      	uxtb	r3, r3
 8008358:	2b00      	cmp	r3, #0
 800835a:	d131      	bne.n	80083c0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800835c:	4b1c      	ldr	r3, [pc, #112]	; (80083d0 <FATFS_LinkDriverEx+0x94>)
 800835e:	7a5b      	ldrb	r3, [r3, #9]
 8008360:	b2db      	uxtb	r3, r3
 8008362:	461a      	mov	r2, r3
 8008364:	4b1a      	ldr	r3, [pc, #104]	; (80083d0 <FATFS_LinkDriverEx+0x94>)
 8008366:	2100      	movs	r1, #0
 8008368:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800836a:	4b19      	ldr	r3, [pc, #100]	; (80083d0 <FATFS_LinkDriverEx+0x94>)
 800836c:	7a5b      	ldrb	r3, [r3, #9]
 800836e:	b2db      	uxtb	r3, r3
 8008370:	4a17      	ldr	r2, [pc, #92]	; (80083d0 <FATFS_LinkDriverEx+0x94>)
 8008372:	009b      	lsls	r3, r3, #2
 8008374:	4413      	add	r3, r2
 8008376:	68fa      	ldr	r2, [r7, #12]
 8008378:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800837a:	4b15      	ldr	r3, [pc, #84]	; (80083d0 <FATFS_LinkDriverEx+0x94>)
 800837c:	7a5b      	ldrb	r3, [r3, #9]
 800837e:	b2db      	uxtb	r3, r3
 8008380:	461a      	mov	r2, r3
 8008382:	4b13      	ldr	r3, [pc, #76]	; (80083d0 <FATFS_LinkDriverEx+0x94>)
 8008384:	4413      	add	r3, r2
 8008386:	79fa      	ldrb	r2, [r7, #7]
 8008388:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800838a:	4b11      	ldr	r3, [pc, #68]	; (80083d0 <FATFS_LinkDriverEx+0x94>)
 800838c:	7a5b      	ldrb	r3, [r3, #9]
 800838e:	b2db      	uxtb	r3, r3
 8008390:	1c5a      	adds	r2, r3, #1
 8008392:	b2d1      	uxtb	r1, r2
 8008394:	4a0e      	ldr	r2, [pc, #56]	; (80083d0 <FATFS_LinkDriverEx+0x94>)
 8008396:	7251      	strb	r1, [r2, #9]
 8008398:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800839a:	7dbb      	ldrb	r3, [r7, #22]
 800839c:	3330      	adds	r3, #48	; 0x30
 800839e:	b2da      	uxtb	r2, r3
 80083a0:	68bb      	ldr	r3, [r7, #8]
 80083a2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80083a4:	68bb      	ldr	r3, [r7, #8]
 80083a6:	3301      	adds	r3, #1
 80083a8:	223a      	movs	r2, #58	; 0x3a
 80083aa:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80083ac:	68bb      	ldr	r3, [r7, #8]
 80083ae:	3302      	adds	r3, #2
 80083b0:	222f      	movs	r2, #47	; 0x2f
 80083b2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80083b4:	68bb      	ldr	r3, [r7, #8]
 80083b6:	3303      	adds	r3, #3
 80083b8:	2200      	movs	r2, #0
 80083ba:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80083bc:	2300      	movs	r3, #0
 80083be:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80083c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80083c2:	4618      	mov	r0, r3
 80083c4:	371c      	adds	r7, #28
 80083c6:	46bd      	mov	sp, r7
 80083c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083cc:	4770      	bx	lr
 80083ce:	bf00      	nop
 80083d0:	20000170 	.word	0x20000170

080083d4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b082      	sub	sp, #8
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
 80083dc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80083de:	2200      	movs	r2, #0
 80083e0:	6839      	ldr	r1, [r7, #0]
 80083e2:	6878      	ldr	r0, [r7, #4]
 80083e4:	f7ff ffaa 	bl	800833c <FATFS_LinkDriverEx>
 80083e8:	4603      	mov	r3, r0
}
 80083ea:	4618      	mov	r0, r3
 80083ec:	3708      	adds	r7, #8
 80083ee:	46bd      	mov	sp, r7
 80083f0:	bd80      	pop	{r7, pc}
	...

080083f4 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 80083f4:	b480      	push	{r7}
 80083f6:	b085      	sub	sp, #20
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	4603      	mov	r3, r0
 80083fc:	6039      	str	r1, [r7, #0]
 80083fe:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8008400:	88fb      	ldrh	r3, [r7, #6]
 8008402:	2b7f      	cmp	r3, #127	; 0x7f
 8008404:	d802      	bhi.n	800840c <ff_convert+0x18>
		c = chr;
 8008406:	88fb      	ldrh	r3, [r7, #6]
 8008408:	81fb      	strh	r3, [r7, #14]
 800840a:	e025      	b.n	8008458 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800840c:	683b      	ldr	r3, [r7, #0]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d00b      	beq.n	800842a <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8008412:	88fb      	ldrh	r3, [r7, #6]
 8008414:	2bff      	cmp	r3, #255	; 0xff
 8008416:	d805      	bhi.n	8008424 <ff_convert+0x30>
 8008418:	88fb      	ldrh	r3, [r7, #6]
 800841a:	3b80      	subs	r3, #128	; 0x80
 800841c:	4a12      	ldr	r2, [pc, #72]	; (8008468 <ff_convert+0x74>)
 800841e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008422:	e000      	b.n	8008426 <ff_convert+0x32>
 8008424:	2300      	movs	r3, #0
 8008426:	81fb      	strh	r3, [r7, #14]
 8008428:	e016      	b.n	8008458 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800842a:	2300      	movs	r3, #0
 800842c:	81fb      	strh	r3, [r7, #14]
 800842e:	e009      	b.n	8008444 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8008430:	89fb      	ldrh	r3, [r7, #14]
 8008432:	4a0d      	ldr	r2, [pc, #52]	; (8008468 <ff_convert+0x74>)
 8008434:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008438:	88fa      	ldrh	r2, [r7, #6]
 800843a:	429a      	cmp	r2, r3
 800843c:	d006      	beq.n	800844c <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800843e:	89fb      	ldrh	r3, [r7, #14]
 8008440:	3301      	adds	r3, #1
 8008442:	81fb      	strh	r3, [r7, #14]
 8008444:	89fb      	ldrh	r3, [r7, #14]
 8008446:	2b7f      	cmp	r3, #127	; 0x7f
 8008448:	d9f2      	bls.n	8008430 <ff_convert+0x3c>
 800844a:	e000      	b.n	800844e <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800844c:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800844e:	89fb      	ldrh	r3, [r7, #14]
 8008450:	3380      	adds	r3, #128	; 0x80
 8008452:	b29b      	uxth	r3, r3
 8008454:	b2db      	uxtb	r3, r3
 8008456:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8008458:	89fb      	ldrh	r3, [r7, #14]
}
 800845a:	4618      	mov	r0, r3
 800845c:	3714      	adds	r7, #20
 800845e:	46bd      	mov	sp, r7
 8008460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008464:	4770      	bx	lr
 8008466:	bf00      	nop
 8008468:	080086f8 	.word	0x080086f8

0800846c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800846c:	b480      	push	{r7}
 800846e:	b087      	sub	sp, #28
 8008470:	af00      	add	r7, sp, #0
 8008472:	4603      	mov	r3, r0
 8008474:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8008476:	88fb      	ldrh	r3, [r7, #6]
 8008478:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800847c:	d201      	bcs.n	8008482 <ff_wtoupper+0x16>
 800847e:	4b3e      	ldr	r3, [pc, #248]	; (8008578 <ff_wtoupper+0x10c>)
 8008480:	e000      	b.n	8008484 <ff_wtoupper+0x18>
 8008482:	4b3e      	ldr	r3, [pc, #248]	; (800857c <ff_wtoupper+0x110>)
 8008484:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8008486:	697b      	ldr	r3, [r7, #20]
 8008488:	1c9a      	adds	r2, r3, #2
 800848a:	617a      	str	r2, [r7, #20]
 800848c:	881b      	ldrh	r3, [r3, #0]
 800848e:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8008490:	8a7b      	ldrh	r3, [r7, #18]
 8008492:	2b00      	cmp	r3, #0
 8008494:	d068      	beq.n	8008568 <ff_wtoupper+0xfc>
 8008496:	88fa      	ldrh	r2, [r7, #6]
 8008498:	8a7b      	ldrh	r3, [r7, #18]
 800849a:	429a      	cmp	r2, r3
 800849c:	d364      	bcc.n	8008568 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800849e:	697b      	ldr	r3, [r7, #20]
 80084a0:	1c9a      	adds	r2, r3, #2
 80084a2:	617a      	str	r2, [r7, #20]
 80084a4:	881b      	ldrh	r3, [r3, #0]
 80084a6:	823b      	strh	r3, [r7, #16]
 80084a8:	8a3b      	ldrh	r3, [r7, #16]
 80084aa:	0a1b      	lsrs	r3, r3, #8
 80084ac:	81fb      	strh	r3, [r7, #14]
 80084ae:	8a3b      	ldrh	r3, [r7, #16]
 80084b0:	b2db      	uxtb	r3, r3
 80084b2:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 80084b4:	88fa      	ldrh	r2, [r7, #6]
 80084b6:	8a79      	ldrh	r1, [r7, #18]
 80084b8:	8a3b      	ldrh	r3, [r7, #16]
 80084ba:	440b      	add	r3, r1
 80084bc:	429a      	cmp	r2, r3
 80084be:	da49      	bge.n	8008554 <ff_wtoupper+0xe8>
			switch (cmd) {
 80084c0:	89fb      	ldrh	r3, [r7, #14]
 80084c2:	2b08      	cmp	r3, #8
 80084c4:	d84f      	bhi.n	8008566 <ff_wtoupper+0xfa>
 80084c6:	a201      	add	r2, pc, #4	; (adr r2, 80084cc <ff_wtoupper+0x60>)
 80084c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084cc:	080084f1 	.word	0x080084f1
 80084d0:	08008503 	.word	0x08008503
 80084d4:	08008519 	.word	0x08008519
 80084d8:	08008521 	.word	0x08008521
 80084dc:	08008529 	.word	0x08008529
 80084e0:	08008531 	.word	0x08008531
 80084e4:	08008539 	.word	0x08008539
 80084e8:	08008541 	.word	0x08008541
 80084ec:	08008549 	.word	0x08008549
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 80084f0:	88fa      	ldrh	r2, [r7, #6]
 80084f2:	8a7b      	ldrh	r3, [r7, #18]
 80084f4:	1ad3      	subs	r3, r2, r3
 80084f6:	005b      	lsls	r3, r3, #1
 80084f8:	697a      	ldr	r2, [r7, #20]
 80084fa:	4413      	add	r3, r2
 80084fc:	881b      	ldrh	r3, [r3, #0]
 80084fe:	80fb      	strh	r3, [r7, #6]
 8008500:	e027      	b.n	8008552 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8008502:	88fa      	ldrh	r2, [r7, #6]
 8008504:	8a7b      	ldrh	r3, [r7, #18]
 8008506:	1ad3      	subs	r3, r2, r3
 8008508:	b29b      	uxth	r3, r3
 800850a:	f003 0301 	and.w	r3, r3, #1
 800850e:	b29b      	uxth	r3, r3
 8008510:	88fa      	ldrh	r2, [r7, #6]
 8008512:	1ad3      	subs	r3, r2, r3
 8008514:	80fb      	strh	r3, [r7, #6]
 8008516:	e01c      	b.n	8008552 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8008518:	88fb      	ldrh	r3, [r7, #6]
 800851a:	3b10      	subs	r3, #16
 800851c:	80fb      	strh	r3, [r7, #6]
 800851e:	e018      	b.n	8008552 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8008520:	88fb      	ldrh	r3, [r7, #6]
 8008522:	3b20      	subs	r3, #32
 8008524:	80fb      	strh	r3, [r7, #6]
 8008526:	e014      	b.n	8008552 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8008528:	88fb      	ldrh	r3, [r7, #6]
 800852a:	3b30      	subs	r3, #48	; 0x30
 800852c:	80fb      	strh	r3, [r7, #6]
 800852e:	e010      	b.n	8008552 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8008530:	88fb      	ldrh	r3, [r7, #6]
 8008532:	3b1a      	subs	r3, #26
 8008534:	80fb      	strh	r3, [r7, #6]
 8008536:	e00c      	b.n	8008552 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8008538:	88fb      	ldrh	r3, [r7, #6]
 800853a:	3308      	adds	r3, #8
 800853c:	80fb      	strh	r3, [r7, #6]
 800853e:	e008      	b.n	8008552 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8008540:	88fb      	ldrh	r3, [r7, #6]
 8008542:	3b50      	subs	r3, #80	; 0x50
 8008544:	80fb      	strh	r3, [r7, #6]
 8008546:	e004      	b.n	8008552 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8008548:	88fb      	ldrh	r3, [r7, #6]
 800854a:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800854e:	80fb      	strh	r3, [r7, #6]
 8008550:	bf00      	nop
			}
			break;
 8008552:	e008      	b.n	8008566 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8008554:	89fb      	ldrh	r3, [r7, #14]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d195      	bne.n	8008486 <ff_wtoupper+0x1a>
 800855a:	8a3b      	ldrh	r3, [r7, #16]
 800855c:	005b      	lsls	r3, r3, #1
 800855e:	697a      	ldr	r2, [r7, #20]
 8008560:	4413      	add	r3, r2
 8008562:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8008564:	e78f      	b.n	8008486 <ff_wtoupper+0x1a>
			break;
 8008566:	bf00      	nop
	}

	return chr;
 8008568:	88fb      	ldrh	r3, [r7, #6]
}
 800856a:	4618      	mov	r0, r3
 800856c:	371c      	adds	r7, #28
 800856e:	46bd      	mov	sp, r7
 8008570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008574:	4770      	bx	lr
 8008576:	bf00      	nop
 8008578:	080087f8 	.word	0x080087f8
 800857c:	080089ec 	.word	0x080089ec

08008580 <__libc_init_array>:
 8008580:	b570      	push	{r4, r5, r6, lr}
 8008582:	4d0d      	ldr	r5, [pc, #52]	; (80085b8 <__libc_init_array+0x38>)
 8008584:	4c0d      	ldr	r4, [pc, #52]	; (80085bc <__libc_init_array+0x3c>)
 8008586:	1b64      	subs	r4, r4, r5
 8008588:	10a4      	asrs	r4, r4, #2
 800858a:	2600      	movs	r6, #0
 800858c:	42a6      	cmp	r6, r4
 800858e:	d109      	bne.n	80085a4 <__libc_init_array+0x24>
 8008590:	4d0b      	ldr	r5, [pc, #44]	; (80085c0 <__libc_init_array+0x40>)
 8008592:	4c0c      	ldr	r4, [pc, #48]	; (80085c4 <__libc_init_array+0x44>)
 8008594:	f000 f820 	bl	80085d8 <_init>
 8008598:	1b64      	subs	r4, r4, r5
 800859a:	10a4      	asrs	r4, r4, #2
 800859c:	2600      	movs	r6, #0
 800859e:	42a6      	cmp	r6, r4
 80085a0:	d105      	bne.n	80085ae <__libc_init_array+0x2e>
 80085a2:	bd70      	pop	{r4, r5, r6, pc}
 80085a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80085a8:	4798      	blx	r3
 80085aa:	3601      	adds	r6, #1
 80085ac:	e7ee      	b.n	800858c <__libc_init_array+0xc>
 80085ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80085b2:	4798      	blx	r3
 80085b4:	3601      	adds	r6, #1
 80085b6:	e7f2      	b.n	800859e <__libc_init_array+0x1e>
 80085b8:	08008ab0 	.word	0x08008ab0
 80085bc:	08008ab0 	.word	0x08008ab0
 80085c0:	08008ab0 	.word	0x08008ab0
 80085c4:	08008ab4 	.word	0x08008ab4

080085c8 <memset>:
 80085c8:	4402      	add	r2, r0
 80085ca:	4603      	mov	r3, r0
 80085cc:	4293      	cmp	r3, r2
 80085ce:	d100      	bne.n	80085d2 <memset+0xa>
 80085d0:	4770      	bx	lr
 80085d2:	f803 1b01 	strb.w	r1, [r3], #1
 80085d6:	e7f9      	b.n	80085cc <memset+0x4>

080085d8 <_init>:
 80085d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085da:	bf00      	nop
 80085dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085de:	bc08      	pop	{r3}
 80085e0:	469e      	mov	lr, r3
 80085e2:	4770      	bx	lr

080085e4 <_fini>:
 80085e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085e6:	bf00      	nop
 80085e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085ea:	bc08      	pop	{r3}
 80085ec:	469e      	mov	lr, r3
 80085ee:	4770      	bx	lr
