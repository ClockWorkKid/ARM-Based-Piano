
STM32F746_DISCO_test_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008244  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000104  0800840c  0800840c  0001840c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008510  08008510  000201c0  2**0
                  CONTENTS
  4 .ARM          00000008  08008510  08008510  00018510  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008518  08008518  000201c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008518  08008518  00018518  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800851c  0800851c  0001851c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001c0  20000000  08008520  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c44  200001c0  080086e0  000201c0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000e04  080086e0  00020e04  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001499e  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b94  00000000  00000000  00034b8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ec8  00000000  00000000  00037728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000db0  00000000  00000000  000385f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027a45  00000000  00000000  000393a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012f04  00000000  00000000  00060de5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f07de  00000000  00000000  00073ce9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001644c7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c44  00000000  00000000  0016451c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	200001c0 	.word	0x200001c0
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080083f4 	.word	0x080083f4

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	200001c4 	.word	0x200001c4
 8000204:	080083f4 	.word	0x080083f4

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b96e 	b.w	80004fc <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9d08      	ldr	r5, [sp, #32]
 800023e:	4604      	mov	r4, r0
 8000240:	468c      	mov	ip, r1
 8000242:	2b00      	cmp	r3, #0
 8000244:	f040 8083 	bne.w	800034e <__udivmoddi4+0x116>
 8000248:	428a      	cmp	r2, r1
 800024a:	4617      	mov	r7, r2
 800024c:	d947      	bls.n	80002de <__udivmoddi4+0xa6>
 800024e:	fab2 f282 	clz	r2, r2
 8000252:	b142      	cbz	r2, 8000266 <__udivmoddi4+0x2e>
 8000254:	f1c2 0020 	rsb	r0, r2, #32
 8000258:	fa24 f000 	lsr.w	r0, r4, r0
 800025c:	4091      	lsls	r1, r2
 800025e:	4097      	lsls	r7, r2
 8000260:	ea40 0c01 	orr.w	ip, r0, r1
 8000264:	4094      	lsls	r4, r2
 8000266:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800026a:	0c23      	lsrs	r3, r4, #16
 800026c:	fbbc f6f8 	udiv	r6, ip, r8
 8000270:	fa1f fe87 	uxth.w	lr, r7
 8000274:	fb08 c116 	mls	r1, r8, r6, ip
 8000278:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027c:	fb06 f10e 	mul.w	r1, r6, lr
 8000280:	4299      	cmp	r1, r3
 8000282:	d909      	bls.n	8000298 <__udivmoddi4+0x60>
 8000284:	18fb      	adds	r3, r7, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295
 800028a:	f080 8119 	bcs.w	80004c0 <__udivmoddi4+0x288>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 8116 	bls.w	80004c0 <__udivmoddi4+0x288>
 8000294:	3e02      	subs	r6, #2
 8000296:	443b      	add	r3, r7
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002ac:	45a6      	cmp	lr, r4
 80002ae:	d909      	bls.n	80002c4 <__udivmoddi4+0x8c>
 80002b0:	193c      	adds	r4, r7, r4
 80002b2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b6:	f080 8105 	bcs.w	80004c4 <__udivmoddi4+0x28c>
 80002ba:	45a6      	cmp	lr, r4
 80002bc:	f240 8102 	bls.w	80004c4 <__udivmoddi4+0x28c>
 80002c0:	3802      	subs	r0, #2
 80002c2:	443c      	add	r4, r7
 80002c4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c8:	eba4 040e 	sub.w	r4, r4, lr
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa0>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	b902      	cbnz	r2, 80002e2 <__udivmoddi4+0xaa>
 80002e0:	deff      	udf	#255	; 0xff
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d150      	bne.n	800038c <__udivmoddi4+0x154>
 80002ea:	1bcb      	subs	r3, r1, r7
 80002ec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f0:	fa1f f887 	uxth.w	r8, r7
 80002f4:	2601      	movs	r6, #1
 80002f6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002fa:	0c21      	lsrs	r1, r4, #16
 80002fc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000300:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000304:	fb08 f30c 	mul.w	r3, r8, ip
 8000308:	428b      	cmp	r3, r1
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0xe4>
 800030c:	1879      	adds	r1, r7, r1
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0xe2>
 8000314:	428b      	cmp	r3, r1
 8000316:	f200 80e9 	bhi.w	80004ec <__udivmoddi4+0x2b4>
 800031a:	4684      	mov	ip, r0
 800031c:	1ac9      	subs	r1, r1, r3
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1110 	mls	r1, lr, r0, r1
 8000328:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x10c>
 8000334:	193c      	adds	r4, r7, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x10a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80d9 	bhi.w	80004f4 <__udivmoddi4+0x2bc>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e7bf      	b.n	80002ce <__udivmoddi4+0x96>
 800034e:	428b      	cmp	r3, r1
 8000350:	d909      	bls.n	8000366 <__udivmoddi4+0x12e>
 8000352:	2d00      	cmp	r5, #0
 8000354:	f000 80b1 	beq.w	80004ba <__udivmoddi4+0x282>
 8000358:	2600      	movs	r6, #0
 800035a:	e9c5 0100 	strd	r0, r1, [r5]
 800035e:	4630      	mov	r0, r6
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	fab3 f683 	clz	r6, r3
 800036a:	2e00      	cmp	r6, #0
 800036c:	d14a      	bne.n	8000404 <__udivmoddi4+0x1cc>
 800036e:	428b      	cmp	r3, r1
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0x140>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 80b8 	bhi.w	80004e8 <__udivmoddi4+0x2b0>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb61 0103 	sbc.w	r1, r1, r3
 800037e:	2001      	movs	r0, #1
 8000380:	468c      	mov	ip, r1
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0a8      	beq.n	80002d8 <__udivmoddi4+0xa0>
 8000386:	e9c5 4c00 	strd	r4, ip, [r5]
 800038a:	e7a5      	b.n	80002d8 <__udivmoddi4+0xa0>
 800038c:	f1c2 0320 	rsb	r3, r2, #32
 8000390:	fa20 f603 	lsr.w	r6, r0, r3
 8000394:	4097      	lsls	r7, r2
 8000396:	fa01 f002 	lsl.w	r0, r1, r2
 800039a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800039e:	40d9      	lsrs	r1, r3
 80003a0:	4330      	orrs	r0, r6
 80003a2:	0c03      	lsrs	r3, r0, #16
 80003a4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003a8:	fa1f f887 	uxth.w	r8, r7
 80003ac:	fb0e 1116 	mls	r1, lr, r6, r1
 80003b0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b4:	fb06 f108 	mul.w	r1, r6, r8
 80003b8:	4299      	cmp	r1, r3
 80003ba:	fa04 f402 	lsl.w	r4, r4, r2
 80003be:	d909      	bls.n	80003d4 <__udivmoddi4+0x19c>
 80003c0:	18fb      	adds	r3, r7, r3
 80003c2:	f106 3cff 	add.w	ip, r6, #4294967295
 80003c6:	f080 808d 	bcs.w	80004e4 <__udivmoddi4+0x2ac>
 80003ca:	4299      	cmp	r1, r3
 80003cc:	f240 808a 	bls.w	80004e4 <__udivmoddi4+0x2ac>
 80003d0:	3e02      	subs	r6, #2
 80003d2:	443b      	add	r3, r7
 80003d4:	1a5b      	subs	r3, r3, r1
 80003d6:	b281      	uxth	r1, r0
 80003d8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003dc:	fb0e 3310 	mls	r3, lr, r0, r3
 80003e0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003e4:	fb00 f308 	mul.w	r3, r0, r8
 80003e8:	428b      	cmp	r3, r1
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x1c4>
 80003ec:	1879      	adds	r1, r7, r1
 80003ee:	f100 3cff 	add.w	ip, r0, #4294967295
 80003f2:	d273      	bcs.n	80004dc <__udivmoddi4+0x2a4>
 80003f4:	428b      	cmp	r3, r1
 80003f6:	d971      	bls.n	80004dc <__udivmoddi4+0x2a4>
 80003f8:	3802      	subs	r0, #2
 80003fa:	4439      	add	r1, r7
 80003fc:	1acb      	subs	r3, r1, r3
 80003fe:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000402:	e778      	b.n	80002f6 <__udivmoddi4+0xbe>
 8000404:	f1c6 0c20 	rsb	ip, r6, #32
 8000408:	fa03 f406 	lsl.w	r4, r3, r6
 800040c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000410:	431c      	orrs	r4, r3
 8000412:	fa20 f70c 	lsr.w	r7, r0, ip
 8000416:	fa01 f306 	lsl.w	r3, r1, r6
 800041a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800041e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000422:	431f      	orrs	r7, r3
 8000424:	0c3b      	lsrs	r3, r7, #16
 8000426:	fbb1 f9fe 	udiv	r9, r1, lr
 800042a:	fa1f f884 	uxth.w	r8, r4
 800042e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000432:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000436:	fb09 fa08 	mul.w	sl, r9, r8
 800043a:	458a      	cmp	sl, r1
 800043c:	fa02 f206 	lsl.w	r2, r2, r6
 8000440:	fa00 f306 	lsl.w	r3, r0, r6
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x220>
 8000446:	1861      	adds	r1, r4, r1
 8000448:	f109 30ff 	add.w	r0, r9, #4294967295
 800044c:	d248      	bcs.n	80004e0 <__udivmoddi4+0x2a8>
 800044e:	458a      	cmp	sl, r1
 8000450:	d946      	bls.n	80004e0 <__udivmoddi4+0x2a8>
 8000452:	f1a9 0902 	sub.w	r9, r9, #2
 8000456:	4421      	add	r1, r4
 8000458:	eba1 010a 	sub.w	r1, r1, sl
 800045c:	b2bf      	uxth	r7, r7
 800045e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000462:	fb0e 1110 	mls	r1, lr, r0, r1
 8000466:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800046a:	fb00 f808 	mul.w	r8, r0, r8
 800046e:	45b8      	cmp	r8, r7
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x24a>
 8000472:	19e7      	adds	r7, r4, r7
 8000474:	f100 31ff 	add.w	r1, r0, #4294967295
 8000478:	d22e      	bcs.n	80004d8 <__udivmoddi4+0x2a0>
 800047a:	45b8      	cmp	r8, r7
 800047c:	d92c      	bls.n	80004d8 <__udivmoddi4+0x2a0>
 800047e:	3802      	subs	r0, #2
 8000480:	4427      	add	r7, r4
 8000482:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000486:	eba7 0708 	sub.w	r7, r7, r8
 800048a:	fba0 8902 	umull	r8, r9, r0, r2
 800048e:	454f      	cmp	r7, r9
 8000490:	46c6      	mov	lr, r8
 8000492:	4649      	mov	r1, r9
 8000494:	d31a      	bcc.n	80004cc <__udivmoddi4+0x294>
 8000496:	d017      	beq.n	80004c8 <__udivmoddi4+0x290>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x27a>
 800049a:	ebb3 020e 	subs.w	r2, r3, lr
 800049e:	eb67 0701 	sbc.w	r7, r7, r1
 80004a2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004a6:	40f2      	lsrs	r2, r6
 80004a8:	ea4c 0202 	orr.w	r2, ip, r2
 80004ac:	40f7      	lsrs	r7, r6
 80004ae:	e9c5 2700 	strd	r2, r7, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	462e      	mov	r6, r5
 80004bc:	4628      	mov	r0, r5
 80004be:	e70b      	b.n	80002d8 <__udivmoddi4+0xa0>
 80004c0:	4606      	mov	r6, r0
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0x60>
 80004c4:	4618      	mov	r0, r3
 80004c6:	e6fd      	b.n	80002c4 <__udivmoddi4+0x8c>
 80004c8:	4543      	cmp	r3, r8
 80004ca:	d2e5      	bcs.n	8000498 <__udivmoddi4+0x260>
 80004cc:	ebb8 0e02 	subs.w	lr, r8, r2
 80004d0:	eb69 0104 	sbc.w	r1, r9, r4
 80004d4:	3801      	subs	r0, #1
 80004d6:	e7df      	b.n	8000498 <__udivmoddi4+0x260>
 80004d8:	4608      	mov	r0, r1
 80004da:	e7d2      	b.n	8000482 <__udivmoddi4+0x24a>
 80004dc:	4660      	mov	r0, ip
 80004de:	e78d      	b.n	80003fc <__udivmoddi4+0x1c4>
 80004e0:	4681      	mov	r9, r0
 80004e2:	e7b9      	b.n	8000458 <__udivmoddi4+0x220>
 80004e4:	4666      	mov	r6, ip
 80004e6:	e775      	b.n	80003d4 <__udivmoddi4+0x19c>
 80004e8:	4630      	mov	r0, r6
 80004ea:	e74a      	b.n	8000382 <__udivmoddi4+0x14a>
 80004ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f0:	4439      	add	r1, r7
 80004f2:	e713      	b.n	800031c <__udivmoddi4+0xe4>
 80004f4:	3802      	subs	r0, #2
 80004f6:	443c      	add	r4, r7
 80004f8:	e724      	b.n	8000344 <__udivmoddi4+0x10c>
 80004fa:	bf00      	nop

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000500:	b480      	push	{r7}
 8000502:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000504:	f3bf 8f4f 	dsb	sy
}
 8000508:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800050a:	f3bf 8f6f 	isb	sy
}
 800050e:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000510:	4b0d      	ldr	r3, [pc, #52]	; (8000548 <SCB_EnableICache+0x48>)
 8000512:	2200      	movs	r2, #0
 8000514:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000518:	f3bf 8f4f 	dsb	sy
}
 800051c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800051e:	f3bf 8f6f 	isb	sy
}
 8000522:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000524:	4b08      	ldr	r3, [pc, #32]	; (8000548 <SCB_EnableICache+0x48>)
 8000526:	695b      	ldr	r3, [r3, #20]
 8000528:	4a07      	ldr	r2, [pc, #28]	; (8000548 <SCB_EnableICache+0x48>)
 800052a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800052e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000530:	f3bf 8f4f 	dsb	sy
}
 8000534:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000536:	f3bf 8f6f 	isb	sy
}
 800053a:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 800053c:	bf00      	nop
 800053e:	46bd      	mov	sp, r7
 8000540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000544:	4770      	bx	lr
 8000546:	bf00      	nop
 8000548:	e000ed00 	.word	0xe000ed00

0800054c <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 800054c:	b480      	push	{r7}
 800054e:	b085      	sub	sp, #20
 8000550:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000552:	4b1f      	ldr	r3, [pc, #124]	; (80005d0 <SCB_EnableDCache+0x84>)
 8000554:	2200      	movs	r2, #0
 8000556:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800055a:	f3bf 8f4f 	dsb	sy
}
 800055e:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000560:	4b1b      	ldr	r3, [pc, #108]	; (80005d0 <SCB_EnableDCache+0x84>)
 8000562:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000566:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	0b5b      	lsrs	r3, r3, #13
 800056c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000570:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	08db      	lsrs	r3, r3, #3
 8000576:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800057a:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	015a      	lsls	r2, r3, #5
 8000580:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000584:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000586:	68ba      	ldr	r2, [r7, #8]
 8000588:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800058a:	4911      	ldr	r1, [pc, #68]	; (80005d0 <SCB_EnableDCache+0x84>)
 800058c:	4313      	orrs	r3, r2
 800058e:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000592:	68bb      	ldr	r3, [r7, #8]
 8000594:	1e5a      	subs	r2, r3, #1
 8000596:	60ba      	str	r2, [r7, #8]
 8000598:	2b00      	cmp	r3, #0
 800059a:	d1ef      	bne.n	800057c <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 800059c:	68fb      	ldr	r3, [r7, #12]
 800059e:	1e5a      	subs	r2, r3, #1
 80005a0:	60fa      	str	r2, [r7, #12]
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d1e5      	bne.n	8000572 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 80005a6:	f3bf 8f4f 	dsb	sy
}
 80005aa:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80005ac:	4b08      	ldr	r3, [pc, #32]	; (80005d0 <SCB_EnableDCache+0x84>)
 80005ae:	695b      	ldr	r3, [r3, #20]
 80005b0:	4a07      	ldr	r2, [pc, #28]	; (80005d0 <SCB_EnableDCache+0x84>)
 80005b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80005b6:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80005b8:	f3bf 8f4f 	dsb	sy
}
 80005bc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005be:	f3bf 8f6f 	isb	sy
}
 80005c2:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 80005c4:	bf00      	nop
 80005c6:	3714      	adds	r7, #20
 80005c8:	46bd      	mov	sp, r7
 80005ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ce:	4770      	bx	lr
 80005d0:	e000ed00 	.word	0xe000ed00

080005d4 <tochar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void tochar(char str[], int num){
 80005d4:	b480      	push	{r7}
 80005d6:	b087      	sub	sp, #28
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
 80005dc:	6039      	str	r1, [r7, #0]
	int i, rem, len = 0, n;
 80005de:	2300      	movs	r3, #0
 80005e0:	613b      	str	r3, [r7, #16]

	n = num;
 80005e2:	683b      	ldr	r3, [r7, #0]
 80005e4:	60fb      	str	r3, [r7, #12]
	while(n!=0){
 80005e6:	e00a      	b.n	80005fe <tochar+0x2a>
		len++;
 80005e8:	693b      	ldr	r3, [r7, #16]
 80005ea:	3301      	adds	r3, #1
 80005ec:	613b      	str	r3, [r7, #16]
		n /= 10;
 80005ee:	68fb      	ldr	r3, [r7, #12]
 80005f0:	4a25      	ldr	r2, [pc, #148]	; (8000688 <tochar+0xb4>)
 80005f2:	fb82 1203 	smull	r1, r2, r2, r3
 80005f6:	1092      	asrs	r2, r2, #2
 80005f8:	17db      	asrs	r3, r3, #31
 80005fa:	1ad3      	subs	r3, r2, r3
 80005fc:	60fb      	str	r3, [r7, #12]
	while(n!=0){
 80005fe:	68fb      	ldr	r3, [r7, #12]
 8000600:	2b00      	cmp	r3, #0
 8000602:	d1f1      	bne.n	80005e8 <tochar+0x14>
	}
	for (i = 0; i<len; i++){
 8000604:	2300      	movs	r3, #0
 8000606:	617b      	str	r3, [r7, #20]
 8000608:	e023      	b.n	8000652 <tochar+0x7e>
		rem = num % 10;
 800060a:	683a      	ldr	r2, [r7, #0]
 800060c:	4b1e      	ldr	r3, [pc, #120]	; (8000688 <tochar+0xb4>)
 800060e:	fb83 1302 	smull	r1, r3, r3, r2
 8000612:	1099      	asrs	r1, r3, #2
 8000614:	17d3      	asrs	r3, r2, #31
 8000616:	1ac9      	subs	r1, r1, r3
 8000618:	460b      	mov	r3, r1
 800061a:	009b      	lsls	r3, r3, #2
 800061c:	440b      	add	r3, r1
 800061e:	005b      	lsls	r3, r3, #1
 8000620:	1ad3      	subs	r3, r2, r3
 8000622:	60bb      	str	r3, [r7, #8]
		num /= 10;
 8000624:	683b      	ldr	r3, [r7, #0]
 8000626:	4a18      	ldr	r2, [pc, #96]	; (8000688 <tochar+0xb4>)
 8000628:	fb82 1203 	smull	r1, r2, r2, r3
 800062c:	1092      	asrs	r2, r2, #2
 800062e:	17db      	asrs	r3, r3, #31
 8000630:	1ad3      	subs	r3, r2, r3
 8000632:	603b      	str	r3, [r7, #0]
		str[len - (i+1)] = rem + '0';
 8000634:	68bb      	ldr	r3, [r7, #8]
 8000636:	b2da      	uxtb	r2, r3
 8000638:	697b      	ldr	r3, [r7, #20]
 800063a:	3301      	adds	r3, #1
 800063c:	6939      	ldr	r1, [r7, #16]
 800063e:	1acb      	subs	r3, r1, r3
 8000640:	4619      	mov	r1, r3
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	440b      	add	r3, r1
 8000646:	3230      	adds	r2, #48	; 0x30
 8000648:	b2d2      	uxtb	r2, r2
 800064a:	701a      	strb	r2, [r3, #0]
	for (i = 0; i<len; i++){
 800064c:	697b      	ldr	r3, [r7, #20]
 800064e:	3301      	adds	r3, #1
 8000650:	617b      	str	r3, [r7, #20]
 8000652:	697a      	ldr	r2, [r7, #20]
 8000654:	693b      	ldr	r3, [r7, #16]
 8000656:	429a      	cmp	r2, r3
 8000658:	dbd7      	blt.n	800060a <tochar+0x36>
	}
	str[len] = '\r';
 800065a:	693b      	ldr	r3, [r7, #16]
 800065c:	687a      	ldr	r2, [r7, #4]
 800065e:	4413      	add	r3, r2
 8000660:	220d      	movs	r2, #13
 8000662:	701a      	strb	r2, [r3, #0]
	str[len+1] = '\n';
 8000664:	693b      	ldr	r3, [r7, #16]
 8000666:	3301      	adds	r3, #1
 8000668:	687a      	ldr	r2, [r7, #4]
 800066a:	4413      	add	r3, r2
 800066c:	220a      	movs	r2, #10
 800066e:	701a      	strb	r2, [r3, #0]
	str[len+2] = 0;
 8000670:	693b      	ldr	r3, [r7, #16]
 8000672:	3302      	adds	r3, #2
 8000674:	687a      	ldr	r2, [r7, #4]
 8000676:	4413      	add	r3, r2
 8000678:	2200      	movs	r2, #0
 800067a:	701a      	strb	r2, [r3, #0]
}
 800067c:	bf00      	nop
 800067e:	371c      	adds	r7, #28
 8000680:	46bd      	mov	sp, r7
 8000682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000686:	4770      	bx	lr
 8000688:	66666667 	.word	0x66666667

0800068c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b084      	sub	sp, #16
 8000690:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8000692:	f7ff ff35 	bl	8000500 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8000696:	f7ff ff59 	bl	800054c <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800069a:	f000 fc1b 	bl	8000ed4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800069e:	f000 f8f3 	bl	8000888 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006a2:	f000 fa39 	bl	8000b18 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80006a6:	f000 fa07 	bl	8000ab8 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 80006aa:	f000 f993 	bl	80009d4 <MX_ADC1_Init>
  MX_SDMMC1_SD_Init();
 80006ae:	f000 f9e3 	bl	8000a78 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 80006b2:	f004 fd5b 	bl	800516c <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  // initialize handler
  res = BSP_SD_Init();
 80006b6:	f004 fd73 	bl	80051a0 <BSP_SD_Init>
 80006ba:	4603      	mov	r3, r0
 80006bc:	461a      	mov	r2, r3
 80006be:	4b63      	ldr	r3, [pc, #396]	; (800084c <main+0x1c0>)
 80006c0:	701a      	strb	r2, [r3, #0]
  if (res != FR_OK)	Error_Handler();
 80006c2:	4b62      	ldr	r3, [pc, #392]	; (800084c <main+0x1c0>)
 80006c4:	781b      	ldrb	r3, [r3, #0]
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <main+0x42>
 80006ca:	f000 fa61 	bl	8000b90 <Error_Handler>

  // mount disk
  res = f_mount(&SDFatFs, "", 1);
 80006ce:	2201      	movs	r2, #1
 80006d0:	495f      	ldr	r1, [pc, #380]	; (8000850 <main+0x1c4>)
 80006d2:	4860      	ldr	r0, [pc, #384]	; (8000854 <main+0x1c8>)
 80006d4:	f006 fc06 	bl	8006ee4 <f_mount>
 80006d8:	4603      	mov	r3, r0
 80006da:	461a      	mov	r2, r3
 80006dc:	4b5b      	ldr	r3, [pc, #364]	; (800084c <main+0x1c0>)
 80006de:	701a      	strb	r2, [r3, #0]
  if (res != FR_OK)	Error_Handler();
 80006e0:	4b5a      	ldr	r3, [pc, #360]	; (800084c <main+0x1c0>)
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <main+0x60>
 80006e8:	f000 fa52 	bl	8000b90 <Error_Handler>

  // open file in read-write mode
  res = f_open(&myFile, "file.txt", FA_OPEN_ALWAYS|FA_WRITE|FA_READ);
 80006ec:	2213      	movs	r2, #19
 80006ee:	495a      	ldr	r1, [pc, #360]	; (8000858 <main+0x1cc>)
 80006f0:	485a      	ldr	r0, [pc, #360]	; (800085c <main+0x1d0>)
 80006f2:	f006 fc3d 	bl	8006f70 <f_open>
 80006f6:	4603      	mov	r3, r0
 80006f8:	461a      	mov	r2, r3
 80006fa:	4b54      	ldr	r3, [pc, #336]	; (800084c <main+0x1c0>)
 80006fc:	701a      	strb	r2, [r3, #0]
  if (res != FR_OK)	Error_Handler();
 80006fe:	4b53      	ldr	r3, [pc, #332]	; (800084c <main+0x1c0>)
 8000700:	781b      	ldrb	r3, [r3, #0]
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <main+0x7e>
 8000706:	f000 fa43 	bl	8000b90 <Error_Handler>

  // find file size
  res = f_lseek(&myFile, f_size(&myFile));
 800070a:	4b54      	ldr	r3, [pc, #336]	; (800085c <main+0x1d0>)
 800070c:	68db      	ldr	r3, [r3, #12]
 800070e:	4619      	mov	r1, r3
 8000710:	4852      	ldr	r0, [pc, #328]	; (800085c <main+0x1d0>)
 8000712:	f007 f947 	bl	80079a4 <f_lseek>
 8000716:	4603      	mov	r3, r0
 8000718:	461a      	mov	r2, r3
 800071a:	4b4c      	ldr	r3, [pc, #304]	; (800084c <main+0x1c0>)
 800071c:	701a      	strb	r2, [r3, #0]
  if (res != FR_OK)	Error_Handler();
 800071e:	4b4b      	ldr	r3, [pc, #300]	; (800084c <main+0x1c0>)
 8000720:	781b      	ldrb	r3, [r3, #0]
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <main+0x9e>
 8000726:	f000 fa33 	bl	8000b90 <Error_Handler>

  // print data to file
  f_printf(&myFile, "%s", buff_w);
 800072a:	4a4d      	ldr	r2, [pc, #308]	; (8000860 <main+0x1d4>)
 800072c:	494d      	ldr	r1, [pc, #308]	; (8000864 <main+0x1d8>)
 800072e:	484b      	ldr	r0, [pc, #300]	; (800085c <main+0x1d0>)
 8000730:	f007 fbb8 	bl	8007ea4 <f_printf>

  // close file
  f_close(&myFile);
 8000734:	4849      	ldr	r0, [pc, #292]	; (800085c <main+0x1d0>)
 8000736:	f007 f90b 	bl	8007950 <f_close>

  // open file in read only mode
  res = f_open(&myFile, "file.txt", FA_READ);
 800073a:	2201      	movs	r2, #1
 800073c:	4946      	ldr	r1, [pc, #280]	; (8000858 <main+0x1cc>)
 800073e:	4847      	ldr	r0, [pc, #284]	; (800085c <main+0x1d0>)
 8000740:	f006 fc16 	bl	8006f70 <f_open>
 8000744:	4603      	mov	r3, r0
 8000746:	461a      	mov	r2, r3
 8000748:	4b40      	ldr	r3, [pc, #256]	; (800084c <main+0x1c0>)
 800074a:	701a      	strb	r2, [r3, #0]
  if (res != FR_OK)	Error_Handler();
 800074c:	4b3f      	ldr	r3, [pc, #252]	; (800084c <main+0x1c0>)
 800074e:	781b      	ldrb	r3, [r3, #0]
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <main+0xcc>
 8000754:	f000 fa1c 	bl	8000b90 <Error_Handler>

  // read from file
  res = f_read(&myFile, buff_r, 30, &bytesRead);
 8000758:	4b43      	ldr	r3, [pc, #268]	; (8000868 <main+0x1dc>)
 800075a:	221e      	movs	r2, #30
 800075c:	4943      	ldr	r1, [pc, #268]	; (800086c <main+0x1e0>)
 800075e:	483f      	ldr	r0, [pc, #252]	; (800085c <main+0x1d0>)
 8000760:	f006 fdc4 	bl	80072ec <f_read>
 8000764:	4603      	mov	r3, r0
 8000766:	461a      	mov	r2, r3
 8000768:	4b38      	ldr	r3, [pc, #224]	; (800084c <main+0x1c0>)
 800076a:	701a      	strb	r2, [r3, #0]
  if (res != FR_OK)	Error_Handler();
 800076c:	4b37      	ldr	r3, [pc, #220]	; (800084c <main+0x1c0>)
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <main+0xec>
 8000774:	f000 fa0c 	bl	8000b90 <Error_Handler>

  // close file
  f_close(&myFile);
 8000778:	4838      	ldr	r0, [pc, #224]	; (800085c <main+0x1d0>)
 800077a:	f007 f8e9 	bl	8007950 <f_close>

  // unmount disk
  res = f_mount(0, "", 1);
 800077e:	2201      	movs	r2, #1
 8000780:	4933      	ldr	r1, [pc, #204]	; (8000850 <main+0x1c4>)
 8000782:	2000      	movs	r0, #0
 8000784:	f006 fbae 	bl	8006ee4 <f_mount>
 8000788:	4603      	mov	r3, r0
 800078a:	461a      	mov	r2, r3
 800078c:	4b2f      	ldr	r3, [pc, #188]	; (800084c <main+0x1c0>)
 800078e:	701a      	strb	r2, [r3, #0]
  if (res != FR_OK)	Error_Handler();
 8000790:	4b2e      	ldr	r3, [pc, #184]	; (800084c <main+0x1c0>)
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <main+0x110>
 8000798:	f000 f9fa 	bl	8000b90 <Error_Handler>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  float y = 0;
 800079c:	f04f 0300 	mov.w	r3, #0
 80007a0:	60fb      	str	r3, [r7, #12]

	  for (int i = 0; i<N; i++){
 80007a2:	2300      	movs	r3, #0
 80007a4:	60bb      	str	r3, [r7, #8]
 80007a6:	e01a      	b.n	80007de <main+0x152>
		  y = y + x[i]*h[N-i];
 80007a8:	4a31      	ldr	r2, [pc, #196]	; (8000870 <main+0x1e4>)
 80007aa:	68bb      	ldr	r3, [r7, #8]
 80007ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007b0:	ee07 3a90 	vmov	s15, r3
 80007b4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80007b8:	68bb      	ldr	r3, [r7, #8]
 80007ba:	f1c3 0365 	rsb	r3, r3, #101	; 0x65
 80007be:	4a2d      	ldr	r2, [pc, #180]	; (8000874 <main+0x1e8>)
 80007c0:	009b      	lsls	r3, r3, #2
 80007c2:	4413      	add	r3, r2
 80007c4:	edd3 7a00 	vldr	s15, [r3]
 80007c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80007cc:	ed97 7a03 	vldr	s14, [r7, #12]
 80007d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80007d4:	edc7 7a03 	vstr	s15, [r7, #12]
	  for (int i = 0; i<N; i++){
 80007d8:	68bb      	ldr	r3, [r7, #8]
 80007da:	3301      	adds	r3, #1
 80007dc:	60bb      	str	r3, [r7, #8]
 80007de:	68bb      	ldr	r3, [r7, #8]
 80007e0:	2b64      	cmp	r3, #100	; 0x64
 80007e2:	dde1      	ble.n	80007a8 <main+0x11c>
	  }

	  for (int i = 0; i<N-1; i++){
 80007e4:	2300      	movs	r3, #0
 80007e6:	607b      	str	r3, [r7, #4]
 80007e8:	e00b      	b.n	8000802 <main+0x176>
		  x[i] = x[i+1];
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	3301      	adds	r3, #1
 80007ee:	4a20      	ldr	r2, [pc, #128]	; (8000870 <main+0x1e4>)
 80007f0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80007f4:	491e      	ldr	r1, [pc, #120]	; (8000870 <main+0x1e4>)
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	  for (int i = 0; i<N-1; i++){
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	3301      	adds	r3, #1
 8000800:	607b      	str	r3, [r7, #4]
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	2b63      	cmp	r3, #99	; 0x63
 8000806:	ddf0      	ble.n	80007ea <main+0x15e>
	  }

	  HAL_ADC_Start(&hadc1);
 8000808:	481b      	ldr	r0, [pc, #108]	; (8000878 <main+0x1ec>)
 800080a:	f000 fc37 	bl	800107c <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 1000);
 800080e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000812:	4819      	ldr	r0, [pc, #100]	; (8000878 <main+0x1ec>)
 8000814:	f000 fd00 	bl	8001218 <HAL_ADC_PollForConversion>
	  adc_value = HAL_ADC_GetValue(&hadc1);
 8000818:	4817      	ldr	r0, [pc, #92]	; (8000878 <main+0x1ec>)
 800081a:	f000 fd88 	bl	800132e <HAL_ADC_GetValue>
 800081e:	4603      	mov	r3, r0
 8000820:	461a      	mov	r2, r3
 8000822:	4b16      	ldr	r3, [pc, #88]	; (800087c <main+0x1f0>)
 8000824:	601a      	str	r2, [r3, #0]

	  x[N-1] = adc_value;
 8000826:	4b15      	ldr	r3, [pc, #84]	; (800087c <main+0x1f0>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	4a11      	ldr	r2, [pc, #68]	; (8000870 <main+0x1e4>)
 800082c:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190

	  tochar(data, adc_value);
 8000830:	4b12      	ldr	r3, [pc, #72]	; (800087c <main+0x1f0>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	4619      	mov	r1, r3
 8000836:	4812      	ldr	r0, [pc, #72]	; (8000880 <main+0x1f4>)
 8000838:	f7ff fecc 	bl	80005d4 <tochar>
	  HAL_UART_Transmit(&huart1, data, data_len, 100);
 800083c:	2364      	movs	r3, #100	; 0x64
 800083e:	2208      	movs	r2, #8
 8000840:	490f      	ldr	r1, [pc, #60]	; (8000880 <main+0x1f4>)
 8000842:	4810      	ldr	r0, [pc, #64]	; (8000884 <main+0x1f8>)
 8000844:	f003 fb16 	bl	8003e74 <HAL_UART_Transmit>
  {
 8000848:	e7a8      	b.n	800079c <main+0x110>
 800084a:	bf00      	nop
 800084c:	20000994 	.word	0x20000994
 8000850:	0800840c 	.word	0x0800840c
 8000854:	2000075c 	.word	0x2000075c
 8000858:	08008410 	.word	0x08008410
 800085c:	200003b0 	.word	0x200003b0
 8000860:	20000194 	.word	0x20000194
 8000864:	0800841c 	.word	0x0800841c
 8000868:	200005e4 	.word	0x200005e4
 800086c:	2000066c 	.word	0x2000066c
 8000870:	2000021c 	.word	0x2000021c
 8000874:	20000000 	.word	0x20000000
 8000878:	20000690 	.word	0x20000690
 800087c:	2000068c 	.word	0x2000068c
 8000880:	2000098c 	.word	0x2000098c
 8000884:	200006d8 	.word	0x200006d8

08000888 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b0b4      	sub	sp, #208	; 0xd0
 800088c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800088e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000892:	2230      	movs	r2, #48	; 0x30
 8000894:	2100      	movs	r1, #0
 8000896:	4618      	mov	r0, r3
 8000898:	f007 fda4 	bl	80083e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800089c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80008a0:	2200      	movs	r2, #0
 80008a2:	601a      	str	r2, [r3, #0]
 80008a4:	605a      	str	r2, [r3, #4]
 80008a6:	609a      	str	r2, [r3, #8]
 80008a8:	60da      	str	r2, [r3, #12]
 80008aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80008ac:	f107 0308 	add.w	r3, r7, #8
 80008b0:	2284      	movs	r2, #132	; 0x84
 80008b2:	2100      	movs	r1, #0
 80008b4:	4618      	mov	r0, r3
 80008b6:	f007 fd95 	bl	80083e4 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ba:	4b43      	ldr	r3, [pc, #268]	; (80009c8 <SystemClock_Config+0x140>)
 80008bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008be:	4a42      	ldr	r2, [pc, #264]	; (80009c8 <SystemClock_Config+0x140>)
 80008c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008c4:	6413      	str	r3, [r2, #64]	; 0x40
 80008c6:	4b40      	ldr	r3, [pc, #256]	; (80009c8 <SystemClock_Config+0x140>)
 80008c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ce:	607b      	str	r3, [r7, #4]
 80008d0:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008d2:	4b3e      	ldr	r3, [pc, #248]	; (80009cc <SystemClock_Config+0x144>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	4a3d      	ldr	r2, [pc, #244]	; (80009cc <SystemClock_Config+0x144>)
 80008d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80008dc:	6013      	str	r3, [r2, #0]
 80008de:	4b3b      	ldr	r3, [pc, #236]	; (80009cc <SystemClock_Config+0x144>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008e6:	603b      	str	r3, [r7, #0]
 80008e8:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008ea:	2302      	movs	r3, #2
 80008ec:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008f0:	2301      	movs	r3, #1
 80008f2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008f6:	2310      	movs	r3, #16
 80008f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008fc:	2302      	movs	r3, #2
 80008fe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000902:	2300      	movs	r3, #0
 8000904:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000908:	2308      	movs	r3, #8
 800090a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 216;
 800090e:	23d8      	movs	r3, #216	; 0xd8
 8000910:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000914:	2302      	movs	r3, #2
 8000916:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 800091a:	2309      	movs	r3, #9
 800091c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000920:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000924:	4618      	mov	r0, r3
 8000926:	f001 fa61 	bl	8001dec <HAL_RCC_OscConfig>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000930:	f000 f92e 	bl	8000b90 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000934:	f001 fa0a 	bl	8001d4c <HAL_PWREx_EnableOverDrive>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <SystemClock_Config+0xba>
  {
    Error_Handler();
 800093e:	f000 f927 	bl	8000b90 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000942:	230f      	movs	r3, #15
 8000944:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000948:	2302      	movs	r3, #2
 800094a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800094e:	2300      	movs	r3, #0
 8000950:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000954:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000958:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800095c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000960:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000964:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000968:	2107      	movs	r1, #7
 800096a:	4618      	mov	r0, r3
 800096c:	f001 fce2 	bl	8002334 <HAL_RCC_ClockConfig>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8000976:	f000 f90b 	bl	8000b90 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_SDMMC1
 800097a:	4b15      	ldr	r3, [pc, #84]	; (80009d0 <SystemClock_Config+0x148>)
 800097c:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 800097e:	2332      	movs	r3, #50	; 0x32
 8000980:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8000982:	2305      	movs	r3, #5
 8000984:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8000986:	2302      	movs	r3, #2
 8000988:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 800098a:	2300      	movs	r3, #0
 800098c:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 800098e:	2301      	movs	r3, #1
 8000990:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000992:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000996:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000998:	2300      	movs	r3, #0
 800099a:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 800099c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80009a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 80009a4:	2300      	movs	r3, #0
 80009a6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009aa:	f107 0308 	add.w	r3, r7, #8
 80009ae:	4618      	mov	r0, r3
 80009b0:	f001 fe96 	bl	80026e0 <HAL_RCCEx_PeriphCLKConfig>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <SystemClock_Config+0x136>
  {
    Error_Handler();
 80009ba:	f000 f8e9 	bl	8000b90 <Error_Handler>
  }
}
 80009be:	bf00      	nop
 80009c0:	37d0      	adds	r7, #208	; 0xd0
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	40023800 	.word	0x40023800
 80009cc:	40007000 	.word	0x40007000
 80009d0:	00a00040 	.word	0x00a00040

080009d4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b084      	sub	sp, #16
 80009d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80009da:	463b      	mov	r3, r7
 80009dc:	2200      	movs	r2, #0
 80009de:	601a      	str	r2, [r3, #0]
 80009e0:	605a      	str	r2, [r3, #4]
 80009e2:	609a      	str	r2, [r3, #8]
 80009e4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80009e6:	4b21      	ldr	r3, [pc, #132]	; (8000a6c <MX_ADC1_Init+0x98>)
 80009e8:	4a21      	ldr	r2, [pc, #132]	; (8000a70 <MX_ADC1_Init+0x9c>)
 80009ea:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80009ec:	4b1f      	ldr	r3, [pc, #124]	; (8000a6c <MX_ADC1_Init+0x98>)
 80009ee:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80009f2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80009f4:	4b1d      	ldr	r3, [pc, #116]	; (8000a6c <MX_ADC1_Init+0x98>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80009fa:	4b1c      	ldr	r3, [pc, #112]	; (8000a6c <MX_ADC1_Init+0x98>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000a00:	4b1a      	ldr	r3, [pc, #104]	; (8000a6c <MX_ADC1_Init+0x98>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a06:	4b19      	ldr	r3, [pc, #100]	; (8000a6c <MX_ADC1_Init+0x98>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a0e:	4b17      	ldr	r3, [pc, #92]	; (8000a6c <MX_ADC1_Init+0x98>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a14:	4b15      	ldr	r3, [pc, #84]	; (8000a6c <MX_ADC1_Init+0x98>)
 8000a16:	4a17      	ldr	r2, [pc, #92]	; (8000a74 <MX_ADC1_Init+0xa0>)
 8000a18:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a1a:	4b14      	ldr	r3, [pc, #80]	; (8000a6c <MX_ADC1_Init+0x98>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000a20:	4b12      	ldr	r3, [pc, #72]	; (8000a6c <MX_ADC1_Init+0x98>)
 8000a22:	2201      	movs	r2, #1
 8000a24:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000a26:	4b11      	ldr	r3, [pc, #68]	; (8000a6c <MX_ADC1_Init+0x98>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a2e:	4b0f      	ldr	r3, [pc, #60]	; (8000a6c <MX_ADC1_Init+0x98>)
 8000a30:	2201      	movs	r2, #1
 8000a32:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a34:	480d      	ldr	r0, [pc, #52]	; (8000a6c <MX_ADC1_Init+0x98>)
 8000a36:	f000 fadd 	bl	8000ff4 <HAL_ADC_Init>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000a40:	f000 f8a6 	bl	8000b90 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000a44:	2300      	movs	r3, #0
 8000a46:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a48:	2301      	movs	r3, #1
 8000a4a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a50:	463b      	mov	r3, r7
 8000a52:	4619      	mov	r1, r3
 8000a54:	4805      	ldr	r0, [pc, #20]	; (8000a6c <MX_ADC1_Init+0x98>)
 8000a56:	f000 fc77 	bl	8001348 <HAL_ADC_ConfigChannel>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000a60:	f000 f896 	bl	8000b90 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a64:	bf00      	nop
 8000a66:	3710      	adds	r7, #16
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	20000690 	.word	0x20000690
 8000a70:	40012000 	.word	0x40012000
 8000a74:	0f000001 	.word	0x0f000001

08000a78 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000a7c:	4b0c      	ldr	r3, [pc, #48]	; (8000ab0 <MX_SDMMC1_SD_Init+0x38>)
 8000a7e:	4a0d      	ldr	r2, [pc, #52]	; (8000ab4 <MX_SDMMC1_SD_Init+0x3c>)
 8000a80:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000a82:	4b0b      	ldr	r3, [pc, #44]	; (8000ab0 <MX_SDMMC1_SD_Init+0x38>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8000a88:	4b09      	ldr	r3, [pc, #36]	; (8000ab0 <MX_SDMMC1_SD_Init+0x38>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000a8e:	4b08      	ldr	r3, [pc, #32]	; (8000ab0 <MX_SDMMC1_SD_Init+0x38>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8000a94:	4b06      	ldr	r3, [pc, #24]	; (8000ab0 <MX_SDMMC1_SD_Init+0x38>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000a9a:	4b05      	ldr	r3, [pc, #20]	; (8000ab0 <MX_SDMMC1_SD_Init+0x38>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8000aa0:	4b03      	ldr	r3, [pc, #12]	; (8000ab0 <MX_SDMMC1_SD_Init+0x38>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000aa6:	bf00      	nop
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aae:	4770      	bx	lr
 8000ab0:	200005e8 	.word	0x200005e8
 8000ab4:	40012c00 	.word	0x40012c00

08000ab8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000abc:	4b14      	ldr	r3, [pc, #80]	; (8000b10 <MX_USART1_UART_Init+0x58>)
 8000abe:	4a15      	ldr	r2, [pc, #84]	; (8000b14 <MX_USART1_UART_Init+0x5c>)
 8000ac0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000ac2:	4b13      	ldr	r3, [pc, #76]	; (8000b10 <MX_USART1_UART_Init+0x58>)
 8000ac4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000ac8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000aca:	4b11      	ldr	r3, [pc, #68]	; (8000b10 <MX_USART1_UART_Init+0x58>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ad0:	4b0f      	ldr	r3, [pc, #60]	; (8000b10 <MX_USART1_UART_Init+0x58>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ad6:	4b0e      	ldr	r3, [pc, #56]	; (8000b10 <MX_USART1_UART_Init+0x58>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000adc:	4b0c      	ldr	r3, [pc, #48]	; (8000b10 <MX_USART1_UART_Init+0x58>)
 8000ade:	220c      	movs	r2, #12
 8000ae0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ae2:	4b0b      	ldr	r3, [pc, #44]	; (8000b10 <MX_USART1_UART_Init+0x58>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ae8:	4b09      	ldr	r3, [pc, #36]	; (8000b10 <MX_USART1_UART_Init+0x58>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000aee:	4b08      	ldr	r3, [pc, #32]	; (8000b10 <MX_USART1_UART_Init+0x58>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000af4:	4b06      	ldr	r3, [pc, #24]	; (8000b10 <MX_USART1_UART_Init+0x58>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000afa:	4805      	ldr	r0, [pc, #20]	; (8000b10 <MX_USART1_UART_Init+0x58>)
 8000afc:	f003 f96c 	bl	8003dd8 <HAL_UART_Init>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000b06:	f000 f843 	bl	8000b90 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b0a:	bf00      	nop
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	200006d8 	.word	0x200006d8
 8000b14:	40011000 	.word	0x40011000

08000b18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b085      	sub	sp, #20
 8000b1c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b1e:	4b1b      	ldr	r3, [pc, #108]	; (8000b8c <MX_GPIO_Init+0x74>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b22:	4a1a      	ldr	r2, [pc, #104]	; (8000b8c <MX_GPIO_Init+0x74>)
 8000b24:	f043 0304 	orr.w	r3, r3, #4
 8000b28:	6313      	str	r3, [r2, #48]	; 0x30
 8000b2a:	4b18      	ldr	r3, [pc, #96]	; (8000b8c <MX_GPIO_Init+0x74>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2e:	f003 0304 	and.w	r3, r3, #4
 8000b32:	60fb      	str	r3, [r7, #12]
 8000b34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b36:	4b15      	ldr	r3, [pc, #84]	; (8000b8c <MX_GPIO_Init+0x74>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3a:	4a14      	ldr	r2, [pc, #80]	; (8000b8c <MX_GPIO_Init+0x74>)
 8000b3c:	f043 0301 	orr.w	r3, r3, #1
 8000b40:	6313      	str	r3, [r2, #48]	; 0x30
 8000b42:	4b12      	ldr	r3, [pc, #72]	; (8000b8c <MX_GPIO_Init+0x74>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b46:	f003 0301 	and.w	r3, r3, #1
 8000b4a:	60bb      	str	r3, [r7, #8]
 8000b4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b4e:	4b0f      	ldr	r3, [pc, #60]	; (8000b8c <MX_GPIO_Init+0x74>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b52:	4a0e      	ldr	r2, [pc, #56]	; (8000b8c <MX_GPIO_Init+0x74>)
 8000b54:	f043 0302 	orr.w	r3, r3, #2
 8000b58:	6313      	str	r3, [r2, #48]	; 0x30
 8000b5a:	4b0c      	ldr	r3, [pc, #48]	; (8000b8c <MX_GPIO_Init+0x74>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5e:	f003 0302 	and.w	r3, r3, #2
 8000b62:	607b      	str	r3, [r7, #4]
 8000b64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b66:	4b09      	ldr	r3, [pc, #36]	; (8000b8c <MX_GPIO_Init+0x74>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6a:	4a08      	ldr	r2, [pc, #32]	; (8000b8c <MX_GPIO_Init+0x74>)
 8000b6c:	f043 0308 	orr.w	r3, r3, #8
 8000b70:	6313      	str	r3, [r2, #48]	; 0x30
 8000b72:	4b06      	ldr	r3, [pc, #24]	; (8000b8c <MX_GPIO_Init+0x74>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b76:	f003 0308 	and.w	r3, r3, #8
 8000b7a:	603b      	str	r3, [r7, #0]
 8000b7c:	683b      	ldr	r3, [r7, #0]

}
 8000b7e:	bf00      	nop
 8000b80:	3714      	adds	r7, #20
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop
 8000b8c:	40023800 	.word	0x40023800

08000b90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000b94:	b672      	cpsid	i
}
 8000b96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b98:	e7fe      	b.n	8000b98 <Error_Handler+0x8>
	...

08000b9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000ba2:	4b12      	ldr	r3, [pc, #72]	; (8000bec <HAL_MspInit+0x50>)
 8000ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba6:	4a11      	ldr	r2, [pc, #68]	; (8000bec <HAL_MspInit+0x50>)
 8000ba8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bac:	6413      	str	r3, [r2, #64]	; 0x40
 8000bae:	4b0f      	ldr	r3, [pc, #60]	; (8000bec <HAL_MspInit+0x50>)
 8000bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bb6:	607b      	str	r3, [r7, #4]
 8000bb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bba:	4b0c      	ldr	r3, [pc, #48]	; (8000bec <HAL_MspInit+0x50>)
 8000bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bbe:	4a0b      	ldr	r2, [pc, #44]	; (8000bec <HAL_MspInit+0x50>)
 8000bc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bc4:	6453      	str	r3, [r2, #68]	; 0x44
 8000bc6:	4b09      	ldr	r3, [pc, #36]	; (8000bec <HAL_MspInit+0x50>)
 8000bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bce:	603b      	str	r3, [r7, #0]
 8000bd0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	2100      	movs	r1, #0
 8000bd6:	2005      	movs	r0, #5
 8000bd8:	f000 fed5 	bl	8001986 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8000bdc:	2005      	movs	r0, #5
 8000bde:	f000 feee 	bl	80019be <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000be2:	bf00      	nop
 8000be4:	3708      	adds	r7, #8
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	40023800 	.word	0x40023800

08000bf0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b08a      	sub	sp, #40	; 0x28
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf8:	f107 0314 	add.w	r3, r7, #20
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	601a      	str	r2, [r3, #0]
 8000c00:	605a      	str	r2, [r3, #4]
 8000c02:	609a      	str	r2, [r3, #8]
 8000c04:	60da      	str	r2, [r3, #12]
 8000c06:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a15      	ldr	r2, [pc, #84]	; (8000c64 <HAL_ADC_MspInit+0x74>)
 8000c0e:	4293      	cmp	r3, r2
 8000c10:	d123      	bne.n	8000c5a <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c12:	4b15      	ldr	r3, [pc, #84]	; (8000c68 <HAL_ADC_MspInit+0x78>)
 8000c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c16:	4a14      	ldr	r2, [pc, #80]	; (8000c68 <HAL_ADC_MspInit+0x78>)
 8000c18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c1c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c1e:	4b12      	ldr	r3, [pc, #72]	; (8000c68 <HAL_ADC_MspInit+0x78>)
 8000c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c26:	613b      	str	r3, [r7, #16]
 8000c28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c2a:	4b0f      	ldr	r3, [pc, #60]	; (8000c68 <HAL_ADC_MspInit+0x78>)
 8000c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2e:	4a0e      	ldr	r2, [pc, #56]	; (8000c68 <HAL_ADC_MspInit+0x78>)
 8000c30:	f043 0301 	orr.w	r3, r3, #1
 8000c34:	6313      	str	r3, [r2, #48]	; 0x30
 8000c36:	4b0c      	ldr	r3, [pc, #48]	; (8000c68 <HAL_ADC_MspInit+0x78>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3a:	f003 0301 	and.w	r3, r3, #1
 8000c3e:	60fb      	str	r3, [r7, #12]
 8000c40:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c42:	2301      	movs	r3, #1
 8000c44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c46:	2303      	movs	r3, #3
 8000c48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c4e:	f107 0314 	add.w	r3, r7, #20
 8000c52:	4619      	mov	r1, r3
 8000c54:	4805      	ldr	r0, [pc, #20]	; (8000c6c <HAL_ADC_MspInit+0x7c>)
 8000c56:	f000 fecd 	bl	80019f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000c5a:	bf00      	nop
 8000c5c:	3728      	adds	r7, #40	; 0x28
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	40012000 	.word	0x40012000
 8000c68:	40023800 	.word	0x40023800
 8000c6c:	40020000 	.word	0x40020000

08000c70 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b08a      	sub	sp, #40	; 0x28
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c78:	f107 0314 	add.w	r3, r7, #20
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	601a      	str	r2, [r3, #0]
 8000c80:	605a      	str	r2, [r3, #4]
 8000c82:	609a      	str	r2, [r3, #8]
 8000c84:	60da      	str	r2, [r3, #12]
 8000c86:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4a25      	ldr	r2, [pc, #148]	; (8000d24 <HAL_SD_MspInit+0xb4>)
 8000c8e:	4293      	cmp	r3, r2
 8000c90:	d144      	bne.n	8000d1c <HAL_SD_MspInit+0xac>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8000c92:	4b25      	ldr	r3, [pc, #148]	; (8000d28 <HAL_SD_MspInit+0xb8>)
 8000c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c96:	4a24      	ldr	r2, [pc, #144]	; (8000d28 <HAL_SD_MspInit+0xb8>)
 8000c98:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000c9c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c9e:	4b22      	ldr	r3, [pc, #136]	; (8000d28 <HAL_SD_MspInit+0xb8>)
 8000ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ca2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000ca6:	613b      	str	r3, [r7, #16]
 8000ca8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000caa:	4b1f      	ldr	r3, [pc, #124]	; (8000d28 <HAL_SD_MspInit+0xb8>)
 8000cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cae:	4a1e      	ldr	r2, [pc, #120]	; (8000d28 <HAL_SD_MspInit+0xb8>)
 8000cb0:	f043 0304 	orr.w	r3, r3, #4
 8000cb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cb6:	4b1c      	ldr	r3, [pc, #112]	; (8000d28 <HAL_SD_MspInit+0xb8>)
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cba:	f003 0304 	and.w	r3, r3, #4
 8000cbe:	60fb      	str	r3, [r7, #12]
 8000cc0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cc2:	4b19      	ldr	r3, [pc, #100]	; (8000d28 <HAL_SD_MspInit+0xb8>)
 8000cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc6:	4a18      	ldr	r2, [pc, #96]	; (8000d28 <HAL_SD_MspInit+0xb8>)
 8000cc8:	f043 0308 	orr.w	r3, r3, #8
 8000ccc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cce:	4b16      	ldr	r3, [pc, #88]	; (8000d28 <HAL_SD_MspInit+0xb8>)
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd2:	f003 0308 	and.w	r3, r3, #8
 8000cd6:	60bb      	str	r3, [r7, #8]
 8000cd8:	68bb      	ldr	r3, [r7, #8]
    /**SDMMC1 GPIO Configuration
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_8;
 8000cda:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 8000cde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce0:	2302      	movs	r3, #2
 8000ce2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ce8:	2303      	movs	r3, #3
 8000cea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000cec:	230c      	movs	r3, #12
 8000cee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cf0:	f107 0314 	add.w	r3, r7, #20
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	480d      	ldr	r0, [pc, #52]	; (8000d2c <HAL_SD_MspInit+0xbc>)
 8000cf8:	f000 fe7c 	bl	80019f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000cfc:	2304      	movs	r3, #4
 8000cfe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d00:	2302      	movs	r3, #2
 8000d02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d04:	2300      	movs	r3, #0
 8000d06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d08:	2303      	movs	r3, #3
 8000d0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000d0c:	230c      	movs	r3, #12
 8000d0e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d10:	f107 0314 	add.w	r3, r7, #20
 8000d14:	4619      	mov	r1, r3
 8000d16:	4806      	ldr	r0, [pc, #24]	; (8000d30 <HAL_SD_MspInit+0xc0>)
 8000d18:	f000 fe6c 	bl	80019f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8000d1c:	bf00      	nop
 8000d1e:	3728      	adds	r7, #40	; 0x28
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	40012c00 	.word	0x40012c00
 8000d28:	40023800 	.word	0x40023800
 8000d2c:	40020800 	.word	0x40020800
 8000d30:	40020c00 	.word	0x40020c00

08000d34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b08a      	sub	sp, #40	; 0x28
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d3c:	f107 0314 	add.w	r3, r7, #20
 8000d40:	2200      	movs	r2, #0
 8000d42:	601a      	str	r2, [r3, #0]
 8000d44:	605a      	str	r2, [r3, #4]
 8000d46:	609a      	str	r2, [r3, #8]
 8000d48:	60da      	str	r2, [r3, #12]
 8000d4a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4a25      	ldr	r2, [pc, #148]	; (8000de8 <HAL_UART_MspInit+0xb4>)
 8000d52:	4293      	cmp	r3, r2
 8000d54:	d144      	bne.n	8000de0 <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d56:	4b25      	ldr	r3, [pc, #148]	; (8000dec <HAL_UART_MspInit+0xb8>)
 8000d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d5a:	4a24      	ldr	r2, [pc, #144]	; (8000dec <HAL_UART_MspInit+0xb8>)
 8000d5c:	f043 0310 	orr.w	r3, r3, #16
 8000d60:	6453      	str	r3, [r2, #68]	; 0x44
 8000d62:	4b22      	ldr	r3, [pc, #136]	; (8000dec <HAL_UART_MspInit+0xb8>)
 8000d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d66:	f003 0310 	and.w	r3, r3, #16
 8000d6a:	613b      	str	r3, [r7, #16]
 8000d6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d6e:	4b1f      	ldr	r3, [pc, #124]	; (8000dec <HAL_UART_MspInit+0xb8>)
 8000d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d72:	4a1e      	ldr	r2, [pc, #120]	; (8000dec <HAL_UART_MspInit+0xb8>)
 8000d74:	f043 0302 	orr.w	r3, r3, #2
 8000d78:	6313      	str	r3, [r2, #48]	; 0x30
 8000d7a:	4b1c      	ldr	r3, [pc, #112]	; (8000dec <HAL_UART_MspInit+0xb8>)
 8000d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7e:	f003 0302 	and.w	r3, r3, #2
 8000d82:	60fb      	str	r3, [r7, #12]
 8000d84:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d86:	4b19      	ldr	r3, [pc, #100]	; (8000dec <HAL_UART_MspInit+0xb8>)
 8000d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8a:	4a18      	ldr	r2, [pc, #96]	; (8000dec <HAL_UART_MspInit+0xb8>)
 8000d8c:	f043 0301 	orr.w	r3, r3, #1
 8000d90:	6313      	str	r3, [r2, #48]	; 0x30
 8000d92:	4b16      	ldr	r3, [pc, #88]	; (8000dec <HAL_UART_MspInit+0xb8>)
 8000d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d96:	f003 0301 	and.w	r3, r3, #1
 8000d9a:	60bb      	str	r3, [r7, #8]
 8000d9c:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000d9e:	2380      	movs	r3, #128	; 0x80
 8000da0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da2:	2302      	movs	r3, #2
 8000da4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da6:	2300      	movs	r3, #0
 8000da8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000daa:	2303      	movs	r3, #3
 8000dac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000dae:	2307      	movs	r3, #7
 8000db0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000db2:	f107 0314 	add.w	r3, r7, #20
 8000db6:	4619      	mov	r1, r3
 8000db8:	480d      	ldr	r0, [pc, #52]	; (8000df0 <HAL_UART_MspInit+0xbc>)
 8000dba:	f000 fe1b 	bl	80019f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000dbe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000dc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc4:	2302      	movs	r3, #2
 8000dc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dcc:	2303      	movs	r3, #3
 8000dce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000dd0:	2307      	movs	r3, #7
 8000dd2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dd4:	f107 0314 	add.w	r3, r7, #20
 8000dd8:	4619      	mov	r1, r3
 8000dda:	4806      	ldr	r0, [pc, #24]	; (8000df4 <HAL_UART_MspInit+0xc0>)
 8000ddc:	f000 fe0a 	bl	80019f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000de0:	bf00      	nop
 8000de2:	3728      	adds	r7, #40	; 0x28
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	40011000 	.word	0x40011000
 8000dec:	40023800 	.word	0x40023800
 8000df0:	40020400 	.word	0x40020400
 8000df4:	40020000 	.word	0x40020000

08000df8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dfc:	e7fe      	b.n	8000dfc <NMI_Handler+0x4>

08000dfe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dfe:	b480      	push	{r7}
 8000e00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e02:	e7fe      	b.n	8000e02 <HardFault_Handler+0x4>

08000e04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e08:	e7fe      	b.n	8000e08 <MemManage_Handler+0x4>

08000e0a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e0a:	b480      	push	{r7}
 8000e0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e0e:	e7fe      	b.n	8000e0e <BusFault_Handler+0x4>

08000e10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e14:	e7fe      	b.n	8000e14 <UsageFault_Handler+0x4>

08000e16 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e16:	b480      	push	{r7}
 8000e18:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e1a:	bf00      	nop
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr

08000e24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e28:	bf00      	nop
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr

08000e32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e32:	b480      	push	{r7}
 8000e34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e36:	bf00      	nop
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr

08000e40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e44:	f000 f892 	bl	8000f6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e48:	bf00      	nop
 8000e4a:	bd80      	pop	{r7, pc}

08000e4c <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8000e50:	bf00      	nop
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr
	...

08000e5c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e60:	4b06      	ldr	r3, [pc, #24]	; (8000e7c <SystemInit+0x20>)
 8000e62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e66:	4a05      	ldr	r2, [pc, #20]	; (8000e7c <SystemInit+0x20>)
 8000e68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e70:	bf00      	nop
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	e000ed00 	.word	0xe000ed00

08000e80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000eb8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e84:	480d      	ldr	r0, [pc, #52]	; (8000ebc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e86:	490e      	ldr	r1, [pc, #56]	; (8000ec0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e88:	4a0e      	ldr	r2, [pc, #56]	; (8000ec4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e8c:	e002      	b.n	8000e94 <LoopCopyDataInit>

08000e8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e92:	3304      	adds	r3, #4

08000e94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e98:	d3f9      	bcc.n	8000e8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e9a:	4a0b      	ldr	r2, [pc, #44]	; (8000ec8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e9c:	4c0b      	ldr	r4, [pc, #44]	; (8000ecc <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ea0:	e001      	b.n	8000ea6 <LoopFillZerobss>

08000ea2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ea2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ea4:	3204      	adds	r2, #4

08000ea6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ea6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ea8:	d3fb      	bcc.n	8000ea2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000eaa:	f7ff ffd7 	bl	8000e5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000eae:	f007 fa75 	bl	800839c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000eb2:	f7ff fbeb 	bl	800068c <main>
  bx  lr    
 8000eb6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000eb8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000ebc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ec0:	200001c0 	.word	0x200001c0
  ldr r2, =_sidata
 8000ec4:	08008520 	.word	0x08008520
  ldr r2, =_sbss
 8000ec8:	200001c0 	.word	0x200001c0
  ldr r4, =_ebss
 8000ecc:	20000e04 	.word	0x20000e04

08000ed0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ed0:	e7fe      	b.n	8000ed0 <ADC_IRQHandler>
	...

08000ed4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
 8000ed8:	4b0b      	ldr	r3, [pc, #44]	; (8000f08 <HAL_Init+0x34>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a0a      	ldr	r2, [pc, #40]	; (8000f08 <HAL_Init+0x34>)
 8000ede:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ee2:	6013      	str	r3, [r2, #0]
#endif /* ART_ACCLERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ee4:	4b08      	ldr	r3, [pc, #32]	; (8000f08 <HAL_Init+0x34>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a07      	ldr	r2, [pc, #28]	; (8000f08 <HAL_Init+0x34>)
 8000eea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000eee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ef0:	2003      	movs	r0, #3
 8000ef2:	f000 fd3d 	bl	8001970 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ef6:	2000      	movs	r0, #0
 8000ef8:	f000 f808 	bl	8000f0c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000efc:	f7ff fe4e 	bl	8000b9c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000f00:	2300      	movs	r3, #0
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	40023c00 	.word	0x40023c00

08000f0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f14:	4b12      	ldr	r3, [pc, #72]	; (8000f60 <HAL_InitTick+0x54>)
 8000f16:	681a      	ldr	r2, [r3, #0]
 8000f18:	4b12      	ldr	r3, [pc, #72]	; (8000f64 <HAL_InitTick+0x58>)
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f22:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f26:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f000 fd55 	bl	80019da <HAL_SYSTICK_Config>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f36:	2301      	movs	r3, #1
 8000f38:	e00e      	b.n	8000f58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	2b0f      	cmp	r3, #15
 8000f3e:	d80a      	bhi.n	8000f56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f40:	2200      	movs	r2, #0
 8000f42:	6879      	ldr	r1, [r7, #4]
 8000f44:	f04f 30ff 	mov.w	r0, #4294967295
 8000f48:	f000 fd1d 	bl	8001986 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f4c:	4a06      	ldr	r2, [pc, #24]	; (8000f68 <HAL_InitTick+0x5c>)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f52:	2300      	movs	r3, #0
 8000f54:	e000      	b.n	8000f58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f56:	2301      	movs	r3, #1
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	3708      	adds	r7, #8
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	200001b4 	.word	0x200001b4
 8000f64:	200001bc 	.word	0x200001bc
 8000f68:	200001b8 	.word	0x200001b8

08000f6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f70:	4b06      	ldr	r3, [pc, #24]	; (8000f8c <HAL_IncTick+0x20>)
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	461a      	mov	r2, r3
 8000f76:	4b06      	ldr	r3, [pc, #24]	; (8000f90 <HAL_IncTick+0x24>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4413      	add	r3, r2
 8000f7c:	4a04      	ldr	r2, [pc, #16]	; (8000f90 <HAL_IncTick+0x24>)
 8000f7e:	6013      	str	r3, [r2, #0]
}
 8000f80:	bf00      	nop
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	200001bc 	.word	0x200001bc
 8000f90:	20000998 	.word	0x20000998

08000f94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  return uwTick;
 8000f98:	4b03      	ldr	r3, [pc, #12]	; (8000fa8 <HAL_GetTick+0x14>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	20000998 	.word	0x20000998

08000fac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b084      	sub	sp, #16
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fb4:	f7ff ffee 	bl	8000f94 <HAL_GetTick>
 8000fb8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fc4:	d005      	beq.n	8000fd2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fc6:	4b0a      	ldr	r3, [pc, #40]	; (8000ff0 <HAL_Delay+0x44>)
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	461a      	mov	r2, r3
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	4413      	add	r3, r2
 8000fd0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000fd2:	bf00      	nop
 8000fd4:	f7ff ffde 	bl	8000f94 <HAL_GetTick>
 8000fd8:	4602      	mov	r2, r0
 8000fda:	68bb      	ldr	r3, [r7, #8]
 8000fdc:	1ad3      	subs	r3, r2, r3
 8000fde:	68fa      	ldr	r2, [r7, #12]
 8000fe0:	429a      	cmp	r2, r3
 8000fe2:	d8f7      	bhi.n	8000fd4 <HAL_Delay+0x28>
  {
  }
}
 8000fe4:	bf00      	nop
 8000fe6:	bf00      	nop
 8000fe8:	3710      	adds	r7, #16
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	200001bc 	.word	0x200001bc

08000ff4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b084      	sub	sp, #16
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d101      	bne.n	800100a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001006:	2301      	movs	r3, #1
 8001008:	e031      	b.n	800106e <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800100e:	2b00      	cmp	r3, #0
 8001010:	d109      	bne.n	8001026 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001012:	6878      	ldr	r0, [r7, #4]
 8001014:	f7ff fdec 	bl	8000bf0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	2200      	movs	r2, #0
 800101c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	2200      	movs	r2, #0
 8001022:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800102a:	f003 0310 	and.w	r3, r3, #16
 800102e:	2b00      	cmp	r3, #0
 8001030:	d116      	bne.n	8001060 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001036:	4b10      	ldr	r3, [pc, #64]	; (8001078 <HAL_ADC_Init+0x84>)
 8001038:	4013      	ands	r3, r2
 800103a:	f043 0202 	orr.w	r2, r3, #2
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001042:	6878      	ldr	r0, [r7, #4]
 8001044:	f000 faca 	bl	80015dc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2200      	movs	r2, #0
 800104c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001052:	f023 0303 	bic.w	r3, r3, #3
 8001056:	f043 0201 	orr.w	r2, r3, #1
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	641a      	str	r2, [r3, #64]	; 0x40
 800105e:	e001      	b.n	8001064 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001060:	2301      	movs	r3, #1
 8001062:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2200      	movs	r2, #0
 8001068:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800106c:	7bfb      	ldrb	r3, [r7, #15]
}
 800106e:	4618      	mov	r0, r3
 8001070:	3710      	adds	r7, #16
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	ffffeefd 	.word	0xffffeefd

0800107c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800107c:	b480      	push	{r7}
 800107e:	b085      	sub	sp, #20
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8001084:	2300      	movs	r3, #0
 8001086:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800108e:	2b01      	cmp	r3, #1
 8001090:	d101      	bne.n	8001096 <HAL_ADC_Start+0x1a>
 8001092:	2302      	movs	r3, #2
 8001094:	e0ad      	b.n	80011f2 <HAL_ADC_Start+0x176>
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	2201      	movs	r2, #1
 800109a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	689b      	ldr	r3, [r3, #8]
 80010a4:	f003 0301 	and.w	r3, r3, #1
 80010a8:	2b01      	cmp	r3, #1
 80010aa:	d018      	beq.n	80010de <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	689a      	ldr	r2, [r3, #8]
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f042 0201 	orr.w	r2, r2, #1
 80010ba:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80010bc:	4b50      	ldr	r3, [pc, #320]	; (8001200 <HAL_ADC_Start+0x184>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a50      	ldr	r2, [pc, #320]	; (8001204 <HAL_ADC_Start+0x188>)
 80010c2:	fba2 2303 	umull	r2, r3, r2, r3
 80010c6:	0c9a      	lsrs	r2, r3, #18
 80010c8:	4613      	mov	r3, r2
 80010ca:	005b      	lsls	r3, r3, #1
 80010cc:	4413      	add	r3, r2
 80010ce:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80010d0:	e002      	b.n	80010d8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	3b01      	subs	r3, #1
 80010d6:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d1f9      	bne.n	80010d2 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	689b      	ldr	r3, [r3, #8]
 80010e4:	f003 0301 	and.w	r3, r3, #1
 80010e8:	2b01      	cmp	r3, #1
 80010ea:	d175      	bne.n	80011d8 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010f0:	4b45      	ldr	r3, [pc, #276]	; (8001208 <HAL_ADC_Start+0x18c>)
 80010f2:	4013      	ands	r3, r2
 80010f4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001106:	2b00      	cmp	r3, #0
 8001108:	d007      	beq.n	800111a <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001112:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800111e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001122:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001126:	d106      	bne.n	8001136 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800112c:	f023 0206 	bic.w	r2, r3, #6
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	645a      	str	r2, [r3, #68]	; 0x44
 8001134:	e002      	b.n	800113c <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	2200      	movs	r2, #0
 800113a:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2200      	movs	r2, #0
 8001140:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800114c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 800114e:	4b2f      	ldr	r3, [pc, #188]	; (800120c <HAL_ADC_Start+0x190>)
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	f003 031f 	and.w	r3, r3, #31
 8001156:	2b00      	cmp	r3, #0
 8001158:	d10f      	bne.n	800117a <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	689b      	ldr	r3, [r3, #8]
 8001160:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001164:	2b00      	cmp	r3, #0
 8001166:	d143      	bne.n	80011f0 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	689a      	ldr	r2, [r3, #8]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001176:	609a      	str	r2, [r3, #8]
 8001178:	e03a      	b.n	80011f0 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4a24      	ldr	r2, [pc, #144]	; (8001210 <HAL_ADC_Start+0x194>)
 8001180:	4293      	cmp	r3, r2
 8001182:	d10e      	bne.n	80011a2 <HAL_ADC_Start+0x126>
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	689b      	ldr	r3, [r3, #8]
 800118a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800118e:	2b00      	cmp	r3, #0
 8001190:	d107      	bne.n	80011a2 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	689a      	ldr	r2, [r3, #8]
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80011a0:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80011a2:	4b1a      	ldr	r3, [pc, #104]	; (800120c <HAL_ADC_Start+0x190>)
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	f003 0310 	and.w	r3, r3, #16
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d120      	bne.n	80011f0 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4a18      	ldr	r2, [pc, #96]	; (8001214 <HAL_ADC_Start+0x198>)
 80011b4:	4293      	cmp	r3, r2
 80011b6:	d11b      	bne.n	80011f0 <HAL_ADC_Start+0x174>
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	689b      	ldr	r3, [r3, #8]
 80011be:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d114      	bne.n	80011f0 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	689a      	ldr	r2, [r3, #8]
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80011d4:	609a      	str	r2, [r3, #8]
 80011d6:	e00b      	b.n	80011f0 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011dc:	f043 0210 	orr.w	r2, r3, #16
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011e8:	f043 0201 	orr.w	r2, r3, #1
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80011f0:	2300      	movs	r3, #0
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	3714      	adds	r7, #20
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	200001b4 	.word	0x200001b4
 8001204:	431bde83 	.word	0x431bde83
 8001208:	fffff8fe 	.word	0xfffff8fe
 800120c:	40012300 	.word	0x40012300
 8001210:	40012000 	.word	0x40012000
 8001214:	40012200 	.word	0x40012200

08001218 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b084      	sub	sp, #16
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001222:	2300      	movs	r3, #0
 8001224:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	689b      	ldr	r3, [r3, #8]
 800122c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001230:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001234:	d113      	bne.n	800125e <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	689b      	ldr	r3, [r3, #8]
 800123c:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001240:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001244:	d10b      	bne.n	800125e <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124a:	f043 0220 	orr.w	r2, r3, #32
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2200      	movs	r2, #0
 8001256:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800125a:	2301      	movs	r3, #1
 800125c:	e063      	b.n	8001326 <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 800125e:	f7ff fe99 	bl	8000f94 <HAL_GetTick>
 8001262:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001264:	e021      	b.n	80012aa <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	f1b3 3fff 	cmp.w	r3, #4294967295
 800126c:	d01d      	beq.n	80012aa <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d007      	beq.n	8001284 <HAL_ADC_PollForConversion+0x6c>
 8001274:	f7ff fe8e 	bl	8000f94 <HAL_GetTick>
 8001278:	4602      	mov	r2, r0
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	1ad3      	subs	r3, r2, r3
 800127e:	683a      	ldr	r2, [r7, #0]
 8001280:	429a      	cmp	r2, r3
 8001282:	d212      	bcs.n	80012aa <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f003 0302 	and.w	r3, r3, #2
 800128e:	2b02      	cmp	r3, #2
 8001290:	d00b      	beq.n	80012aa <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001296:	f043 0204 	orr.w	r2, r3, #4
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	2200      	movs	r2, #0
 80012a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80012a6:	2303      	movs	r3, #3
 80012a8:	e03d      	b.n	8001326 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f003 0302 	and.w	r3, r3, #2
 80012b4:	2b02      	cmp	r3, #2
 80012b6:	d1d6      	bne.n	8001266 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f06f 0212 	mvn.w	r2, #18
 80012c0:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	689b      	ldr	r3, [r3, #8]
 80012d4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d123      	bne.n	8001324 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d11f      	bne.n	8001324 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012ea:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d006      	beq.n	8001300 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	689b      	ldr	r3, [r3, #8]
 80012f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d111      	bne.n	8001324 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001304:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001310:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001314:	2b00      	cmp	r3, #0
 8001316:	d105      	bne.n	8001324 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131c:	f043 0201 	orr.w	r2, r3, #1
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001324:	2300      	movs	r3, #0
}
 8001326:	4618      	mov	r0, r3
 8001328:	3710      	adds	r7, #16
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}

0800132e <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800132e:	b480      	push	{r7}
 8001330:	b083      	sub	sp, #12
 8001332:	af00      	add	r7, sp, #0
 8001334:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800133c:	4618      	mov	r0, r3
 800133e:	370c      	adds	r7, #12
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr

08001348 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001348:	b480      	push	{r7}
 800134a:	b085      	sub	sp, #20
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
 8001350:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001352:	2300      	movs	r3, #0
 8001354:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800135c:	2b01      	cmp	r3, #1
 800135e:	d101      	bne.n	8001364 <HAL_ADC_ConfigChannel+0x1c>
 8001360:	2302      	movs	r3, #2
 8001362:	e12a      	b.n	80015ba <HAL_ADC_ConfigChannel+0x272>
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2201      	movs	r2, #1
 8001368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	2b09      	cmp	r3, #9
 8001372:	d93a      	bls.n	80013ea <HAL_ADC_ConfigChannel+0xa2>
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800137c:	d035      	beq.n	80013ea <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	68d9      	ldr	r1, [r3, #12]
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	b29b      	uxth	r3, r3
 800138a:	461a      	mov	r2, r3
 800138c:	4613      	mov	r3, r2
 800138e:	005b      	lsls	r3, r3, #1
 8001390:	4413      	add	r3, r2
 8001392:	3b1e      	subs	r3, #30
 8001394:	2207      	movs	r2, #7
 8001396:	fa02 f303 	lsl.w	r3, r2, r3
 800139a:	43da      	mvns	r2, r3
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	400a      	ands	r2, r1
 80013a2:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a87      	ldr	r2, [pc, #540]	; (80015c8 <HAL_ADC_ConfigChannel+0x280>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d10a      	bne.n	80013c4 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	68d9      	ldr	r1, [r3, #12]
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	689b      	ldr	r3, [r3, #8]
 80013b8:	061a      	lsls	r2, r3, #24
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	430a      	orrs	r2, r1
 80013c0:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80013c2:	e035      	b.n	8001430 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	68d9      	ldr	r1, [r3, #12]
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	689a      	ldr	r2, [r3, #8]
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	b29b      	uxth	r3, r3
 80013d4:	4618      	mov	r0, r3
 80013d6:	4603      	mov	r3, r0
 80013d8:	005b      	lsls	r3, r3, #1
 80013da:	4403      	add	r3, r0
 80013dc:	3b1e      	subs	r3, #30
 80013de:	409a      	lsls	r2, r3
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	430a      	orrs	r2, r1
 80013e6:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80013e8:	e022      	b.n	8001430 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	6919      	ldr	r1, [r3, #16]
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	b29b      	uxth	r3, r3
 80013f6:	461a      	mov	r2, r3
 80013f8:	4613      	mov	r3, r2
 80013fa:	005b      	lsls	r3, r3, #1
 80013fc:	4413      	add	r3, r2
 80013fe:	2207      	movs	r2, #7
 8001400:	fa02 f303 	lsl.w	r3, r2, r3
 8001404:	43da      	mvns	r2, r3
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	400a      	ands	r2, r1
 800140c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	6919      	ldr	r1, [r3, #16]
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	689a      	ldr	r2, [r3, #8]
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	b29b      	uxth	r3, r3
 800141e:	4618      	mov	r0, r3
 8001420:	4603      	mov	r3, r0
 8001422:	005b      	lsls	r3, r3, #1
 8001424:	4403      	add	r3, r0
 8001426:	409a      	lsls	r2, r3
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	430a      	orrs	r2, r1
 800142e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	2b06      	cmp	r3, #6
 8001436:	d824      	bhi.n	8001482 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	685a      	ldr	r2, [r3, #4]
 8001442:	4613      	mov	r3, r2
 8001444:	009b      	lsls	r3, r3, #2
 8001446:	4413      	add	r3, r2
 8001448:	3b05      	subs	r3, #5
 800144a:	221f      	movs	r2, #31
 800144c:	fa02 f303 	lsl.w	r3, r2, r3
 8001450:	43da      	mvns	r2, r3
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	400a      	ands	r2, r1
 8001458:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	b29b      	uxth	r3, r3
 8001466:	4618      	mov	r0, r3
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	685a      	ldr	r2, [r3, #4]
 800146c:	4613      	mov	r3, r2
 800146e:	009b      	lsls	r3, r3, #2
 8001470:	4413      	add	r3, r2
 8001472:	3b05      	subs	r3, #5
 8001474:	fa00 f203 	lsl.w	r2, r0, r3
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	430a      	orrs	r2, r1
 800147e:	635a      	str	r2, [r3, #52]	; 0x34
 8001480:	e04c      	b.n	800151c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	2b0c      	cmp	r3, #12
 8001488:	d824      	bhi.n	80014d4 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	685a      	ldr	r2, [r3, #4]
 8001494:	4613      	mov	r3, r2
 8001496:	009b      	lsls	r3, r3, #2
 8001498:	4413      	add	r3, r2
 800149a:	3b23      	subs	r3, #35	; 0x23
 800149c:	221f      	movs	r2, #31
 800149e:	fa02 f303 	lsl.w	r3, r2, r3
 80014a2:	43da      	mvns	r2, r3
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	400a      	ands	r2, r1
 80014aa:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	b29b      	uxth	r3, r3
 80014b8:	4618      	mov	r0, r3
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	685a      	ldr	r2, [r3, #4]
 80014be:	4613      	mov	r3, r2
 80014c0:	009b      	lsls	r3, r3, #2
 80014c2:	4413      	add	r3, r2
 80014c4:	3b23      	subs	r3, #35	; 0x23
 80014c6:	fa00 f203 	lsl.w	r2, r0, r3
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	430a      	orrs	r2, r1
 80014d0:	631a      	str	r2, [r3, #48]	; 0x30
 80014d2:	e023      	b.n	800151c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	685a      	ldr	r2, [r3, #4]
 80014de:	4613      	mov	r3, r2
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	4413      	add	r3, r2
 80014e4:	3b41      	subs	r3, #65	; 0x41
 80014e6:	221f      	movs	r2, #31
 80014e8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ec:	43da      	mvns	r2, r3
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	400a      	ands	r2, r1
 80014f4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	b29b      	uxth	r3, r3
 8001502:	4618      	mov	r0, r3
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	685a      	ldr	r2, [r3, #4]
 8001508:	4613      	mov	r3, r2
 800150a:	009b      	lsls	r3, r3, #2
 800150c:	4413      	add	r3, r2
 800150e:	3b41      	subs	r3, #65	; 0x41
 8001510:	fa00 f203 	lsl.w	r2, r0, r3
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	430a      	orrs	r2, r1
 800151a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a2a      	ldr	r2, [pc, #168]	; (80015cc <HAL_ADC_ConfigChannel+0x284>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d10a      	bne.n	800153c <HAL_ADC_ConfigChannel+0x1f4>
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800152e:	d105      	bne.n	800153c <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001530:	4b27      	ldr	r3, [pc, #156]	; (80015d0 <HAL_ADC_ConfigChannel+0x288>)
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	4a26      	ldr	r2, [pc, #152]	; (80015d0 <HAL_ADC_ConfigChannel+0x288>)
 8001536:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800153a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a22      	ldr	r2, [pc, #136]	; (80015cc <HAL_ADC_ConfigChannel+0x284>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d109      	bne.n	800155a <HAL_ADC_ConfigChannel+0x212>
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	2b12      	cmp	r3, #18
 800154c:	d105      	bne.n	800155a <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800154e:	4b20      	ldr	r3, [pc, #128]	; (80015d0 <HAL_ADC_ConfigChannel+0x288>)
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	4a1f      	ldr	r2, [pc, #124]	; (80015d0 <HAL_ADC_ConfigChannel+0x288>)
 8001554:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001558:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4a1b      	ldr	r2, [pc, #108]	; (80015cc <HAL_ADC_ConfigChannel+0x284>)
 8001560:	4293      	cmp	r3, r2
 8001562:	d125      	bne.n	80015b0 <HAL_ADC_ConfigChannel+0x268>
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a17      	ldr	r2, [pc, #92]	; (80015c8 <HAL_ADC_ConfigChannel+0x280>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d003      	beq.n	8001576 <HAL_ADC_ConfigChannel+0x22e>
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	2b11      	cmp	r3, #17
 8001574:	d11c      	bne.n	80015b0 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001576:	4b16      	ldr	r3, [pc, #88]	; (80015d0 <HAL_ADC_ConfigChannel+0x288>)
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	4a15      	ldr	r2, [pc, #84]	; (80015d0 <HAL_ADC_ConfigChannel+0x288>)
 800157c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001580:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4a10      	ldr	r2, [pc, #64]	; (80015c8 <HAL_ADC_ConfigChannel+0x280>)
 8001588:	4293      	cmp	r3, r2
 800158a:	d111      	bne.n	80015b0 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800158c:	4b11      	ldr	r3, [pc, #68]	; (80015d4 <HAL_ADC_ConfigChannel+0x28c>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a11      	ldr	r2, [pc, #68]	; (80015d8 <HAL_ADC_ConfigChannel+0x290>)
 8001592:	fba2 2303 	umull	r2, r3, r2, r3
 8001596:	0c9a      	lsrs	r2, r3, #18
 8001598:	4613      	mov	r3, r2
 800159a:	009b      	lsls	r3, r3, #2
 800159c:	4413      	add	r3, r2
 800159e:	005b      	lsls	r3, r3, #1
 80015a0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80015a2:	e002      	b.n	80015aa <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	3b01      	subs	r3, #1
 80015a8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d1f9      	bne.n	80015a4 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2200      	movs	r2, #0
 80015b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80015b8:	2300      	movs	r3, #0
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	3714      	adds	r7, #20
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr
 80015c6:	bf00      	nop
 80015c8:	10000012 	.word	0x10000012
 80015cc:	40012000 	.word	0x40012000
 80015d0:	40012300 	.word	0x40012300
 80015d4:	200001b4 	.word	0x200001b4
 80015d8:	431bde83 	.word	0x431bde83

080015dc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80015dc:	b480      	push	{r7}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80015e4:	4b78      	ldr	r3, [pc, #480]	; (80017c8 <ADC_Init+0x1ec>)
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	4a77      	ldr	r2, [pc, #476]	; (80017c8 <ADC_Init+0x1ec>)
 80015ea:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80015ee:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80015f0:	4b75      	ldr	r3, [pc, #468]	; (80017c8 <ADC_Init+0x1ec>)
 80015f2:	685a      	ldr	r2, [r3, #4]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	4973      	ldr	r1, [pc, #460]	; (80017c8 <ADC_Init+0x1ec>)
 80015fa:	4313      	orrs	r3, r2
 80015fc:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	685a      	ldr	r2, [r3, #4]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800160c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	6859      	ldr	r1, [r3, #4]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	691b      	ldr	r3, [r3, #16]
 8001618:	021a      	lsls	r2, r3, #8
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	430a      	orrs	r2, r1
 8001620:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	685a      	ldr	r2, [r3, #4]
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001630:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	6859      	ldr	r1, [r3, #4]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	689a      	ldr	r2, [r3, #8]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	430a      	orrs	r2, r1
 8001642:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	689a      	ldr	r2, [r3, #8]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001652:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	6899      	ldr	r1, [r3, #8]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	68da      	ldr	r2, [r3, #12]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	430a      	orrs	r2, r1
 8001664:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800166a:	4a58      	ldr	r2, [pc, #352]	; (80017cc <ADC_Init+0x1f0>)
 800166c:	4293      	cmp	r3, r2
 800166e:	d022      	beq.n	80016b6 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	689a      	ldr	r2, [r3, #8]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800167e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	6899      	ldr	r1, [r3, #8]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	430a      	orrs	r2, r1
 8001690:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	689a      	ldr	r2, [r3, #8]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80016a0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	6899      	ldr	r1, [r3, #8]
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	430a      	orrs	r2, r1
 80016b2:	609a      	str	r2, [r3, #8]
 80016b4:	e00f      	b.n	80016d6 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	689a      	ldr	r2, [r3, #8]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80016c4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	689a      	ldr	r2, [r3, #8]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80016d4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	689a      	ldr	r2, [r3, #8]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f022 0202 	bic.w	r2, r2, #2
 80016e4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	6899      	ldr	r1, [r3, #8]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	699b      	ldr	r3, [r3, #24]
 80016f0:	005a      	lsls	r2, r3, #1
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	430a      	orrs	r2, r1
 80016f8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d01b      	beq.n	800173c <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	685a      	ldr	r2, [r3, #4]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001712:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	685a      	ldr	r2, [r3, #4]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001722:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	6859      	ldr	r1, [r3, #4]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800172e:	3b01      	subs	r3, #1
 8001730:	035a      	lsls	r2, r3, #13
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	430a      	orrs	r2, r1
 8001738:	605a      	str	r2, [r3, #4]
 800173a:	e007      	b.n	800174c <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	685a      	ldr	r2, [r3, #4]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800174a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800175a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	69db      	ldr	r3, [r3, #28]
 8001766:	3b01      	subs	r3, #1
 8001768:	051a      	lsls	r2, r3, #20
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	430a      	orrs	r2, r1
 8001770:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	689a      	ldr	r2, [r3, #8]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001780:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	6899      	ldr	r1, [r3, #8]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800178e:	025a      	lsls	r2, r3, #9
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	430a      	orrs	r2, r1
 8001796:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	689a      	ldr	r2, [r3, #8]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80017a6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	6899      	ldr	r1, [r3, #8]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	695b      	ldr	r3, [r3, #20]
 80017b2:	029a      	lsls	r2, r3, #10
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	430a      	orrs	r2, r1
 80017ba:	609a      	str	r2, [r3, #8]
}
 80017bc:	bf00      	nop
 80017be:	370c      	adds	r7, #12
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr
 80017c8:	40012300 	.word	0x40012300
 80017cc:	0f000001 	.word	0x0f000001

080017d0 <__NVIC_SetPriorityGrouping>:
{
 80017d0:	b480      	push	{r7}
 80017d2:	b085      	sub	sp, #20
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	f003 0307 	and.w	r3, r3, #7
 80017de:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017e0:	4b0b      	ldr	r3, [pc, #44]	; (8001810 <__NVIC_SetPriorityGrouping+0x40>)
 80017e2:	68db      	ldr	r3, [r3, #12]
 80017e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017e6:	68ba      	ldr	r2, [r7, #8]
 80017e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017ec:	4013      	ands	r3, r2
 80017ee:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017f4:	68bb      	ldr	r3, [r7, #8]
 80017f6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80017f8:	4b06      	ldr	r3, [pc, #24]	; (8001814 <__NVIC_SetPriorityGrouping+0x44>)
 80017fa:	4313      	orrs	r3, r2
 80017fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017fe:	4a04      	ldr	r2, [pc, #16]	; (8001810 <__NVIC_SetPriorityGrouping+0x40>)
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	60d3      	str	r3, [r2, #12]
}
 8001804:	bf00      	nop
 8001806:	3714      	adds	r7, #20
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr
 8001810:	e000ed00 	.word	0xe000ed00
 8001814:	05fa0000 	.word	0x05fa0000

08001818 <__NVIC_GetPriorityGrouping>:
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800181c:	4b04      	ldr	r3, [pc, #16]	; (8001830 <__NVIC_GetPriorityGrouping+0x18>)
 800181e:	68db      	ldr	r3, [r3, #12]
 8001820:	0a1b      	lsrs	r3, r3, #8
 8001822:	f003 0307 	and.w	r3, r3, #7
}
 8001826:	4618      	mov	r0, r3
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr
 8001830:	e000ed00 	.word	0xe000ed00

08001834 <__NVIC_EnableIRQ>:
{
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
 800183a:	4603      	mov	r3, r0
 800183c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800183e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001842:	2b00      	cmp	r3, #0
 8001844:	db0b      	blt.n	800185e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001846:	79fb      	ldrb	r3, [r7, #7]
 8001848:	f003 021f 	and.w	r2, r3, #31
 800184c:	4907      	ldr	r1, [pc, #28]	; (800186c <__NVIC_EnableIRQ+0x38>)
 800184e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001852:	095b      	lsrs	r3, r3, #5
 8001854:	2001      	movs	r0, #1
 8001856:	fa00 f202 	lsl.w	r2, r0, r2
 800185a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800185e:	bf00      	nop
 8001860:	370c      	adds	r7, #12
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr
 800186a:	bf00      	nop
 800186c:	e000e100 	.word	0xe000e100

08001870 <__NVIC_SetPriority>:
{
 8001870:	b480      	push	{r7}
 8001872:	b083      	sub	sp, #12
 8001874:	af00      	add	r7, sp, #0
 8001876:	4603      	mov	r3, r0
 8001878:	6039      	str	r1, [r7, #0]
 800187a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800187c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001880:	2b00      	cmp	r3, #0
 8001882:	db0a      	blt.n	800189a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	b2da      	uxtb	r2, r3
 8001888:	490c      	ldr	r1, [pc, #48]	; (80018bc <__NVIC_SetPriority+0x4c>)
 800188a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800188e:	0112      	lsls	r2, r2, #4
 8001890:	b2d2      	uxtb	r2, r2
 8001892:	440b      	add	r3, r1
 8001894:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001898:	e00a      	b.n	80018b0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	b2da      	uxtb	r2, r3
 800189e:	4908      	ldr	r1, [pc, #32]	; (80018c0 <__NVIC_SetPriority+0x50>)
 80018a0:	79fb      	ldrb	r3, [r7, #7]
 80018a2:	f003 030f 	and.w	r3, r3, #15
 80018a6:	3b04      	subs	r3, #4
 80018a8:	0112      	lsls	r2, r2, #4
 80018aa:	b2d2      	uxtb	r2, r2
 80018ac:	440b      	add	r3, r1
 80018ae:	761a      	strb	r2, [r3, #24]
}
 80018b0:	bf00      	nop
 80018b2:	370c      	adds	r7, #12
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr
 80018bc:	e000e100 	.word	0xe000e100
 80018c0:	e000ed00 	.word	0xe000ed00

080018c4 <NVIC_EncodePriority>:
{
 80018c4:	b480      	push	{r7}
 80018c6:	b089      	sub	sp, #36	; 0x24
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	60f8      	str	r0, [r7, #12]
 80018cc:	60b9      	str	r1, [r7, #8]
 80018ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	f003 0307 	and.w	r3, r3, #7
 80018d6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018d8:	69fb      	ldr	r3, [r7, #28]
 80018da:	f1c3 0307 	rsb	r3, r3, #7
 80018de:	2b04      	cmp	r3, #4
 80018e0:	bf28      	it	cs
 80018e2:	2304      	movcs	r3, #4
 80018e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018e6:	69fb      	ldr	r3, [r7, #28]
 80018e8:	3304      	adds	r3, #4
 80018ea:	2b06      	cmp	r3, #6
 80018ec:	d902      	bls.n	80018f4 <NVIC_EncodePriority+0x30>
 80018ee:	69fb      	ldr	r3, [r7, #28]
 80018f0:	3b03      	subs	r3, #3
 80018f2:	e000      	b.n	80018f6 <NVIC_EncodePriority+0x32>
 80018f4:	2300      	movs	r3, #0
 80018f6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018f8:	f04f 32ff 	mov.w	r2, #4294967295
 80018fc:	69bb      	ldr	r3, [r7, #24]
 80018fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001902:	43da      	mvns	r2, r3
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	401a      	ands	r2, r3
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800190c:	f04f 31ff 	mov.w	r1, #4294967295
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	fa01 f303 	lsl.w	r3, r1, r3
 8001916:	43d9      	mvns	r1, r3
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800191c:	4313      	orrs	r3, r2
}
 800191e:	4618      	mov	r0, r3
 8001920:	3724      	adds	r7, #36	; 0x24
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr
	...

0800192c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	3b01      	subs	r3, #1
 8001938:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800193c:	d301      	bcc.n	8001942 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800193e:	2301      	movs	r3, #1
 8001940:	e00f      	b.n	8001962 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001942:	4a0a      	ldr	r2, [pc, #40]	; (800196c <SysTick_Config+0x40>)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	3b01      	subs	r3, #1
 8001948:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800194a:	210f      	movs	r1, #15
 800194c:	f04f 30ff 	mov.w	r0, #4294967295
 8001950:	f7ff ff8e 	bl	8001870 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001954:	4b05      	ldr	r3, [pc, #20]	; (800196c <SysTick_Config+0x40>)
 8001956:	2200      	movs	r2, #0
 8001958:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800195a:	4b04      	ldr	r3, [pc, #16]	; (800196c <SysTick_Config+0x40>)
 800195c:	2207      	movs	r2, #7
 800195e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001960:	2300      	movs	r3, #0
}
 8001962:	4618      	mov	r0, r3
 8001964:	3708      	adds	r7, #8
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	e000e010 	.word	0xe000e010

08001970 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b082      	sub	sp, #8
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001978:	6878      	ldr	r0, [r7, #4]
 800197a:	f7ff ff29 	bl	80017d0 <__NVIC_SetPriorityGrouping>
}
 800197e:	bf00      	nop
 8001980:	3708      	adds	r7, #8
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}

08001986 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001986:	b580      	push	{r7, lr}
 8001988:	b086      	sub	sp, #24
 800198a:	af00      	add	r7, sp, #0
 800198c:	4603      	mov	r3, r0
 800198e:	60b9      	str	r1, [r7, #8]
 8001990:	607a      	str	r2, [r7, #4]
 8001992:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001994:	2300      	movs	r3, #0
 8001996:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001998:	f7ff ff3e 	bl	8001818 <__NVIC_GetPriorityGrouping>
 800199c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800199e:	687a      	ldr	r2, [r7, #4]
 80019a0:	68b9      	ldr	r1, [r7, #8]
 80019a2:	6978      	ldr	r0, [r7, #20]
 80019a4:	f7ff ff8e 	bl	80018c4 <NVIC_EncodePriority>
 80019a8:	4602      	mov	r2, r0
 80019aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019ae:	4611      	mov	r1, r2
 80019b0:	4618      	mov	r0, r3
 80019b2:	f7ff ff5d 	bl	8001870 <__NVIC_SetPriority>
}
 80019b6:	bf00      	nop
 80019b8:	3718      	adds	r7, #24
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}

080019be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019be:	b580      	push	{r7, lr}
 80019c0:	b082      	sub	sp, #8
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	4603      	mov	r3, r0
 80019c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019cc:	4618      	mov	r0, r3
 80019ce:	f7ff ff31 	bl	8001834 <__NVIC_EnableIRQ>
}
 80019d2:	bf00      	nop
 80019d4:	3708      	adds	r7, #8
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}

080019da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019da:	b580      	push	{r7, lr}
 80019dc:	b082      	sub	sp, #8
 80019de:	af00      	add	r7, sp, #0
 80019e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019e2:	6878      	ldr	r0, [r7, #4]
 80019e4:	f7ff ffa2 	bl	800192c <SysTick_Config>
 80019e8:	4603      	mov	r3, r0
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	3708      	adds	r7, #8
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
	...

080019f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b089      	sub	sp, #36	; 0x24
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
 80019fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80019fe:	2300      	movs	r3, #0
 8001a00:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001a02:	2300      	movs	r3, #0
 8001a04:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001a06:	2300      	movs	r3, #0
 8001a08:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001a0e:	2300      	movs	r3, #0
 8001a10:	61fb      	str	r3, [r7, #28]
 8001a12:	e175      	b.n	8001d00 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001a14:	2201      	movs	r2, #1
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	697a      	ldr	r2, [r7, #20]
 8001a24:	4013      	ands	r3, r2
 8001a26:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a28:	693a      	ldr	r2, [r7, #16]
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	f040 8164 	bne.w	8001cfa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	2b01      	cmp	r3, #1
 8001a38:	d00b      	beq.n	8001a52 <HAL_GPIO_Init+0x5e>
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	2b02      	cmp	r3, #2
 8001a40:	d007      	beq.n	8001a52 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a46:	2b11      	cmp	r3, #17
 8001a48:	d003      	beq.n	8001a52 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	2b12      	cmp	r3, #18
 8001a50:	d130      	bne.n	8001ab4 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	689b      	ldr	r3, [r3, #8]
 8001a56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001a58:	69fb      	ldr	r3, [r7, #28]
 8001a5a:	005b      	lsls	r3, r3, #1
 8001a5c:	2203      	movs	r2, #3
 8001a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a62:	43db      	mvns	r3, r3
 8001a64:	69ba      	ldr	r2, [r7, #24]
 8001a66:	4013      	ands	r3, r2
 8001a68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	68da      	ldr	r2, [r3, #12]
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	005b      	lsls	r3, r3, #1
 8001a72:	fa02 f303 	lsl.w	r3, r2, r3
 8001a76:	69ba      	ldr	r2, [r7, #24]
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	69ba      	ldr	r2, [r7, #24]
 8001a80:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a88:	2201      	movs	r2, #1
 8001a8a:	69fb      	ldr	r3, [r7, #28]
 8001a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a90:	43db      	mvns	r3, r3
 8001a92:	69ba      	ldr	r2, [r7, #24]
 8001a94:	4013      	ands	r3, r2
 8001a96:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	091b      	lsrs	r3, r3, #4
 8001a9e:	f003 0201 	and.w	r2, r3, #1
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa8:	69ba      	ldr	r2, [r7, #24]
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	69ba      	ldr	r2, [r7, #24]
 8001ab2:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	68db      	ldr	r3, [r3, #12]
 8001ab8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001aba:	69fb      	ldr	r3, [r7, #28]
 8001abc:	005b      	lsls	r3, r3, #1
 8001abe:	2203      	movs	r2, #3
 8001ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac4:	43db      	mvns	r3, r3
 8001ac6:	69ba      	ldr	r2, [r7, #24]
 8001ac8:	4013      	ands	r3, r2
 8001aca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	689a      	ldr	r2, [r3, #8]
 8001ad0:	69fb      	ldr	r3, [r7, #28]
 8001ad2:	005b      	lsls	r3, r3, #1
 8001ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad8:	69ba      	ldr	r2, [r7, #24]
 8001ada:	4313      	orrs	r3, r2
 8001adc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	69ba      	ldr	r2, [r7, #24]
 8001ae2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	2b02      	cmp	r3, #2
 8001aea:	d003      	beq.n	8001af4 <HAL_GPIO_Init+0x100>
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	2b12      	cmp	r3, #18
 8001af2:	d123      	bne.n	8001b3c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001af4:	69fb      	ldr	r3, [r7, #28]
 8001af6:	08da      	lsrs	r2, r3, #3
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	3208      	adds	r2, #8
 8001afc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	f003 0307 	and.w	r3, r3, #7
 8001b08:	009b      	lsls	r3, r3, #2
 8001b0a:	220f      	movs	r2, #15
 8001b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b10:	43db      	mvns	r3, r3
 8001b12:	69ba      	ldr	r2, [r7, #24]
 8001b14:	4013      	ands	r3, r2
 8001b16:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	691a      	ldr	r2, [r3, #16]
 8001b1c:	69fb      	ldr	r3, [r7, #28]
 8001b1e:	f003 0307 	and.w	r3, r3, #7
 8001b22:	009b      	lsls	r3, r3, #2
 8001b24:	fa02 f303 	lsl.w	r3, r2, r3
 8001b28:	69ba      	ldr	r2, [r7, #24]
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001b2e:	69fb      	ldr	r3, [r7, #28]
 8001b30:	08da      	lsrs	r2, r3, #3
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	3208      	adds	r2, #8
 8001b36:	69b9      	ldr	r1, [r7, #24]
 8001b38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	005b      	lsls	r3, r3, #1
 8001b46:	2203      	movs	r2, #3
 8001b48:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4c:	43db      	mvns	r3, r3
 8001b4e:	69ba      	ldr	r2, [r7, #24]
 8001b50:	4013      	ands	r3, r2
 8001b52:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	f003 0203 	and.w	r2, r3, #3
 8001b5c:	69fb      	ldr	r3, [r7, #28]
 8001b5e:	005b      	lsls	r3, r3, #1
 8001b60:	fa02 f303 	lsl.w	r3, r2, r3
 8001b64:	69ba      	ldr	r2, [r7, #24]
 8001b66:	4313      	orrs	r3, r2
 8001b68:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	69ba      	ldr	r2, [r7, #24]
 8001b6e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	f000 80be 	beq.w	8001cfa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b7e:	4b66      	ldr	r3, [pc, #408]	; (8001d18 <HAL_GPIO_Init+0x324>)
 8001b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b82:	4a65      	ldr	r2, [pc, #404]	; (8001d18 <HAL_GPIO_Init+0x324>)
 8001b84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b88:	6453      	str	r3, [r2, #68]	; 0x44
 8001b8a:	4b63      	ldr	r3, [pc, #396]	; (8001d18 <HAL_GPIO_Init+0x324>)
 8001b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b92:	60fb      	str	r3, [r7, #12]
 8001b94:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001b96:	4a61      	ldr	r2, [pc, #388]	; (8001d1c <HAL_GPIO_Init+0x328>)
 8001b98:	69fb      	ldr	r3, [r7, #28]
 8001b9a:	089b      	lsrs	r3, r3, #2
 8001b9c:	3302      	adds	r3, #2
 8001b9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ba2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001ba4:	69fb      	ldr	r3, [r7, #28]
 8001ba6:	f003 0303 	and.w	r3, r3, #3
 8001baa:	009b      	lsls	r3, r3, #2
 8001bac:	220f      	movs	r2, #15
 8001bae:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb2:	43db      	mvns	r3, r3
 8001bb4:	69ba      	ldr	r2, [r7, #24]
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	4a58      	ldr	r2, [pc, #352]	; (8001d20 <HAL_GPIO_Init+0x32c>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d037      	beq.n	8001c32 <HAL_GPIO_Init+0x23e>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	4a57      	ldr	r2, [pc, #348]	; (8001d24 <HAL_GPIO_Init+0x330>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d031      	beq.n	8001c2e <HAL_GPIO_Init+0x23a>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	4a56      	ldr	r2, [pc, #344]	; (8001d28 <HAL_GPIO_Init+0x334>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d02b      	beq.n	8001c2a <HAL_GPIO_Init+0x236>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	4a55      	ldr	r2, [pc, #340]	; (8001d2c <HAL_GPIO_Init+0x338>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d025      	beq.n	8001c26 <HAL_GPIO_Init+0x232>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	4a54      	ldr	r2, [pc, #336]	; (8001d30 <HAL_GPIO_Init+0x33c>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d01f      	beq.n	8001c22 <HAL_GPIO_Init+0x22e>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	4a53      	ldr	r2, [pc, #332]	; (8001d34 <HAL_GPIO_Init+0x340>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d019      	beq.n	8001c1e <HAL_GPIO_Init+0x22a>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	4a52      	ldr	r2, [pc, #328]	; (8001d38 <HAL_GPIO_Init+0x344>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d013      	beq.n	8001c1a <HAL_GPIO_Init+0x226>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	4a51      	ldr	r2, [pc, #324]	; (8001d3c <HAL_GPIO_Init+0x348>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d00d      	beq.n	8001c16 <HAL_GPIO_Init+0x222>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4a50      	ldr	r2, [pc, #320]	; (8001d40 <HAL_GPIO_Init+0x34c>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d007      	beq.n	8001c12 <HAL_GPIO_Init+0x21e>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	4a4f      	ldr	r2, [pc, #316]	; (8001d44 <HAL_GPIO_Init+0x350>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d101      	bne.n	8001c0e <HAL_GPIO_Init+0x21a>
 8001c0a:	2309      	movs	r3, #9
 8001c0c:	e012      	b.n	8001c34 <HAL_GPIO_Init+0x240>
 8001c0e:	230a      	movs	r3, #10
 8001c10:	e010      	b.n	8001c34 <HAL_GPIO_Init+0x240>
 8001c12:	2308      	movs	r3, #8
 8001c14:	e00e      	b.n	8001c34 <HAL_GPIO_Init+0x240>
 8001c16:	2307      	movs	r3, #7
 8001c18:	e00c      	b.n	8001c34 <HAL_GPIO_Init+0x240>
 8001c1a:	2306      	movs	r3, #6
 8001c1c:	e00a      	b.n	8001c34 <HAL_GPIO_Init+0x240>
 8001c1e:	2305      	movs	r3, #5
 8001c20:	e008      	b.n	8001c34 <HAL_GPIO_Init+0x240>
 8001c22:	2304      	movs	r3, #4
 8001c24:	e006      	b.n	8001c34 <HAL_GPIO_Init+0x240>
 8001c26:	2303      	movs	r3, #3
 8001c28:	e004      	b.n	8001c34 <HAL_GPIO_Init+0x240>
 8001c2a:	2302      	movs	r3, #2
 8001c2c:	e002      	b.n	8001c34 <HAL_GPIO_Init+0x240>
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e000      	b.n	8001c34 <HAL_GPIO_Init+0x240>
 8001c32:	2300      	movs	r3, #0
 8001c34:	69fa      	ldr	r2, [r7, #28]
 8001c36:	f002 0203 	and.w	r2, r2, #3
 8001c3a:	0092      	lsls	r2, r2, #2
 8001c3c:	4093      	lsls	r3, r2
 8001c3e:	69ba      	ldr	r2, [r7, #24]
 8001c40:	4313      	orrs	r3, r2
 8001c42:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001c44:	4935      	ldr	r1, [pc, #212]	; (8001d1c <HAL_GPIO_Init+0x328>)
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	089b      	lsrs	r3, r3, #2
 8001c4a:	3302      	adds	r3, #2
 8001c4c:	69ba      	ldr	r2, [r7, #24]
 8001c4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c52:	4b3d      	ldr	r3, [pc, #244]	; (8001d48 <HAL_GPIO_Init+0x354>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	43db      	mvns	r3, r3
 8001c5c:	69ba      	ldr	r2, [r7, #24]
 8001c5e:	4013      	ands	r3, r2
 8001c60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d003      	beq.n	8001c76 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001c6e:	69ba      	ldr	r2, [r7, #24]
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	4313      	orrs	r3, r2
 8001c74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c76:	4a34      	ldr	r2, [pc, #208]	; (8001d48 <HAL_GPIO_Init+0x354>)
 8001c78:	69bb      	ldr	r3, [r7, #24]
 8001c7a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001c7c:	4b32      	ldr	r3, [pc, #200]	; (8001d48 <HAL_GPIO_Init+0x354>)
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	43db      	mvns	r3, r3
 8001c86:	69ba      	ldr	r2, [r7, #24]
 8001c88:	4013      	ands	r3, r2
 8001c8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d003      	beq.n	8001ca0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001c98:	69ba      	ldr	r2, [r7, #24]
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ca0:	4a29      	ldr	r2, [pc, #164]	; (8001d48 <HAL_GPIO_Init+0x354>)
 8001ca2:	69bb      	ldr	r3, [r7, #24]
 8001ca4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ca6:	4b28      	ldr	r3, [pc, #160]	; (8001d48 <HAL_GPIO_Init+0x354>)
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	43db      	mvns	r3, r3
 8001cb0:	69ba      	ldr	r2, [r7, #24]
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d003      	beq.n	8001cca <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001cc2:	69ba      	ldr	r2, [r7, #24]
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001cca:	4a1f      	ldr	r2, [pc, #124]	; (8001d48 <HAL_GPIO_Init+0x354>)
 8001ccc:	69bb      	ldr	r3, [r7, #24]
 8001cce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001cd0:	4b1d      	ldr	r3, [pc, #116]	; (8001d48 <HAL_GPIO_Init+0x354>)
 8001cd2:	68db      	ldr	r3, [r3, #12]
 8001cd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	43db      	mvns	r3, r3
 8001cda:	69ba      	ldr	r2, [r7, #24]
 8001cdc:	4013      	ands	r3, r2
 8001cde:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d003      	beq.n	8001cf4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001cec:	69ba      	ldr	r2, [r7, #24]
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001cf4:	4a14      	ldr	r2, [pc, #80]	; (8001d48 <HAL_GPIO_Init+0x354>)
 8001cf6:	69bb      	ldr	r3, [r7, #24]
 8001cf8:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001cfa:	69fb      	ldr	r3, [r7, #28]
 8001cfc:	3301      	adds	r3, #1
 8001cfe:	61fb      	str	r3, [r7, #28]
 8001d00:	69fb      	ldr	r3, [r7, #28]
 8001d02:	2b0f      	cmp	r3, #15
 8001d04:	f67f ae86 	bls.w	8001a14 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001d08:	bf00      	nop
 8001d0a:	bf00      	nop
 8001d0c:	3724      	adds	r7, #36	; 0x24
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr
 8001d16:	bf00      	nop
 8001d18:	40023800 	.word	0x40023800
 8001d1c:	40013800 	.word	0x40013800
 8001d20:	40020000 	.word	0x40020000
 8001d24:	40020400 	.word	0x40020400
 8001d28:	40020800 	.word	0x40020800
 8001d2c:	40020c00 	.word	0x40020c00
 8001d30:	40021000 	.word	0x40021000
 8001d34:	40021400 	.word	0x40021400
 8001d38:	40021800 	.word	0x40021800
 8001d3c:	40021c00 	.word	0x40021c00
 8001d40:	40022000 	.word	0x40022000
 8001d44:	40022400 	.word	0x40022400
 8001d48:	40013c00 	.word	0x40013c00

08001d4c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001d52:	2300      	movs	r3, #0
 8001d54:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001d56:	4b23      	ldr	r3, [pc, #140]	; (8001de4 <HAL_PWREx_EnableOverDrive+0x98>)
 8001d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5a:	4a22      	ldr	r2, [pc, #136]	; (8001de4 <HAL_PWREx_EnableOverDrive+0x98>)
 8001d5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d60:	6413      	str	r3, [r2, #64]	; 0x40
 8001d62:	4b20      	ldr	r3, [pc, #128]	; (8001de4 <HAL_PWREx_EnableOverDrive+0x98>)
 8001d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d6a:	603b      	str	r3, [r7, #0]
 8001d6c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001d6e:	4b1e      	ldr	r3, [pc, #120]	; (8001de8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a1d      	ldr	r2, [pc, #116]	; (8001de8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001d74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d78:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d7a:	f7ff f90b 	bl	8000f94 <HAL_GetTick>
 8001d7e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001d80:	e009      	b.n	8001d96 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001d82:	f7ff f907 	bl	8000f94 <HAL_GetTick>
 8001d86:	4602      	mov	r2, r0
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	1ad3      	subs	r3, r2, r3
 8001d8c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001d90:	d901      	bls.n	8001d96 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001d92:	2303      	movs	r3, #3
 8001d94:	e022      	b.n	8001ddc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001d96:	4b14      	ldr	r3, [pc, #80]	; (8001de8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001da2:	d1ee      	bne.n	8001d82 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001da4:	4b10      	ldr	r3, [pc, #64]	; (8001de8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a0f      	ldr	r2, [pc, #60]	; (8001de8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001daa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dae:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001db0:	f7ff f8f0 	bl	8000f94 <HAL_GetTick>
 8001db4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001db6:	e009      	b.n	8001dcc <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001db8:	f7ff f8ec 	bl	8000f94 <HAL_GetTick>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	1ad3      	subs	r3, r2, r3
 8001dc2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001dc6:	d901      	bls.n	8001dcc <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001dc8:	2303      	movs	r3, #3
 8001dca:	e007      	b.n	8001ddc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001dcc:	4b06      	ldr	r3, [pc, #24]	; (8001de8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dd4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001dd8:	d1ee      	bne.n	8001db8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001dda:	2300      	movs	r3, #0
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3708      	adds	r7, #8
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	40023800 	.word	0x40023800
 8001de8:	40007000 	.word	0x40007000

08001dec <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b086      	sub	sp, #24
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001df4:	2300      	movs	r3, #0
 8001df6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d101      	bne.n	8001e02 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e291      	b.n	8002326 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f003 0301 	and.w	r3, r3, #1
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	f000 8087 	beq.w	8001f1e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e10:	4b96      	ldr	r3, [pc, #600]	; (800206c <HAL_RCC_OscConfig+0x280>)
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	f003 030c 	and.w	r3, r3, #12
 8001e18:	2b04      	cmp	r3, #4
 8001e1a:	d00c      	beq.n	8001e36 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e1c:	4b93      	ldr	r3, [pc, #588]	; (800206c <HAL_RCC_OscConfig+0x280>)
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	f003 030c 	and.w	r3, r3, #12
 8001e24:	2b08      	cmp	r3, #8
 8001e26:	d112      	bne.n	8001e4e <HAL_RCC_OscConfig+0x62>
 8001e28:	4b90      	ldr	r3, [pc, #576]	; (800206c <HAL_RCC_OscConfig+0x280>)
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e30:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e34:	d10b      	bne.n	8001e4e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e36:	4b8d      	ldr	r3, [pc, #564]	; (800206c <HAL_RCC_OscConfig+0x280>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d06c      	beq.n	8001f1c <HAL_RCC_OscConfig+0x130>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d168      	bne.n	8001f1c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e26b      	b.n	8002326 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e56:	d106      	bne.n	8001e66 <HAL_RCC_OscConfig+0x7a>
 8001e58:	4b84      	ldr	r3, [pc, #528]	; (800206c <HAL_RCC_OscConfig+0x280>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a83      	ldr	r2, [pc, #524]	; (800206c <HAL_RCC_OscConfig+0x280>)
 8001e5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e62:	6013      	str	r3, [r2, #0]
 8001e64:	e02e      	b.n	8001ec4 <HAL_RCC_OscConfig+0xd8>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d10c      	bne.n	8001e88 <HAL_RCC_OscConfig+0x9c>
 8001e6e:	4b7f      	ldr	r3, [pc, #508]	; (800206c <HAL_RCC_OscConfig+0x280>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a7e      	ldr	r2, [pc, #504]	; (800206c <HAL_RCC_OscConfig+0x280>)
 8001e74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e78:	6013      	str	r3, [r2, #0]
 8001e7a:	4b7c      	ldr	r3, [pc, #496]	; (800206c <HAL_RCC_OscConfig+0x280>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a7b      	ldr	r2, [pc, #492]	; (800206c <HAL_RCC_OscConfig+0x280>)
 8001e80:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e84:	6013      	str	r3, [r2, #0]
 8001e86:	e01d      	b.n	8001ec4 <HAL_RCC_OscConfig+0xd8>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e90:	d10c      	bne.n	8001eac <HAL_RCC_OscConfig+0xc0>
 8001e92:	4b76      	ldr	r3, [pc, #472]	; (800206c <HAL_RCC_OscConfig+0x280>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a75      	ldr	r2, [pc, #468]	; (800206c <HAL_RCC_OscConfig+0x280>)
 8001e98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e9c:	6013      	str	r3, [r2, #0]
 8001e9e:	4b73      	ldr	r3, [pc, #460]	; (800206c <HAL_RCC_OscConfig+0x280>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a72      	ldr	r2, [pc, #456]	; (800206c <HAL_RCC_OscConfig+0x280>)
 8001ea4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ea8:	6013      	str	r3, [r2, #0]
 8001eaa:	e00b      	b.n	8001ec4 <HAL_RCC_OscConfig+0xd8>
 8001eac:	4b6f      	ldr	r3, [pc, #444]	; (800206c <HAL_RCC_OscConfig+0x280>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a6e      	ldr	r2, [pc, #440]	; (800206c <HAL_RCC_OscConfig+0x280>)
 8001eb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001eb6:	6013      	str	r3, [r2, #0]
 8001eb8:	4b6c      	ldr	r3, [pc, #432]	; (800206c <HAL_RCC_OscConfig+0x280>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a6b      	ldr	r2, [pc, #428]	; (800206c <HAL_RCC_OscConfig+0x280>)
 8001ebe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ec2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d013      	beq.n	8001ef4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ecc:	f7ff f862 	bl	8000f94 <HAL_GetTick>
 8001ed0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ed2:	e008      	b.n	8001ee6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ed4:	f7ff f85e 	bl	8000f94 <HAL_GetTick>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	2b64      	cmp	r3, #100	; 0x64
 8001ee0:	d901      	bls.n	8001ee6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	e21f      	b.n	8002326 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ee6:	4b61      	ldr	r3, [pc, #388]	; (800206c <HAL_RCC_OscConfig+0x280>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d0f0      	beq.n	8001ed4 <HAL_RCC_OscConfig+0xe8>
 8001ef2:	e014      	b.n	8001f1e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ef4:	f7ff f84e 	bl	8000f94 <HAL_GetTick>
 8001ef8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001efa:	e008      	b.n	8001f0e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001efc:	f7ff f84a 	bl	8000f94 <HAL_GetTick>
 8001f00:	4602      	mov	r2, r0
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	1ad3      	subs	r3, r2, r3
 8001f06:	2b64      	cmp	r3, #100	; 0x64
 8001f08:	d901      	bls.n	8001f0e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001f0a:	2303      	movs	r3, #3
 8001f0c:	e20b      	b.n	8002326 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f0e:	4b57      	ldr	r3, [pc, #348]	; (800206c <HAL_RCC_OscConfig+0x280>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d1f0      	bne.n	8001efc <HAL_RCC_OscConfig+0x110>
 8001f1a:	e000      	b.n	8001f1e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f003 0302 	and.w	r3, r3, #2
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d069      	beq.n	8001ffe <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f2a:	4b50      	ldr	r3, [pc, #320]	; (800206c <HAL_RCC_OscConfig+0x280>)
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	f003 030c 	and.w	r3, r3, #12
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d00b      	beq.n	8001f4e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f36:	4b4d      	ldr	r3, [pc, #308]	; (800206c <HAL_RCC_OscConfig+0x280>)
 8001f38:	689b      	ldr	r3, [r3, #8]
 8001f3a:	f003 030c 	and.w	r3, r3, #12
 8001f3e:	2b08      	cmp	r3, #8
 8001f40:	d11c      	bne.n	8001f7c <HAL_RCC_OscConfig+0x190>
 8001f42:	4b4a      	ldr	r3, [pc, #296]	; (800206c <HAL_RCC_OscConfig+0x280>)
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d116      	bne.n	8001f7c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f4e:	4b47      	ldr	r3, [pc, #284]	; (800206c <HAL_RCC_OscConfig+0x280>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f003 0302 	and.w	r3, r3, #2
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d005      	beq.n	8001f66 <HAL_RCC_OscConfig+0x17a>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	68db      	ldr	r3, [r3, #12]
 8001f5e:	2b01      	cmp	r3, #1
 8001f60:	d001      	beq.n	8001f66 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
 8001f64:	e1df      	b.n	8002326 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f66:	4b41      	ldr	r3, [pc, #260]	; (800206c <HAL_RCC_OscConfig+0x280>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	691b      	ldr	r3, [r3, #16]
 8001f72:	00db      	lsls	r3, r3, #3
 8001f74:	493d      	ldr	r1, [pc, #244]	; (800206c <HAL_RCC_OscConfig+0x280>)
 8001f76:	4313      	orrs	r3, r2
 8001f78:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f7a:	e040      	b.n	8001ffe <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d023      	beq.n	8001fcc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f84:	4b39      	ldr	r3, [pc, #228]	; (800206c <HAL_RCC_OscConfig+0x280>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a38      	ldr	r2, [pc, #224]	; (800206c <HAL_RCC_OscConfig+0x280>)
 8001f8a:	f043 0301 	orr.w	r3, r3, #1
 8001f8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f90:	f7ff f800 	bl	8000f94 <HAL_GetTick>
 8001f94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f96:	e008      	b.n	8001faa <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f98:	f7fe fffc 	bl	8000f94 <HAL_GetTick>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	1ad3      	subs	r3, r2, r3
 8001fa2:	2b02      	cmp	r3, #2
 8001fa4:	d901      	bls.n	8001faa <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001fa6:	2303      	movs	r3, #3
 8001fa8:	e1bd      	b.n	8002326 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001faa:	4b30      	ldr	r3, [pc, #192]	; (800206c <HAL_RCC_OscConfig+0x280>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f003 0302 	and.w	r3, r3, #2
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d0f0      	beq.n	8001f98 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fb6:	4b2d      	ldr	r3, [pc, #180]	; (800206c <HAL_RCC_OscConfig+0x280>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	691b      	ldr	r3, [r3, #16]
 8001fc2:	00db      	lsls	r3, r3, #3
 8001fc4:	4929      	ldr	r1, [pc, #164]	; (800206c <HAL_RCC_OscConfig+0x280>)
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	600b      	str	r3, [r1, #0]
 8001fca:	e018      	b.n	8001ffe <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fcc:	4b27      	ldr	r3, [pc, #156]	; (800206c <HAL_RCC_OscConfig+0x280>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a26      	ldr	r2, [pc, #152]	; (800206c <HAL_RCC_OscConfig+0x280>)
 8001fd2:	f023 0301 	bic.w	r3, r3, #1
 8001fd6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fd8:	f7fe ffdc 	bl	8000f94 <HAL_GetTick>
 8001fdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fde:	e008      	b.n	8001ff2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fe0:	f7fe ffd8 	bl	8000f94 <HAL_GetTick>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	1ad3      	subs	r3, r2, r3
 8001fea:	2b02      	cmp	r3, #2
 8001fec:	d901      	bls.n	8001ff2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001fee:	2303      	movs	r3, #3
 8001ff0:	e199      	b.n	8002326 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ff2:	4b1e      	ldr	r3, [pc, #120]	; (800206c <HAL_RCC_OscConfig+0x280>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 0302 	and.w	r3, r3, #2
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d1f0      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 0308 	and.w	r3, r3, #8
 8002006:	2b00      	cmp	r3, #0
 8002008:	d038      	beq.n	800207c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	695b      	ldr	r3, [r3, #20]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d019      	beq.n	8002046 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002012:	4b16      	ldr	r3, [pc, #88]	; (800206c <HAL_RCC_OscConfig+0x280>)
 8002014:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002016:	4a15      	ldr	r2, [pc, #84]	; (800206c <HAL_RCC_OscConfig+0x280>)
 8002018:	f043 0301 	orr.w	r3, r3, #1
 800201c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800201e:	f7fe ffb9 	bl	8000f94 <HAL_GetTick>
 8002022:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002024:	e008      	b.n	8002038 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002026:	f7fe ffb5 	bl	8000f94 <HAL_GetTick>
 800202a:	4602      	mov	r2, r0
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	1ad3      	subs	r3, r2, r3
 8002030:	2b02      	cmp	r3, #2
 8002032:	d901      	bls.n	8002038 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002034:	2303      	movs	r3, #3
 8002036:	e176      	b.n	8002326 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002038:	4b0c      	ldr	r3, [pc, #48]	; (800206c <HAL_RCC_OscConfig+0x280>)
 800203a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800203c:	f003 0302 	and.w	r3, r3, #2
 8002040:	2b00      	cmp	r3, #0
 8002042:	d0f0      	beq.n	8002026 <HAL_RCC_OscConfig+0x23a>
 8002044:	e01a      	b.n	800207c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002046:	4b09      	ldr	r3, [pc, #36]	; (800206c <HAL_RCC_OscConfig+0x280>)
 8002048:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800204a:	4a08      	ldr	r2, [pc, #32]	; (800206c <HAL_RCC_OscConfig+0x280>)
 800204c:	f023 0301 	bic.w	r3, r3, #1
 8002050:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002052:	f7fe ff9f 	bl	8000f94 <HAL_GetTick>
 8002056:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002058:	e00a      	b.n	8002070 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800205a:	f7fe ff9b 	bl	8000f94 <HAL_GetTick>
 800205e:	4602      	mov	r2, r0
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	1ad3      	subs	r3, r2, r3
 8002064:	2b02      	cmp	r3, #2
 8002066:	d903      	bls.n	8002070 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002068:	2303      	movs	r3, #3
 800206a:	e15c      	b.n	8002326 <HAL_RCC_OscConfig+0x53a>
 800206c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002070:	4b91      	ldr	r3, [pc, #580]	; (80022b8 <HAL_RCC_OscConfig+0x4cc>)
 8002072:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002074:	f003 0302 	and.w	r3, r3, #2
 8002078:	2b00      	cmp	r3, #0
 800207a:	d1ee      	bne.n	800205a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f003 0304 	and.w	r3, r3, #4
 8002084:	2b00      	cmp	r3, #0
 8002086:	f000 80a4 	beq.w	80021d2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800208a:	4b8b      	ldr	r3, [pc, #556]	; (80022b8 <HAL_RCC_OscConfig+0x4cc>)
 800208c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002092:	2b00      	cmp	r3, #0
 8002094:	d10d      	bne.n	80020b2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002096:	4b88      	ldr	r3, [pc, #544]	; (80022b8 <HAL_RCC_OscConfig+0x4cc>)
 8002098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209a:	4a87      	ldr	r2, [pc, #540]	; (80022b8 <HAL_RCC_OscConfig+0x4cc>)
 800209c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020a0:	6413      	str	r3, [r2, #64]	; 0x40
 80020a2:	4b85      	ldr	r3, [pc, #532]	; (80022b8 <HAL_RCC_OscConfig+0x4cc>)
 80020a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020aa:	60bb      	str	r3, [r7, #8]
 80020ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020ae:	2301      	movs	r3, #1
 80020b0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020b2:	4b82      	ldr	r3, [pc, #520]	; (80022bc <HAL_RCC_OscConfig+0x4d0>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d118      	bne.n	80020f0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80020be:	4b7f      	ldr	r3, [pc, #508]	; (80022bc <HAL_RCC_OscConfig+0x4d0>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a7e      	ldr	r2, [pc, #504]	; (80022bc <HAL_RCC_OscConfig+0x4d0>)
 80020c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020ca:	f7fe ff63 	bl	8000f94 <HAL_GetTick>
 80020ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020d0:	e008      	b.n	80020e4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020d2:	f7fe ff5f 	bl	8000f94 <HAL_GetTick>
 80020d6:	4602      	mov	r2, r0
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	1ad3      	subs	r3, r2, r3
 80020dc:	2b64      	cmp	r3, #100	; 0x64
 80020de:	d901      	bls.n	80020e4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80020e0:	2303      	movs	r3, #3
 80020e2:	e120      	b.n	8002326 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020e4:	4b75      	ldr	r3, [pc, #468]	; (80022bc <HAL_RCC_OscConfig+0x4d0>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d0f0      	beq.n	80020d2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d106      	bne.n	8002106 <HAL_RCC_OscConfig+0x31a>
 80020f8:	4b6f      	ldr	r3, [pc, #444]	; (80022b8 <HAL_RCC_OscConfig+0x4cc>)
 80020fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020fc:	4a6e      	ldr	r2, [pc, #440]	; (80022b8 <HAL_RCC_OscConfig+0x4cc>)
 80020fe:	f043 0301 	orr.w	r3, r3, #1
 8002102:	6713      	str	r3, [r2, #112]	; 0x70
 8002104:	e02d      	b.n	8002162 <HAL_RCC_OscConfig+0x376>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d10c      	bne.n	8002128 <HAL_RCC_OscConfig+0x33c>
 800210e:	4b6a      	ldr	r3, [pc, #424]	; (80022b8 <HAL_RCC_OscConfig+0x4cc>)
 8002110:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002112:	4a69      	ldr	r2, [pc, #420]	; (80022b8 <HAL_RCC_OscConfig+0x4cc>)
 8002114:	f023 0301 	bic.w	r3, r3, #1
 8002118:	6713      	str	r3, [r2, #112]	; 0x70
 800211a:	4b67      	ldr	r3, [pc, #412]	; (80022b8 <HAL_RCC_OscConfig+0x4cc>)
 800211c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800211e:	4a66      	ldr	r2, [pc, #408]	; (80022b8 <HAL_RCC_OscConfig+0x4cc>)
 8002120:	f023 0304 	bic.w	r3, r3, #4
 8002124:	6713      	str	r3, [r2, #112]	; 0x70
 8002126:	e01c      	b.n	8002162 <HAL_RCC_OscConfig+0x376>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	2b05      	cmp	r3, #5
 800212e:	d10c      	bne.n	800214a <HAL_RCC_OscConfig+0x35e>
 8002130:	4b61      	ldr	r3, [pc, #388]	; (80022b8 <HAL_RCC_OscConfig+0x4cc>)
 8002132:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002134:	4a60      	ldr	r2, [pc, #384]	; (80022b8 <HAL_RCC_OscConfig+0x4cc>)
 8002136:	f043 0304 	orr.w	r3, r3, #4
 800213a:	6713      	str	r3, [r2, #112]	; 0x70
 800213c:	4b5e      	ldr	r3, [pc, #376]	; (80022b8 <HAL_RCC_OscConfig+0x4cc>)
 800213e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002140:	4a5d      	ldr	r2, [pc, #372]	; (80022b8 <HAL_RCC_OscConfig+0x4cc>)
 8002142:	f043 0301 	orr.w	r3, r3, #1
 8002146:	6713      	str	r3, [r2, #112]	; 0x70
 8002148:	e00b      	b.n	8002162 <HAL_RCC_OscConfig+0x376>
 800214a:	4b5b      	ldr	r3, [pc, #364]	; (80022b8 <HAL_RCC_OscConfig+0x4cc>)
 800214c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800214e:	4a5a      	ldr	r2, [pc, #360]	; (80022b8 <HAL_RCC_OscConfig+0x4cc>)
 8002150:	f023 0301 	bic.w	r3, r3, #1
 8002154:	6713      	str	r3, [r2, #112]	; 0x70
 8002156:	4b58      	ldr	r3, [pc, #352]	; (80022b8 <HAL_RCC_OscConfig+0x4cc>)
 8002158:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800215a:	4a57      	ldr	r2, [pc, #348]	; (80022b8 <HAL_RCC_OscConfig+0x4cc>)
 800215c:	f023 0304 	bic.w	r3, r3, #4
 8002160:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d015      	beq.n	8002196 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800216a:	f7fe ff13 	bl	8000f94 <HAL_GetTick>
 800216e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002170:	e00a      	b.n	8002188 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002172:	f7fe ff0f 	bl	8000f94 <HAL_GetTick>
 8002176:	4602      	mov	r2, r0
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	1ad3      	subs	r3, r2, r3
 800217c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002180:	4293      	cmp	r3, r2
 8002182:	d901      	bls.n	8002188 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002184:	2303      	movs	r3, #3
 8002186:	e0ce      	b.n	8002326 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002188:	4b4b      	ldr	r3, [pc, #300]	; (80022b8 <HAL_RCC_OscConfig+0x4cc>)
 800218a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800218c:	f003 0302 	and.w	r3, r3, #2
 8002190:	2b00      	cmp	r3, #0
 8002192:	d0ee      	beq.n	8002172 <HAL_RCC_OscConfig+0x386>
 8002194:	e014      	b.n	80021c0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002196:	f7fe fefd 	bl	8000f94 <HAL_GetTick>
 800219a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800219c:	e00a      	b.n	80021b4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800219e:	f7fe fef9 	bl	8000f94 <HAL_GetTick>
 80021a2:	4602      	mov	r2, r0
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	1ad3      	subs	r3, r2, r3
 80021a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d901      	bls.n	80021b4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80021b0:	2303      	movs	r3, #3
 80021b2:	e0b8      	b.n	8002326 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021b4:	4b40      	ldr	r3, [pc, #256]	; (80022b8 <HAL_RCC_OscConfig+0x4cc>)
 80021b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021b8:	f003 0302 	and.w	r3, r3, #2
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d1ee      	bne.n	800219e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80021c0:	7dfb      	ldrb	r3, [r7, #23]
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	d105      	bne.n	80021d2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021c6:	4b3c      	ldr	r3, [pc, #240]	; (80022b8 <HAL_RCC_OscConfig+0x4cc>)
 80021c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ca:	4a3b      	ldr	r2, [pc, #236]	; (80022b8 <HAL_RCC_OscConfig+0x4cc>)
 80021cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021d0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	699b      	ldr	r3, [r3, #24]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	f000 80a4 	beq.w	8002324 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021dc:	4b36      	ldr	r3, [pc, #216]	; (80022b8 <HAL_RCC_OscConfig+0x4cc>)
 80021de:	689b      	ldr	r3, [r3, #8]
 80021e0:	f003 030c 	and.w	r3, r3, #12
 80021e4:	2b08      	cmp	r3, #8
 80021e6:	d06b      	beq.n	80022c0 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	699b      	ldr	r3, [r3, #24]
 80021ec:	2b02      	cmp	r3, #2
 80021ee:	d149      	bne.n	8002284 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021f0:	4b31      	ldr	r3, [pc, #196]	; (80022b8 <HAL_RCC_OscConfig+0x4cc>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a30      	ldr	r2, [pc, #192]	; (80022b8 <HAL_RCC_OscConfig+0x4cc>)
 80021f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021fc:	f7fe feca 	bl	8000f94 <HAL_GetTick>
 8002200:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002202:	e008      	b.n	8002216 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002204:	f7fe fec6 	bl	8000f94 <HAL_GetTick>
 8002208:	4602      	mov	r2, r0
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	1ad3      	subs	r3, r2, r3
 800220e:	2b02      	cmp	r3, #2
 8002210:	d901      	bls.n	8002216 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002212:	2303      	movs	r3, #3
 8002214:	e087      	b.n	8002326 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002216:	4b28      	ldr	r3, [pc, #160]	; (80022b8 <HAL_RCC_OscConfig+0x4cc>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800221e:	2b00      	cmp	r3, #0
 8002220:	d1f0      	bne.n	8002204 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	69da      	ldr	r2, [r3, #28]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6a1b      	ldr	r3, [r3, #32]
 800222a:	431a      	orrs	r2, r3
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002230:	019b      	lsls	r3, r3, #6
 8002232:	431a      	orrs	r2, r3
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002238:	085b      	lsrs	r3, r3, #1
 800223a:	3b01      	subs	r3, #1
 800223c:	041b      	lsls	r3, r3, #16
 800223e:	431a      	orrs	r2, r3
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002244:	061b      	lsls	r3, r3, #24
 8002246:	4313      	orrs	r3, r2
 8002248:	4a1b      	ldr	r2, [pc, #108]	; (80022b8 <HAL_RCC_OscConfig+0x4cc>)
 800224a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800224e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002250:	4b19      	ldr	r3, [pc, #100]	; (80022b8 <HAL_RCC_OscConfig+0x4cc>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a18      	ldr	r2, [pc, #96]	; (80022b8 <HAL_RCC_OscConfig+0x4cc>)
 8002256:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800225a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800225c:	f7fe fe9a 	bl	8000f94 <HAL_GetTick>
 8002260:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002262:	e008      	b.n	8002276 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002264:	f7fe fe96 	bl	8000f94 <HAL_GetTick>
 8002268:	4602      	mov	r2, r0
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	1ad3      	subs	r3, r2, r3
 800226e:	2b02      	cmp	r3, #2
 8002270:	d901      	bls.n	8002276 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002272:	2303      	movs	r3, #3
 8002274:	e057      	b.n	8002326 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002276:	4b10      	ldr	r3, [pc, #64]	; (80022b8 <HAL_RCC_OscConfig+0x4cc>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800227e:	2b00      	cmp	r3, #0
 8002280:	d0f0      	beq.n	8002264 <HAL_RCC_OscConfig+0x478>
 8002282:	e04f      	b.n	8002324 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002284:	4b0c      	ldr	r3, [pc, #48]	; (80022b8 <HAL_RCC_OscConfig+0x4cc>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a0b      	ldr	r2, [pc, #44]	; (80022b8 <HAL_RCC_OscConfig+0x4cc>)
 800228a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800228e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002290:	f7fe fe80 	bl	8000f94 <HAL_GetTick>
 8002294:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002296:	e008      	b.n	80022aa <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002298:	f7fe fe7c 	bl	8000f94 <HAL_GetTick>
 800229c:	4602      	mov	r2, r0
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	1ad3      	subs	r3, r2, r3
 80022a2:	2b02      	cmp	r3, #2
 80022a4:	d901      	bls.n	80022aa <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80022a6:	2303      	movs	r3, #3
 80022a8:	e03d      	b.n	8002326 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022aa:	4b03      	ldr	r3, [pc, #12]	; (80022b8 <HAL_RCC_OscConfig+0x4cc>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d1f0      	bne.n	8002298 <HAL_RCC_OscConfig+0x4ac>
 80022b6:	e035      	b.n	8002324 <HAL_RCC_OscConfig+0x538>
 80022b8:	40023800 	.word	0x40023800
 80022bc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80022c0:	4b1b      	ldr	r3, [pc, #108]	; (8002330 <HAL_RCC_OscConfig+0x544>)
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	699b      	ldr	r3, [r3, #24]
 80022ca:	2b01      	cmp	r3, #1
 80022cc:	d028      	beq.n	8002320 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022d8:	429a      	cmp	r2, r3
 80022da:	d121      	bne.n	8002320 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022e6:	429a      	cmp	r2, r3
 80022e8:	d11a      	bne.n	8002320 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80022ea:	68fa      	ldr	r2, [r7, #12]
 80022ec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80022f0:	4013      	ands	r3, r2
 80022f2:	687a      	ldr	r2, [r7, #4]
 80022f4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80022f6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d111      	bne.n	8002320 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002306:	085b      	lsrs	r3, r3, #1
 8002308:	3b01      	subs	r3, #1
 800230a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800230c:	429a      	cmp	r2, r3
 800230e:	d107      	bne.n	8002320 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800231a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800231c:	429a      	cmp	r2, r3
 800231e:	d001      	beq.n	8002324 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	e000      	b.n	8002326 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002324:	2300      	movs	r3, #0
}
 8002326:	4618      	mov	r0, r3
 8002328:	3718      	adds	r7, #24
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	40023800 	.word	0x40023800

08002334 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b084      	sub	sp, #16
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
 800233c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800233e:	2300      	movs	r3, #0
 8002340:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d101      	bne.n	800234c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002348:	2301      	movs	r3, #1
 800234a:	e0d0      	b.n	80024ee <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800234c:	4b6a      	ldr	r3, [pc, #424]	; (80024f8 <HAL_RCC_ClockConfig+0x1c4>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f003 030f 	and.w	r3, r3, #15
 8002354:	683a      	ldr	r2, [r7, #0]
 8002356:	429a      	cmp	r2, r3
 8002358:	d910      	bls.n	800237c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800235a:	4b67      	ldr	r3, [pc, #412]	; (80024f8 <HAL_RCC_ClockConfig+0x1c4>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f023 020f 	bic.w	r2, r3, #15
 8002362:	4965      	ldr	r1, [pc, #404]	; (80024f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	4313      	orrs	r3, r2
 8002368:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800236a:	4b63      	ldr	r3, [pc, #396]	; (80024f8 <HAL_RCC_ClockConfig+0x1c4>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 030f 	and.w	r3, r3, #15
 8002372:	683a      	ldr	r2, [r7, #0]
 8002374:	429a      	cmp	r2, r3
 8002376:	d001      	beq.n	800237c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	e0b8      	b.n	80024ee <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f003 0302 	and.w	r3, r3, #2
 8002384:	2b00      	cmp	r3, #0
 8002386:	d020      	beq.n	80023ca <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f003 0304 	and.w	r3, r3, #4
 8002390:	2b00      	cmp	r3, #0
 8002392:	d005      	beq.n	80023a0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002394:	4b59      	ldr	r3, [pc, #356]	; (80024fc <HAL_RCC_ClockConfig+0x1c8>)
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	4a58      	ldr	r2, [pc, #352]	; (80024fc <HAL_RCC_ClockConfig+0x1c8>)
 800239a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800239e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 0308 	and.w	r3, r3, #8
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d005      	beq.n	80023b8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023ac:	4b53      	ldr	r3, [pc, #332]	; (80024fc <HAL_RCC_ClockConfig+0x1c8>)
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	4a52      	ldr	r2, [pc, #328]	; (80024fc <HAL_RCC_ClockConfig+0x1c8>)
 80023b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80023b6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023b8:	4b50      	ldr	r3, [pc, #320]	; (80024fc <HAL_RCC_ClockConfig+0x1c8>)
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	494d      	ldr	r1, [pc, #308]	; (80024fc <HAL_RCC_ClockConfig+0x1c8>)
 80023c6:	4313      	orrs	r3, r2
 80023c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 0301 	and.w	r3, r3, #1
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d040      	beq.n	8002458 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	2b01      	cmp	r3, #1
 80023dc:	d107      	bne.n	80023ee <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023de:	4b47      	ldr	r3, [pc, #284]	; (80024fc <HAL_RCC_ClockConfig+0x1c8>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d115      	bne.n	8002416 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e07f      	b.n	80024ee <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	2b02      	cmp	r3, #2
 80023f4:	d107      	bne.n	8002406 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023f6:	4b41      	ldr	r3, [pc, #260]	; (80024fc <HAL_RCC_ClockConfig+0x1c8>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d109      	bne.n	8002416 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	e073      	b.n	80024ee <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002406:	4b3d      	ldr	r3, [pc, #244]	; (80024fc <HAL_RCC_ClockConfig+0x1c8>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 0302 	and.w	r3, r3, #2
 800240e:	2b00      	cmp	r3, #0
 8002410:	d101      	bne.n	8002416 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	e06b      	b.n	80024ee <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002416:	4b39      	ldr	r3, [pc, #228]	; (80024fc <HAL_RCC_ClockConfig+0x1c8>)
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	f023 0203 	bic.w	r2, r3, #3
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	4936      	ldr	r1, [pc, #216]	; (80024fc <HAL_RCC_ClockConfig+0x1c8>)
 8002424:	4313      	orrs	r3, r2
 8002426:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002428:	f7fe fdb4 	bl	8000f94 <HAL_GetTick>
 800242c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800242e:	e00a      	b.n	8002446 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002430:	f7fe fdb0 	bl	8000f94 <HAL_GetTick>
 8002434:	4602      	mov	r2, r0
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	1ad3      	subs	r3, r2, r3
 800243a:	f241 3288 	movw	r2, #5000	; 0x1388
 800243e:	4293      	cmp	r3, r2
 8002440:	d901      	bls.n	8002446 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002442:	2303      	movs	r3, #3
 8002444:	e053      	b.n	80024ee <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002446:	4b2d      	ldr	r3, [pc, #180]	; (80024fc <HAL_RCC_ClockConfig+0x1c8>)
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	f003 020c 	and.w	r2, r3, #12
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	009b      	lsls	r3, r3, #2
 8002454:	429a      	cmp	r2, r3
 8002456:	d1eb      	bne.n	8002430 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002458:	4b27      	ldr	r3, [pc, #156]	; (80024f8 <HAL_RCC_ClockConfig+0x1c4>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f003 030f 	and.w	r3, r3, #15
 8002460:	683a      	ldr	r2, [r7, #0]
 8002462:	429a      	cmp	r2, r3
 8002464:	d210      	bcs.n	8002488 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002466:	4b24      	ldr	r3, [pc, #144]	; (80024f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f023 020f 	bic.w	r2, r3, #15
 800246e:	4922      	ldr	r1, [pc, #136]	; (80024f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	4313      	orrs	r3, r2
 8002474:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002476:	4b20      	ldr	r3, [pc, #128]	; (80024f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 030f 	and.w	r3, r3, #15
 800247e:	683a      	ldr	r2, [r7, #0]
 8002480:	429a      	cmp	r2, r3
 8002482:	d001      	beq.n	8002488 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002484:	2301      	movs	r3, #1
 8002486:	e032      	b.n	80024ee <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 0304 	and.w	r3, r3, #4
 8002490:	2b00      	cmp	r3, #0
 8002492:	d008      	beq.n	80024a6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002494:	4b19      	ldr	r3, [pc, #100]	; (80024fc <HAL_RCC_ClockConfig+0x1c8>)
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	68db      	ldr	r3, [r3, #12]
 80024a0:	4916      	ldr	r1, [pc, #88]	; (80024fc <HAL_RCC_ClockConfig+0x1c8>)
 80024a2:	4313      	orrs	r3, r2
 80024a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 0308 	and.w	r3, r3, #8
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d009      	beq.n	80024c6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80024b2:	4b12      	ldr	r3, [pc, #72]	; (80024fc <HAL_RCC_ClockConfig+0x1c8>)
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	691b      	ldr	r3, [r3, #16]
 80024be:	00db      	lsls	r3, r3, #3
 80024c0:	490e      	ldr	r1, [pc, #56]	; (80024fc <HAL_RCC_ClockConfig+0x1c8>)
 80024c2:	4313      	orrs	r3, r2
 80024c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80024c6:	f000 f821 	bl	800250c <HAL_RCC_GetSysClockFreq>
 80024ca:	4602      	mov	r2, r0
 80024cc:	4b0b      	ldr	r3, [pc, #44]	; (80024fc <HAL_RCC_ClockConfig+0x1c8>)
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	091b      	lsrs	r3, r3, #4
 80024d2:	f003 030f 	and.w	r3, r3, #15
 80024d6:	490a      	ldr	r1, [pc, #40]	; (8002500 <HAL_RCC_ClockConfig+0x1cc>)
 80024d8:	5ccb      	ldrb	r3, [r1, r3]
 80024da:	fa22 f303 	lsr.w	r3, r2, r3
 80024de:	4a09      	ldr	r2, [pc, #36]	; (8002504 <HAL_RCC_ClockConfig+0x1d0>)
 80024e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80024e2:	4b09      	ldr	r3, [pc, #36]	; (8002508 <HAL_RCC_ClockConfig+0x1d4>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4618      	mov	r0, r3
 80024e8:	f7fe fd10 	bl	8000f0c <HAL_InitTick>

  return HAL_OK;
 80024ec:	2300      	movs	r3, #0
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	3710      	adds	r7, #16
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	40023c00 	.word	0x40023c00
 80024fc:	40023800 	.word	0x40023800
 8002500:	08008464 	.word	0x08008464
 8002504:	200001b4 	.word	0x200001b4
 8002508:	200001b8 	.word	0x200001b8

0800250c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800250c:	b5b0      	push	{r4, r5, r7, lr}
 800250e:	b084      	sub	sp, #16
 8002510:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002512:	2100      	movs	r1, #0
 8002514:	6079      	str	r1, [r7, #4]
 8002516:	2100      	movs	r1, #0
 8002518:	60f9      	str	r1, [r7, #12]
 800251a:	2100      	movs	r1, #0
 800251c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 800251e:	2100      	movs	r1, #0
 8002520:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002522:	4952      	ldr	r1, [pc, #328]	; (800266c <HAL_RCC_GetSysClockFreq+0x160>)
 8002524:	6889      	ldr	r1, [r1, #8]
 8002526:	f001 010c 	and.w	r1, r1, #12
 800252a:	2908      	cmp	r1, #8
 800252c:	d00d      	beq.n	800254a <HAL_RCC_GetSysClockFreq+0x3e>
 800252e:	2908      	cmp	r1, #8
 8002530:	f200 8094 	bhi.w	800265c <HAL_RCC_GetSysClockFreq+0x150>
 8002534:	2900      	cmp	r1, #0
 8002536:	d002      	beq.n	800253e <HAL_RCC_GetSysClockFreq+0x32>
 8002538:	2904      	cmp	r1, #4
 800253a:	d003      	beq.n	8002544 <HAL_RCC_GetSysClockFreq+0x38>
 800253c:	e08e      	b.n	800265c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800253e:	4b4c      	ldr	r3, [pc, #304]	; (8002670 <HAL_RCC_GetSysClockFreq+0x164>)
 8002540:	60bb      	str	r3, [r7, #8]
      break;
 8002542:	e08e      	b.n	8002662 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002544:	4b4b      	ldr	r3, [pc, #300]	; (8002674 <HAL_RCC_GetSysClockFreq+0x168>)
 8002546:	60bb      	str	r3, [r7, #8]
      break;
 8002548:	e08b      	b.n	8002662 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800254a:	4948      	ldr	r1, [pc, #288]	; (800266c <HAL_RCC_GetSysClockFreq+0x160>)
 800254c:	6849      	ldr	r1, [r1, #4]
 800254e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8002552:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002554:	4945      	ldr	r1, [pc, #276]	; (800266c <HAL_RCC_GetSysClockFreq+0x160>)
 8002556:	6849      	ldr	r1, [r1, #4]
 8002558:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800255c:	2900      	cmp	r1, #0
 800255e:	d024      	beq.n	80025aa <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002560:	4942      	ldr	r1, [pc, #264]	; (800266c <HAL_RCC_GetSysClockFreq+0x160>)
 8002562:	6849      	ldr	r1, [r1, #4]
 8002564:	0989      	lsrs	r1, r1, #6
 8002566:	4608      	mov	r0, r1
 8002568:	f04f 0100 	mov.w	r1, #0
 800256c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8002570:	f04f 0500 	mov.w	r5, #0
 8002574:	ea00 0204 	and.w	r2, r0, r4
 8002578:	ea01 0305 	and.w	r3, r1, r5
 800257c:	493d      	ldr	r1, [pc, #244]	; (8002674 <HAL_RCC_GetSysClockFreq+0x168>)
 800257e:	fb01 f003 	mul.w	r0, r1, r3
 8002582:	2100      	movs	r1, #0
 8002584:	fb01 f102 	mul.w	r1, r1, r2
 8002588:	1844      	adds	r4, r0, r1
 800258a:	493a      	ldr	r1, [pc, #232]	; (8002674 <HAL_RCC_GetSysClockFreq+0x168>)
 800258c:	fba2 0101 	umull	r0, r1, r2, r1
 8002590:	1863      	adds	r3, r4, r1
 8002592:	4619      	mov	r1, r3
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	461a      	mov	r2, r3
 8002598:	f04f 0300 	mov.w	r3, #0
 800259c:	f7fd fe34 	bl	8000208 <__aeabi_uldivmod>
 80025a0:	4602      	mov	r2, r0
 80025a2:	460b      	mov	r3, r1
 80025a4:	4613      	mov	r3, r2
 80025a6:	60fb      	str	r3, [r7, #12]
 80025a8:	e04a      	b.n	8002640 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025aa:	4b30      	ldr	r3, [pc, #192]	; (800266c <HAL_RCC_GetSysClockFreq+0x160>)
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	099b      	lsrs	r3, r3, #6
 80025b0:	461a      	mov	r2, r3
 80025b2:	f04f 0300 	mov.w	r3, #0
 80025b6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80025ba:	f04f 0100 	mov.w	r1, #0
 80025be:	ea02 0400 	and.w	r4, r2, r0
 80025c2:	ea03 0501 	and.w	r5, r3, r1
 80025c6:	4620      	mov	r0, r4
 80025c8:	4629      	mov	r1, r5
 80025ca:	f04f 0200 	mov.w	r2, #0
 80025ce:	f04f 0300 	mov.w	r3, #0
 80025d2:	014b      	lsls	r3, r1, #5
 80025d4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80025d8:	0142      	lsls	r2, r0, #5
 80025da:	4610      	mov	r0, r2
 80025dc:	4619      	mov	r1, r3
 80025de:	1b00      	subs	r0, r0, r4
 80025e0:	eb61 0105 	sbc.w	r1, r1, r5
 80025e4:	f04f 0200 	mov.w	r2, #0
 80025e8:	f04f 0300 	mov.w	r3, #0
 80025ec:	018b      	lsls	r3, r1, #6
 80025ee:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80025f2:	0182      	lsls	r2, r0, #6
 80025f4:	1a12      	subs	r2, r2, r0
 80025f6:	eb63 0301 	sbc.w	r3, r3, r1
 80025fa:	f04f 0000 	mov.w	r0, #0
 80025fe:	f04f 0100 	mov.w	r1, #0
 8002602:	00d9      	lsls	r1, r3, #3
 8002604:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002608:	00d0      	lsls	r0, r2, #3
 800260a:	4602      	mov	r2, r0
 800260c:	460b      	mov	r3, r1
 800260e:	1912      	adds	r2, r2, r4
 8002610:	eb45 0303 	adc.w	r3, r5, r3
 8002614:	f04f 0000 	mov.w	r0, #0
 8002618:	f04f 0100 	mov.w	r1, #0
 800261c:	0299      	lsls	r1, r3, #10
 800261e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002622:	0290      	lsls	r0, r2, #10
 8002624:	4602      	mov	r2, r0
 8002626:	460b      	mov	r3, r1
 8002628:	4610      	mov	r0, r2
 800262a:	4619      	mov	r1, r3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	461a      	mov	r2, r3
 8002630:	f04f 0300 	mov.w	r3, #0
 8002634:	f7fd fde8 	bl	8000208 <__aeabi_uldivmod>
 8002638:	4602      	mov	r2, r0
 800263a:	460b      	mov	r3, r1
 800263c:	4613      	mov	r3, r2
 800263e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002640:	4b0a      	ldr	r3, [pc, #40]	; (800266c <HAL_RCC_GetSysClockFreq+0x160>)
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	0c1b      	lsrs	r3, r3, #16
 8002646:	f003 0303 	and.w	r3, r3, #3
 800264a:	3301      	adds	r3, #1
 800264c:	005b      	lsls	r3, r3, #1
 800264e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8002650:	68fa      	ldr	r2, [r7, #12]
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	fbb2 f3f3 	udiv	r3, r2, r3
 8002658:	60bb      	str	r3, [r7, #8]
      break;
 800265a:	e002      	b.n	8002662 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800265c:	4b04      	ldr	r3, [pc, #16]	; (8002670 <HAL_RCC_GetSysClockFreq+0x164>)
 800265e:	60bb      	str	r3, [r7, #8]
      break;
 8002660:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002662:	68bb      	ldr	r3, [r7, #8]
}
 8002664:	4618      	mov	r0, r3
 8002666:	3710      	adds	r7, #16
 8002668:	46bd      	mov	sp, r7
 800266a:	bdb0      	pop	{r4, r5, r7, pc}
 800266c:	40023800 	.word	0x40023800
 8002670:	00f42400 	.word	0x00f42400
 8002674:	017d7840 	.word	0x017d7840

08002678 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002678:	b480      	push	{r7}
 800267a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800267c:	4b03      	ldr	r3, [pc, #12]	; (800268c <HAL_RCC_GetHCLKFreq+0x14>)
 800267e:	681b      	ldr	r3, [r3, #0]
}
 8002680:	4618      	mov	r0, r3
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr
 800268a:	bf00      	nop
 800268c:	200001b4 	.word	0x200001b4

08002690 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002694:	f7ff fff0 	bl	8002678 <HAL_RCC_GetHCLKFreq>
 8002698:	4602      	mov	r2, r0
 800269a:	4b05      	ldr	r3, [pc, #20]	; (80026b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	0a9b      	lsrs	r3, r3, #10
 80026a0:	f003 0307 	and.w	r3, r3, #7
 80026a4:	4903      	ldr	r1, [pc, #12]	; (80026b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80026a6:	5ccb      	ldrb	r3, [r1, r3]
 80026a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	bd80      	pop	{r7, pc}
 80026b0:	40023800 	.word	0x40023800
 80026b4:	08008474 	.word	0x08008474

080026b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80026bc:	f7ff ffdc 	bl	8002678 <HAL_RCC_GetHCLKFreq>
 80026c0:	4602      	mov	r2, r0
 80026c2:	4b05      	ldr	r3, [pc, #20]	; (80026d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	0b5b      	lsrs	r3, r3, #13
 80026c8:	f003 0307 	and.w	r3, r3, #7
 80026cc:	4903      	ldr	r1, [pc, #12]	; (80026dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80026ce:	5ccb      	ldrb	r3, [r1, r3]
 80026d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	bd80      	pop	{r7, pc}
 80026d8:	40023800 	.word	0x40023800
 80026dc:	08008474 	.word	0x08008474

080026e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b088      	sub	sp, #32
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80026e8:	2300      	movs	r3, #0
 80026ea:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80026ec:	2300      	movs	r3, #0
 80026ee:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80026f0:	2300      	movs	r3, #0
 80026f2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80026f4:	2300      	movs	r3, #0
 80026f6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80026f8:	2300      	movs	r3, #0
 80026fa:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f003 0301 	and.w	r3, r3, #1
 8002704:	2b00      	cmp	r3, #0
 8002706:	d012      	beq.n	800272e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002708:	4b69      	ldr	r3, [pc, #420]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	4a68      	ldr	r2, [pc, #416]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800270e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002712:	6093      	str	r3, [r2, #8]
 8002714:	4b66      	ldr	r3, [pc, #408]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002716:	689a      	ldr	r2, [r3, #8]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800271c:	4964      	ldr	r1, [pc, #400]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800271e:	4313      	orrs	r3, r2
 8002720:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002726:	2b00      	cmp	r3, #0
 8002728:	d101      	bne.n	800272e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800272a:	2301      	movs	r3, #1
 800272c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002736:	2b00      	cmp	r3, #0
 8002738:	d017      	beq.n	800276a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800273a:	4b5d      	ldr	r3, [pc, #372]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800273c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002740:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002748:	4959      	ldr	r1, [pc, #356]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800274a:	4313      	orrs	r3, r2
 800274c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002754:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002758:	d101      	bne.n	800275e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800275a:	2301      	movs	r3, #1
 800275c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002762:	2b00      	cmp	r3, #0
 8002764:	d101      	bne.n	800276a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002766:	2301      	movs	r3, #1
 8002768:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002772:	2b00      	cmp	r3, #0
 8002774:	d017      	beq.n	80027a6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002776:	4b4e      	ldr	r3, [pc, #312]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002778:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800277c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002784:	494a      	ldr	r1, [pc, #296]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002786:	4313      	orrs	r3, r2
 8002788:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002790:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002794:	d101      	bne.n	800279a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002796:	2301      	movs	r3, #1
 8002798:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d101      	bne.n	80027a6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80027a2:	2301      	movs	r3, #1
 80027a4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d001      	beq.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80027b2:	2301      	movs	r3, #1
 80027b4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 0320 	and.w	r3, r3, #32
 80027be:	2b00      	cmp	r3, #0
 80027c0:	f000 808b 	beq.w	80028da <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80027c4:	4b3a      	ldr	r3, [pc, #232]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c8:	4a39      	ldr	r2, [pc, #228]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027ce:	6413      	str	r3, [r2, #64]	; 0x40
 80027d0:	4b37      	ldr	r3, [pc, #220]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027d8:	60bb      	str	r3, [r7, #8]
 80027da:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80027dc:	4b35      	ldr	r3, [pc, #212]	; (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a34      	ldr	r2, [pc, #208]	; (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80027e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027e8:	f7fe fbd4 	bl	8000f94 <HAL_GetTick>
 80027ec:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80027ee:	e008      	b.n	8002802 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027f0:	f7fe fbd0 	bl	8000f94 <HAL_GetTick>
 80027f4:	4602      	mov	r2, r0
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	1ad3      	subs	r3, r2, r3
 80027fa:	2b64      	cmp	r3, #100	; 0x64
 80027fc:	d901      	bls.n	8002802 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80027fe:	2303      	movs	r3, #3
 8002800:	e357      	b.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002802:	4b2c      	ldr	r3, [pc, #176]	; (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800280a:	2b00      	cmp	r3, #0
 800280c:	d0f0      	beq.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800280e:	4b28      	ldr	r3, [pc, #160]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002810:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002812:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002816:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d035      	beq.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002822:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002826:	693a      	ldr	r2, [r7, #16]
 8002828:	429a      	cmp	r2, r3
 800282a:	d02e      	beq.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800282c:	4b20      	ldr	r3, [pc, #128]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800282e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002830:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002834:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002836:	4b1e      	ldr	r3, [pc, #120]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002838:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800283a:	4a1d      	ldr	r2, [pc, #116]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800283c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002840:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002842:	4b1b      	ldr	r3, [pc, #108]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002844:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002846:	4a1a      	ldr	r2, [pc, #104]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002848:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800284c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800284e:	4a18      	ldr	r2, [pc, #96]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002854:	4b16      	ldr	r3, [pc, #88]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002856:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002858:	f003 0301 	and.w	r3, r3, #1
 800285c:	2b01      	cmp	r3, #1
 800285e:	d114      	bne.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002860:	f7fe fb98 	bl	8000f94 <HAL_GetTick>
 8002864:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002866:	e00a      	b.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002868:	f7fe fb94 	bl	8000f94 <HAL_GetTick>
 800286c:	4602      	mov	r2, r0
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	1ad3      	subs	r3, r2, r3
 8002872:	f241 3288 	movw	r2, #5000	; 0x1388
 8002876:	4293      	cmp	r3, r2
 8002878:	d901      	bls.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800287a:	2303      	movs	r3, #3
 800287c:	e319      	b.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800287e:	4b0c      	ldr	r3, [pc, #48]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002880:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002882:	f003 0302 	and.w	r3, r3, #2
 8002886:	2b00      	cmp	r3, #0
 8002888:	d0ee      	beq.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800288e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002892:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002896:	d111      	bne.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002898:	4b05      	ldr	r3, [pc, #20]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80028a4:	4b04      	ldr	r3, [pc, #16]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80028a6:	400b      	ands	r3, r1
 80028a8:	4901      	ldr	r1, [pc, #4]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028aa:	4313      	orrs	r3, r2
 80028ac:	608b      	str	r3, [r1, #8]
 80028ae:	e00b      	b.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80028b0:	40023800 	.word	0x40023800
 80028b4:	40007000 	.word	0x40007000
 80028b8:	0ffffcff 	.word	0x0ffffcff
 80028bc:	4bb1      	ldr	r3, [pc, #708]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	4ab0      	ldr	r2, [pc, #704]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80028c2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80028c6:	6093      	str	r3, [r2, #8]
 80028c8:	4bae      	ldr	r3, [pc, #696]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80028ca:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028d4:	49ab      	ldr	r1, [pc, #684]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80028d6:	4313      	orrs	r3, r2
 80028d8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 0310 	and.w	r3, r3, #16
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d010      	beq.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80028e6:	4ba7      	ldr	r3, [pc, #668]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80028e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80028ec:	4aa5      	ldr	r2, [pc, #660]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80028ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80028f2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80028f6:	4ba3      	ldr	r3, [pc, #652]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80028f8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002900:	49a0      	ldr	r1, [pc, #640]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002902:	4313      	orrs	r3, r2
 8002904:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002910:	2b00      	cmp	r3, #0
 8002912:	d00a      	beq.n	800292a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002914:	4b9b      	ldr	r3, [pc, #620]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002916:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800291a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002922:	4998      	ldr	r1, [pc, #608]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002924:	4313      	orrs	r3, r2
 8002926:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002932:	2b00      	cmp	r3, #0
 8002934:	d00a      	beq.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002936:	4b93      	ldr	r3, [pc, #588]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002938:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800293c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002944:	498f      	ldr	r1, [pc, #572]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002946:	4313      	orrs	r3, r2
 8002948:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002954:	2b00      	cmp	r3, #0
 8002956:	d00a      	beq.n	800296e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002958:	4b8a      	ldr	r3, [pc, #552]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800295a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800295e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002966:	4987      	ldr	r1, [pc, #540]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002968:	4313      	orrs	r3, r2
 800296a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002976:	2b00      	cmp	r3, #0
 8002978:	d00a      	beq.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800297a:	4b82      	ldr	r3, [pc, #520]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800297c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002980:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002988:	497e      	ldr	r1, [pc, #504]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800298a:	4313      	orrs	r3, r2
 800298c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002998:	2b00      	cmp	r3, #0
 800299a:	d00a      	beq.n	80029b2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800299c:	4b79      	ldr	r3, [pc, #484]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800299e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029a2:	f023 0203 	bic.w	r2, r3, #3
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029aa:	4976      	ldr	r1, [pc, #472]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80029ac:	4313      	orrs	r3, r2
 80029ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d00a      	beq.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80029be:	4b71      	ldr	r3, [pc, #452]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80029c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029c4:	f023 020c 	bic.w	r2, r3, #12
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029cc:	496d      	ldr	r1, [pc, #436]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80029ce:	4313      	orrs	r3, r2
 80029d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d00a      	beq.n	80029f6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80029e0:	4b68      	ldr	r3, [pc, #416]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80029e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029e6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029ee:	4965      	ldr	r1, [pc, #404]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80029f0:	4313      	orrs	r3, r2
 80029f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d00a      	beq.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002a02:	4b60      	ldr	r3, [pc, #384]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002a04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a08:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a10:	495c      	ldr	r1, [pc, #368]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002a12:	4313      	orrs	r3, r2
 8002a14:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d00a      	beq.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002a24:	4b57      	ldr	r3, [pc, #348]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002a26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a2a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a32:	4954      	ldr	r1, [pc, #336]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002a34:	4313      	orrs	r3, r2
 8002a36:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d00a      	beq.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002a46:	4b4f      	ldr	r3, [pc, #316]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002a48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a4c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a54:	494b      	ldr	r1, [pc, #300]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002a56:	4313      	orrs	r3, r2
 8002a58:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d00a      	beq.n	8002a7e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002a68:	4b46      	ldr	r3, [pc, #280]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002a6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a6e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a76:	4943      	ldr	r1, [pc, #268]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d00a      	beq.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002a8a:	4b3e      	ldr	r3, [pc, #248]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002a8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a90:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a98:	493a      	ldr	r1, [pc, #232]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d00a      	beq.n	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002aac:	4b35      	ldr	r3, [pc, #212]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002aae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ab2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002aba:	4932      	ldr	r1, [pc, #200]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002abc:	4313      	orrs	r3, r2
 8002abe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d011      	beq.n	8002af2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002ace:	4b2d      	ldr	r3, [pc, #180]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002ad0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ad4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002adc:	4929      	ldr	r1, [pc, #164]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ae8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002aec:	d101      	bne.n	8002af2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002aee:	2301      	movs	r3, #1
 8002af0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 0308 	and.w	r3, r3, #8
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d001      	beq.n	8002b02 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002afe:	2301      	movs	r3, #1
 8002b00:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d00a      	beq.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002b0e:	4b1d      	ldr	r3, [pc, #116]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002b10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b14:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b1c:	4919      	ldr	r1, [pc, #100]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d00b      	beq.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002b30:	4b14      	ldr	r3, [pc, #80]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002b32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b36:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b40:	4910      	ldr	r1, [pc, #64]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002b42:	4313      	orrs	r3, r2
 8002b44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002b48:	69fb      	ldr	r3, [r7, #28]
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	d006      	beq.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	f000 80d9 	beq.w	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002b5c:	4b09      	ldr	r3, [pc, #36]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a08      	ldr	r2, [pc, #32]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002b62:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002b66:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b68:	f7fe fa14 	bl	8000f94 <HAL_GetTick>
 8002b6c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002b6e:	e00b      	b.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002b70:	f7fe fa10 	bl	8000f94 <HAL_GetTick>
 8002b74:	4602      	mov	r2, r0
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	1ad3      	subs	r3, r2, r3
 8002b7a:	2b64      	cmp	r3, #100	; 0x64
 8002b7c:	d904      	bls.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002b7e:	2303      	movs	r3, #3
 8002b80:	e197      	b.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8002b82:	bf00      	nop
 8002b84:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002b88:	4b6c      	ldr	r3, [pc, #432]	; (8002d3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d1ed      	bne.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 0301 	and.w	r3, r3, #1
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d021      	beq.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d11d      	bne.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002ba8:	4b64      	ldr	r3, [pc, #400]	; (8002d3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002baa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002bae:	0c1b      	lsrs	r3, r3, #16
 8002bb0:	f003 0303 	and.w	r3, r3, #3
 8002bb4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002bb6:	4b61      	ldr	r3, [pc, #388]	; (8002d3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002bb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002bbc:	0e1b      	lsrs	r3, r3, #24
 8002bbe:	f003 030f 	and.w	r3, r3, #15
 8002bc2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	019a      	lsls	r2, r3, #6
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	041b      	lsls	r3, r3, #16
 8002bce:	431a      	orrs	r2, r3
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	061b      	lsls	r3, r3, #24
 8002bd4:	431a      	orrs	r2, r3
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	071b      	lsls	r3, r3, #28
 8002bdc:	4957      	ldr	r1, [pc, #348]	; (8002d3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002bde:	4313      	orrs	r3, r2
 8002be0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d004      	beq.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bf4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002bf8:	d00a      	beq.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d02e      	beq.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c0e:	d129      	bne.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002c10:	4b4a      	ldr	r3, [pc, #296]	; (8002d3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c16:	0c1b      	lsrs	r3, r3, #16
 8002c18:	f003 0303 	and.w	r3, r3, #3
 8002c1c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002c1e:	4b47      	ldr	r3, [pc, #284]	; (8002d3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c24:	0f1b      	lsrs	r3, r3, #28
 8002c26:	f003 0307 	and.w	r3, r3, #7
 8002c2a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	019a      	lsls	r2, r3, #6
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	041b      	lsls	r3, r3, #16
 8002c36:	431a      	orrs	r2, r3
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	68db      	ldr	r3, [r3, #12]
 8002c3c:	061b      	lsls	r3, r3, #24
 8002c3e:	431a      	orrs	r2, r3
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	071b      	lsls	r3, r3, #28
 8002c44:	493d      	ldr	r1, [pc, #244]	; (8002d3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c46:	4313      	orrs	r3, r2
 8002c48:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002c4c:	4b3b      	ldr	r3, [pc, #236]	; (8002d3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c52:	f023 021f 	bic.w	r2, r3, #31
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c5a:	3b01      	subs	r3, #1
 8002c5c:	4937      	ldr	r1, [pc, #220]	; (8002d3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d01d      	beq.n	8002cac <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002c70:	4b32      	ldr	r3, [pc, #200]	; (8002d3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c76:	0e1b      	lsrs	r3, r3, #24
 8002c78:	f003 030f 	and.w	r3, r3, #15
 8002c7c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002c7e:	4b2f      	ldr	r3, [pc, #188]	; (8002d3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c84:	0f1b      	lsrs	r3, r3, #28
 8002c86:	f003 0307 	and.w	r3, r3, #7
 8002c8a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	019a      	lsls	r2, r3, #6
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	691b      	ldr	r3, [r3, #16]
 8002c96:	041b      	lsls	r3, r3, #16
 8002c98:	431a      	orrs	r2, r3
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	061b      	lsls	r3, r3, #24
 8002c9e:	431a      	orrs	r2, r3
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	071b      	lsls	r3, r3, #28
 8002ca4:	4925      	ldr	r1, [pc, #148]	; (8002d3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d011      	beq.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	019a      	lsls	r2, r3, #6
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	691b      	ldr	r3, [r3, #16]
 8002cc2:	041b      	lsls	r3, r3, #16
 8002cc4:	431a      	orrs	r2, r3
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	68db      	ldr	r3, [r3, #12]
 8002cca:	061b      	lsls	r3, r3, #24
 8002ccc:	431a      	orrs	r2, r3
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	071b      	lsls	r3, r3, #28
 8002cd4:	4919      	ldr	r1, [pc, #100]	; (8002d3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002cdc:	4b17      	ldr	r3, [pc, #92]	; (8002d3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a16      	ldr	r2, [pc, #88]	; (8002d3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ce2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002ce6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ce8:	f7fe f954 	bl	8000f94 <HAL_GetTick>
 8002cec:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002cee:	e008      	b.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002cf0:	f7fe f950 	bl	8000f94 <HAL_GetTick>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	1ad3      	subs	r3, r2, r3
 8002cfa:	2b64      	cmp	r3, #100	; 0x64
 8002cfc:	d901      	bls.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002cfe:	2303      	movs	r3, #3
 8002d00:	e0d7      	b.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002d02:	4b0e      	ldr	r3, [pc, #56]	; (8002d3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d0f0      	beq.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002d0e:	69bb      	ldr	r3, [r7, #24]
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	f040 80cd 	bne.w	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002d16:	4b09      	ldr	r3, [pc, #36]	; (8002d3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a08      	ldr	r2, [pc, #32]	; (8002d3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d20:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d22:	f7fe f937 	bl	8000f94 <HAL_GetTick>
 8002d26:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002d28:	e00a      	b.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002d2a:	f7fe f933 	bl	8000f94 <HAL_GetTick>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	1ad3      	subs	r3, r2, r3
 8002d34:	2b64      	cmp	r3, #100	; 0x64
 8002d36:	d903      	bls.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002d38:	2303      	movs	r3, #3
 8002d3a:	e0ba      	b.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8002d3c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002d40:	4b5e      	ldr	r3, [pc, #376]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d4c:	d0ed      	beq.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d003      	beq.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d009      	beq.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d02e      	beq.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d12a      	bne.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002d76:	4b51      	ldr	r3, [pc, #324]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d7c:	0c1b      	lsrs	r3, r3, #16
 8002d7e:	f003 0303 	and.w	r3, r3, #3
 8002d82:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002d84:	4b4d      	ldr	r3, [pc, #308]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d8a:	0f1b      	lsrs	r3, r3, #28
 8002d8c:	f003 0307 	and.w	r3, r3, #7
 8002d90:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	695b      	ldr	r3, [r3, #20]
 8002d96:	019a      	lsls	r2, r3, #6
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	041b      	lsls	r3, r3, #16
 8002d9c:	431a      	orrs	r2, r3
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	699b      	ldr	r3, [r3, #24]
 8002da2:	061b      	lsls	r3, r3, #24
 8002da4:	431a      	orrs	r2, r3
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	071b      	lsls	r3, r3, #28
 8002daa:	4944      	ldr	r1, [pc, #272]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002dac:	4313      	orrs	r3, r2
 8002dae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002db2:	4b42      	ldr	r3, [pc, #264]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002db4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002db8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dc0:	3b01      	subs	r3, #1
 8002dc2:	021b      	lsls	r3, r3, #8
 8002dc4:	493d      	ldr	r1, [pc, #244]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d022      	beq.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ddc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002de0:	d11d      	bne.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002de2:	4b36      	ldr	r3, [pc, #216]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002de4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002de8:	0e1b      	lsrs	r3, r3, #24
 8002dea:	f003 030f 	and.w	r3, r3, #15
 8002dee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002df0:	4b32      	ldr	r3, [pc, #200]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002df2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002df6:	0f1b      	lsrs	r3, r3, #28
 8002df8:	f003 0307 	and.w	r3, r3, #7
 8002dfc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	695b      	ldr	r3, [r3, #20]
 8002e02:	019a      	lsls	r2, r3, #6
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6a1b      	ldr	r3, [r3, #32]
 8002e08:	041b      	lsls	r3, r3, #16
 8002e0a:	431a      	orrs	r2, r3
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	061b      	lsls	r3, r3, #24
 8002e10:	431a      	orrs	r2, r3
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	071b      	lsls	r3, r3, #28
 8002e16:	4929      	ldr	r1, [pc, #164]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f003 0308 	and.w	r3, r3, #8
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d028      	beq.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002e2a:	4b24      	ldr	r3, [pc, #144]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002e2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e30:	0e1b      	lsrs	r3, r3, #24
 8002e32:	f003 030f 	and.w	r3, r3, #15
 8002e36:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002e38:	4b20      	ldr	r3, [pc, #128]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002e3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e3e:	0c1b      	lsrs	r3, r3, #16
 8002e40:	f003 0303 	and.w	r3, r3, #3
 8002e44:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	695b      	ldr	r3, [r3, #20]
 8002e4a:	019a      	lsls	r2, r3, #6
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	041b      	lsls	r3, r3, #16
 8002e50:	431a      	orrs	r2, r3
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	061b      	lsls	r3, r3, #24
 8002e56:	431a      	orrs	r2, r3
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	69db      	ldr	r3, [r3, #28]
 8002e5c:	071b      	lsls	r3, r3, #28
 8002e5e:	4917      	ldr	r1, [pc, #92]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002e60:	4313      	orrs	r3, r2
 8002e62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002e66:	4b15      	ldr	r3, [pc, #84]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002e68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e6c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e74:	4911      	ldr	r1, [pc, #68]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002e76:	4313      	orrs	r3, r2
 8002e78:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002e7c:	4b0f      	ldr	r3, [pc, #60]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a0e      	ldr	r2, [pc, #56]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002e82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e86:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e88:	f7fe f884 	bl	8000f94 <HAL_GetTick>
 8002e8c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002e8e:	e008      	b.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002e90:	f7fe f880 	bl	8000f94 <HAL_GetTick>
 8002e94:	4602      	mov	r2, r0
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	1ad3      	subs	r3, r2, r3
 8002e9a:	2b64      	cmp	r3, #100	; 0x64
 8002e9c:	d901      	bls.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002e9e:	2303      	movs	r3, #3
 8002ea0:	e007      	b.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002ea2:	4b06      	ldr	r3, [pc, #24]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002eaa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002eae:	d1ef      	bne.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8002eb0:	2300      	movs	r3, #0
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3720      	adds	r7, #32
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	40023800 	.word	0x40023800

08002ec0 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b082      	sub	sp, #8
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d101      	bne.n	8002ed2 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e022      	b.n	8002f18 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d105      	bne.n	8002eea <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8002ee4:	6878      	ldr	r0, [r7, #4]
 8002ee6:	f7fd fec3 	bl	8000c70 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2203      	movs	r2, #3
 8002eee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f000 f814 	bl	8002f20 <HAL_SD_InitCard>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d001      	beq.n	8002f02 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e00a      	b.n	8002f18 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2200      	movs	r2, #0
 8002f06:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2201      	movs	r2, #1
 8002f12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002f16:	2300      	movs	r3, #0
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	3708      	adds	r7, #8
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}

08002f20 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8002f20:	b5b0      	push	{r4, r5, r7, lr}
 8002f22:	b08e      	sub	sp, #56	; 0x38
 8002f24:	af04      	add	r7, sp, #16
 8002f26:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8002f30:	2300      	movs	r3, #0
 8002f32:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8002f34:	2300      	movs	r3, #0
 8002f36:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8002f3c:	2376      	movs	r3, #118	; 0x76
 8002f3e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681d      	ldr	r5, [r3, #0]
 8002f44:	466c      	mov	r4, sp
 8002f46:	f107 0314 	add.w	r3, r7, #20
 8002f4a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002f4e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002f52:	f107 0308 	add.w	r3, r7, #8
 8002f56:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f58:	4628      	mov	r0, r5
 8002f5a:	f001 fbd3 	bl	8004704 <SDMMC_Init>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8002f64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d001      	beq.n	8002f70 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e056      	b.n	800301e <HAL_SD_InitCard+0xfe>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	685a      	ldr	r2, [r3, #4]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f7e:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4618      	mov	r0, r3
 8002f86:	f001 fc07 	bl	8004798 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	685a      	ldr	r2, [r3, #4]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f98:	605a      	str	r2, [r3, #4]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8002f9a:	6878      	ldr	r0, [r7, #4]
 8002f9c:	f000 fe66 	bl	8003c6c <SD_PowerON>
 8002fa0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002fa2:	6a3b      	ldr	r3, [r7, #32]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d00b      	beq.n	8002fc0 <HAL_SD_InitCard+0xa0>
  {
    hsd->State = HAL_SD_STATE_READY;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2201      	movs	r2, #1
 8002fac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002fb4:	6a3b      	ldr	r3, [r7, #32]
 8002fb6:	431a      	orrs	r2, r3
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	e02e      	b.n	800301e <HAL_SD_InitCard+0xfe>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8002fc0:	6878      	ldr	r0, [r7, #4]
 8002fc2:	f000 fd87 	bl	8003ad4 <SD_InitCard>
 8002fc6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002fc8:	6a3b      	ldr	r3, [r7, #32]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d00b      	beq.n	8002fe6 <HAL_SD_InitCard+0xc6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002fda:	6a3b      	ldr	r3, [r7, #32]
 8002fdc:	431a      	orrs	r2, r3
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e01b      	b.n	800301e <HAL_SD_InitCard+0xfe>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f001 fc66 	bl	80048c0 <SDMMC_CmdBlockLength>
 8002ff4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002ff6:	6a3b      	ldr	r3, [r7, #32]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d00f      	beq.n	800301c <HAL_SD_InitCard+0xfc>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a09      	ldr	r2, [pc, #36]	; (8003028 <HAL_SD_InitCard+0x108>)
 8003002:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003008:	6a3b      	ldr	r3, [r7, #32]
 800300a:	431a      	orrs	r2, r3
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2201      	movs	r2, #1
 8003014:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8003018:	2301      	movs	r3, #1
 800301a:	e000      	b.n	800301e <HAL_SD_InitCard+0xfe>
  }

  return HAL_OK;
 800301c:	2300      	movs	r3, #0
}
 800301e:	4618      	mov	r0, r3
 8003020:	3728      	adds	r7, #40	; 0x28
 8003022:	46bd      	mov	sp, r7
 8003024:	bdb0      	pop	{r4, r5, r7, pc}
 8003026:	bf00      	nop
 8003028:	004005ff 	.word	0x004005ff

0800302c <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b092      	sub	sp, #72	; 0x48
 8003030:	af00      	add	r7, sp, #0
 8003032:	60f8      	str	r0, [r7, #12]
 8003034:	60b9      	str	r1, [r7, #8]
 8003036:	607a      	str	r2, [r7, #4]
 8003038:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800303a:	f7fd ffab 	bl	8000f94 <HAL_GetTick>
 800303e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d107      	bne.n	800305e <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003052:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	e1bd      	b.n	80033da <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003064:	b2db      	uxtb	r3, r3
 8003066:	2b01      	cmp	r3, #1
 8003068:	f040 81b0 	bne.w	80033cc <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	2200      	movs	r2, #0
 8003070:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003072:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	441a      	add	r2, r3
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800307c:	429a      	cmp	r2, r3
 800307e:	d907      	bls.n	8003090 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003084:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	e1a4      	b.n	80033da <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2203      	movs	r2, #3
 8003094:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	2200      	movs	r2, #0
 800309e:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	d002      	beq.n	80030ae <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 80030a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030aa:	025b      	lsls	r3, r3, #9
 80030ac:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80030ae:	f04f 33ff 	mov.w	r3, #4294967295
 80030b2:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	025b      	lsls	r3, r3, #9
 80030b8:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80030ba:	2390      	movs	r3, #144	; 0x90
 80030bc:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80030be:	2302      	movs	r3, #2
 80030c0:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80030c2:	2300      	movs	r3, #0
 80030c4:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_ENABLE;
 80030c6:	2301      	movs	r3, #1
 80030c8:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f107 0214 	add.w	r2, r7, #20
 80030d2:	4611      	mov	r1, r2
 80030d4:	4618      	mov	r0, r3
 80030d6:	f001 fbc7 	bl	8004868 <SDMMC_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d90a      	bls.n	80030f6 <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	2202      	movs	r2, #2
 80030e4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80030ec:	4618      	mov	r0, r3
 80030ee:	f001 fc2b 	bl	8004948 <SDMMC_CmdReadMultiBlock>
 80030f2:	6478      	str	r0, [r7, #68]	; 0x44
 80030f4:	e009      	b.n	800310a <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2201      	movs	r2, #1
 80030fa:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003102:	4618      	mov	r0, r3
 8003104:	f001 fbfe 	bl	8004904 <SDMMC_CmdReadSingleBlock>
 8003108:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800310a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800310c:	2b00      	cmp	r3, #0
 800310e:	d012      	beq.n	8003136 <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a7a      	ldr	r2, [pc, #488]	; (8003300 <HAL_SD_ReadBlocks+0x2d4>)
 8003116:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800311c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800311e:	431a      	orrs	r2, r3
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	2201      	movs	r2, #1
 8003128:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2200      	movs	r2, #0
 8003130:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	e151      	b.n	80033da <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 8003136:	69bb      	ldr	r3, [r7, #24]
 8003138:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800313a:	e061      	b.n	8003200 <HAL_SD_ReadBlocks+0x1d4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining > 0U))
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003142:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003146:	2b00      	cmp	r3, #0
 8003148:	d03c      	beq.n	80031c4 <HAL_SD_ReadBlocks+0x198>
 800314a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800314c:	2b00      	cmp	r3, #0
 800314e:	d039      	beq.n	80031c4 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8003150:	2300      	movs	r3, #0
 8003152:	643b      	str	r3, [r7, #64]	; 0x40
 8003154:	e033      	b.n	80031be <HAL_SD_ReadBlocks+0x192>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4618      	mov	r0, r3
 800315c:	f001 fafe 	bl	800475c <SDMMC_ReadFIFO>
 8003160:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8003162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003164:	b2da      	uxtb	r2, r3
 8003166:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003168:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800316a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800316c:	3301      	adds	r3, #1
 800316e:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003170:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003172:	3b01      	subs	r3, #1
 8003174:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8003176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003178:	0a1b      	lsrs	r3, r3, #8
 800317a:	b2da      	uxtb	r2, r3
 800317c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800317e:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8003180:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003182:	3301      	adds	r3, #1
 8003184:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003186:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003188:	3b01      	subs	r3, #1
 800318a:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800318c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800318e:	0c1b      	lsrs	r3, r3, #16
 8003190:	b2da      	uxtb	r2, r3
 8003192:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003194:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8003196:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003198:	3301      	adds	r3, #1
 800319a:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800319c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800319e:	3b01      	subs	r3, #1
 80031a0:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80031a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031a4:	0e1b      	lsrs	r3, r3, #24
 80031a6:	b2da      	uxtb	r2, r3
 80031a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031aa:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80031ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031ae:	3301      	adds	r3, #1
 80031b0:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80031b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031b4:	3b01      	subs	r3, #1
 80031b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 80031b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031ba:	3301      	adds	r3, #1
 80031bc:	643b      	str	r3, [r7, #64]	; 0x40
 80031be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031c0:	2b07      	cmp	r3, #7
 80031c2:	d9c8      	bls.n	8003156 <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80031c4:	f7fd fee6 	bl	8000f94 <HAL_GetTick>
 80031c8:	4602      	mov	r2, r0
 80031ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031cc:	1ad3      	subs	r3, r2, r3
 80031ce:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80031d0:	429a      	cmp	r2, r3
 80031d2:	d902      	bls.n	80031da <HAL_SD_ReadBlocks+0x1ae>
 80031d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d112      	bne.n	8003200 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a48      	ldr	r2, [pc, #288]	; (8003300 <HAL_SD_ReadBlocks+0x2d4>)
 80031e0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031e6:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2201      	movs	r2, #1
 80031f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2200      	movs	r2, #0
 80031fa:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 80031fc:	2303      	movs	r3, #3
 80031fe:	e0ec      	b.n	80033da <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003206:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800320a:	2b00      	cmp	r3, #0
 800320c:	d096      	beq.n	800313c <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003214:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003218:	2b00      	cmp	r3, #0
 800321a:	d022      	beq.n	8003262 <HAL_SD_ReadBlocks+0x236>
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	2b01      	cmp	r3, #1
 8003220:	d91f      	bls.n	8003262 <HAL_SD_ReadBlocks+0x236>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003226:	2b03      	cmp	r3, #3
 8003228:	d01b      	beq.n	8003262 <HAL_SD_ReadBlocks+0x236>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4618      	mov	r0, r3
 8003230:	f001 fbf0 	bl	8004a14 <SDMMC_CmdStopTransfer>
 8003234:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8003236:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003238:	2b00      	cmp	r3, #0
 800323a:	d012      	beq.n	8003262 <HAL_SD_ReadBlocks+0x236>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a2f      	ldr	r2, [pc, #188]	; (8003300 <HAL_SD_ReadBlocks+0x2d4>)
 8003242:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003248:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800324a:	431a      	orrs	r2, r3
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2201      	movs	r2, #1
 8003254:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2200      	movs	r2, #0
 800325c:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	e0bb      	b.n	80033da <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003268:	f003 0308 	and.w	r3, r3, #8
 800326c:	2b00      	cmp	r3, #0
 800326e:	d012      	beq.n	8003296 <HAL_SD_ReadBlocks+0x26a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a22      	ldr	r2, [pc, #136]	; (8003300 <HAL_SD_ReadBlocks+0x2d4>)
 8003276:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800327c:	f043 0208 	orr.w	r2, r3, #8
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2201      	movs	r2, #1
 8003288:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2200      	movs	r2, #0
 8003290:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	e0a1      	b.n	80033da <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800329c:	f003 0302 	and.w	r3, r3, #2
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d012      	beq.n	80032ca <HAL_SD_ReadBlocks+0x29e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a15      	ldr	r2, [pc, #84]	; (8003300 <HAL_SD_ReadBlocks+0x2d4>)
 80032aa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032b0:	f043 0202 	orr.w	r2, r3, #2
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2201      	movs	r2, #1
 80032bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2200      	movs	r2, #0
 80032c4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	e087      	b.n	80033da <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032d0:	f003 0320 	and.w	r3, r3, #32
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d064      	beq.n	80033a2 <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a08      	ldr	r2, [pc, #32]	; (8003300 <HAL_SD_ReadBlocks+0x2d4>)
 80032de:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032e4:	f043 0220 	orr.w	r2, r3, #32
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	2201      	movs	r2, #1
 80032f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2200      	movs	r2, #0
 80032f8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e06d      	b.n	80033da <HAL_SD_ReadBlocks+0x3ae>
 80032fe:	bf00      	nop
 8003300:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4618      	mov	r0, r3
 800330a:	f001 fa27 	bl	800475c <SDMMC_ReadFIFO>
 800330e:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8003310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003312:	b2da      	uxtb	r2, r3
 8003314:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003316:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003318:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800331a:	3301      	adds	r3, #1
 800331c:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800331e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003320:	3b01      	subs	r3, #1
 8003322:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8003324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003326:	0a1b      	lsrs	r3, r3, #8
 8003328:	b2da      	uxtb	r2, r3
 800332a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800332c:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800332e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003330:	3301      	adds	r3, #1
 8003332:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8003334:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003336:	3b01      	subs	r3, #1
 8003338:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800333a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800333c:	0c1b      	lsrs	r3, r3, #16
 800333e:	b2da      	uxtb	r2, r3
 8003340:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003342:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003344:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003346:	3301      	adds	r3, #1
 8003348:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800334a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800334c:	3b01      	subs	r3, #1
 800334e:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8003350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003352:	0e1b      	lsrs	r3, r3, #24
 8003354:	b2da      	uxtb	r2, r3
 8003356:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003358:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800335a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800335c:	3301      	adds	r3, #1
 800335e:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8003360:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003362:	3b01      	subs	r3, #1
 8003364:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8003366:	f7fd fe15 	bl	8000f94 <HAL_GetTick>
 800336a:	4602      	mov	r2, r0
 800336c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800336e:	1ad3      	subs	r3, r2, r3
 8003370:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003372:	429a      	cmp	r2, r3
 8003374:	d902      	bls.n	800337c <HAL_SD_ReadBlocks+0x350>
 8003376:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003378:	2b00      	cmp	r3, #0
 800337a:	d112      	bne.n	80033a2 <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a18      	ldr	r2, [pc, #96]	; (80033e4 <HAL_SD_ReadBlocks+0x3b8>)
 8003382:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003388:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2201      	movs	r2, #1
 8003394:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	2200      	movs	r2, #0
 800339c:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e01b      	b.n	80033da <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d002      	beq.n	80033b6 <HAL_SD_ReadBlocks+0x38a>
 80033b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d1a6      	bne.n	8003304 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f240 523a 	movw	r2, #1338	; 0x53a
 80033be:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2201      	movs	r2, #1
 80033c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80033c8:	2300      	movs	r3, #0
 80033ca:	e006      	b.n	80033da <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033d0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
  }
}
 80033da:	4618      	mov	r0, r3
 80033dc:	3748      	adds	r7, #72	; 0x48
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	bf00      	nop
 80033e4:	004005ff 	.word	0x004005ff

080033e8 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b092      	sub	sp, #72	; 0x48
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	60f8      	str	r0, [r7, #12]
 80033f0:	60b9      	str	r1, [r7, #8]
 80033f2:	607a      	str	r2, [r7, #4]
 80033f4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80033f6:	f7fd fdcd 	bl	8000f94 <HAL_GetTick>
 80033fa:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d107      	bne.n	800341a <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800340e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	e165      	b.n	80036e6 <HAL_SD_WriteBlocks+0x2fe>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003420:	b2db      	uxtb	r3, r3
 8003422:	2b01      	cmp	r3, #1
 8003424:	f040 8158 	bne.w	80036d8 <HAL_SD_WriteBlocks+0x2f0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	2200      	movs	r2, #0
 800342c:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800342e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	441a      	add	r2, r3
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003438:	429a      	cmp	r2, r3
 800343a:	d907      	bls.n	800344c <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003440:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8003448:	2301      	movs	r3, #1
 800344a:	e14c      	b.n	80036e6 <HAL_SD_WriteBlocks+0x2fe>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	2203      	movs	r2, #3
 8003450:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	2200      	movs	r2, #0
 800345a:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003460:	2b01      	cmp	r3, #1
 8003462:	d002      	beq.n	800346a <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8003464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003466:	025b      	lsls	r3, r3, #9
 8003468:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800346a:	f04f 33ff 	mov.w	r3, #4294967295
 800346e:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	025b      	lsls	r3, r3, #9
 8003474:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8003476:	2390      	movs	r3, #144	; 0x90
 8003478:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800347a:	2300      	movs	r3, #0
 800347c:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800347e:	2300      	movs	r3, #0
 8003480:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8003482:	2301      	movs	r3, #1
 8003484:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f107 0218 	add.w	r2, r7, #24
 800348e:	4611      	mov	r1, r2
 8003490:	4618      	mov	r0, r3
 8003492:	f001 f9e9 	bl	8004868 <SDMMC_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	2b01      	cmp	r3, #1
 800349a:	d90a      	bls.n	80034b2 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2220      	movs	r2, #32
 80034a0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80034a8:	4618      	mov	r0, r3
 80034aa:	f001 fa91 	bl	80049d0 <SDMMC_CmdWriteMultiBlock>
 80034ae:	6478      	str	r0, [r7, #68]	; 0x44
 80034b0:	e009      	b.n	80034c6 <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2210      	movs	r2, #16
 80034b6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80034be:	4618      	mov	r0, r3
 80034c0:	f001 fa64 	bl	800498c <SDMMC_CmdWriteSingleBlock>
 80034c4:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80034c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d012      	beq.n	80034f2 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a87      	ldr	r2, [pc, #540]	; (80036f0 <HAL_SD_WriteBlocks+0x308>)
 80034d2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034da:	431a      	orrs	r2, r3
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2201      	movs	r2, #1
 80034e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2200      	movs	r2, #0
 80034ec:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	e0f9      	b.n	80036e6 <HAL_SD_WriteBlocks+0x2fe>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 80034f2:	69fb      	ldr	r3, [r7, #28]
 80034f4:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80034f6:	e065      	b.n	80035c4 <HAL_SD_WriteBlocks+0x1dc>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining > 0U))
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003502:	2b00      	cmp	r3, #0
 8003504:	d040      	beq.n	8003588 <HAL_SD_WriteBlocks+0x1a0>
 8003506:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003508:	2b00      	cmp	r3, #0
 800350a:	d03d      	beq.n	8003588 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 800350c:	2300      	movs	r3, #0
 800350e:	643b      	str	r3, [r7, #64]	; 0x40
 8003510:	e037      	b.n	8003582 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8003512:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003514:	781b      	ldrb	r3, [r3, #0]
 8003516:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003518:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800351a:	3301      	adds	r3, #1
 800351c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800351e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003520:	3b01      	subs	r3, #1
 8003522:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8003524:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003526:	781b      	ldrb	r3, [r3, #0]
 8003528:	021a      	lsls	r2, r3, #8
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	4313      	orrs	r3, r2
 800352e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003530:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003532:	3301      	adds	r3, #1
 8003534:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003536:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003538:	3b01      	subs	r3, #1
 800353a:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 800353c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800353e:	781b      	ldrb	r3, [r3, #0]
 8003540:	041a      	lsls	r2, r3, #16
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	4313      	orrs	r3, r2
 8003546:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003548:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800354a:	3301      	adds	r3, #1
 800354c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800354e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003550:	3b01      	subs	r3, #1
 8003552:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8003554:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003556:	781b      	ldrb	r3, [r3, #0]
 8003558:	061a      	lsls	r2, r3, #24
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	4313      	orrs	r3, r2
 800355e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003560:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003562:	3301      	adds	r3, #1
 8003564:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003566:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003568:	3b01      	subs	r3, #1
 800356a:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f107 0214 	add.w	r2, r7, #20
 8003574:	4611      	mov	r1, r2
 8003576:	4618      	mov	r0, r3
 8003578:	f001 f8fd 	bl	8004776 <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 800357c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800357e:	3301      	adds	r3, #1
 8003580:	643b      	str	r3, [r7, #64]	; 0x40
 8003582:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003584:	2b07      	cmp	r3, #7
 8003586:	d9c4      	bls.n	8003512 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8003588:	f7fd fd04 	bl	8000f94 <HAL_GetTick>
 800358c:	4602      	mov	r2, r0
 800358e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003590:	1ad3      	subs	r3, r2, r3
 8003592:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003594:	429a      	cmp	r2, r3
 8003596:	d902      	bls.n	800359e <HAL_SD_WriteBlocks+0x1b6>
 8003598:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800359a:	2b00      	cmp	r3, #0
 800359c:	d112      	bne.n	80035c4 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a53      	ldr	r2, [pc, #332]	; (80036f0 <HAL_SD_WriteBlocks+0x308>)
 80035a4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80035aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035ac:	431a      	orrs	r2, r3
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2201      	movs	r2, #1
 80035b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2200      	movs	r2, #0
 80035be:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 80035c0:	2303      	movs	r3, #3
 80035c2:	e090      	b.n	80036e6 <HAL_SD_WriteBlocks+0x2fe>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035ca:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d092      	beq.n	80034f8 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d022      	beq.n	8003626 <HAL_SD_WriteBlocks+0x23e>
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	d91f      	bls.n	8003626 <HAL_SD_WriteBlocks+0x23e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ea:	2b03      	cmp	r3, #3
 80035ec:	d01b      	beq.n	8003626 <HAL_SD_WriteBlocks+0x23e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4618      	mov	r0, r3
 80035f4:	f001 fa0e 	bl	8004a14 <SDMMC_CmdStopTransfer>
 80035f8:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80035fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d012      	beq.n	8003626 <HAL_SD_WriteBlocks+0x23e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a3a      	ldr	r2, [pc, #232]	; (80036f0 <HAL_SD_WriteBlocks+0x308>)
 8003606:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800360c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800360e:	431a      	orrs	r2, r3
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2201      	movs	r2, #1
 8003618:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2200      	movs	r2, #0
 8003620:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e05f      	b.n	80036e6 <HAL_SD_WriteBlocks+0x2fe>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800362c:	f003 0308 	and.w	r3, r3, #8
 8003630:	2b00      	cmp	r3, #0
 8003632:	d012      	beq.n	800365a <HAL_SD_WriteBlocks+0x272>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a2d      	ldr	r2, [pc, #180]	; (80036f0 <HAL_SD_WriteBlocks+0x308>)
 800363a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003640:	f043 0208 	orr.w	r2, r3, #8
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2201      	movs	r2, #1
 800364c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2200      	movs	r2, #0
 8003654:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	e045      	b.n	80036e6 <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003660:	f003 0302 	and.w	r3, r3, #2
 8003664:	2b00      	cmp	r3, #0
 8003666:	d012      	beq.n	800368e <HAL_SD_WriteBlocks+0x2a6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a20      	ldr	r2, [pc, #128]	; (80036f0 <HAL_SD_WriteBlocks+0x308>)
 800366e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003674:	f043 0202 	orr.w	r2, r3, #2
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2201      	movs	r2, #1
 8003680:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	2200      	movs	r2, #0
 8003688:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	e02b      	b.n	80036e6 <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003694:	f003 0310 	and.w	r3, r3, #16
 8003698:	2b00      	cmp	r3, #0
 800369a:	d012      	beq.n	80036c2 <HAL_SD_WriteBlocks+0x2da>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a13      	ldr	r2, [pc, #76]	; (80036f0 <HAL_SD_WriteBlocks+0x308>)
 80036a2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036a8:	f043 0210 	orr.w	r2, r3, #16
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2201      	movs	r2, #1
 80036b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	2200      	movs	r2, #0
 80036bc:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80036be:	2301      	movs	r3, #1
 80036c0:	e011      	b.n	80036e6 <HAL_SD_WriteBlocks+0x2fe>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f240 523a 	movw	r2, #1338	; 0x53a
 80036ca:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	2201      	movs	r2, #1
 80036d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80036d4:	2300      	movs	r3, #0
 80036d6:	e006      	b.n	80036e6 <HAL_SD_WriteBlocks+0x2fe>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036dc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80036e4:	2301      	movs	r3, #1
  }
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	3748      	adds	r7, #72	; 0x48
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}
 80036ee:	bf00      	nop
 80036f0:	004005ff 	.word	0x004005ff

080036f4 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b083      	sub	sp, #12
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
 80036fc:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003702:	0f9b      	lsrs	r3, r3, #30
 8003704:	b2da      	uxtb	r2, r3
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800370e:	0e9b      	lsrs	r3, r3, #26
 8003710:	b2db      	uxtb	r3, r3
 8003712:	f003 030f 	and.w	r3, r3, #15
 8003716:	b2da      	uxtb	r2, r3
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003720:	0e1b      	lsrs	r3, r3, #24
 8003722:	b2db      	uxtb	r3, r3
 8003724:	f003 0303 	and.w	r3, r3, #3
 8003728:	b2da      	uxtb	r2, r3
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003732:	0c1b      	lsrs	r3, r3, #16
 8003734:	b2da      	uxtb	r2, r3
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800373e:	0a1b      	lsrs	r3, r3, #8
 8003740:	b2da      	uxtb	r2, r3
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800374a:	b2da      	uxtb	r2, r3
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003754:	0d1b      	lsrs	r3, r3, #20
 8003756:	b29a      	uxth	r2, r3
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003760:	0c1b      	lsrs	r3, r3, #16
 8003762:	b2db      	uxtb	r3, r3
 8003764:	f003 030f 	and.w	r3, r3, #15
 8003768:	b2da      	uxtb	r2, r3
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003772:	0bdb      	lsrs	r3, r3, #15
 8003774:	b2db      	uxtb	r3, r3
 8003776:	f003 0301 	and.w	r3, r3, #1
 800377a:	b2da      	uxtb	r2, r3
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003784:	0b9b      	lsrs	r3, r3, #14
 8003786:	b2db      	uxtb	r3, r3
 8003788:	f003 0301 	and.w	r3, r3, #1
 800378c:	b2da      	uxtb	r2, r3
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003796:	0b5b      	lsrs	r3, r3, #13
 8003798:	b2db      	uxtb	r3, r3
 800379a:	f003 0301 	and.w	r3, r3, #1
 800379e:	b2da      	uxtb	r2, r3
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80037a8:	0b1b      	lsrs	r3, r3, #12
 80037aa:	b2db      	uxtb	r3, r3
 80037ac:	f003 0301 	and.w	r3, r3, #1
 80037b0:	b2da      	uxtb	r2, r3
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	2200      	movs	r2, #0
 80037ba:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d163      	bne.n	800388c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80037c8:	009a      	lsls	r2, r3, #2
 80037ca:	f640 73fc 	movw	r3, #4092	; 0xffc
 80037ce:	4013      	ands	r3, r2
 80037d0:	687a      	ldr	r2, [r7, #4]
 80037d2:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80037d4:	0f92      	lsrs	r2, r2, #30
 80037d6:	431a      	orrs	r2, r3
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037e0:	0edb      	lsrs	r3, r3, #27
 80037e2:	b2db      	uxtb	r3, r3
 80037e4:	f003 0307 	and.w	r3, r3, #7
 80037e8:	b2da      	uxtb	r2, r3
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037f2:	0e1b      	lsrs	r3, r3, #24
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	f003 0307 	and.w	r3, r3, #7
 80037fa:	b2da      	uxtb	r2, r3
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003804:	0d5b      	lsrs	r3, r3, #21
 8003806:	b2db      	uxtb	r3, r3
 8003808:	f003 0307 	and.w	r3, r3, #7
 800380c:	b2da      	uxtb	r2, r3
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003816:	0c9b      	lsrs	r3, r3, #18
 8003818:	b2db      	uxtb	r3, r3
 800381a:	f003 0307 	and.w	r3, r3, #7
 800381e:	b2da      	uxtb	r2, r3
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003828:	0bdb      	lsrs	r3, r3, #15
 800382a:	b2db      	uxtb	r3, r3
 800382c:	f003 0307 	and.w	r3, r3, #7
 8003830:	b2da      	uxtb	r2, r3
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	691b      	ldr	r3, [r3, #16]
 800383a:	1c5a      	adds	r2, r3, #1
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	7e1b      	ldrb	r3, [r3, #24]
 8003844:	b2db      	uxtb	r3, r3
 8003846:	f003 0307 	and.w	r3, r3, #7
 800384a:	3302      	adds	r3, #2
 800384c:	2201      	movs	r2, #1
 800384e:	fa02 f303 	lsl.w	r3, r2, r3
 8003852:	687a      	ldr	r2, [r7, #4]
 8003854:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003856:	fb02 f203 	mul.w	r2, r2, r3
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	7a1b      	ldrb	r3, [r3, #8]
 8003862:	b2db      	uxtb	r3, r3
 8003864:	f003 030f 	and.w	r3, r3, #15
 8003868:	2201      	movs	r2, #1
 800386a:	409a      	lsls	r2, r3
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003874:	687a      	ldr	r2, [r7, #4]
 8003876:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003878:	0a52      	lsrs	r2, r2, #9
 800387a:	fb02 f203 	mul.w	r2, r2, r3
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003888:	661a      	str	r2, [r3, #96]	; 0x60
 800388a:	e031      	b.n	80038f0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003890:	2b01      	cmp	r3, #1
 8003892:	d11d      	bne.n	80038d0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003898:	041b      	lsls	r3, r3, #16
 800389a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038a2:	0c1b      	lsrs	r3, r3, #16
 80038a4:	431a      	orrs	r2, r3
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	691b      	ldr	r3, [r3, #16]
 80038ae:	3301      	adds	r3, #1
 80038b0:	029a      	lsls	r2, r3, #10
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038c4:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	661a      	str	r2, [r3, #96]	; 0x60
 80038ce:	e00f      	b.n	80038f0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a58      	ldr	r2, [pc, #352]	; (8003a38 <HAL_SD_GetCardCSD+0x344>)
 80038d6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038dc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2201      	movs	r2, #1
 80038e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	e09d      	b.n	8003a2c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038f4:	0b9b      	lsrs	r3, r3, #14
 80038f6:	b2db      	uxtb	r3, r3
 80038f8:	f003 0301 	and.w	r3, r3, #1
 80038fc:	b2da      	uxtb	r2, r3
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003906:	09db      	lsrs	r3, r3, #7
 8003908:	b2db      	uxtb	r3, r3
 800390a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800390e:	b2da      	uxtb	r2, r3
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003918:	b2db      	uxtb	r3, r3
 800391a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800391e:	b2da      	uxtb	r2, r3
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003928:	0fdb      	lsrs	r3, r3, #31
 800392a:	b2da      	uxtb	r2, r3
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003934:	0f5b      	lsrs	r3, r3, #29
 8003936:	b2db      	uxtb	r3, r3
 8003938:	f003 0303 	and.w	r3, r3, #3
 800393c:	b2da      	uxtb	r2, r3
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003946:	0e9b      	lsrs	r3, r3, #26
 8003948:	b2db      	uxtb	r3, r3
 800394a:	f003 0307 	and.w	r3, r3, #7
 800394e:	b2da      	uxtb	r2, r3
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003958:	0d9b      	lsrs	r3, r3, #22
 800395a:	b2db      	uxtb	r3, r3
 800395c:	f003 030f 	and.w	r3, r3, #15
 8003960:	b2da      	uxtb	r2, r3
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800396a:	0d5b      	lsrs	r3, r3, #21
 800396c:	b2db      	uxtb	r3, r3
 800396e:	f003 0301 	and.w	r3, r3, #1
 8003972:	b2da      	uxtb	r2, r3
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	2200      	movs	r2, #0
 800397e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003986:	0c1b      	lsrs	r3, r3, #16
 8003988:	b2db      	uxtb	r3, r3
 800398a:	f003 0301 	and.w	r3, r3, #1
 800398e:	b2da      	uxtb	r2, r3
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800399a:	0bdb      	lsrs	r3, r3, #15
 800399c:	b2db      	uxtb	r3, r3
 800399e:	f003 0301 	and.w	r3, r3, #1
 80039a2:	b2da      	uxtb	r2, r3
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039ae:	0b9b      	lsrs	r3, r3, #14
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	f003 0301 	and.w	r3, r3, #1
 80039b6:	b2da      	uxtb	r2, r3
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039c2:	0b5b      	lsrs	r3, r3, #13
 80039c4:	b2db      	uxtb	r3, r3
 80039c6:	f003 0301 	and.w	r3, r3, #1
 80039ca:	b2da      	uxtb	r2, r3
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039d6:	0b1b      	lsrs	r3, r3, #12
 80039d8:	b2db      	uxtb	r3, r3
 80039da:	f003 0301 	and.w	r3, r3, #1
 80039de:	b2da      	uxtb	r2, r3
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039ea:	0a9b      	lsrs	r3, r3, #10
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	f003 0303 	and.w	r3, r3, #3
 80039f2:	b2da      	uxtb	r2, r3
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039fe:	0a1b      	lsrs	r3, r3, #8
 8003a00:	b2db      	uxtb	r3, r3
 8003a02:	f003 0303 	and.w	r3, r3, #3
 8003a06:	b2da      	uxtb	r2, r3
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a12:	085b      	lsrs	r3, r3, #1
 8003a14:	b2db      	uxtb	r3, r3
 8003a16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a1a:	b2da      	uxtb	r2, r3
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	2201      	movs	r2, #1
 8003a26:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8003a2a:	2300      	movs	r3, #0
}
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	370c      	adds	r7, #12
 8003a30:	46bd      	mov	sp, r7
 8003a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a36:	4770      	bx	lr
 8003a38:	004005ff 	.word	0x004005ff

08003a3c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b083      	sub	sp, #12
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
 8003a44:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8003a86:	2300      	movs	r3, #0
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	370c      	adds	r7, #12
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a92:	4770      	bx	lr

08003a94 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b086      	sub	sp, #24
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8003aa0:	f107 030c 	add.w	r3, r7, #12
 8003aa4:	4619      	mov	r1, r3
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	f000 f96e 	bl	8003d88 <SD_SendStatus>
 8003aac:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d005      	beq.n	8003ac0 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	431a      	orrs	r2, r3
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	0a5b      	lsrs	r3, r3, #9
 8003ac4:	f003 030f 	and.w	r3, r3, #15
 8003ac8:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8003aca:	693b      	ldr	r3, [r7, #16]
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	3718      	adds	r7, #24
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bd80      	pop	{r7, pc}

08003ad4 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003ad4:	b5b0      	push	{r4, r5, r7, lr}
 8003ad6:	b094      	sub	sp, #80	; 0x50
 8003ad8:	af04      	add	r7, sp, #16
 8003ada:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8003adc:	2301      	movs	r3, #1
 8003ade:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f000 fe66 	bl	80047b6 <SDMMC_GetPowerState>
 8003aea:	4603      	mov	r3, r0
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d102      	bne.n	8003af6 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003af0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003af4:	e0b6      	b.n	8003c64 <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003afa:	2b03      	cmp	r3, #3
 8003afc:	d02f      	beq.n	8003b5e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4618      	mov	r0, r3
 8003b04:	f001 f84e 	bl	8004ba4 <SDMMC_CmdSendCID>
 8003b08:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003b0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d001      	beq.n	8003b14 <SD_InitCard+0x40>
    {
      return errorstate;
 8003b10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b12:	e0a7      	b.n	8003c64 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	2100      	movs	r1, #0
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f000 fe91 	bl	8004842 <SDMMC_GetResponse>
 8003b20:	4602      	mov	r2, r0
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	2104      	movs	r1, #4
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	f000 fe88 	bl	8004842 <SDMMC_GetResponse>
 8003b32:	4602      	mov	r2, r0
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	2108      	movs	r1, #8
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f000 fe7f 	bl	8004842 <SDMMC_GetResponse>
 8003b44:	4602      	mov	r2, r0
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	210c      	movs	r1, #12
 8003b50:	4618      	mov	r0, r3
 8003b52:	f000 fe76 	bl	8004842 <SDMMC_GetResponse>
 8003b56:	4602      	mov	r2, r0
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b62:	2b03      	cmp	r3, #3
 8003b64:	d00d      	beq.n	8003b82 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f107 020e 	add.w	r2, r7, #14
 8003b6e:	4611      	mov	r1, r2
 8003b70:	4618      	mov	r0, r3
 8003b72:	f001 f854 	bl	8004c1e <SDMMC_CmdSetRelAdd>
 8003b76:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003b78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d001      	beq.n	8003b82 <SD_InitCard+0xae>
    {
      return errorstate;
 8003b7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b80:	e070      	b.n	8003c64 <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b86:	2b03      	cmp	r3, #3
 8003b88:	d036      	beq.n	8003bf8 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8003b8a:	89fb      	ldrh	r3, [r7, #14]
 8003b8c:	461a      	mov	r2, r3
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b9a:	041b      	lsls	r3, r3, #16
 8003b9c:	4619      	mov	r1, r3
 8003b9e:	4610      	mov	r0, r2
 8003ba0:	f001 f81e 	bl	8004be0 <SDMMC_CmdSendCSD>
 8003ba4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003ba6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d001      	beq.n	8003bb0 <SD_InitCard+0xdc>
    {
      return errorstate;
 8003bac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bae:	e059      	b.n	8003c64 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	2100      	movs	r1, #0
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f000 fe43 	bl	8004842 <SDMMC_GetResponse>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	2104      	movs	r1, #4
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f000 fe3a 	bl	8004842 <SDMMC_GetResponse>
 8003bce:	4602      	mov	r2, r0
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	2108      	movs	r1, #8
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f000 fe31 	bl	8004842 <SDMMC_GetResponse>
 8003be0:	4602      	mov	r2, r0
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	210c      	movs	r1, #12
 8003bec:	4618      	mov	r0, r3
 8003bee:	f000 fe28 	bl	8004842 <SDMMC_GetResponse>
 8003bf2:	4602      	mov	r2, r0
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	2104      	movs	r1, #4
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f000 fe1f 	bl	8004842 <SDMMC_GetResponse>
 8003c04:	4603      	mov	r3, r0
 8003c06:	0d1a      	lsrs	r2, r3, #20
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8003c0c:	f107 0310 	add.w	r3, r7, #16
 8003c10:	4619      	mov	r1, r3
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	f7ff fd6e 	bl	80036f4 <HAL_SD_GetCardCSD>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d002      	beq.n	8003c24 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003c1e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003c22:	e01f      	b.n	8003c64 <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6819      	ldr	r1, [r3, #0]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c2c:	041b      	lsls	r3, r3, #16
 8003c2e:	461a      	mov	r2, r3
 8003c30:	f04f 0300 	mov.w	r3, #0
 8003c34:	4608      	mov	r0, r1
 8003c36:	f000 ff0f 	bl	8004a58 <SDMMC_CmdSelDesel>
 8003c3a:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8003c3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d001      	beq.n	8003c46 <SD_InitCard+0x172>
  {
    return errorstate;
 8003c42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c44:	e00e      	b.n	8003c64 <SD_InitCard+0x190>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681d      	ldr	r5, [r3, #0]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	466c      	mov	r4, sp
 8003c4e:	f103 0210 	add.w	r2, r3, #16
 8003c52:	ca07      	ldmia	r2, {r0, r1, r2}
 8003c54:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003c58:	3304      	adds	r3, #4
 8003c5a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003c5c:	4628      	mov	r0, r5
 8003c5e:	f000 fd51 	bl	8004704 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8003c62:	2300      	movs	r3, #0
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	3740      	adds	r7, #64	; 0x40
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bdb0      	pop	{r4, r5, r7, pc}

08003c6c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b086      	sub	sp, #24
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003c74:	2300      	movs	r3, #0
 8003c76:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	617b      	str	r3, [r7, #20]
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4618      	mov	r0, r3
 8003c86:	f000 ff0a 	bl	8004a9e <SDMMC_CmdGoIdleState>
 8003c8a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d001      	beq.n	8003c96 <SD_PowerON+0x2a>
  {
    return errorstate;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	e072      	b.n	8003d7c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f000 ff1d 	bl	8004ada <SDMMC_CmdOperCond>
 8003ca0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d00d      	beq.n	8003cc4 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2200      	movs	r2, #0
 8003cac:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f000 fef3 	bl	8004a9e <SDMMC_CmdGoIdleState>
 8003cb8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d004      	beq.n	8003cca <SD_PowerON+0x5e>
    {
      return errorstate;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	e05b      	b.n	8003d7c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cce:	2b01      	cmp	r3, #1
 8003cd0:	d137      	bne.n	8003d42 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	2100      	movs	r1, #0
 8003cd8:	4618      	mov	r0, r3
 8003cda:	f000 ff1d 	bl	8004b18 <SDMMC_CmdAppCommand>
 8003cde:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d02d      	beq.n	8003d42 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003ce6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003cea:	e047      	b.n	8003d7c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	2100      	movs	r1, #0
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f000 ff10 	bl	8004b18 <SDMMC_CmdAppCommand>
 8003cf8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d001      	beq.n	8003d04 <SD_PowerON+0x98>
    {
      return errorstate;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	e03b      	b.n	8003d7c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	491e      	ldr	r1, [pc, #120]	; (8003d84 <SD_PowerON+0x118>)
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f000 ff26 	bl	8004b5c <SDMMC_CmdAppOperCommand>
 8003d10:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d002      	beq.n	8003d1e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003d18:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003d1c:	e02e      	b.n	8003d7c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	2100      	movs	r1, #0
 8003d24:	4618      	mov	r0, r3
 8003d26:	f000 fd8c 	bl	8004842 <SDMMC_GetResponse>
 8003d2a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	0fdb      	lsrs	r3, r3, #31
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	d101      	bne.n	8003d38 <SD_PowerON+0xcc>
 8003d34:	2301      	movs	r3, #1
 8003d36:	e000      	b.n	8003d3a <SD_PowerON+0xce>
 8003d38:	2300      	movs	r3, #0
 8003d3a:	613b      	str	r3, [r7, #16]

    count++;
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	3301      	adds	r3, #1
 8003d40:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d802      	bhi.n	8003d52 <SD_PowerON+0xe6>
 8003d4c:	693b      	ldr	r3, [r7, #16]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d0cc      	beq.n	8003cec <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d902      	bls.n	8003d62 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8003d5c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003d60:	e00c      	b.n	8003d7c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d003      	beq.n	8003d74 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2201      	movs	r2, #1
 8003d70:	645a      	str	r2, [r3, #68]	; 0x44
 8003d72:	e002      	b.n	8003d7a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2200      	movs	r2, #0
 8003d78:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8003d7a:	2300      	movs	r3, #0
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	3718      	adds	r7, #24
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd80      	pop	{r7, pc}
 8003d84:	c1100000 	.word	0xc1100000

08003d88 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b084      	sub	sp, #16
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
 8003d90:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d102      	bne.n	8003d9e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8003d98:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003d9c:	e018      	b.n	8003dd0 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003da6:	041b      	lsls	r3, r3, #16
 8003da8:	4619      	mov	r1, r3
 8003daa:	4610      	mov	r0, r2
 8003dac:	f000 ff58 	bl	8004c60 <SDMMC_CmdSendStatus>
 8003db0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d001      	beq.n	8003dbc <SD_SendStatus+0x34>
  {
    return errorstate;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	e009      	b.n	8003dd0 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	2100      	movs	r1, #0
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f000 fd3d 	bl	8004842 <SDMMC_GetResponse>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8003dce:	2300      	movs	r3, #0
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	3710      	adds	r7, #16
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd80      	pop	{r7, pc}

08003dd8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b082      	sub	sp, #8
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d101      	bne.n	8003dea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	e040      	b.n	8003e6c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d106      	bne.n	8003e00 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2200      	movs	r2, #0
 8003df6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	f7fc ff9a 	bl	8000d34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2224      	movs	r2, #36	; 0x24
 8003e04:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	681a      	ldr	r2, [r3, #0]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f022 0201 	bic.w	r2, r2, #1
 8003e14:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003e16:	6878      	ldr	r0, [r7, #4]
 8003e18:	f000 f8c0 	bl	8003f9c <UART_SetConfig>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	2b01      	cmp	r3, #1
 8003e20:	d101      	bne.n	8003e26 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	e022      	b.n	8003e6c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d002      	beq.n	8003e34 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f000 fb16 	bl	8004460 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	685a      	ldr	r2, [r3, #4]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e42:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	689a      	ldr	r2, [r3, #8]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e52:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f042 0201 	orr.w	r2, r2, #1
 8003e62:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003e64:	6878      	ldr	r0, [r7, #4]
 8003e66:	f000 fb9d 	bl	80045a4 <UART_CheckIdleState>
 8003e6a:	4603      	mov	r3, r0
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	3708      	adds	r7, #8
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}

08003e74 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b08a      	sub	sp, #40	; 0x28
 8003e78:	af02      	add	r7, sp, #8
 8003e7a:	60f8      	str	r0, [r7, #12]
 8003e7c:	60b9      	str	r1, [r7, #8]
 8003e7e:	603b      	str	r3, [r7, #0]
 8003e80:	4613      	mov	r3, r2
 8003e82:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e88:	2b20      	cmp	r3, #32
 8003e8a:	f040 8081 	bne.w	8003f90 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d002      	beq.n	8003e9a <HAL_UART_Transmit+0x26>
 8003e94:	88fb      	ldrh	r3, [r7, #6]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d101      	bne.n	8003e9e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e079      	b.n	8003f92 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003ea4:	2b01      	cmp	r3, #1
 8003ea6:	d101      	bne.n	8003eac <HAL_UART_Transmit+0x38>
 8003ea8:	2302      	movs	r3, #2
 8003eaa:	e072      	b.n	8003f92 <HAL_UART_Transmit+0x11e>
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2201      	movs	r2, #1
 8003eb0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2221      	movs	r2, #33	; 0x21
 8003ec0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003ec2:	f7fd f867 	bl	8000f94 <HAL_GetTick>
 8003ec6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	88fa      	ldrh	r2, [r7, #6]
 8003ecc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	88fa      	ldrh	r2, [r7, #6]
 8003ed4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ee0:	d108      	bne.n	8003ef4 <HAL_UART_Transmit+0x80>
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	691b      	ldr	r3, [r3, #16]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d104      	bne.n	8003ef4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003eea:	2300      	movs	r3, #0
 8003eec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	61bb      	str	r3, [r7, #24]
 8003ef2:	e003      	b.n	8003efc <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ef8:	2300      	movs	r3, #0
 8003efa:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	2200      	movs	r2, #0
 8003f00:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003f04:	e02c      	b.n	8003f60 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	9300      	str	r3, [sp, #0]
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	2180      	movs	r1, #128	; 0x80
 8003f10:	68f8      	ldr	r0, [r7, #12]
 8003f12:	f000 fb7a 	bl	800460a <UART_WaitOnFlagUntilTimeout>
 8003f16:	4603      	mov	r3, r0
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d001      	beq.n	8003f20 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003f1c:	2303      	movs	r3, #3
 8003f1e:	e038      	b.n	8003f92 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8003f20:	69fb      	ldr	r3, [r7, #28]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d10b      	bne.n	8003f3e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003f26:	69bb      	ldr	r3, [r7, #24]
 8003f28:	881b      	ldrh	r3, [r3, #0]
 8003f2a:	461a      	mov	r2, r3
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f34:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003f36:	69bb      	ldr	r3, [r7, #24]
 8003f38:	3302      	adds	r3, #2
 8003f3a:	61bb      	str	r3, [r7, #24]
 8003f3c:	e007      	b.n	8003f4e <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003f3e:	69fb      	ldr	r3, [r7, #28]
 8003f40:	781a      	ldrb	r2, [r3, #0]
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003f48:	69fb      	ldr	r3, [r7, #28]
 8003f4a:	3301      	adds	r3, #1
 8003f4c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003f54:	b29b      	uxth	r3, r3
 8003f56:	3b01      	subs	r3, #1
 8003f58:	b29a      	uxth	r2, r3
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003f66:	b29b      	uxth	r3, r3
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d1cc      	bne.n	8003f06 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	9300      	str	r3, [sp, #0]
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	2200      	movs	r2, #0
 8003f74:	2140      	movs	r1, #64	; 0x40
 8003f76:	68f8      	ldr	r0, [r7, #12]
 8003f78:	f000 fb47 	bl	800460a <UART_WaitOnFlagUntilTimeout>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d001      	beq.n	8003f86 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8003f82:	2303      	movs	r3, #3
 8003f84:	e005      	b.n	8003f92 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	2220      	movs	r2, #32
 8003f8a:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	e000      	b.n	8003f92 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8003f90:	2302      	movs	r3, #2
  }
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	3720      	adds	r7, #32
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}
	...

08003f9c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b088      	sub	sp, #32
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	689a      	ldr	r2, [r3, #8]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	691b      	ldr	r3, [r3, #16]
 8003fb0:	431a      	orrs	r2, r3
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	695b      	ldr	r3, [r3, #20]
 8003fb6:	431a      	orrs	r2, r3
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	69db      	ldr	r3, [r3, #28]
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	681a      	ldr	r2, [r3, #0]
 8003fc6:	4ba7      	ldr	r3, [pc, #668]	; (8004264 <UART_SetConfig+0x2c8>)
 8003fc8:	4013      	ands	r3, r2
 8003fca:	687a      	ldr	r2, [r7, #4]
 8003fcc:	6812      	ldr	r2, [r2, #0]
 8003fce:	6979      	ldr	r1, [r7, #20]
 8003fd0:	430b      	orrs	r3, r1
 8003fd2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	68da      	ldr	r2, [r3, #12]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	430a      	orrs	r2, r1
 8003fe8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	699b      	ldr	r3, [r3, #24]
 8003fee:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6a1b      	ldr	r3, [r3, #32]
 8003ff4:	697a      	ldr	r2, [r7, #20]
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	697a      	ldr	r2, [r7, #20]
 800400a:	430a      	orrs	r2, r1
 800400c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a95      	ldr	r2, [pc, #596]	; (8004268 <UART_SetConfig+0x2cc>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d120      	bne.n	800405a <UART_SetConfig+0xbe>
 8004018:	4b94      	ldr	r3, [pc, #592]	; (800426c <UART_SetConfig+0x2d0>)
 800401a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800401e:	f003 0303 	and.w	r3, r3, #3
 8004022:	2b03      	cmp	r3, #3
 8004024:	d816      	bhi.n	8004054 <UART_SetConfig+0xb8>
 8004026:	a201      	add	r2, pc, #4	; (adr r2, 800402c <UART_SetConfig+0x90>)
 8004028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800402c:	0800403d 	.word	0x0800403d
 8004030:	08004049 	.word	0x08004049
 8004034:	08004043 	.word	0x08004043
 8004038:	0800404f 	.word	0x0800404f
 800403c:	2301      	movs	r3, #1
 800403e:	77fb      	strb	r3, [r7, #31]
 8004040:	e14f      	b.n	80042e2 <UART_SetConfig+0x346>
 8004042:	2302      	movs	r3, #2
 8004044:	77fb      	strb	r3, [r7, #31]
 8004046:	e14c      	b.n	80042e2 <UART_SetConfig+0x346>
 8004048:	2304      	movs	r3, #4
 800404a:	77fb      	strb	r3, [r7, #31]
 800404c:	e149      	b.n	80042e2 <UART_SetConfig+0x346>
 800404e:	2308      	movs	r3, #8
 8004050:	77fb      	strb	r3, [r7, #31]
 8004052:	e146      	b.n	80042e2 <UART_SetConfig+0x346>
 8004054:	2310      	movs	r3, #16
 8004056:	77fb      	strb	r3, [r7, #31]
 8004058:	e143      	b.n	80042e2 <UART_SetConfig+0x346>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a84      	ldr	r2, [pc, #528]	; (8004270 <UART_SetConfig+0x2d4>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d132      	bne.n	80040ca <UART_SetConfig+0x12e>
 8004064:	4b81      	ldr	r3, [pc, #516]	; (800426c <UART_SetConfig+0x2d0>)
 8004066:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800406a:	f003 030c 	and.w	r3, r3, #12
 800406e:	2b0c      	cmp	r3, #12
 8004070:	d828      	bhi.n	80040c4 <UART_SetConfig+0x128>
 8004072:	a201      	add	r2, pc, #4	; (adr r2, 8004078 <UART_SetConfig+0xdc>)
 8004074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004078:	080040ad 	.word	0x080040ad
 800407c:	080040c5 	.word	0x080040c5
 8004080:	080040c5 	.word	0x080040c5
 8004084:	080040c5 	.word	0x080040c5
 8004088:	080040b9 	.word	0x080040b9
 800408c:	080040c5 	.word	0x080040c5
 8004090:	080040c5 	.word	0x080040c5
 8004094:	080040c5 	.word	0x080040c5
 8004098:	080040b3 	.word	0x080040b3
 800409c:	080040c5 	.word	0x080040c5
 80040a0:	080040c5 	.word	0x080040c5
 80040a4:	080040c5 	.word	0x080040c5
 80040a8:	080040bf 	.word	0x080040bf
 80040ac:	2300      	movs	r3, #0
 80040ae:	77fb      	strb	r3, [r7, #31]
 80040b0:	e117      	b.n	80042e2 <UART_SetConfig+0x346>
 80040b2:	2302      	movs	r3, #2
 80040b4:	77fb      	strb	r3, [r7, #31]
 80040b6:	e114      	b.n	80042e2 <UART_SetConfig+0x346>
 80040b8:	2304      	movs	r3, #4
 80040ba:	77fb      	strb	r3, [r7, #31]
 80040bc:	e111      	b.n	80042e2 <UART_SetConfig+0x346>
 80040be:	2308      	movs	r3, #8
 80040c0:	77fb      	strb	r3, [r7, #31]
 80040c2:	e10e      	b.n	80042e2 <UART_SetConfig+0x346>
 80040c4:	2310      	movs	r3, #16
 80040c6:	77fb      	strb	r3, [r7, #31]
 80040c8:	e10b      	b.n	80042e2 <UART_SetConfig+0x346>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a69      	ldr	r2, [pc, #420]	; (8004274 <UART_SetConfig+0x2d8>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d120      	bne.n	8004116 <UART_SetConfig+0x17a>
 80040d4:	4b65      	ldr	r3, [pc, #404]	; (800426c <UART_SetConfig+0x2d0>)
 80040d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040da:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80040de:	2b30      	cmp	r3, #48	; 0x30
 80040e0:	d013      	beq.n	800410a <UART_SetConfig+0x16e>
 80040e2:	2b30      	cmp	r3, #48	; 0x30
 80040e4:	d814      	bhi.n	8004110 <UART_SetConfig+0x174>
 80040e6:	2b20      	cmp	r3, #32
 80040e8:	d009      	beq.n	80040fe <UART_SetConfig+0x162>
 80040ea:	2b20      	cmp	r3, #32
 80040ec:	d810      	bhi.n	8004110 <UART_SetConfig+0x174>
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d002      	beq.n	80040f8 <UART_SetConfig+0x15c>
 80040f2:	2b10      	cmp	r3, #16
 80040f4:	d006      	beq.n	8004104 <UART_SetConfig+0x168>
 80040f6:	e00b      	b.n	8004110 <UART_SetConfig+0x174>
 80040f8:	2300      	movs	r3, #0
 80040fa:	77fb      	strb	r3, [r7, #31]
 80040fc:	e0f1      	b.n	80042e2 <UART_SetConfig+0x346>
 80040fe:	2302      	movs	r3, #2
 8004100:	77fb      	strb	r3, [r7, #31]
 8004102:	e0ee      	b.n	80042e2 <UART_SetConfig+0x346>
 8004104:	2304      	movs	r3, #4
 8004106:	77fb      	strb	r3, [r7, #31]
 8004108:	e0eb      	b.n	80042e2 <UART_SetConfig+0x346>
 800410a:	2308      	movs	r3, #8
 800410c:	77fb      	strb	r3, [r7, #31]
 800410e:	e0e8      	b.n	80042e2 <UART_SetConfig+0x346>
 8004110:	2310      	movs	r3, #16
 8004112:	77fb      	strb	r3, [r7, #31]
 8004114:	e0e5      	b.n	80042e2 <UART_SetConfig+0x346>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a57      	ldr	r2, [pc, #348]	; (8004278 <UART_SetConfig+0x2dc>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d120      	bne.n	8004162 <UART_SetConfig+0x1c6>
 8004120:	4b52      	ldr	r3, [pc, #328]	; (800426c <UART_SetConfig+0x2d0>)
 8004122:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004126:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800412a:	2bc0      	cmp	r3, #192	; 0xc0
 800412c:	d013      	beq.n	8004156 <UART_SetConfig+0x1ba>
 800412e:	2bc0      	cmp	r3, #192	; 0xc0
 8004130:	d814      	bhi.n	800415c <UART_SetConfig+0x1c0>
 8004132:	2b80      	cmp	r3, #128	; 0x80
 8004134:	d009      	beq.n	800414a <UART_SetConfig+0x1ae>
 8004136:	2b80      	cmp	r3, #128	; 0x80
 8004138:	d810      	bhi.n	800415c <UART_SetConfig+0x1c0>
 800413a:	2b00      	cmp	r3, #0
 800413c:	d002      	beq.n	8004144 <UART_SetConfig+0x1a8>
 800413e:	2b40      	cmp	r3, #64	; 0x40
 8004140:	d006      	beq.n	8004150 <UART_SetConfig+0x1b4>
 8004142:	e00b      	b.n	800415c <UART_SetConfig+0x1c0>
 8004144:	2300      	movs	r3, #0
 8004146:	77fb      	strb	r3, [r7, #31]
 8004148:	e0cb      	b.n	80042e2 <UART_SetConfig+0x346>
 800414a:	2302      	movs	r3, #2
 800414c:	77fb      	strb	r3, [r7, #31]
 800414e:	e0c8      	b.n	80042e2 <UART_SetConfig+0x346>
 8004150:	2304      	movs	r3, #4
 8004152:	77fb      	strb	r3, [r7, #31]
 8004154:	e0c5      	b.n	80042e2 <UART_SetConfig+0x346>
 8004156:	2308      	movs	r3, #8
 8004158:	77fb      	strb	r3, [r7, #31]
 800415a:	e0c2      	b.n	80042e2 <UART_SetConfig+0x346>
 800415c:	2310      	movs	r3, #16
 800415e:	77fb      	strb	r3, [r7, #31]
 8004160:	e0bf      	b.n	80042e2 <UART_SetConfig+0x346>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a45      	ldr	r2, [pc, #276]	; (800427c <UART_SetConfig+0x2e0>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d125      	bne.n	80041b8 <UART_SetConfig+0x21c>
 800416c:	4b3f      	ldr	r3, [pc, #252]	; (800426c <UART_SetConfig+0x2d0>)
 800416e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004172:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004176:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800417a:	d017      	beq.n	80041ac <UART_SetConfig+0x210>
 800417c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004180:	d817      	bhi.n	80041b2 <UART_SetConfig+0x216>
 8004182:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004186:	d00b      	beq.n	80041a0 <UART_SetConfig+0x204>
 8004188:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800418c:	d811      	bhi.n	80041b2 <UART_SetConfig+0x216>
 800418e:	2b00      	cmp	r3, #0
 8004190:	d003      	beq.n	800419a <UART_SetConfig+0x1fe>
 8004192:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004196:	d006      	beq.n	80041a6 <UART_SetConfig+0x20a>
 8004198:	e00b      	b.n	80041b2 <UART_SetConfig+0x216>
 800419a:	2300      	movs	r3, #0
 800419c:	77fb      	strb	r3, [r7, #31]
 800419e:	e0a0      	b.n	80042e2 <UART_SetConfig+0x346>
 80041a0:	2302      	movs	r3, #2
 80041a2:	77fb      	strb	r3, [r7, #31]
 80041a4:	e09d      	b.n	80042e2 <UART_SetConfig+0x346>
 80041a6:	2304      	movs	r3, #4
 80041a8:	77fb      	strb	r3, [r7, #31]
 80041aa:	e09a      	b.n	80042e2 <UART_SetConfig+0x346>
 80041ac:	2308      	movs	r3, #8
 80041ae:	77fb      	strb	r3, [r7, #31]
 80041b0:	e097      	b.n	80042e2 <UART_SetConfig+0x346>
 80041b2:	2310      	movs	r3, #16
 80041b4:	77fb      	strb	r3, [r7, #31]
 80041b6:	e094      	b.n	80042e2 <UART_SetConfig+0x346>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a30      	ldr	r2, [pc, #192]	; (8004280 <UART_SetConfig+0x2e4>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d125      	bne.n	800420e <UART_SetConfig+0x272>
 80041c2:	4b2a      	ldr	r3, [pc, #168]	; (800426c <UART_SetConfig+0x2d0>)
 80041c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041c8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80041cc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80041d0:	d017      	beq.n	8004202 <UART_SetConfig+0x266>
 80041d2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80041d6:	d817      	bhi.n	8004208 <UART_SetConfig+0x26c>
 80041d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041dc:	d00b      	beq.n	80041f6 <UART_SetConfig+0x25a>
 80041de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041e2:	d811      	bhi.n	8004208 <UART_SetConfig+0x26c>
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d003      	beq.n	80041f0 <UART_SetConfig+0x254>
 80041e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041ec:	d006      	beq.n	80041fc <UART_SetConfig+0x260>
 80041ee:	e00b      	b.n	8004208 <UART_SetConfig+0x26c>
 80041f0:	2301      	movs	r3, #1
 80041f2:	77fb      	strb	r3, [r7, #31]
 80041f4:	e075      	b.n	80042e2 <UART_SetConfig+0x346>
 80041f6:	2302      	movs	r3, #2
 80041f8:	77fb      	strb	r3, [r7, #31]
 80041fa:	e072      	b.n	80042e2 <UART_SetConfig+0x346>
 80041fc:	2304      	movs	r3, #4
 80041fe:	77fb      	strb	r3, [r7, #31]
 8004200:	e06f      	b.n	80042e2 <UART_SetConfig+0x346>
 8004202:	2308      	movs	r3, #8
 8004204:	77fb      	strb	r3, [r7, #31]
 8004206:	e06c      	b.n	80042e2 <UART_SetConfig+0x346>
 8004208:	2310      	movs	r3, #16
 800420a:	77fb      	strb	r3, [r7, #31]
 800420c:	e069      	b.n	80042e2 <UART_SetConfig+0x346>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a1c      	ldr	r2, [pc, #112]	; (8004284 <UART_SetConfig+0x2e8>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d137      	bne.n	8004288 <UART_SetConfig+0x2ec>
 8004218:	4b14      	ldr	r3, [pc, #80]	; (800426c <UART_SetConfig+0x2d0>)
 800421a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800421e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004222:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004226:	d017      	beq.n	8004258 <UART_SetConfig+0x2bc>
 8004228:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800422c:	d817      	bhi.n	800425e <UART_SetConfig+0x2c2>
 800422e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004232:	d00b      	beq.n	800424c <UART_SetConfig+0x2b0>
 8004234:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004238:	d811      	bhi.n	800425e <UART_SetConfig+0x2c2>
 800423a:	2b00      	cmp	r3, #0
 800423c:	d003      	beq.n	8004246 <UART_SetConfig+0x2aa>
 800423e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004242:	d006      	beq.n	8004252 <UART_SetConfig+0x2b6>
 8004244:	e00b      	b.n	800425e <UART_SetConfig+0x2c2>
 8004246:	2300      	movs	r3, #0
 8004248:	77fb      	strb	r3, [r7, #31]
 800424a:	e04a      	b.n	80042e2 <UART_SetConfig+0x346>
 800424c:	2302      	movs	r3, #2
 800424e:	77fb      	strb	r3, [r7, #31]
 8004250:	e047      	b.n	80042e2 <UART_SetConfig+0x346>
 8004252:	2304      	movs	r3, #4
 8004254:	77fb      	strb	r3, [r7, #31]
 8004256:	e044      	b.n	80042e2 <UART_SetConfig+0x346>
 8004258:	2308      	movs	r3, #8
 800425a:	77fb      	strb	r3, [r7, #31]
 800425c:	e041      	b.n	80042e2 <UART_SetConfig+0x346>
 800425e:	2310      	movs	r3, #16
 8004260:	77fb      	strb	r3, [r7, #31]
 8004262:	e03e      	b.n	80042e2 <UART_SetConfig+0x346>
 8004264:	efff69f3 	.word	0xefff69f3
 8004268:	40011000 	.word	0x40011000
 800426c:	40023800 	.word	0x40023800
 8004270:	40004400 	.word	0x40004400
 8004274:	40004800 	.word	0x40004800
 8004278:	40004c00 	.word	0x40004c00
 800427c:	40005000 	.word	0x40005000
 8004280:	40011400 	.word	0x40011400
 8004284:	40007800 	.word	0x40007800
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a71      	ldr	r2, [pc, #452]	; (8004454 <UART_SetConfig+0x4b8>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d125      	bne.n	80042de <UART_SetConfig+0x342>
 8004292:	4b71      	ldr	r3, [pc, #452]	; (8004458 <UART_SetConfig+0x4bc>)
 8004294:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004298:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800429c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80042a0:	d017      	beq.n	80042d2 <UART_SetConfig+0x336>
 80042a2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80042a6:	d817      	bhi.n	80042d8 <UART_SetConfig+0x33c>
 80042a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042ac:	d00b      	beq.n	80042c6 <UART_SetConfig+0x32a>
 80042ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042b2:	d811      	bhi.n	80042d8 <UART_SetConfig+0x33c>
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d003      	beq.n	80042c0 <UART_SetConfig+0x324>
 80042b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80042bc:	d006      	beq.n	80042cc <UART_SetConfig+0x330>
 80042be:	e00b      	b.n	80042d8 <UART_SetConfig+0x33c>
 80042c0:	2300      	movs	r3, #0
 80042c2:	77fb      	strb	r3, [r7, #31]
 80042c4:	e00d      	b.n	80042e2 <UART_SetConfig+0x346>
 80042c6:	2302      	movs	r3, #2
 80042c8:	77fb      	strb	r3, [r7, #31]
 80042ca:	e00a      	b.n	80042e2 <UART_SetConfig+0x346>
 80042cc:	2304      	movs	r3, #4
 80042ce:	77fb      	strb	r3, [r7, #31]
 80042d0:	e007      	b.n	80042e2 <UART_SetConfig+0x346>
 80042d2:	2308      	movs	r3, #8
 80042d4:	77fb      	strb	r3, [r7, #31]
 80042d6:	e004      	b.n	80042e2 <UART_SetConfig+0x346>
 80042d8:	2310      	movs	r3, #16
 80042da:	77fb      	strb	r3, [r7, #31]
 80042dc:	e001      	b.n	80042e2 <UART_SetConfig+0x346>
 80042de:	2310      	movs	r3, #16
 80042e0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	69db      	ldr	r3, [r3, #28]
 80042e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042ea:	d15b      	bne.n	80043a4 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 80042ec:	7ffb      	ldrb	r3, [r7, #31]
 80042ee:	2b08      	cmp	r3, #8
 80042f0:	d827      	bhi.n	8004342 <UART_SetConfig+0x3a6>
 80042f2:	a201      	add	r2, pc, #4	; (adr r2, 80042f8 <UART_SetConfig+0x35c>)
 80042f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042f8:	0800431d 	.word	0x0800431d
 80042fc:	08004325 	.word	0x08004325
 8004300:	0800432d 	.word	0x0800432d
 8004304:	08004343 	.word	0x08004343
 8004308:	08004333 	.word	0x08004333
 800430c:	08004343 	.word	0x08004343
 8004310:	08004343 	.word	0x08004343
 8004314:	08004343 	.word	0x08004343
 8004318:	0800433b 	.word	0x0800433b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800431c:	f7fe f9b8 	bl	8002690 <HAL_RCC_GetPCLK1Freq>
 8004320:	61b8      	str	r0, [r7, #24]
        break;
 8004322:	e013      	b.n	800434c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004324:	f7fe f9c8 	bl	80026b8 <HAL_RCC_GetPCLK2Freq>
 8004328:	61b8      	str	r0, [r7, #24]
        break;
 800432a:	e00f      	b.n	800434c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800432c:	4b4b      	ldr	r3, [pc, #300]	; (800445c <UART_SetConfig+0x4c0>)
 800432e:	61bb      	str	r3, [r7, #24]
        break;
 8004330:	e00c      	b.n	800434c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004332:	f7fe f8eb 	bl	800250c <HAL_RCC_GetSysClockFreq>
 8004336:	61b8      	str	r0, [r7, #24]
        break;
 8004338:	e008      	b.n	800434c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800433a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800433e:	61bb      	str	r3, [r7, #24]
        break;
 8004340:	e004      	b.n	800434c <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8004342:	2300      	movs	r3, #0
 8004344:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004346:	2301      	movs	r3, #1
 8004348:	77bb      	strb	r3, [r7, #30]
        break;
 800434a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800434c:	69bb      	ldr	r3, [r7, #24]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d074      	beq.n	800443c <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004352:	69bb      	ldr	r3, [r7, #24]
 8004354:	005a      	lsls	r2, r3, #1
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	085b      	lsrs	r3, r3, #1
 800435c:	441a      	add	r2, r3
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	fbb2 f3f3 	udiv	r3, r2, r3
 8004366:	b29b      	uxth	r3, r3
 8004368:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	2b0f      	cmp	r3, #15
 800436e:	d916      	bls.n	800439e <UART_SetConfig+0x402>
 8004370:	693b      	ldr	r3, [r7, #16]
 8004372:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004376:	d212      	bcs.n	800439e <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004378:	693b      	ldr	r3, [r7, #16]
 800437a:	b29b      	uxth	r3, r3
 800437c:	f023 030f 	bic.w	r3, r3, #15
 8004380:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	085b      	lsrs	r3, r3, #1
 8004386:	b29b      	uxth	r3, r3
 8004388:	f003 0307 	and.w	r3, r3, #7
 800438c:	b29a      	uxth	r2, r3
 800438e:	89fb      	ldrh	r3, [r7, #14]
 8004390:	4313      	orrs	r3, r2
 8004392:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	89fa      	ldrh	r2, [r7, #14]
 800439a:	60da      	str	r2, [r3, #12]
 800439c:	e04e      	b.n	800443c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800439e:	2301      	movs	r3, #1
 80043a0:	77bb      	strb	r3, [r7, #30]
 80043a2:	e04b      	b.n	800443c <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 80043a4:	7ffb      	ldrb	r3, [r7, #31]
 80043a6:	2b08      	cmp	r3, #8
 80043a8:	d827      	bhi.n	80043fa <UART_SetConfig+0x45e>
 80043aa:	a201      	add	r2, pc, #4	; (adr r2, 80043b0 <UART_SetConfig+0x414>)
 80043ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043b0:	080043d5 	.word	0x080043d5
 80043b4:	080043dd 	.word	0x080043dd
 80043b8:	080043e5 	.word	0x080043e5
 80043bc:	080043fb 	.word	0x080043fb
 80043c0:	080043eb 	.word	0x080043eb
 80043c4:	080043fb 	.word	0x080043fb
 80043c8:	080043fb 	.word	0x080043fb
 80043cc:	080043fb 	.word	0x080043fb
 80043d0:	080043f3 	.word	0x080043f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80043d4:	f7fe f95c 	bl	8002690 <HAL_RCC_GetPCLK1Freq>
 80043d8:	61b8      	str	r0, [r7, #24]
        break;
 80043da:	e013      	b.n	8004404 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80043dc:	f7fe f96c 	bl	80026b8 <HAL_RCC_GetPCLK2Freq>
 80043e0:	61b8      	str	r0, [r7, #24]
        break;
 80043e2:	e00f      	b.n	8004404 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80043e4:	4b1d      	ldr	r3, [pc, #116]	; (800445c <UART_SetConfig+0x4c0>)
 80043e6:	61bb      	str	r3, [r7, #24]
        break;
 80043e8:	e00c      	b.n	8004404 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80043ea:	f7fe f88f 	bl	800250c <HAL_RCC_GetSysClockFreq>
 80043ee:	61b8      	str	r0, [r7, #24]
        break;
 80043f0:	e008      	b.n	8004404 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80043f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043f6:	61bb      	str	r3, [r7, #24]
        break;
 80043f8:	e004      	b.n	8004404 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 80043fa:	2300      	movs	r3, #0
 80043fc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80043fe:	2301      	movs	r3, #1
 8004400:	77bb      	strb	r3, [r7, #30]
        break;
 8004402:	bf00      	nop
    }

    if (pclk != 0U)
 8004404:	69bb      	ldr	r3, [r7, #24]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d018      	beq.n	800443c <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	085a      	lsrs	r2, r3, #1
 8004410:	69bb      	ldr	r3, [r7, #24]
 8004412:	441a      	add	r2, r3
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	fbb2 f3f3 	udiv	r3, r2, r3
 800441c:	b29b      	uxth	r3, r3
 800441e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004420:	693b      	ldr	r3, [r7, #16]
 8004422:	2b0f      	cmp	r3, #15
 8004424:	d908      	bls.n	8004438 <UART_SetConfig+0x49c>
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800442c:	d204      	bcs.n	8004438 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	693a      	ldr	r2, [r7, #16]
 8004434:	60da      	str	r2, [r3, #12]
 8004436:	e001      	b.n	800443c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8004438:	2301      	movs	r3, #1
 800443a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2200      	movs	r2, #0
 8004440:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2200      	movs	r2, #0
 8004446:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004448:	7fbb      	ldrb	r3, [r7, #30]
}
 800444a:	4618      	mov	r0, r3
 800444c:	3720      	adds	r7, #32
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}
 8004452:	bf00      	nop
 8004454:	40007c00 	.word	0x40007c00
 8004458:	40023800 	.word	0x40023800
 800445c:	00f42400 	.word	0x00f42400

08004460 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004460:	b480      	push	{r7}
 8004462:	b083      	sub	sp, #12
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800446c:	f003 0301 	and.w	r3, r3, #1
 8004470:	2b00      	cmp	r3, #0
 8004472:	d00a      	beq.n	800448a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	430a      	orrs	r2, r1
 8004488:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800448e:	f003 0302 	and.w	r3, r3, #2
 8004492:	2b00      	cmp	r3, #0
 8004494:	d00a      	beq.n	80044ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	430a      	orrs	r2, r1
 80044aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b0:	f003 0304 	and.w	r3, r3, #4
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d00a      	beq.n	80044ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	430a      	orrs	r2, r1
 80044cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d2:	f003 0308 	and.w	r3, r3, #8
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d00a      	beq.n	80044f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	430a      	orrs	r2, r1
 80044ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f4:	f003 0310 	and.w	r3, r3, #16
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d00a      	beq.n	8004512 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	689b      	ldr	r3, [r3, #8]
 8004502:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	430a      	orrs	r2, r1
 8004510:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004516:	f003 0320 	and.w	r3, r3, #32
 800451a:	2b00      	cmp	r3, #0
 800451c:	d00a      	beq.n	8004534 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	430a      	orrs	r2, r1
 8004532:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004538:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800453c:	2b00      	cmp	r3, #0
 800453e:	d01a      	beq.n	8004576 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	430a      	orrs	r2, r1
 8004554:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800455a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800455e:	d10a      	bne.n	8004576 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	430a      	orrs	r2, r1
 8004574:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800457a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800457e:	2b00      	cmp	r3, #0
 8004580:	d00a      	beq.n	8004598 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	430a      	orrs	r2, r1
 8004596:	605a      	str	r2, [r3, #4]
  }
}
 8004598:	bf00      	nop
 800459a:	370c      	adds	r7, #12
 800459c:	46bd      	mov	sp, r7
 800459e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a2:	4770      	bx	lr

080045a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b086      	sub	sp, #24
 80045a8:	af02      	add	r7, sp, #8
 80045aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2200      	movs	r2, #0
 80045b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80045b4:	f7fc fcee 	bl	8000f94 <HAL_GetTick>
 80045b8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f003 0308 	and.w	r3, r3, #8
 80045c4:	2b08      	cmp	r3, #8
 80045c6:	d10e      	bne.n	80045e6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80045c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80045cc:	9300      	str	r3, [sp, #0]
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	2200      	movs	r2, #0
 80045d2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	f000 f817 	bl	800460a <UART_WaitOnFlagUntilTimeout>
 80045dc:	4603      	mov	r3, r0
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d001      	beq.n	80045e6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80045e2:	2303      	movs	r3, #3
 80045e4:	e00d      	b.n	8004602 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2220      	movs	r2, #32
 80045ea:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2220      	movs	r2, #32
 80045f0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2200      	movs	r2, #0
 80045f6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2200      	movs	r2, #0
 80045fc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004600:	2300      	movs	r3, #0
}
 8004602:	4618      	mov	r0, r3
 8004604:	3710      	adds	r7, #16
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}

0800460a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800460a:	b580      	push	{r7, lr}
 800460c:	b084      	sub	sp, #16
 800460e:	af00      	add	r7, sp, #0
 8004610:	60f8      	str	r0, [r7, #12]
 8004612:	60b9      	str	r1, [r7, #8]
 8004614:	603b      	str	r3, [r7, #0]
 8004616:	4613      	mov	r3, r2
 8004618:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800461a:	e05e      	b.n	80046da <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800461c:	69bb      	ldr	r3, [r7, #24]
 800461e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004622:	d05a      	beq.n	80046da <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004624:	f7fc fcb6 	bl	8000f94 <HAL_GetTick>
 8004628:	4602      	mov	r2, r0
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	1ad3      	subs	r3, r2, r3
 800462e:	69ba      	ldr	r2, [r7, #24]
 8004630:	429a      	cmp	r2, r3
 8004632:	d302      	bcc.n	800463a <UART_WaitOnFlagUntilTimeout+0x30>
 8004634:	69bb      	ldr	r3, [r7, #24]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d11b      	bne.n	8004672 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	681a      	ldr	r2, [r3, #0]
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004648:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	689a      	ldr	r2, [r3, #8]
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f022 0201 	bic.w	r2, r2, #1
 8004658:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2220      	movs	r2, #32
 800465e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	2220      	movs	r2, #32
 8004664:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	2200      	movs	r2, #0
 800466a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800466e:	2303      	movs	r3, #3
 8004670:	e043      	b.n	80046fa <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f003 0304 	and.w	r3, r3, #4
 800467c:	2b00      	cmp	r3, #0
 800467e:	d02c      	beq.n	80046da <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	69db      	ldr	r3, [r3, #28]
 8004686:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800468a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800468e:	d124      	bne.n	80046da <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004698:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	681a      	ldr	r2, [r3, #0]
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80046a8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	689a      	ldr	r2, [r3, #8]
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f022 0201 	bic.w	r2, r2, #1
 80046b8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	2220      	movs	r2, #32
 80046be:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	2220      	movs	r2, #32
 80046c4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	2220      	movs	r2, #32
 80046ca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	2200      	movs	r2, #0
 80046d2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80046d6:	2303      	movs	r3, #3
 80046d8:	e00f      	b.n	80046fa <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	69da      	ldr	r2, [r3, #28]
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	4013      	ands	r3, r2
 80046e4:	68ba      	ldr	r2, [r7, #8]
 80046e6:	429a      	cmp	r2, r3
 80046e8:	bf0c      	ite	eq
 80046ea:	2301      	moveq	r3, #1
 80046ec:	2300      	movne	r3, #0
 80046ee:	b2db      	uxtb	r3, r3
 80046f0:	461a      	mov	r2, r3
 80046f2:	79fb      	ldrb	r3, [r7, #7]
 80046f4:	429a      	cmp	r2, r3
 80046f6:	d091      	beq.n	800461c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80046f8:	2300      	movs	r3, #0
}
 80046fa:	4618      	mov	r0, r3
 80046fc:	3710      	adds	r7, #16
 80046fe:	46bd      	mov	sp, r7
 8004700:	bd80      	pop	{r7, pc}
	...

08004704 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8004704:	b084      	sub	sp, #16
 8004706:	b480      	push	{r7}
 8004708:	b085      	sub	sp, #20
 800470a:	af00      	add	r7, sp, #0
 800470c:	6078      	str	r0, [r7, #4]
 800470e:	f107 001c 	add.w	r0, r7, #28
 8004712:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8004716:	2300      	movs	r3, #0
 8004718:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800471a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800471c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800471e:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8004720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8004722:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8004724:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8004726:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8004728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800472a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800472c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800472e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8004730:	68fa      	ldr	r2, [r7, #12]
 8004732:	4313      	orrs	r3, r2
 8004734:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	685a      	ldr	r2, [r3, #4]
 800473a:	4b07      	ldr	r3, [pc, #28]	; (8004758 <SDMMC_Init+0x54>)
 800473c:	4013      	ands	r3, r2
 800473e:	68fa      	ldr	r2, [r7, #12]
 8004740:	431a      	orrs	r2, r3
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8004746:	2300      	movs	r3, #0
}
 8004748:	4618      	mov	r0, r3
 800474a:	3714      	adds	r7, #20
 800474c:	46bd      	mov	sp, r7
 800474e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004752:	b004      	add	sp, #16
 8004754:	4770      	bx	lr
 8004756:	bf00      	nop
 8004758:	ffff8100 	.word	0xffff8100

0800475c <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800475c:	b480      	push	{r7}
 800475e:	b083      	sub	sp, #12
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800476a:	4618      	mov	r0, r3
 800476c:	370c      	adds	r7, #12
 800476e:	46bd      	mov	sp, r7
 8004770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004774:	4770      	bx	lr

08004776 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 8004776:	b480      	push	{r7}
 8004778:	b083      	sub	sp, #12
 800477a:	af00      	add	r7, sp, #0
 800477c:	6078      	str	r0, [r7, #4]
 800477e:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	681a      	ldr	r2, [r3, #0]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800478a:	2300      	movs	r3, #0
}
 800478c:	4618      	mov	r0, r3
 800478e:	370c      	adds	r7, #12
 8004790:	46bd      	mov	sp, r7
 8004792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004796:	4770      	bx	lr

08004798 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 8004798:	b580      	push	{r7, lr}
 800479a:	b082      	sub	sp, #8
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2203      	movs	r2, #3
 80047a4:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 80047a6:	2002      	movs	r0, #2
 80047a8:	f7fc fc00 	bl	8000fac <HAL_Delay>
  
  return HAL_OK;
 80047ac:	2300      	movs	r3, #0
}
 80047ae:	4618      	mov	r0, r3
 80047b0:	3708      	adds	r7, #8
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}

080047b6 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 80047b6:	b480      	push	{r7}
 80047b8:	b083      	sub	sp, #12
 80047ba:	af00      	add	r7, sp, #0
 80047bc:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f003 0303 	and.w	r3, r3, #3
}
 80047c6:	4618      	mov	r0, r3
 80047c8:	370c      	adds	r7, #12
 80047ca:	46bd      	mov	sp, r7
 80047cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d0:	4770      	bx	lr
	...

080047d4 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 80047d4:	b480      	push	{r7}
 80047d6:	b085      	sub	sp, #20
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
 80047dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80047de:	2300      	movs	r3, #0
 80047e0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	681a      	ldr	r2, [r3, #0]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80047f2:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80047f8:	431a      	orrs	r2, r3
                       Command->CPSM);
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80047fe:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004800:	68fa      	ldr	r2, [r7, #12]
 8004802:	4313      	orrs	r3, r2
 8004804:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	68da      	ldr	r2, [r3, #12]
 800480a:	4b06      	ldr	r3, [pc, #24]	; (8004824 <SDMMC_SendCommand+0x50>)
 800480c:	4013      	ands	r3, r2
 800480e:	68fa      	ldr	r2, [r7, #12]
 8004810:	431a      	orrs	r2, r3
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8004816:	2300      	movs	r3, #0
}
 8004818:	4618      	mov	r0, r3
 800481a:	3714      	adds	r7, #20
 800481c:	46bd      	mov	sp, r7
 800481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004822:	4770      	bx	lr
 8004824:	fffff000 	.word	0xfffff000

08004828 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8004828:	b480      	push	{r7}
 800482a:	b083      	sub	sp, #12
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	691b      	ldr	r3, [r3, #16]
 8004834:	b2db      	uxtb	r3, r3
}
 8004836:	4618      	mov	r0, r3
 8004838:	370c      	adds	r7, #12
 800483a:	46bd      	mov	sp, r7
 800483c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004840:	4770      	bx	lr

08004842 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8004842:	b480      	push	{r7}
 8004844:	b085      	sub	sp, #20
 8004846:	af00      	add	r7, sp, #0
 8004848:	6078      	str	r0, [r7, #4]
 800484a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	3314      	adds	r3, #20
 8004850:	461a      	mov	r2, r3
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	4413      	add	r3, r2
 8004856:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
}  
 800485c:	4618      	mov	r0, r3
 800485e:	3714      	adds	r7, #20
 8004860:	46bd      	mov	sp, r7
 8004862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004866:	4770      	bx	lr

08004868 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8004868:	b480      	push	{r7}
 800486a:	b085      	sub	sp, #20
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
 8004870:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004872:	2300      	movs	r3, #0
 8004874:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	681a      	ldr	r2, [r3, #0]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	685a      	ldr	r2, [r3, #4]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800488e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8004894:	431a      	orrs	r2, r3
                       Data->DPSM);
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800489a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800489c:	68fa      	ldr	r2, [r7, #12]
 800489e:	4313      	orrs	r3, r2
 80048a0:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048a6:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	431a      	orrs	r2, r3
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80048b2:	2300      	movs	r3, #0

}
 80048b4:	4618      	mov	r0, r3
 80048b6:	3714      	adds	r7, #20
 80048b8:	46bd      	mov	sp, r7
 80048ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048be:	4770      	bx	lr

080048c0 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b088      	sub	sp, #32
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
 80048c8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80048ce:	2310      	movs	r3, #16
 80048d0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80048d2:	2340      	movs	r3, #64	; 0x40
 80048d4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80048d6:	2300      	movs	r3, #0
 80048d8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80048da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80048de:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80048e0:	f107 0308 	add.w	r3, r7, #8
 80048e4:	4619      	mov	r1, r3
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	f7ff ff74 	bl	80047d4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 80048ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80048f0:	2110      	movs	r1, #16
 80048f2:	6878      	ldr	r0, [r7, #4]
 80048f4:	f000 fa02 	bl	8004cfc <SDMMC_GetCmdResp1>
 80048f8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80048fa:	69fb      	ldr	r3, [r7, #28]
}
 80048fc:	4618      	mov	r0, r3
 80048fe:	3720      	adds	r7, #32
 8004900:	46bd      	mov	sp, r7
 8004902:	bd80      	pop	{r7, pc}

08004904 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b088      	sub	sp, #32
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
 800490c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8004912:	2311      	movs	r3, #17
 8004914:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004916:	2340      	movs	r3, #64	; 0x40
 8004918:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800491a:	2300      	movs	r3, #0
 800491c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800491e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004922:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004924:	f107 0308 	add.w	r3, r7, #8
 8004928:	4619      	mov	r1, r3
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	f7ff ff52 	bl	80047d4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8004930:	f241 3288 	movw	r2, #5000	; 0x1388
 8004934:	2111      	movs	r1, #17
 8004936:	6878      	ldr	r0, [r7, #4]
 8004938:	f000 f9e0 	bl	8004cfc <SDMMC_GetCmdResp1>
 800493c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800493e:	69fb      	ldr	r3, [r7, #28]
}
 8004940:	4618      	mov	r0, r3
 8004942:	3720      	adds	r7, #32
 8004944:	46bd      	mov	sp, r7
 8004946:	bd80      	pop	{r7, pc}

08004948 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b088      	sub	sp, #32
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
 8004950:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8004956:	2312      	movs	r3, #18
 8004958:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800495a:	2340      	movs	r3, #64	; 0x40
 800495c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800495e:	2300      	movs	r3, #0
 8004960:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004962:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004966:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004968:	f107 0308 	add.w	r3, r7, #8
 800496c:	4619      	mov	r1, r3
 800496e:	6878      	ldr	r0, [r7, #4]
 8004970:	f7ff ff30 	bl	80047d4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8004974:	f241 3288 	movw	r2, #5000	; 0x1388
 8004978:	2112      	movs	r1, #18
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	f000 f9be 	bl	8004cfc <SDMMC_GetCmdResp1>
 8004980:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004982:	69fb      	ldr	r3, [r7, #28]
}
 8004984:	4618      	mov	r0, r3
 8004986:	3720      	adds	r7, #32
 8004988:	46bd      	mov	sp, r7
 800498a:	bd80      	pop	{r7, pc}

0800498c <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b088      	sub	sp, #32
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
 8004994:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800499a:	2318      	movs	r3, #24
 800499c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800499e:	2340      	movs	r3, #64	; 0x40
 80049a0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80049a2:	2300      	movs	r3, #0
 80049a4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80049a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80049aa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80049ac:	f107 0308 	add.w	r3, r7, #8
 80049b0:	4619      	mov	r1, r3
 80049b2:	6878      	ldr	r0, [r7, #4]
 80049b4:	f7ff ff0e 	bl	80047d4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80049b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80049bc:	2118      	movs	r1, #24
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	f000 f99c 	bl	8004cfc <SDMMC_GetCmdResp1>
 80049c4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80049c6:	69fb      	ldr	r3, [r7, #28]
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	3720      	adds	r7, #32
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bd80      	pop	{r7, pc}

080049d0 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b088      	sub	sp, #32
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
 80049d8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80049de:	2319      	movs	r3, #25
 80049e0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80049e2:	2340      	movs	r3, #64	; 0x40
 80049e4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80049e6:	2300      	movs	r3, #0
 80049e8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80049ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80049ee:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80049f0:	f107 0308 	add.w	r3, r7, #8
 80049f4:	4619      	mov	r1, r3
 80049f6:	6878      	ldr	r0, [r7, #4]
 80049f8:	f7ff feec 	bl	80047d4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80049fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a00:	2119      	movs	r1, #25
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f000 f97a 	bl	8004cfc <SDMMC_GetCmdResp1>
 8004a08:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004a0a:	69fb      	ldr	r3, [r7, #28]
}
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	3720      	adds	r7, #32
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bd80      	pop	{r7, pc}

08004a14 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b088      	sub	sp, #32
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8004a20:	230c      	movs	r3, #12
 8004a22:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004a24:	2340      	movs	r3, #64	; 0x40
 8004a26:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004a28:	2300      	movs	r3, #0
 8004a2a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004a2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a30:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004a32:	f107 0308 	add.w	r3, r7, #8
 8004a36:	4619      	mov	r1, r3
 8004a38:	6878      	ldr	r0, [r7, #4]
 8004a3a:	f7ff fecb 	bl	80047d4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8004a3e:	4a05      	ldr	r2, [pc, #20]	; (8004a54 <SDMMC_CmdStopTransfer+0x40>)
 8004a40:	210c      	movs	r1, #12
 8004a42:	6878      	ldr	r0, [r7, #4]
 8004a44:	f000 f95a 	bl	8004cfc <SDMMC_GetCmdResp1>
 8004a48:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004a4a:	69fb      	ldr	r3, [r7, #28]
}
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	3720      	adds	r7, #32
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bd80      	pop	{r7, pc}
 8004a54:	05f5e100 	.word	0x05f5e100

08004a58 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b08a      	sub	sp, #40	; 0x28
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	60f8      	str	r0, [r7, #12]
 8004a60:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8004a68:	2307      	movs	r3, #7
 8004a6a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004a6c:	2340      	movs	r3, #64	; 0x40
 8004a6e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004a70:	2300      	movs	r3, #0
 8004a72:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004a74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a78:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004a7a:	f107 0310 	add.w	r3, r7, #16
 8004a7e:	4619      	mov	r1, r3
 8004a80:	68f8      	ldr	r0, [r7, #12]
 8004a82:	f7ff fea7 	bl	80047d4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8004a86:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a8a:	2107      	movs	r1, #7
 8004a8c:	68f8      	ldr	r0, [r7, #12]
 8004a8e:	f000 f935 	bl	8004cfc <SDMMC_GetCmdResp1>
 8004a92:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8004a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004a96:	4618      	mov	r0, r3
 8004a98:	3728      	adds	r7, #40	; 0x28
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}

08004a9e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8004a9e:	b580      	push	{r7, lr}
 8004aa0:	b088      	sub	sp, #32
 8004aa2:	af00      	add	r7, sp, #0
 8004aa4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8004aaa:	2300      	movs	r3, #0
 8004aac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8004aae:	2300      	movs	r3, #0
 8004ab0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004ab6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004aba:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004abc:	f107 0308 	add.w	r3, r7, #8
 8004ac0:	4619      	mov	r1, r3
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f7ff fe86 	bl	80047d4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8004ac8:	6878      	ldr	r0, [r7, #4]
 8004aca:	f000 f8eb 	bl	8004ca4 <SDMMC_GetCmdError>
 8004ace:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004ad0:	69fb      	ldr	r3, [r7, #28]
}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	3720      	adds	r7, #32
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bd80      	pop	{r7, pc}

08004ada <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8004ada:	b580      	push	{r7, lr}
 8004adc:	b088      	sub	sp, #32
 8004ade:	af00      	add	r7, sp, #0
 8004ae0:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8004ae2:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8004ae6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8004ae8:	2308      	movs	r3, #8
 8004aea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004aec:	2340      	movs	r3, #64	; 0x40
 8004aee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004af0:	2300      	movs	r3, #0
 8004af2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004af4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004af8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004afa:	f107 0308 	add.w	r3, r7, #8
 8004afe:	4619      	mov	r1, r3
 8004b00:	6878      	ldr	r0, [r7, #4]
 8004b02:	f7ff fe67 	bl	80047d4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8004b06:	6878      	ldr	r0, [r7, #4]
 8004b08:	f000 fae2 	bl	80050d0 <SDMMC_GetCmdResp7>
 8004b0c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004b0e:	69fb      	ldr	r3, [r7, #28]
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	3720      	adds	r7, #32
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}

08004b18 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b088      	sub	sp, #32
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
 8004b20:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8004b26:	2337      	movs	r3, #55	; 0x37
 8004b28:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004b2a:	2340      	movs	r3, #64	; 0x40
 8004b2c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004b2e:	2300      	movs	r3, #0
 8004b30:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004b32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b36:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004b38:	f107 0308 	add.w	r3, r7, #8
 8004b3c:	4619      	mov	r1, r3
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f7ff fe48 	bl	80047d4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8004b44:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b48:	2137      	movs	r1, #55	; 0x37
 8004b4a:	6878      	ldr	r0, [r7, #4]
 8004b4c:	f000 f8d6 	bl	8004cfc <SDMMC_GetCmdResp1>
 8004b50:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004b52:	69fb      	ldr	r3, [r7, #28]
}
 8004b54:	4618      	mov	r0, r3
 8004b56:	3720      	adds	r7, #32
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bd80      	pop	{r7, pc}

08004b5c <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b088      	sub	sp, #32
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
 8004b64:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8004b66:	683a      	ldr	r2, [r7, #0]
 8004b68:	4b0d      	ldr	r3, [pc, #52]	; (8004ba0 <SDMMC_CmdAppOperCommand+0x44>)
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8004b6e:	2329      	movs	r3, #41	; 0x29
 8004b70:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004b72:	2340      	movs	r3, #64	; 0x40
 8004b74:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004b76:	2300      	movs	r3, #0
 8004b78:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004b7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b7e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004b80:	f107 0308 	add.w	r3, r7, #8
 8004b84:	4619      	mov	r1, r3
 8004b86:	6878      	ldr	r0, [r7, #4]
 8004b88:	f7ff fe24 	bl	80047d4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8004b8c:	6878      	ldr	r0, [r7, #4]
 8004b8e:	f000 f9eb 	bl	8004f68 <SDMMC_GetCmdResp3>
 8004b92:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004b94:	69fb      	ldr	r3, [r7, #28]
}
 8004b96:	4618      	mov	r0, r3
 8004b98:	3720      	adds	r7, #32
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd80      	pop	{r7, pc}
 8004b9e:	bf00      	nop
 8004ba0:	80100000 	.word	0x80100000

08004ba4 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b088      	sub	sp, #32
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8004bac:	2300      	movs	r3, #0
 8004bae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8004bb0:	2302      	movs	r3, #2
 8004bb2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8004bb4:	23c0      	movs	r3, #192	; 0xc0
 8004bb6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004bb8:	2300      	movs	r3, #0
 8004bba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004bbc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004bc0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004bc2:	f107 0308 	add.w	r3, r7, #8
 8004bc6:	4619      	mov	r1, r3
 8004bc8:	6878      	ldr	r0, [r7, #4]
 8004bca:	f7ff fe03 	bl	80047d4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8004bce:	6878      	ldr	r0, [r7, #4]
 8004bd0:	f000 f982 	bl	8004ed8 <SDMMC_GetCmdResp2>
 8004bd4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004bd6:	69fb      	ldr	r3, [r7, #28]
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	3720      	adds	r7, #32
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bd80      	pop	{r7, pc}

08004be0 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b088      	sub	sp, #32
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
 8004be8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8004bee:	2309      	movs	r3, #9
 8004bf0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8004bf2:	23c0      	movs	r3, #192	; 0xc0
 8004bf4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004bfa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004bfe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004c00:	f107 0308 	add.w	r3, r7, #8
 8004c04:	4619      	mov	r1, r3
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f7ff fde4 	bl	80047d4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8004c0c:	6878      	ldr	r0, [r7, #4]
 8004c0e:	f000 f963 	bl	8004ed8 <SDMMC_GetCmdResp2>
 8004c12:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004c14:	69fb      	ldr	r3, [r7, #28]
}
 8004c16:	4618      	mov	r0, r3
 8004c18:	3720      	adds	r7, #32
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd80      	pop	{r7, pc}

08004c1e <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8004c1e:	b580      	push	{r7, lr}
 8004c20:	b088      	sub	sp, #32
 8004c22:	af00      	add	r7, sp, #0
 8004c24:	6078      	str	r0, [r7, #4]
 8004c26:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8004c28:	2300      	movs	r3, #0
 8004c2a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8004c2c:	2303      	movs	r3, #3
 8004c2e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004c30:	2340      	movs	r3, #64	; 0x40
 8004c32:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004c34:	2300      	movs	r3, #0
 8004c36:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004c38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c3c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004c3e:	f107 0308 	add.w	r3, r7, #8
 8004c42:	4619      	mov	r1, r3
 8004c44:	6878      	ldr	r0, [r7, #4]
 8004c46:	f7ff fdc5 	bl	80047d4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8004c4a:	683a      	ldr	r2, [r7, #0]
 8004c4c:	2103      	movs	r1, #3
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	f000 f9c8 	bl	8004fe4 <SDMMC_GetCmdResp6>
 8004c54:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004c56:	69fb      	ldr	r3, [r7, #28]
}
 8004c58:	4618      	mov	r0, r3
 8004c5a:	3720      	adds	r7, #32
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bd80      	pop	{r7, pc}

08004c60 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b088      	sub	sp, #32
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
 8004c68:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8004c6e:	230d      	movs	r3, #13
 8004c70:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004c72:	2340      	movs	r3, #64	; 0x40
 8004c74:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004c76:	2300      	movs	r3, #0
 8004c78:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004c7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c7e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004c80:	f107 0308 	add.w	r3, r7, #8
 8004c84:	4619      	mov	r1, r3
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	f7ff fda4 	bl	80047d4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8004c8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c90:	210d      	movs	r1, #13
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	f000 f832 	bl	8004cfc <SDMMC_GetCmdResp1>
 8004c98:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004c9a:	69fb      	ldr	r3, [r7, #28]
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	3720      	adds	r7, #32
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd80      	pop	{r7, pc}

08004ca4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b085      	sub	sp, #20
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004cac:	4b11      	ldr	r3, [pc, #68]	; (8004cf4 <SDMMC_GetCmdError+0x50>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a11      	ldr	r2, [pc, #68]	; (8004cf8 <SDMMC_GetCmdError+0x54>)
 8004cb2:	fba2 2303 	umull	r2, r3, r2, r3
 8004cb6:	0a5b      	lsrs	r3, r3, #9
 8004cb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cbc:	fb02 f303 	mul.w	r3, r2, r3
 8004cc0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	1e5a      	subs	r2, r3, #1
 8004cc6:	60fa      	str	r2, [r7, #12]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d102      	bne.n	8004cd2 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004ccc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004cd0:	e009      	b.n	8004ce6 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d0f1      	beq.n	8004cc2 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	22c5      	movs	r2, #197	; 0xc5
 8004ce2:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8004ce4:	2300      	movs	r3, #0
}
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	3714      	adds	r7, #20
 8004cea:	46bd      	mov	sp, r7
 8004cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf0:	4770      	bx	lr
 8004cf2:	bf00      	nop
 8004cf4:	200001b4 	.word	0x200001b4
 8004cf8:	10624dd3 	.word	0x10624dd3

08004cfc <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b088      	sub	sp, #32
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	60f8      	str	r0, [r7, #12]
 8004d04:	460b      	mov	r3, r1
 8004d06:	607a      	str	r2, [r7, #4]
 8004d08:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8004d0a:	4b70      	ldr	r3, [pc, #448]	; (8004ecc <SDMMC_GetCmdResp1+0x1d0>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a70      	ldr	r2, [pc, #448]	; (8004ed0 <SDMMC_GetCmdResp1+0x1d4>)
 8004d10:	fba2 2303 	umull	r2, r3, r2, r3
 8004d14:	0a5a      	lsrs	r2, r3, #9
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	fb02 f303 	mul.w	r3, r2, r3
 8004d1c:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8004d1e:	69fb      	ldr	r3, [r7, #28]
 8004d20:	1e5a      	subs	r2, r3, #1
 8004d22:	61fa      	str	r2, [r7, #28]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d102      	bne.n	8004d2e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004d28:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004d2c:	e0c9      	b.n	8004ec2 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d32:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8004d34:	69bb      	ldr	r3, [r7, #24]
 8004d36:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d0ef      	beq.n	8004d1e <SDMMC_GetCmdResp1+0x22>
 8004d3e:	69bb      	ldr	r3, [r7, #24]
 8004d40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d1ea      	bne.n	8004d1e <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d4c:	f003 0304 	and.w	r3, r3, #4
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d004      	beq.n	8004d5e <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	2204      	movs	r2, #4
 8004d58:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004d5a:	2304      	movs	r3, #4
 8004d5c:	e0b1      	b.n	8004ec2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d62:	f003 0301 	and.w	r3, r3, #1
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d004      	beq.n	8004d74 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	2201      	movs	r2, #1
 8004d6e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004d70:	2301      	movs	r3, #1
 8004d72:	e0a6      	b.n	8004ec2 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	22c5      	movs	r2, #197	; 0xc5
 8004d78:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8004d7a:	68f8      	ldr	r0, [r7, #12]
 8004d7c:	f7ff fd54 	bl	8004828 <SDMMC_GetCommandResponse>
 8004d80:	4603      	mov	r3, r0
 8004d82:	461a      	mov	r2, r3
 8004d84:	7afb      	ldrb	r3, [r7, #11]
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d001      	beq.n	8004d8e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	e099      	b.n	8004ec2 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8004d8e:	2100      	movs	r1, #0
 8004d90:	68f8      	ldr	r0, [r7, #12]
 8004d92:	f7ff fd56 	bl	8004842 <SDMMC_GetResponse>
 8004d96:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8004d98:	697a      	ldr	r2, [r7, #20]
 8004d9a:	4b4e      	ldr	r3, [pc, #312]	; (8004ed4 <SDMMC_GetCmdResp1+0x1d8>)
 8004d9c:	4013      	ands	r3, r2
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d101      	bne.n	8004da6 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8004da2:	2300      	movs	r3, #0
 8004da4:	e08d      	b.n	8004ec2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	da02      	bge.n	8004db2 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8004dac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004db0:	e087      	b.n	8004ec2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8004db2:	697b      	ldr	r3, [r7, #20]
 8004db4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d001      	beq.n	8004dc0 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8004dbc:	2340      	movs	r3, #64	; 0x40
 8004dbe:	e080      	b.n	8004ec2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8004dc0:	697b      	ldr	r3, [r7, #20]
 8004dc2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d001      	beq.n	8004dce <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8004dca:	2380      	movs	r3, #128	; 0x80
 8004dcc:	e079      	b.n	8004ec2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d002      	beq.n	8004dde <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8004dd8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004ddc:	e071      	b.n	8004ec2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8004dde:	697b      	ldr	r3, [r7, #20]
 8004de0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d002      	beq.n	8004dee <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8004de8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004dec:	e069      	b.n	8004ec2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d002      	beq.n	8004dfe <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8004df8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004dfc:	e061      	b.n	8004ec2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d002      	beq.n	8004e0e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8004e08:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004e0c:	e059      	b.n	8004ec2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d002      	beq.n	8004e1e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8004e18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004e1c:	e051      	b.n	8004ec2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d002      	beq.n	8004e2e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8004e28:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004e2c:	e049      	b.n	8004ec2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8004e2e:	697b      	ldr	r3, [r7, #20]
 8004e30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d002      	beq.n	8004e3e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8004e38:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004e3c:	e041      	b.n	8004ec2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8004e3e:	697b      	ldr	r3, [r7, #20]
 8004e40:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d002      	beq.n	8004e4e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8004e48:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e4c:	e039      	b.n	8004ec2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8004e4e:	697b      	ldr	r3, [r7, #20]
 8004e50:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d002      	beq.n	8004e5e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8004e58:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004e5c:	e031      	b.n	8004ec2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d002      	beq.n	8004e6e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8004e68:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004e6c:	e029      	b.n	8004ec2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8004e6e:	697b      	ldr	r3, [r7, #20]
 8004e70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d002      	beq.n	8004e7e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8004e78:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004e7c:	e021      	b.n	8004ec2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d002      	beq.n	8004e8e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8004e88:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004e8c:	e019      	b.n	8004ec2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d002      	beq.n	8004e9e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8004e98:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004e9c:	e011      	b.n	8004ec2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8004e9e:	697b      	ldr	r3, [r7, #20]
 8004ea0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d002      	beq.n	8004eae <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8004ea8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004eac:	e009      	b.n	8004ec2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	f003 0308 	and.w	r3, r3, #8
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d002      	beq.n	8004ebe <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8004eb8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8004ebc:	e001      	b.n	8004ec2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8004ebe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	3720      	adds	r7, #32
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd80      	pop	{r7, pc}
 8004eca:	bf00      	nop
 8004ecc:	200001b4 	.word	0x200001b4
 8004ed0:	10624dd3 	.word	0x10624dd3
 8004ed4:	fdffe008 	.word	0xfdffe008

08004ed8 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b085      	sub	sp, #20
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004ee0:	4b1f      	ldr	r3, [pc, #124]	; (8004f60 <SDMMC_GetCmdResp2+0x88>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a1f      	ldr	r2, [pc, #124]	; (8004f64 <SDMMC_GetCmdResp2+0x8c>)
 8004ee6:	fba2 2303 	umull	r2, r3, r2, r3
 8004eea:	0a5b      	lsrs	r3, r3, #9
 8004eec:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ef0:	fb02 f303 	mul.w	r3, r2, r3
 8004ef4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	1e5a      	subs	r2, r3, #1
 8004efa:	60fa      	str	r2, [r7, #12]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d102      	bne.n	8004f06 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004f00:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004f04:	e026      	b.n	8004f54 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f0a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d0ef      	beq.n	8004ef6 <SDMMC_GetCmdResp2+0x1e>
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d1ea      	bne.n	8004ef6 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f24:	f003 0304 	and.w	r3, r3, #4
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d004      	beq.n	8004f36 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2204      	movs	r2, #4
 8004f30:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004f32:	2304      	movs	r3, #4
 8004f34:	e00e      	b.n	8004f54 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f3a:	f003 0301 	and.w	r3, r3, #1
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d004      	beq.n	8004f4c <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2201      	movs	r2, #1
 8004f46:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004f48:	2301      	movs	r3, #1
 8004f4a:	e003      	b.n	8004f54 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	22c5      	movs	r2, #197	; 0xc5
 8004f50:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8004f52:	2300      	movs	r3, #0
}
 8004f54:	4618      	mov	r0, r3
 8004f56:	3714      	adds	r7, #20
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5e:	4770      	bx	lr
 8004f60:	200001b4 	.word	0x200001b4
 8004f64:	10624dd3 	.word	0x10624dd3

08004f68 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b085      	sub	sp, #20
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004f70:	4b1a      	ldr	r3, [pc, #104]	; (8004fdc <SDMMC_GetCmdResp3+0x74>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4a1a      	ldr	r2, [pc, #104]	; (8004fe0 <SDMMC_GetCmdResp3+0x78>)
 8004f76:	fba2 2303 	umull	r2, r3, r2, r3
 8004f7a:	0a5b      	lsrs	r3, r3, #9
 8004f7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f80:	fb02 f303 	mul.w	r3, r2, r3
 8004f84:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	1e5a      	subs	r2, r3, #1
 8004f8a:	60fa      	str	r2, [r7, #12]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d102      	bne.n	8004f96 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004f90:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004f94:	e01b      	b.n	8004fce <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f9a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d0ef      	beq.n	8004f86 <SDMMC_GetCmdResp3+0x1e>
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d1ea      	bne.n	8004f86 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fb4:	f003 0304 	and.w	r3, r3, #4
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d004      	beq.n	8004fc6 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2204      	movs	r2, #4
 8004fc0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004fc2:	2304      	movs	r3, #4
 8004fc4:	e003      	b.n	8004fce <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	22c5      	movs	r2, #197	; 0xc5
 8004fca:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8004fcc:	2300      	movs	r3, #0
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	3714      	adds	r7, #20
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd8:	4770      	bx	lr
 8004fda:	bf00      	nop
 8004fdc:	200001b4 	.word	0x200001b4
 8004fe0:	10624dd3 	.word	0x10624dd3

08004fe4 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b088      	sub	sp, #32
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	60f8      	str	r0, [r7, #12]
 8004fec:	460b      	mov	r3, r1
 8004fee:	607a      	str	r2, [r7, #4]
 8004ff0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004ff2:	4b35      	ldr	r3, [pc, #212]	; (80050c8 <SDMMC_GetCmdResp6+0xe4>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a35      	ldr	r2, [pc, #212]	; (80050cc <SDMMC_GetCmdResp6+0xe8>)
 8004ff8:	fba2 2303 	umull	r2, r3, r2, r3
 8004ffc:	0a5b      	lsrs	r3, r3, #9
 8004ffe:	f241 3288 	movw	r2, #5000	; 0x1388
 8005002:	fb02 f303 	mul.w	r3, r2, r3
 8005006:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8005008:	69fb      	ldr	r3, [r7, #28]
 800500a:	1e5a      	subs	r2, r3, #1
 800500c:	61fa      	str	r2, [r7, #28]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d102      	bne.n	8005018 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005012:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005016:	e052      	b.n	80050be <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800501c:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800501e:	69bb      	ldr	r3, [r7, #24]
 8005020:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8005024:	2b00      	cmp	r3, #0
 8005026:	d0ef      	beq.n	8005008 <SDMMC_GetCmdResp6+0x24>
 8005028:	69bb      	ldr	r3, [r7, #24]
 800502a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800502e:	2b00      	cmp	r3, #0
 8005030:	d1ea      	bne.n	8005008 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005036:	f003 0304 	and.w	r3, r3, #4
 800503a:	2b00      	cmp	r3, #0
 800503c:	d004      	beq.n	8005048 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	2204      	movs	r2, #4
 8005042:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005044:	2304      	movs	r3, #4
 8005046:	e03a      	b.n	80050be <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800504c:	f003 0301 	and.w	r3, r3, #1
 8005050:	2b00      	cmp	r3, #0
 8005052:	d004      	beq.n	800505e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	2201      	movs	r2, #1
 8005058:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800505a:	2301      	movs	r3, #1
 800505c:	e02f      	b.n	80050be <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800505e:	68f8      	ldr	r0, [r7, #12]
 8005060:	f7ff fbe2 	bl	8004828 <SDMMC_GetCommandResponse>
 8005064:	4603      	mov	r3, r0
 8005066:	461a      	mov	r2, r3
 8005068:	7afb      	ldrb	r3, [r7, #11]
 800506a:	4293      	cmp	r3, r2
 800506c:	d001      	beq.n	8005072 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800506e:	2301      	movs	r3, #1
 8005070:	e025      	b.n	80050be <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	22c5      	movs	r2, #197	; 0xc5
 8005076:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8005078:	2100      	movs	r1, #0
 800507a:	68f8      	ldr	r0, [r7, #12]
 800507c:	f7ff fbe1 	bl	8004842 <SDMMC_GetResponse>
 8005080:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8005088:	2b00      	cmp	r3, #0
 800508a:	d106      	bne.n	800509a <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800508c:	697b      	ldr	r3, [r7, #20]
 800508e:	0c1b      	lsrs	r3, r3, #16
 8005090:	b29a      	uxth	r2, r3
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8005096:	2300      	movs	r3, #0
 8005098:	e011      	b.n	80050be <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d002      	beq.n	80050aa <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80050a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80050a8:	e009      	b.n	80050be <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d002      	beq.n	80050ba <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80050b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80050b8:	e001      	b.n	80050be <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80050ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80050be:	4618      	mov	r0, r3
 80050c0:	3720      	adds	r7, #32
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd80      	pop	{r7, pc}
 80050c6:	bf00      	nop
 80050c8:	200001b4 	.word	0x200001b4
 80050cc:	10624dd3 	.word	0x10624dd3

080050d0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 80050d0:	b480      	push	{r7}
 80050d2:	b085      	sub	sp, #20
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80050d8:	4b22      	ldr	r3, [pc, #136]	; (8005164 <SDMMC_GetCmdResp7+0x94>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a22      	ldr	r2, [pc, #136]	; (8005168 <SDMMC_GetCmdResp7+0x98>)
 80050de:	fba2 2303 	umull	r2, r3, r2, r3
 80050e2:	0a5b      	lsrs	r3, r3, #9
 80050e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80050e8:	fb02 f303 	mul.w	r3, r2, r3
 80050ec:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	1e5a      	subs	r2, r3, #1
 80050f2:	60fa      	str	r2, [r7, #12]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d102      	bne.n	80050fe <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80050f8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80050fc:	e02c      	b.n	8005158 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005102:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800510a:	2b00      	cmp	r3, #0
 800510c:	d0ef      	beq.n	80050ee <SDMMC_GetCmdResp7+0x1e>
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005114:	2b00      	cmp	r3, #0
 8005116:	d1ea      	bne.n	80050ee <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800511c:	f003 0304 	and.w	r3, r3, #4
 8005120:	2b00      	cmp	r3, #0
 8005122:	d004      	beq.n	800512e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2204      	movs	r2, #4
 8005128:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800512a:	2304      	movs	r3, #4
 800512c:	e014      	b.n	8005158 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005132:	f003 0301 	and.w	r3, r3, #1
 8005136:	2b00      	cmp	r3, #0
 8005138:	d004      	beq.n	8005144 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2201      	movs	r2, #1
 800513e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005140:	2301      	movs	r3, #1
 8005142:	e009      	b.n	8005158 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005148:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800514c:	2b00      	cmp	r3, #0
 800514e:	d002      	beq.n	8005156 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2240      	movs	r2, #64	; 0x40
 8005154:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005156:	2300      	movs	r3, #0
  
}
 8005158:	4618      	mov	r0, r3
 800515a:	3714      	adds	r7, #20
 800515c:	46bd      	mov	sp, r7
 800515e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005162:	4770      	bx	lr
 8005164:	200001b4 	.word	0x200001b4
 8005168:	10624dd3 	.word	0x10624dd3

0800516c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8005170:	4904      	ldr	r1, [pc, #16]	; (8005184 <MX_FATFS_Init+0x18>)
 8005172:	4805      	ldr	r0, [pc, #20]	; (8005188 <MX_FATFS_Init+0x1c>)
 8005174:	f003 f902 	bl	800837c <FATFS_LinkDriver>
 8005178:	4603      	mov	r3, r0
 800517a:	461a      	mov	r2, r3
 800517c:	4b03      	ldr	r3, [pc, #12]	; (800518c <MX_FATFS_Init+0x20>)
 800517e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005180:	bf00      	nop
 8005182:	bd80      	pop	{r7, pc}
 8005184:	200009a0 	.word	0x200009a0
 8005188:	0800847c 	.word	0x0800847c
 800518c:	2000099c 	.word	0x2000099c

08005190 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8005190:	b480      	push	{r7}
 8005192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8005194:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8005196:	4618      	mov	r0, r3
 8005198:	46bd      	mov	sp, r7
 800519a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519e:	4770      	bx	lr

080051a0 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b082      	sub	sp, #8
 80051a4:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80051a6:	2300      	movs	r3, #0
 80051a8:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80051aa:	f000 f86b 	bl	8005284 <BSP_SD_IsDetected>
 80051ae:	4603      	mov	r3, r0
 80051b0:	2b01      	cmp	r3, #1
 80051b2:	d001      	beq.n	80051b8 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 80051b4:	2302      	movs	r3, #2
 80051b6:	e005      	b.n	80051c4 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 80051b8:	4804      	ldr	r0, [pc, #16]	; (80051cc <BSP_SD_Init+0x2c>)
 80051ba:	f7fd fe81 	bl	8002ec0 <HAL_SD_Init>
 80051be:	4603      	mov	r3, r0
 80051c0:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 80051c2:	79fb      	ldrb	r3, [r7, #7]
}
 80051c4:	4618      	mov	r0, r3
 80051c6:	3708      	adds	r7, #8
 80051c8:	46bd      	mov	sp, r7
 80051ca:	bd80      	pop	{r7, pc}
 80051cc:	200005e8 	.word	0x200005e8

080051d0 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b088      	sub	sp, #32
 80051d4:	af02      	add	r7, sp, #8
 80051d6:	60f8      	str	r0, [r7, #12]
 80051d8:	60b9      	str	r1, [r7, #8]
 80051da:	607a      	str	r2, [r7, #4]
 80051dc:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 80051de:	2300      	movs	r3, #0
 80051e0:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	9300      	str	r3, [sp, #0]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	68ba      	ldr	r2, [r7, #8]
 80051ea:	68f9      	ldr	r1, [r7, #12]
 80051ec:	4806      	ldr	r0, [pc, #24]	; (8005208 <BSP_SD_ReadBlocks+0x38>)
 80051ee:	f7fd ff1d 	bl	800302c <HAL_SD_ReadBlocks>
 80051f2:	4603      	mov	r3, r0
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d001      	beq.n	80051fc <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 80051f8:	2301      	movs	r3, #1
 80051fa:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80051fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80051fe:	4618      	mov	r0, r3
 8005200:	3718      	adds	r7, #24
 8005202:	46bd      	mov	sp, r7
 8005204:	bd80      	pop	{r7, pc}
 8005206:	bf00      	nop
 8005208:	200005e8 	.word	0x200005e8

0800520c <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b088      	sub	sp, #32
 8005210:	af02      	add	r7, sp, #8
 8005212:	60f8      	str	r0, [r7, #12]
 8005214:	60b9      	str	r1, [r7, #8]
 8005216:	607a      	str	r2, [r7, #4]
 8005218:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800521a:	2300      	movs	r3, #0
 800521c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	9300      	str	r3, [sp, #0]
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	68ba      	ldr	r2, [r7, #8]
 8005226:	68f9      	ldr	r1, [r7, #12]
 8005228:	4806      	ldr	r0, [pc, #24]	; (8005244 <BSP_SD_WriteBlocks+0x38>)
 800522a:	f7fe f8dd 	bl	80033e8 <HAL_SD_WriteBlocks>
 800522e:	4603      	mov	r3, r0
 8005230:	2b00      	cmp	r3, #0
 8005232:	d001      	beq.n	8005238 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8005234:	2301      	movs	r3, #1
 8005236:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8005238:	7dfb      	ldrb	r3, [r7, #23]
}
 800523a:	4618      	mov	r0, r3
 800523c:	3718      	adds	r7, #24
 800523e:	46bd      	mov	sp, r7
 8005240:	bd80      	pop	{r7, pc}
 8005242:	bf00      	nop
 8005244:	200005e8 	.word	0x200005e8

08005248 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800524c:	4805      	ldr	r0, [pc, #20]	; (8005264 <BSP_SD_GetCardState+0x1c>)
 800524e:	f7fe fc21 	bl	8003a94 <HAL_SD_GetCardState>
 8005252:	4603      	mov	r3, r0
 8005254:	2b04      	cmp	r3, #4
 8005256:	bf14      	ite	ne
 8005258:	2301      	movne	r3, #1
 800525a:	2300      	moveq	r3, #0
 800525c:	b2db      	uxtb	r3, r3
}
 800525e:	4618      	mov	r0, r3
 8005260:	bd80      	pop	{r7, pc}
 8005262:	bf00      	nop
 8005264:	200005e8 	.word	0x200005e8

08005268 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b082      	sub	sp, #8
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8005270:	6879      	ldr	r1, [r7, #4]
 8005272:	4803      	ldr	r0, [pc, #12]	; (8005280 <BSP_SD_GetCardInfo+0x18>)
 8005274:	f7fe fbe2 	bl	8003a3c <HAL_SD_GetCardInfo>
}
 8005278:	bf00      	nop
 800527a:	3708      	adds	r7, #8
 800527c:	46bd      	mov	sp, r7
 800527e:	bd80      	pop	{r7, pc}
 8005280:	200005e8 	.word	0x200005e8

08005284 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8005284:	b480      	push	{r7}
 8005286:	b083      	sub	sp, #12
 8005288:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800528a:	2301      	movs	r3, #1
 800528c:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 800528e:	79fb      	ldrb	r3, [r7, #7]
 8005290:	b2db      	uxtb	r3, r3
}
 8005292:	4618      	mov	r0, r3
 8005294:	370c      	adds	r7, #12
 8005296:	46bd      	mov	sp, r7
 8005298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529c:	4770      	bx	lr
	...

080052a0 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b082      	sub	sp, #8
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	4603      	mov	r3, r0
 80052a8:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80052aa:	4b0b      	ldr	r3, [pc, #44]	; (80052d8 <SD_CheckStatus+0x38>)
 80052ac:	2201      	movs	r2, #1
 80052ae:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80052b0:	f7ff ffca 	bl	8005248 <BSP_SD_GetCardState>
 80052b4:	4603      	mov	r3, r0
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d107      	bne.n	80052ca <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80052ba:	4b07      	ldr	r3, [pc, #28]	; (80052d8 <SD_CheckStatus+0x38>)
 80052bc:	781b      	ldrb	r3, [r3, #0]
 80052be:	b2db      	uxtb	r3, r3
 80052c0:	f023 0301 	bic.w	r3, r3, #1
 80052c4:	b2da      	uxtb	r2, r3
 80052c6:	4b04      	ldr	r3, [pc, #16]	; (80052d8 <SD_CheckStatus+0x38>)
 80052c8:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80052ca:	4b03      	ldr	r3, [pc, #12]	; (80052d8 <SD_CheckStatus+0x38>)
 80052cc:	781b      	ldrb	r3, [r3, #0]
 80052ce:	b2db      	uxtb	r3, r3
}
 80052d0:	4618      	mov	r0, r3
 80052d2:	3708      	adds	r7, #8
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bd80      	pop	{r7, pc}
 80052d8:	200001bd 	.word	0x200001bd

080052dc <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b082      	sub	sp, #8
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	4603      	mov	r3, r0
 80052e4:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 80052e6:	4b0b      	ldr	r3, [pc, #44]	; (8005314 <SD_initialize+0x38>)
 80052e8:	2201      	movs	r2, #1
 80052ea:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80052ec:	f7ff ff58 	bl	80051a0 <BSP_SD_Init>
 80052f0:	4603      	mov	r3, r0
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d107      	bne.n	8005306 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 80052f6:	79fb      	ldrb	r3, [r7, #7]
 80052f8:	4618      	mov	r0, r3
 80052fa:	f7ff ffd1 	bl	80052a0 <SD_CheckStatus>
 80052fe:	4603      	mov	r3, r0
 8005300:	461a      	mov	r2, r3
 8005302:	4b04      	ldr	r3, [pc, #16]	; (8005314 <SD_initialize+0x38>)
 8005304:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8005306:	4b03      	ldr	r3, [pc, #12]	; (8005314 <SD_initialize+0x38>)
 8005308:	781b      	ldrb	r3, [r3, #0]
 800530a:	b2db      	uxtb	r3, r3
}
 800530c:	4618      	mov	r0, r3
 800530e:	3708      	adds	r7, #8
 8005310:	46bd      	mov	sp, r7
 8005312:	bd80      	pop	{r7, pc}
 8005314:	200001bd 	.word	0x200001bd

08005318 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b082      	sub	sp, #8
 800531c:	af00      	add	r7, sp, #0
 800531e:	4603      	mov	r3, r0
 8005320:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8005322:	79fb      	ldrb	r3, [r7, #7]
 8005324:	4618      	mov	r0, r3
 8005326:	f7ff ffbb 	bl	80052a0 <SD_CheckStatus>
 800532a:	4603      	mov	r3, r0
}
 800532c:	4618      	mov	r0, r3
 800532e:	3708      	adds	r7, #8
 8005330:	46bd      	mov	sp, r7
 8005332:	bd80      	pop	{r7, pc}

08005334 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b086      	sub	sp, #24
 8005338:	af00      	add	r7, sp, #0
 800533a:	60b9      	str	r1, [r7, #8]
 800533c:	607a      	str	r2, [r7, #4]
 800533e:	603b      	str	r3, [r7, #0]
 8005340:	4603      	mov	r3, r0
 8005342:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005344:	2301      	movs	r3, #1
 8005346:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8005348:	f04f 33ff 	mov.w	r3, #4294967295
 800534c:	683a      	ldr	r2, [r7, #0]
 800534e:	6879      	ldr	r1, [r7, #4]
 8005350:	68b8      	ldr	r0, [r7, #8]
 8005352:	f7ff ff3d 	bl	80051d0 <BSP_SD_ReadBlocks>
 8005356:	4603      	mov	r3, r0
 8005358:	2b00      	cmp	r3, #0
 800535a:	d107      	bne.n	800536c <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800535c:	bf00      	nop
 800535e:	f7ff ff73 	bl	8005248 <BSP_SD_GetCardState>
 8005362:	4603      	mov	r3, r0
 8005364:	2b00      	cmp	r3, #0
 8005366:	d1fa      	bne.n	800535e <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8005368:	2300      	movs	r3, #0
 800536a:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800536c:	7dfb      	ldrb	r3, [r7, #23]
}
 800536e:	4618      	mov	r0, r3
 8005370:	3718      	adds	r7, #24
 8005372:	46bd      	mov	sp, r7
 8005374:	bd80      	pop	{r7, pc}

08005376 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8005376:	b580      	push	{r7, lr}
 8005378:	b086      	sub	sp, #24
 800537a:	af00      	add	r7, sp, #0
 800537c:	60b9      	str	r1, [r7, #8]
 800537e:	607a      	str	r2, [r7, #4]
 8005380:	603b      	str	r3, [r7, #0]
 8005382:	4603      	mov	r3, r0
 8005384:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005386:	2301      	movs	r3, #1
 8005388:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800538a:	f04f 33ff 	mov.w	r3, #4294967295
 800538e:	683a      	ldr	r2, [r7, #0]
 8005390:	6879      	ldr	r1, [r7, #4]
 8005392:	68b8      	ldr	r0, [r7, #8]
 8005394:	f7ff ff3a 	bl	800520c <BSP_SD_WriteBlocks>
 8005398:	4603      	mov	r3, r0
 800539a:	2b00      	cmp	r3, #0
 800539c:	d107      	bne.n	80053ae <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800539e:	bf00      	nop
 80053a0:	f7ff ff52 	bl	8005248 <BSP_SD_GetCardState>
 80053a4:	4603      	mov	r3, r0
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d1fa      	bne.n	80053a0 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 80053aa:	2300      	movs	r3, #0
 80053ac:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 80053ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80053b0:	4618      	mov	r0, r3
 80053b2:	3718      	adds	r7, #24
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bd80      	pop	{r7, pc}

080053b8 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b08c      	sub	sp, #48	; 0x30
 80053bc:	af00      	add	r7, sp, #0
 80053be:	4603      	mov	r3, r0
 80053c0:	603a      	str	r2, [r7, #0]
 80053c2:	71fb      	strb	r3, [r7, #7]
 80053c4:	460b      	mov	r3, r1
 80053c6:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80053c8:	2301      	movs	r3, #1
 80053ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80053ce:	4b25      	ldr	r3, [pc, #148]	; (8005464 <SD_ioctl+0xac>)
 80053d0:	781b      	ldrb	r3, [r3, #0]
 80053d2:	b2db      	uxtb	r3, r3
 80053d4:	f003 0301 	and.w	r3, r3, #1
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d001      	beq.n	80053e0 <SD_ioctl+0x28>
 80053dc:	2303      	movs	r3, #3
 80053de:	e03c      	b.n	800545a <SD_ioctl+0xa2>

  switch (cmd)
 80053e0:	79bb      	ldrb	r3, [r7, #6]
 80053e2:	2b03      	cmp	r3, #3
 80053e4:	d834      	bhi.n	8005450 <SD_ioctl+0x98>
 80053e6:	a201      	add	r2, pc, #4	; (adr r2, 80053ec <SD_ioctl+0x34>)
 80053e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053ec:	080053fd 	.word	0x080053fd
 80053f0:	08005405 	.word	0x08005405
 80053f4:	0800541d 	.word	0x0800541d
 80053f8:	08005437 	.word	0x08005437
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80053fc:	2300      	movs	r3, #0
 80053fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005402:	e028      	b.n	8005456 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8005404:	f107 030c 	add.w	r3, r7, #12
 8005408:	4618      	mov	r0, r3
 800540a:	f7ff ff2d 	bl	8005268 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800540e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8005414:	2300      	movs	r3, #0
 8005416:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800541a:	e01c      	b.n	8005456 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800541c:	f107 030c 	add.w	r3, r7, #12
 8005420:	4618      	mov	r0, r3
 8005422:	f7ff ff21 	bl	8005268 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8005426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005428:	b29a      	uxth	r2, r3
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800542e:	2300      	movs	r3, #0
 8005430:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005434:	e00f      	b.n	8005456 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8005436:	f107 030c 	add.w	r3, r7, #12
 800543a:	4618      	mov	r0, r3
 800543c:	f7ff ff14 	bl	8005268 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8005440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005442:	0a5a      	lsrs	r2, r3, #9
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8005448:	2300      	movs	r3, #0
 800544a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800544e:	e002      	b.n	8005456 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8005450:	2304      	movs	r3, #4
 8005452:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8005456:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800545a:	4618      	mov	r0, r3
 800545c:	3730      	adds	r7, #48	; 0x30
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}
 8005462:	bf00      	nop
 8005464:	200001bd 	.word	0x200001bd

08005468 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b084      	sub	sp, #16
 800546c:	af00      	add	r7, sp, #0
 800546e:	4603      	mov	r3, r0
 8005470:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8005472:	79fb      	ldrb	r3, [r7, #7]
 8005474:	4a08      	ldr	r2, [pc, #32]	; (8005498 <disk_status+0x30>)
 8005476:	009b      	lsls	r3, r3, #2
 8005478:	4413      	add	r3, r2
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	685b      	ldr	r3, [r3, #4]
 800547e:	79fa      	ldrb	r2, [r7, #7]
 8005480:	4905      	ldr	r1, [pc, #20]	; (8005498 <disk_status+0x30>)
 8005482:	440a      	add	r2, r1
 8005484:	7a12      	ldrb	r2, [r2, #8]
 8005486:	4610      	mov	r0, r2
 8005488:	4798      	blx	r3
 800548a:	4603      	mov	r3, r0
 800548c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800548e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005490:	4618      	mov	r0, r3
 8005492:	3710      	adds	r7, #16
 8005494:	46bd      	mov	sp, r7
 8005496:	bd80      	pop	{r7, pc}
 8005498:	20000204 	.word	0x20000204

0800549c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b084      	sub	sp, #16
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	4603      	mov	r3, r0
 80054a4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80054a6:	2300      	movs	r3, #0
 80054a8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80054aa:	79fb      	ldrb	r3, [r7, #7]
 80054ac:	4a0d      	ldr	r2, [pc, #52]	; (80054e4 <disk_initialize+0x48>)
 80054ae:	5cd3      	ldrb	r3, [r2, r3]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d111      	bne.n	80054d8 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80054b4:	79fb      	ldrb	r3, [r7, #7]
 80054b6:	4a0b      	ldr	r2, [pc, #44]	; (80054e4 <disk_initialize+0x48>)
 80054b8:	2101      	movs	r1, #1
 80054ba:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80054bc:	79fb      	ldrb	r3, [r7, #7]
 80054be:	4a09      	ldr	r2, [pc, #36]	; (80054e4 <disk_initialize+0x48>)
 80054c0:	009b      	lsls	r3, r3, #2
 80054c2:	4413      	add	r3, r2
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	79fa      	ldrb	r2, [r7, #7]
 80054ca:	4906      	ldr	r1, [pc, #24]	; (80054e4 <disk_initialize+0x48>)
 80054cc:	440a      	add	r2, r1
 80054ce:	7a12      	ldrb	r2, [r2, #8]
 80054d0:	4610      	mov	r0, r2
 80054d2:	4798      	blx	r3
 80054d4:	4603      	mov	r3, r0
 80054d6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80054d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80054da:	4618      	mov	r0, r3
 80054dc:	3710      	adds	r7, #16
 80054de:	46bd      	mov	sp, r7
 80054e0:	bd80      	pop	{r7, pc}
 80054e2:	bf00      	nop
 80054e4:	20000204 	.word	0x20000204

080054e8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80054e8:	b590      	push	{r4, r7, lr}
 80054ea:	b087      	sub	sp, #28
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	60b9      	str	r1, [r7, #8]
 80054f0:	607a      	str	r2, [r7, #4]
 80054f2:	603b      	str	r3, [r7, #0]
 80054f4:	4603      	mov	r3, r0
 80054f6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80054f8:	7bfb      	ldrb	r3, [r7, #15]
 80054fa:	4a0a      	ldr	r2, [pc, #40]	; (8005524 <disk_read+0x3c>)
 80054fc:	009b      	lsls	r3, r3, #2
 80054fe:	4413      	add	r3, r2
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	689c      	ldr	r4, [r3, #8]
 8005504:	7bfb      	ldrb	r3, [r7, #15]
 8005506:	4a07      	ldr	r2, [pc, #28]	; (8005524 <disk_read+0x3c>)
 8005508:	4413      	add	r3, r2
 800550a:	7a18      	ldrb	r0, [r3, #8]
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	687a      	ldr	r2, [r7, #4]
 8005510:	68b9      	ldr	r1, [r7, #8]
 8005512:	47a0      	blx	r4
 8005514:	4603      	mov	r3, r0
 8005516:	75fb      	strb	r3, [r7, #23]
  return res;
 8005518:	7dfb      	ldrb	r3, [r7, #23]
}
 800551a:	4618      	mov	r0, r3
 800551c:	371c      	adds	r7, #28
 800551e:	46bd      	mov	sp, r7
 8005520:	bd90      	pop	{r4, r7, pc}
 8005522:	bf00      	nop
 8005524:	20000204 	.word	0x20000204

08005528 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8005528:	b590      	push	{r4, r7, lr}
 800552a:	b087      	sub	sp, #28
 800552c:	af00      	add	r7, sp, #0
 800552e:	60b9      	str	r1, [r7, #8]
 8005530:	607a      	str	r2, [r7, #4]
 8005532:	603b      	str	r3, [r7, #0]
 8005534:	4603      	mov	r3, r0
 8005536:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005538:	7bfb      	ldrb	r3, [r7, #15]
 800553a:	4a0a      	ldr	r2, [pc, #40]	; (8005564 <disk_write+0x3c>)
 800553c:	009b      	lsls	r3, r3, #2
 800553e:	4413      	add	r3, r2
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	68dc      	ldr	r4, [r3, #12]
 8005544:	7bfb      	ldrb	r3, [r7, #15]
 8005546:	4a07      	ldr	r2, [pc, #28]	; (8005564 <disk_write+0x3c>)
 8005548:	4413      	add	r3, r2
 800554a:	7a18      	ldrb	r0, [r3, #8]
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	687a      	ldr	r2, [r7, #4]
 8005550:	68b9      	ldr	r1, [r7, #8]
 8005552:	47a0      	blx	r4
 8005554:	4603      	mov	r3, r0
 8005556:	75fb      	strb	r3, [r7, #23]
  return res;
 8005558:	7dfb      	ldrb	r3, [r7, #23]
}
 800555a:	4618      	mov	r0, r3
 800555c:	371c      	adds	r7, #28
 800555e:	46bd      	mov	sp, r7
 8005560:	bd90      	pop	{r4, r7, pc}
 8005562:	bf00      	nop
 8005564:	20000204 	.word	0x20000204

08005568 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b084      	sub	sp, #16
 800556c:	af00      	add	r7, sp, #0
 800556e:	4603      	mov	r3, r0
 8005570:	603a      	str	r2, [r7, #0]
 8005572:	71fb      	strb	r3, [r7, #7]
 8005574:	460b      	mov	r3, r1
 8005576:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8005578:	79fb      	ldrb	r3, [r7, #7]
 800557a:	4a09      	ldr	r2, [pc, #36]	; (80055a0 <disk_ioctl+0x38>)
 800557c:	009b      	lsls	r3, r3, #2
 800557e:	4413      	add	r3, r2
 8005580:	685b      	ldr	r3, [r3, #4]
 8005582:	691b      	ldr	r3, [r3, #16]
 8005584:	79fa      	ldrb	r2, [r7, #7]
 8005586:	4906      	ldr	r1, [pc, #24]	; (80055a0 <disk_ioctl+0x38>)
 8005588:	440a      	add	r2, r1
 800558a:	7a10      	ldrb	r0, [r2, #8]
 800558c:	79b9      	ldrb	r1, [r7, #6]
 800558e:	683a      	ldr	r2, [r7, #0]
 8005590:	4798      	blx	r3
 8005592:	4603      	mov	r3, r0
 8005594:	73fb      	strb	r3, [r7, #15]
  return res;
 8005596:	7bfb      	ldrb	r3, [r7, #15]
}
 8005598:	4618      	mov	r0, r3
 800559a:	3710      	adds	r7, #16
 800559c:	46bd      	mov	sp, r7
 800559e:	bd80      	pop	{r7, pc}
 80055a0:	20000204 	.word	0x20000204

080055a4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80055a4:	b480      	push	{r7}
 80055a6:	b085      	sub	sp, #20
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	3301      	adds	r3, #1
 80055b0:	781b      	ldrb	r3, [r3, #0]
 80055b2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80055b4:	89fb      	ldrh	r3, [r7, #14]
 80055b6:	021b      	lsls	r3, r3, #8
 80055b8:	b21a      	sxth	r2, r3
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	781b      	ldrb	r3, [r3, #0]
 80055be:	b21b      	sxth	r3, r3
 80055c0:	4313      	orrs	r3, r2
 80055c2:	b21b      	sxth	r3, r3
 80055c4:	81fb      	strh	r3, [r7, #14]
	return rv;
 80055c6:	89fb      	ldrh	r3, [r7, #14]
}
 80055c8:	4618      	mov	r0, r3
 80055ca:	3714      	adds	r7, #20
 80055cc:	46bd      	mov	sp, r7
 80055ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d2:	4770      	bx	lr

080055d4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80055d4:	b480      	push	{r7}
 80055d6:	b085      	sub	sp, #20
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	3303      	adds	r3, #3
 80055e0:	781b      	ldrb	r3, [r3, #0]
 80055e2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	021b      	lsls	r3, r3, #8
 80055e8:	687a      	ldr	r2, [r7, #4]
 80055ea:	3202      	adds	r2, #2
 80055ec:	7812      	ldrb	r2, [r2, #0]
 80055ee:	4313      	orrs	r3, r2
 80055f0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	021b      	lsls	r3, r3, #8
 80055f6:	687a      	ldr	r2, [r7, #4]
 80055f8:	3201      	adds	r2, #1
 80055fa:	7812      	ldrb	r2, [r2, #0]
 80055fc:	4313      	orrs	r3, r2
 80055fe:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	021b      	lsls	r3, r3, #8
 8005604:	687a      	ldr	r2, [r7, #4]
 8005606:	7812      	ldrb	r2, [r2, #0]
 8005608:	4313      	orrs	r3, r2
 800560a:	60fb      	str	r3, [r7, #12]
	return rv;
 800560c:	68fb      	ldr	r3, [r7, #12]
}
 800560e:	4618      	mov	r0, r3
 8005610:	3714      	adds	r7, #20
 8005612:	46bd      	mov	sp, r7
 8005614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005618:	4770      	bx	lr

0800561a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800561a:	b480      	push	{r7}
 800561c:	b083      	sub	sp, #12
 800561e:	af00      	add	r7, sp, #0
 8005620:	6078      	str	r0, [r7, #4]
 8005622:	460b      	mov	r3, r1
 8005624:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	1c5a      	adds	r2, r3, #1
 800562a:	607a      	str	r2, [r7, #4]
 800562c:	887a      	ldrh	r2, [r7, #2]
 800562e:	b2d2      	uxtb	r2, r2
 8005630:	701a      	strb	r2, [r3, #0]
 8005632:	887b      	ldrh	r3, [r7, #2]
 8005634:	0a1b      	lsrs	r3, r3, #8
 8005636:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	1c5a      	adds	r2, r3, #1
 800563c:	607a      	str	r2, [r7, #4]
 800563e:	887a      	ldrh	r2, [r7, #2]
 8005640:	b2d2      	uxtb	r2, r2
 8005642:	701a      	strb	r2, [r3, #0]
}
 8005644:	bf00      	nop
 8005646:	370c      	adds	r7, #12
 8005648:	46bd      	mov	sp, r7
 800564a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564e:	4770      	bx	lr

08005650 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8005650:	b480      	push	{r7}
 8005652:	b083      	sub	sp, #12
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
 8005658:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	1c5a      	adds	r2, r3, #1
 800565e:	607a      	str	r2, [r7, #4]
 8005660:	683a      	ldr	r2, [r7, #0]
 8005662:	b2d2      	uxtb	r2, r2
 8005664:	701a      	strb	r2, [r3, #0]
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	0a1b      	lsrs	r3, r3, #8
 800566a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	1c5a      	adds	r2, r3, #1
 8005670:	607a      	str	r2, [r7, #4]
 8005672:	683a      	ldr	r2, [r7, #0]
 8005674:	b2d2      	uxtb	r2, r2
 8005676:	701a      	strb	r2, [r3, #0]
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	0a1b      	lsrs	r3, r3, #8
 800567c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	1c5a      	adds	r2, r3, #1
 8005682:	607a      	str	r2, [r7, #4]
 8005684:	683a      	ldr	r2, [r7, #0]
 8005686:	b2d2      	uxtb	r2, r2
 8005688:	701a      	strb	r2, [r3, #0]
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	0a1b      	lsrs	r3, r3, #8
 800568e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	1c5a      	adds	r2, r3, #1
 8005694:	607a      	str	r2, [r7, #4]
 8005696:	683a      	ldr	r2, [r7, #0]
 8005698:	b2d2      	uxtb	r2, r2
 800569a:	701a      	strb	r2, [r3, #0]
}
 800569c:	bf00      	nop
 800569e:	370c      	adds	r7, #12
 80056a0:	46bd      	mov	sp, r7
 80056a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a6:	4770      	bx	lr

080056a8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80056a8:	b480      	push	{r7}
 80056aa:	b087      	sub	sp, #28
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	60f8      	str	r0, [r7, #12]
 80056b0:	60b9      	str	r1, [r7, #8]
 80056b2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d00d      	beq.n	80056de <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80056c2:	693a      	ldr	r2, [r7, #16]
 80056c4:	1c53      	adds	r3, r2, #1
 80056c6:	613b      	str	r3, [r7, #16]
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	1c59      	adds	r1, r3, #1
 80056cc:	6179      	str	r1, [r7, #20]
 80056ce:	7812      	ldrb	r2, [r2, #0]
 80056d0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	3b01      	subs	r3, #1
 80056d6:	607b      	str	r3, [r7, #4]
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d1f1      	bne.n	80056c2 <mem_cpy+0x1a>
	}
}
 80056de:	bf00      	nop
 80056e0:	371c      	adds	r7, #28
 80056e2:	46bd      	mov	sp, r7
 80056e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e8:	4770      	bx	lr

080056ea <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80056ea:	b480      	push	{r7}
 80056ec:	b087      	sub	sp, #28
 80056ee:	af00      	add	r7, sp, #0
 80056f0:	60f8      	str	r0, [r7, #12]
 80056f2:	60b9      	str	r1, [r7, #8]
 80056f4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80056fa:	697b      	ldr	r3, [r7, #20]
 80056fc:	1c5a      	adds	r2, r3, #1
 80056fe:	617a      	str	r2, [r7, #20]
 8005700:	68ba      	ldr	r2, [r7, #8]
 8005702:	b2d2      	uxtb	r2, r2
 8005704:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	3b01      	subs	r3, #1
 800570a:	607b      	str	r3, [r7, #4]
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d1f3      	bne.n	80056fa <mem_set+0x10>
}
 8005712:	bf00      	nop
 8005714:	bf00      	nop
 8005716:	371c      	adds	r7, #28
 8005718:	46bd      	mov	sp, r7
 800571a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571e:	4770      	bx	lr

08005720 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8005720:	b480      	push	{r7}
 8005722:	b089      	sub	sp, #36	; 0x24
 8005724:	af00      	add	r7, sp, #0
 8005726:	60f8      	str	r0, [r7, #12]
 8005728:	60b9      	str	r1, [r7, #8]
 800572a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	61fb      	str	r3, [r7, #28]
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8005734:	2300      	movs	r3, #0
 8005736:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8005738:	69fb      	ldr	r3, [r7, #28]
 800573a:	1c5a      	adds	r2, r3, #1
 800573c:	61fa      	str	r2, [r7, #28]
 800573e:	781b      	ldrb	r3, [r3, #0]
 8005740:	4619      	mov	r1, r3
 8005742:	69bb      	ldr	r3, [r7, #24]
 8005744:	1c5a      	adds	r2, r3, #1
 8005746:	61ba      	str	r2, [r7, #24]
 8005748:	781b      	ldrb	r3, [r3, #0]
 800574a:	1acb      	subs	r3, r1, r3
 800574c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	3b01      	subs	r3, #1
 8005752:	607b      	str	r3, [r7, #4]
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d002      	beq.n	8005760 <mem_cmp+0x40>
 800575a:	697b      	ldr	r3, [r7, #20]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d0eb      	beq.n	8005738 <mem_cmp+0x18>

	return r;
 8005760:	697b      	ldr	r3, [r7, #20]
}
 8005762:	4618      	mov	r0, r3
 8005764:	3724      	adds	r7, #36	; 0x24
 8005766:	46bd      	mov	sp, r7
 8005768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576c:	4770      	bx	lr

0800576e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800576e:	b480      	push	{r7}
 8005770:	b083      	sub	sp, #12
 8005772:	af00      	add	r7, sp, #0
 8005774:	6078      	str	r0, [r7, #4]
 8005776:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8005778:	e002      	b.n	8005780 <chk_chr+0x12>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	3301      	adds	r3, #1
 800577e:	607b      	str	r3, [r7, #4]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	781b      	ldrb	r3, [r3, #0]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d005      	beq.n	8005794 <chk_chr+0x26>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	781b      	ldrb	r3, [r3, #0]
 800578c:	461a      	mov	r2, r3
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	4293      	cmp	r3, r2
 8005792:	d1f2      	bne.n	800577a <chk_chr+0xc>
	return *str;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	781b      	ldrb	r3, [r3, #0]
}
 8005798:	4618      	mov	r0, r3
 800579a:	370c      	adds	r7, #12
 800579c:	46bd      	mov	sp, r7
 800579e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a2:	4770      	bx	lr

080057a4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80057a4:	b480      	push	{r7}
 80057a6:	b085      	sub	sp, #20
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
 80057ac:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80057ae:	2300      	movs	r3, #0
 80057b0:	60bb      	str	r3, [r7, #8]
 80057b2:	68bb      	ldr	r3, [r7, #8]
 80057b4:	60fb      	str	r3, [r7, #12]
 80057b6:	e029      	b.n	800580c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80057b8:	4a27      	ldr	r2, [pc, #156]	; (8005858 <chk_lock+0xb4>)
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	011b      	lsls	r3, r3, #4
 80057be:	4413      	add	r3, r2
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d01d      	beq.n	8005802 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80057c6:	4a24      	ldr	r2, [pc, #144]	; (8005858 <chk_lock+0xb4>)
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	011b      	lsls	r3, r3, #4
 80057cc:	4413      	add	r3, r2
 80057ce:	681a      	ldr	r2, [r3, #0]
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	429a      	cmp	r2, r3
 80057d6:	d116      	bne.n	8005806 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80057d8:	4a1f      	ldr	r2, [pc, #124]	; (8005858 <chk_lock+0xb4>)
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	011b      	lsls	r3, r3, #4
 80057de:	4413      	add	r3, r2
 80057e0:	3304      	adds	r3, #4
 80057e2:	681a      	ldr	r2, [r3, #0]
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80057e8:	429a      	cmp	r2, r3
 80057ea:	d10c      	bne.n	8005806 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80057ec:	4a1a      	ldr	r2, [pc, #104]	; (8005858 <chk_lock+0xb4>)
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	011b      	lsls	r3, r3, #4
 80057f2:	4413      	add	r3, r2
 80057f4:	3308      	adds	r3, #8
 80057f6:	681a      	ldr	r2, [r3, #0]
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80057fc:	429a      	cmp	r2, r3
 80057fe:	d102      	bne.n	8005806 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005800:	e007      	b.n	8005812 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8005802:	2301      	movs	r3, #1
 8005804:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	3301      	adds	r3, #1
 800580a:	60fb      	str	r3, [r7, #12]
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	2b01      	cmp	r3, #1
 8005810:	d9d2      	bls.n	80057b8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	2b02      	cmp	r3, #2
 8005816:	d109      	bne.n	800582c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d102      	bne.n	8005824 <chk_lock+0x80>
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	2b02      	cmp	r3, #2
 8005822:	d101      	bne.n	8005828 <chk_lock+0x84>
 8005824:	2300      	movs	r3, #0
 8005826:	e010      	b.n	800584a <chk_lock+0xa6>
 8005828:	2312      	movs	r3, #18
 800582a:	e00e      	b.n	800584a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d108      	bne.n	8005844 <chk_lock+0xa0>
 8005832:	4a09      	ldr	r2, [pc, #36]	; (8005858 <chk_lock+0xb4>)
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	011b      	lsls	r3, r3, #4
 8005838:	4413      	add	r3, r2
 800583a:	330c      	adds	r3, #12
 800583c:	881b      	ldrh	r3, [r3, #0]
 800583e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005842:	d101      	bne.n	8005848 <chk_lock+0xa4>
 8005844:	2310      	movs	r3, #16
 8005846:	e000      	b.n	800584a <chk_lock+0xa6>
 8005848:	2300      	movs	r3, #0
}
 800584a:	4618      	mov	r0, r3
 800584c:	3714      	adds	r7, #20
 800584e:	46bd      	mov	sp, r7
 8005850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005854:	4770      	bx	lr
 8005856:	bf00      	nop
 8005858:	200001e4 	.word	0x200001e4

0800585c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800585c:	b480      	push	{r7}
 800585e:	b083      	sub	sp, #12
 8005860:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005862:	2300      	movs	r3, #0
 8005864:	607b      	str	r3, [r7, #4]
 8005866:	e002      	b.n	800586e <enq_lock+0x12>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	3301      	adds	r3, #1
 800586c:	607b      	str	r3, [r7, #4]
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2b01      	cmp	r3, #1
 8005872:	d806      	bhi.n	8005882 <enq_lock+0x26>
 8005874:	4a09      	ldr	r2, [pc, #36]	; (800589c <enq_lock+0x40>)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	011b      	lsls	r3, r3, #4
 800587a:	4413      	add	r3, r2
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d1f2      	bne.n	8005868 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2b02      	cmp	r3, #2
 8005886:	bf14      	ite	ne
 8005888:	2301      	movne	r3, #1
 800588a:	2300      	moveq	r3, #0
 800588c:	b2db      	uxtb	r3, r3
}
 800588e:	4618      	mov	r0, r3
 8005890:	370c      	adds	r7, #12
 8005892:	46bd      	mov	sp, r7
 8005894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005898:	4770      	bx	lr
 800589a:	bf00      	nop
 800589c:	200001e4 	.word	0x200001e4

080058a0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80058a0:	b480      	push	{r7}
 80058a2:	b085      	sub	sp, #20
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
 80058a8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80058aa:	2300      	movs	r3, #0
 80058ac:	60fb      	str	r3, [r7, #12]
 80058ae:	e01f      	b.n	80058f0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80058b0:	4a41      	ldr	r2, [pc, #260]	; (80059b8 <inc_lock+0x118>)
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	011b      	lsls	r3, r3, #4
 80058b6:	4413      	add	r3, r2
 80058b8:	681a      	ldr	r2, [r3, #0]
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	429a      	cmp	r2, r3
 80058c0:	d113      	bne.n	80058ea <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80058c2:	4a3d      	ldr	r2, [pc, #244]	; (80059b8 <inc_lock+0x118>)
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	011b      	lsls	r3, r3, #4
 80058c8:	4413      	add	r3, r2
 80058ca:	3304      	adds	r3, #4
 80058cc:	681a      	ldr	r2, [r3, #0]
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80058d2:	429a      	cmp	r2, r3
 80058d4:	d109      	bne.n	80058ea <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80058d6:	4a38      	ldr	r2, [pc, #224]	; (80059b8 <inc_lock+0x118>)
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	011b      	lsls	r3, r3, #4
 80058dc:	4413      	add	r3, r2
 80058de:	3308      	adds	r3, #8
 80058e0:	681a      	ldr	r2, [r3, #0]
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80058e6:	429a      	cmp	r2, r3
 80058e8:	d006      	beq.n	80058f8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	3301      	adds	r3, #1
 80058ee:	60fb      	str	r3, [r7, #12]
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	2b01      	cmp	r3, #1
 80058f4:	d9dc      	bls.n	80058b0 <inc_lock+0x10>
 80058f6:	e000      	b.n	80058fa <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80058f8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	2b02      	cmp	r3, #2
 80058fe:	d132      	bne.n	8005966 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005900:	2300      	movs	r3, #0
 8005902:	60fb      	str	r3, [r7, #12]
 8005904:	e002      	b.n	800590c <inc_lock+0x6c>
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	3301      	adds	r3, #1
 800590a:	60fb      	str	r3, [r7, #12]
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	2b01      	cmp	r3, #1
 8005910:	d806      	bhi.n	8005920 <inc_lock+0x80>
 8005912:	4a29      	ldr	r2, [pc, #164]	; (80059b8 <inc_lock+0x118>)
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	011b      	lsls	r3, r3, #4
 8005918:	4413      	add	r3, r2
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d1f2      	bne.n	8005906 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	2b02      	cmp	r3, #2
 8005924:	d101      	bne.n	800592a <inc_lock+0x8a>
 8005926:	2300      	movs	r3, #0
 8005928:	e040      	b.n	80059ac <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681a      	ldr	r2, [r3, #0]
 800592e:	4922      	ldr	r1, [pc, #136]	; (80059b8 <inc_lock+0x118>)
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	011b      	lsls	r3, r3, #4
 8005934:	440b      	add	r3, r1
 8005936:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	689a      	ldr	r2, [r3, #8]
 800593c:	491e      	ldr	r1, [pc, #120]	; (80059b8 <inc_lock+0x118>)
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	011b      	lsls	r3, r3, #4
 8005942:	440b      	add	r3, r1
 8005944:	3304      	adds	r3, #4
 8005946:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	695a      	ldr	r2, [r3, #20]
 800594c:	491a      	ldr	r1, [pc, #104]	; (80059b8 <inc_lock+0x118>)
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	011b      	lsls	r3, r3, #4
 8005952:	440b      	add	r3, r1
 8005954:	3308      	adds	r3, #8
 8005956:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8005958:	4a17      	ldr	r2, [pc, #92]	; (80059b8 <inc_lock+0x118>)
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	011b      	lsls	r3, r3, #4
 800595e:	4413      	add	r3, r2
 8005960:	330c      	adds	r3, #12
 8005962:	2200      	movs	r2, #0
 8005964:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d009      	beq.n	8005980 <inc_lock+0xe0>
 800596c:	4a12      	ldr	r2, [pc, #72]	; (80059b8 <inc_lock+0x118>)
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	011b      	lsls	r3, r3, #4
 8005972:	4413      	add	r3, r2
 8005974:	330c      	adds	r3, #12
 8005976:	881b      	ldrh	r3, [r3, #0]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d001      	beq.n	8005980 <inc_lock+0xe0>
 800597c:	2300      	movs	r3, #0
 800597e:	e015      	b.n	80059ac <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d108      	bne.n	8005998 <inc_lock+0xf8>
 8005986:	4a0c      	ldr	r2, [pc, #48]	; (80059b8 <inc_lock+0x118>)
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	011b      	lsls	r3, r3, #4
 800598c:	4413      	add	r3, r2
 800598e:	330c      	adds	r3, #12
 8005990:	881b      	ldrh	r3, [r3, #0]
 8005992:	3301      	adds	r3, #1
 8005994:	b29a      	uxth	r2, r3
 8005996:	e001      	b.n	800599c <inc_lock+0xfc>
 8005998:	f44f 7280 	mov.w	r2, #256	; 0x100
 800599c:	4906      	ldr	r1, [pc, #24]	; (80059b8 <inc_lock+0x118>)
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	011b      	lsls	r3, r3, #4
 80059a2:	440b      	add	r3, r1
 80059a4:	330c      	adds	r3, #12
 80059a6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	3301      	adds	r3, #1
}
 80059ac:	4618      	mov	r0, r3
 80059ae:	3714      	adds	r7, #20
 80059b0:	46bd      	mov	sp, r7
 80059b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b6:	4770      	bx	lr
 80059b8:	200001e4 	.word	0x200001e4

080059bc <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80059bc:	b480      	push	{r7}
 80059be:	b085      	sub	sp, #20
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	3b01      	subs	r3, #1
 80059c8:	607b      	str	r3, [r7, #4]
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2b01      	cmp	r3, #1
 80059ce:	d825      	bhi.n	8005a1c <dec_lock+0x60>
		n = Files[i].ctr;
 80059d0:	4a17      	ldr	r2, [pc, #92]	; (8005a30 <dec_lock+0x74>)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	011b      	lsls	r3, r3, #4
 80059d6:	4413      	add	r3, r2
 80059d8:	330c      	adds	r3, #12
 80059da:	881b      	ldrh	r3, [r3, #0]
 80059dc:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80059de:	89fb      	ldrh	r3, [r7, #14]
 80059e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059e4:	d101      	bne.n	80059ea <dec_lock+0x2e>
 80059e6:	2300      	movs	r3, #0
 80059e8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80059ea:	89fb      	ldrh	r3, [r7, #14]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d002      	beq.n	80059f6 <dec_lock+0x3a>
 80059f0:	89fb      	ldrh	r3, [r7, #14]
 80059f2:	3b01      	subs	r3, #1
 80059f4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80059f6:	4a0e      	ldr	r2, [pc, #56]	; (8005a30 <dec_lock+0x74>)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	011b      	lsls	r3, r3, #4
 80059fc:	4413      	add	r3, r2
 80059fe:	330c      	adds	r3, #12
 8005a00:	89fa      	ldrh	r2, [r7, #14]
 8005a02:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8005a04:	89fb      	ldrh	r3, [r7, #14]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d105      	bne.n	8005a16 <dec_lock+0x5a>
 8005a0a:	4a09      	ldr	r2, [pc, #36]	; (8005a30 <dec_lock+0x74>)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	011b      	lsls	r3, r3, #4
 8005a10:	4413      	add	r3, r2
 8005a12:	2200      	movs	r2, #0
 8005a14:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8005a16:	2300      	movs	r3, #0
 8005a18:	737b      	strb	r3, [r7, #13]
 8005a1a:	e001      	b.n	8005a20 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8005a1c:	2302      	movs	r3, #2
 8005a1e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8005a20:	7b7b      	ldrb	r3, [r7, #13]
}
 8005a22:	4618      	mov	r0, r3
 8005a24:	3714      	adds	r7, #20
 8005a26:	46bd      	mov	sp, r7
 8005a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2c:	4770      	bx	lr
 8005a2e:	bf00      	nop
 8005a30:	200001e4 	.word	0x200001e4

08005a34 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8005a34:	b480      	push	{r7}
 8005a36:	b085      	sub	sp, #20
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	60fb      	str	r3, [r7, #12]
 8005a40:	e010      	b.n	8005a64 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8005a42:	4a0d      	ldr	r2, [pc, #52]	; (8005a78 <clear_lock+0x44>)
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	011b      	lsls	r3, r3, #4
 8005a48:	4413      	add	r3, r2
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	687a      	ldr	r2, [r7, #4]
 8005a4e:	429a      	cmp	r2, r3
 8005a50:	d105      	bne.n	8005a5e <clear_lock+0x2a>
 8005a52:	4a09      	ldr	r2, [pc, #36]	; (8005a78 <clear_lock+0x44>)
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	011b      	lsls	r3, r3, #4
 8005a58:	4413      	add	r3, r2
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	3301      	adds	r3, #1
 8005a62:	60fb      	str	r3, [r7, #12]
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	2b01      	cmp	r3, #1
 8005a68:	d9eb      	bls.n	8005a42 <clear_lock+0xe>
	}
}
 8005a6a:	bf00      	nop
 8005a6c:	bf00      	nop
 8005a6e:	3714      	adds	r7, #20
 8005a70:	46bd      	mov	sp, r7
 8005a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a76:	4770      	bx	lr
 8005a78:	200001e4 	.word	0x200001e4

08005a7c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b086      	sub	sp, #24
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8005a84:	2300      	movs	r3, #0
 8005a86:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	78db      	ldrb	r3, [r3, #3]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d034      	beq.n	8005afa <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a94:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	7858      	ldrb	r0, [r3, #1]
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	697a      	ldr	r2, [r7, #20]
 8005aa4:	f7ff fd40 	bl	8005528 <disk_write>
 8005aa8:	4603      	mov	r3, r0
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d002      	beq.n	8005ab4 <sync_window+0x38>
			res = FR_DISK_ERR;
 8005aae:	2301      	movs	r3, #1
 8005ab0:	73fb      	strb	r3, [r7, #15]
 8005ab2:	e022      	b.n	8005afa <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6a1b      	ldr	r3, [r3, #32]
 8005abe:	697a      	ldr	r2, [r7, #20]
 8005ac0:	1ad2      	subs	r2, r2, r3
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	699b      	ldr	r3, [r3, #24]
 8005ac6:	429a      	cmp	r2, r3
 8005ac8:	d217      	bcs.n	8005afa <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	789b      	ldrb	r3, [r3, #2]
 8005ace:	613b      	str	r3, [r7, #16]
 8005ad0:	e010      	b.n	8005af4 <sync_window+0x78>
					wsect += fs->fsize;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	699b      	ldr	r3, [r3, #24]
 8005ad6:	697a      	ldr	r2, [r7, #20]
 8005ad8:	4413      	add	r3, r2
 8005ada:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	7858      	ldrb	r0, [r3, #1]
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	697a      	ldr	r2, [r7, #20]
 8005aea:	f7ff fd1d 	bl	8005528 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	3b01      	subs	r3, #1
 8005af2:	613b      	str	r3, [r7, #16]
 8005af4:	693b      	ldr	r3, [r7, #16]
 8005af6:	2b01      	cmp	r3, #1
 8005af8:	d8eb      	bhi.n	8005ad2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8005afa:	7bfb      	ldrb	r3, [r7, #15]
}
 8005afc:	4618      	mov	r0, r3
 8005afe:	3718      	adds	r7, #24
 8005b00:	46bd      	mov	sp, r7
 8005b02:	bd80      	pop	{r7, pc}

08005b04 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b084      	sub	sp, #16
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
 8005b0c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8005b0e:	2300      	movs	r3, #0
 8005b10:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b16:	683a      	ldr	r2, [r7, #0]
 8005b18:	429a      	cmp	r2, r3
 8005b1a:	d01b      	beq.n	8005b54 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8005b1c:	6878      	ldr	r0, [r7, #4]
 8005b1e:	f7ff ffad 	bl	8005a7c <sync_window>
 8005b22:	4603      	mov	r3, r0
 8005b24:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8005b26:	7bfb      	ldrb	r3, [r7, #15]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d113      	bne.n	8005b54 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	7858      	ldrb	r0, [r3, #1]
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005b36:	2301      	movs	r3, #1
 8005b38:	683a      	ldr	r2, [r7, #0]
 8005b3a:	f7ff fcd5 	bl	80054e8 <disk_read>
 8005b3e:	4603      	mov	r3, r0
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d004      	beq.n	8005b4e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8005b44:	f04f 33ff 	mov.w	r3, #4294967295
 8005b48:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	683a      	ldr	r2, [r7, #0]
 8005b52:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8005b54:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b56:	4618      	mov	r0, r3
 8005b58:	3710      	adds	r7, #16
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	bd80      	pop	{r7, pc}
	...

08005b60 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b084      	sub	sp, #16
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8005b68:	6878      	ldr	r0, [r7, #4]
 8005b6a:	f7ff ff87 	bl	8005a7c <sync_window>
 8005b6e:	4603      	mov	r3, r0
 8005b70:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8005b72:	7bfb      	ldrb	r3, [r7, #15]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d158      	bne.n	8005c2a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	781b      	ldrb	r3, [r3, #0]
 8005b7c:	2b03      	cmp	r3, #3
 8005b7e:	d148      	bne.n	8005c12 <sync_fs+0xb2>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	791b      	ldrb	r3, [r3, #4]
 8005b84:	2b01      	cmp	r3, #1
 8005b86:	d144      	bne.n	8005c12 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	3330      	adds	r3, #48	; 0x30
 8005b8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b90:	2100      	movs	r1, #0
 8005b92:	4618      	mov	r0, r3
 8005b94:	f7ff fda9 	bl	80056ea <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	3330      	adds	r3, #48	; 0x30
 8005b9c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005ba0:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	f7ff fd38 	bl	800561a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	3330      	adds	r3, #48	; 0x30
 8005bae:	4921      	ldr	r1, [pc, #132]	; (8005c34 <sync_fs+0xd4>)
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	f7ff fd4d 	bl	8005650 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	3330      	adds	r3, #48	; 0x30
 8005bba:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8005bbe:	491e      	ldr	r1, [pc, #120]	; (8005c38 <sync_fs+0xd8>)
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	f7ff fd45 	bl	8005650 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	3330      	adds	r3, #48	; 0x30
 8005bca:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	691b      	ldr	r3, [r3, #16]
 8005bd2:	4619      	mov	r1, r3
 8005bd4:	4610      	mov	r0, r2
 8005bd6:	f7ff fd3b 	bl	8005650 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	3330      	adds	r3, #48	; 0x30
 8005bde:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	68db      	ldr	r3, [r3, #12]
 8005be6:	4619      	mov	r1, r3
 8005be8:	4610      	mov	r0, r2
 8005bea:	f7ff fd31 	bl	8005650 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	69db      	ldr	r3, [r3, #28]
 8005bf2:	1c5a      	adds	r2, r3, #1
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	7858      	ldrb	r0, [r3, #1]
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c06:	2301      	movs	r3, #1
 8005c08:	f7ff fc8e 	bl	8005528 <disk_write>
			fs->fsi_flag = 0;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2200      	movs	r2, #0
 8005c10:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	785b      	ldrb	r3, [r3, #1]
 8005c16:	2200      	movs	r2, #0
 8005c18:	2100      	movs	r1, #0
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	f7ff fca4 	bl	8005568 <disk_ioctl>
 8005c20:	4603      	mov	r3, r0
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d001      	beq.n	8005c2a <sync_fs+0xca>
 8005c26:	2301      	movs	r3, #1
 8005c28:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8005c2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	3710      	adds	r7, #16
 8005c30:	46bd      	mov	sp, r7
 8005c32:	bd80      	pop	{r7, pc}
 8005c34:	41615252 	.word	0x41615252
 8005c38:	61417272 	.word	0x61417272

08005c3c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b083      	sub	sp, #12
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
 8005c44:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	3b02      	subs	r3, #2
 8005c4a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	695b      	ldr	r3, [r3, #20]
 8005c50:	3b02      	subs	r3, #2
 8005c52:	683a      	ldr	r2, [r7, #0]
 8005c54:	429a      	cmp	r2, r3
 8005c56:	d301      	bcc.n	8005c5c <clust2sect+0x20>
 8005c58:	2300      	movs	r3, #0
 8005c5a:	e008      	b.n	8005c6e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	895b      	ldrh	r3, [r3, #10]
 8005c60:	461a      	mov	r2, r3
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	fb03 f202 	mul.w	r2, r3, r2
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c6c:	4413      	add	r3, r2
}
 8005c6e:	4618      	mov	r0, r3
 8005c70:	370c      	adds	r7, #12
 8005c72:	46bd      	mov	sp, r7
 8005c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c78:	4770      	bx	lr

08005c7a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8005c7a:	b580      	push	{r7, lr}
 8005c7c:	b086      	sub	sp, #24
 8005c7e:	af00      	add	r7, sp, #0
 8005c80:	6078      	str	r0, [r7, #4]
 8005c82:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	2b01      	cmp	r3, #1
 8005c8e:	d904      	bls.n	8005c9a <get_fat+0x20>
 8005c90:	693b      	ldr	r3, [r7, #16]
 8005c92:	695b      	ldr	r3, [r3, #20]
 8005c94:	683a      	ldr	r2, [r7, #0]
 8005c96:	429a      	cmp	r2, r3
 8005c98:	d302      	bcc.n	8005ca0 <get_fat+0x26>
		val = 1;	/* Internal error */
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	617b      	str	r3, [r7, #20]
 8005c9e:	e08f      	b.n	8005dc0 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8005ca0:	f04f 33ff 	mov.w	r3, #4294967295
 8005ca4:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8005ca6:	693b      	ldr	r3, [r7, #16]
 8005ca8:	781b      	ldrb	r3, [r3, #0]
 8005caa:	2b03      	cmp	r3, #3
 8005cac:	d062      	beq.n	8005d74 <get_fat+0xfa>
 8005cae:	2b03      	cmp	r3, #3
 8005cb0:	dc7c      	bgt.n	8005dac <get_fat+0x132>
 8005cb2:	2b01      	cmp	r3, #1
 8005cb4:	d002      	beq.n	8005cbc <get_fat+0x42>
 8005cb6:	2b02      	cmp	r3, #2
 8005cb8:	d042      	beq.n	8005d40 <get_fat+0xc6>
 8005cba:	e077      	b.n	8005dac <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	60fb      	str	r3, [r7, #12]
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	085b      	lsrs	r3, r3, #1
 8005cc4:	68fa      	ldr	r2, [r7, #12]
 8005cc6:	4413      	add	r3, r2
 8005cc8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005cca:	693b      	ldr	r3, [r7, #16]
 8005ccc:	6a1a      	ldr	r2, [r3, #32]
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	0a5b      	lsrs	r3, r3, #9
 8005cd2:	4413      	add	r3, r2
 8005cd4:	4619      	mov	r1, r3
 8005cd6:	6938      	ldr	r0, [r7, #16]
 8005cd8:	f7ff ff14 	bl	8005b04 <move_window>
 8005cdc:	4603      	mov	r3, r0
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d167      	bne.n	8005db2 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	1c5a      	adds	r2, r3, #1
 8005ce6:	60fa      	str	r2, [r7, #12]
 8005ce8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cec:	693a      	ldr	r2, [r7, #16]
 8005cee:	4413      	add	r3, r2
 8005cf0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005cf4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005cf6:	693b      	ldr	r3, [r7, #16]
 8005cf8:	6a1a      	ldr	r2, [r3, #32]
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	0a5b      	lsrs	r3, r3, #9
 8005cfe:	4413      	add	r3, r2
 8005d00:	4619      	mov	r1, r3
 8005d02:	6938      	ldr	r0, [r7, #16]
 8005d04:	f7ff fefe 	bl	8005b04 <move_window>
 8005d08:	4603      	mov	r3, r0
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d153      	bne.n	8005db6 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d14:	693a      	ldr	r2, [r7, #16]
 8005d16:	4413      	add	r3, r2
 8005d18:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005d1c:	021b      	lsls	r3, r3, #8
 8005d1e:	461a      	mov	r2, r3
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	4313      	orrs	r3, r2
 8005d24:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	f003 0301 	and.w	r3, r3, #1
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d002      	beq.n	8005d36 <get_fat+0xbc>
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	091b      	lsrs	r3, r3, #4
 8005d34:	e002      	b.n	8005d3c <get_fat+0xc2>
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d3c:	617b      	str	r3, [r7, #20]
			break;
 8005d3e:	e03f      	b.n	8005dc0 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005d40:	693b      	ldr	r3, [r7, #16]
 8005d42:	6a1a      	ldr	r2, [r3, #32]
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	0a1b      	lsrs	r3, r3, #8
 8005d48:	4413      	add	r3, r2
 8005d4a:	4619      	mov	r1, r3
 8005d4c:	6938      	ldr	r0, [r7, #16]
 8005d4e:	f7ff fed9 	bl	8005b04 <move_window>
 8005d52:	4603      	mov	r3, r0
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d130      	bne.n	8005dba <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8005d58:	693b      	ldr	r3, [r7, #16]
 8005d5a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	005b      	lsls	r3, r3, #1
 8005d62:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8005d66:	4413      	add	r3, r2
 8005d68:	4618      	mov	r0, r3
 8005d6a:	f7ff fc1b 	bl	80055a4 <ld_word>
 8005d6e:	4603      	mov	r3, r0
 8005d70:	617b      	str	r3, [r7, #20]
			break;
 8005d72:	e025      	b.n	8005dc0 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005d74:	693b      	ldr	r3, [r7, #16]
 8005d76:	6a1a      	ldr	r2, [r3, #32]
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	09db      	lsrs	r3, r3, #7
 8005d7c:	4413      	add	r3, r2
 8005d7e:	4619      	mov	r1, r3
 8005d80:	6938      	ldr	r0, [r7, #16]
 8005d82:	f7ff febf 	bl	8005b04 <move_window>
 8005d86:	4603      	mov	r3, r0
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d118      	bne.n	8005dbe <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8005d8c:	693b      	ldr	r3, [r7, #16]
 8005d8e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	009b      	lsls	r3, r3, #2
 8005d96:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8005d9a:	4413      	add	r3, r2
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	f7ff fc19 	bl	80055d4 <ld_dword>
 8005da2:	4603      	mov	r3, r0
 8005da4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005da8:	617b      	str	r3, [r7, #20]
			break;
 8005daa:	e009      	b.n	8005dc0 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8005dac:	2301      	movs	r3, #1
 8005dae:	617b      	str	r3, [r7, #20]
 8005db0:	e006      	b.n	8005dc0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005db2:	bf00      	nop
 8005db4:	e004      	b.n	8005dc0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005db6:	bf00      	nop
 8005db8:	e002      	b.n	8005dc0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005dba:	bf00      	nop
 8005dbc:	e000      	b.n	8005dc0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005dbe:	bf00      	nop
		}
	}

	return val;
 8005dc0:	697b      	ldr	r3, [r7, #20]
}
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	3718      	adds	r7, #24
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	bd80      	pop	{r7, pc}

08005dca <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8005dca:	b590      	push	{r4, r7, lr}
 8005dcc:	b089      	sub	sp, #36	; 0x24
 8005dce:	af00      	add	r7, sp, #0
 8005dd0:	60f8      	str	r0, [r7, #12]
 8005dd2:	60b9      	str	r1, [r7, #8]
 8005dd4:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8005dd6:	2302      	movs	r3, #2
 8005dd8:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8005dda:	68bb      	ldr	r3, [r7, #8]
 8005ddc:	2b01      	cmp	r3, #1
 8005dde:	f240 80d2 	bls.w	8005f86 <put_fat+0x1bc>
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	695b      	ldr	r3, [r3, #20]
 8005de6:	68ba      	ldr	r2, [r7, #8]
 8005de8:	429a      	cmp	r2, r3
 8005dea:	f080 80cc 	bcs.w	8005f86 <put_fat+0x1bc>
		switch (fs->fs_type) {
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	781b      	ldrb	r3, [r3, #0]
 8005df2:	2b03      	cmp	r3, #3
 8005df4:	f000 8096 	beq.w	8005f24 <put_fat+0x15a>
 8005df8:	2b03      	cmp	r3, #3
 8005dfa:	f300 80cd 	bgt.w	8005f98 <put_fat+0x1ce>
 8005dfe:	2b01      	cmp	r3, #1
 8005e00:	d002      	beq.n	8005e08 <put_fat+0x3e>
 8005e02:	2b02      	cmp	r3, #2
 8005e04:	d06e      	beq.n	8005ee4 <put_fat+0x11a>
 8005e06:	e0c7      	b.n	8005f98 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	61bb      	str	r3, [r7, #24]
 8005e0c:	69bb      	ldr	r3, [r7, #24]
 8005e0e:	085b      	lsrs	r3, r3, #1
 8005e10:	69ba      	ldr	r2, [r7, #24]
 8005e12:	4413      	add	r3, r2
 8005e14:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	6a1a      	ldr	r2, [r3, #32]
 8005e1a:	69bb      	ldr	r3, [r7, #24]
 8005e1c:	0a5b      	lsrs	r3, r3, #9
 8005e1e:	4413      	add	r3, r2
 8005e20:	4619      	mov	r1, r3
 8005e22:	68f8      	ldr	r0, [r7, #12]
 8005e24:	f7ff fe6e 	bl	8005b04 <move_window>
 8005e28:	4603      	mov	r3, r0
 8005e2a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005e2c:	7ffb      	ldrb	r3, [r7, #31]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	f040 80ab 	bne.w	8005f8a <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005e3a:	69bb      	ldr	r3, [r7, #24]
 8005e3c:	1c59      	adds	r1, r3, #1
 8005e3e:	61b9      	str	r1, [r7, #24]
 8005e40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e44:	4413      	add	r3, r2
 8005e46:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	f003 0301 	and.w	r3, r3, #1
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d00d      	beq.n	8005e6e <put_fat+0xa4>
 8005e52:	697b      	ldr	r3, [r7, #20]
 8005e54:	781b      	ldrb	r3, [r3, #0]
 8005e56:	b25b      	sxtb	r3, r3
 8005e58:	f003 030f 	and.w	r3, r3, #15
 8005e5c:	b25a      	sxtb	r2, r3
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	b2db      	uxtb	r3, r3
 8005e62:	011b      	lsls	r3, r3, #4
 8005e64:	b25b      	sxtb	r3, r3
 8005e66:	4313      	orrs	r3, r2
 8005e68:	b25b      	sxtb	r3, r3
 8005e6a:	b2db      	uxtb	r3, r3
 8005e6c:	e001      	b.n	8005e72 <put_fat+0xa8>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	b2db      	uxtb	r3, r3
 8005e72:	697a      	ldr	r2, [r7, #20]
 8005e74:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	2201      	movs	r2, #1
 8005e7a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	6a1a      	ldr	r2, [r3, #32]
 8005e80:	69bb      	ldr	r3, [r7, #24]
 8005e82:	0a5b      	lsrs	r3, r3, #9
 8005e84:	4413      	add	r3, r2
 8005e86:	4619      	mov	r1, r3
 8005e88:	68f8      	ldr	r0, [r7, #12]
 8005e8a:	f7ff fe3b 	bl	8005b04 <move_window>
 8005e8e:	4603      	mov	r3, r0
 8005e90:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005e92:	7ffb      	ldrb	r3, [r7, #31]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d17a      	bne.n	8005f8e <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005e9e:	69bb      	ldr	r3, [r7, #24]
 8005ea0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ea4:	4413      	add	r3, r2
 8005ea6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	f003 0301 	and.w	r3, r3, #1
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d003      	beq.n	8005eba <put_fat+0xf0>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	091b      	lsrs	r3, r3, #4
 8005eb6:	b2db      	uxtb	r3, r3
 8005eb8:	e00e      	b.n	8005ed8 <put_fat+0x10e>
 8005eba:	697b      	ldr	r3, [r7, #20]
 8005ebc:	781b      	ldrb	r3, [r3, #0]
 8005ebe:	b25b      	sxtb	r3, r3
 8005ec0:	f023 030f 	bic.w	r3, r3, #15
 8005ec4:	b25a      	sxtb	r2, r3
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	0a1b      	lsrs	r3, r3, #8
 8005eca:	b25b      	sxtb	r3, r3
 8005ecc:	f003 030f 	and.w	r3, r3, #15
 8005ed0:	b25b      	sxtb	r3, r3
 8005ed2:	4313      	orrs	r3, r2
 8005ed4:	b25b      	sxtb	r3, r3
 8005ed6:	b2db      	uxtb	r3, r3
 8005ed8:	697a      	ldr	r2, [r7, #20]
 8005eda:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	2201      	movs	r2, #1
 8005ee0:	70da      	strb	r2, [r3, #3]
			break;
 8005ee2:	e059      	b.n	8005f98 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	6a1a      	ldr	r2, [r3, #32]
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	0a1b      	lsrs	r3, r3, #8
 8005eec:	4413      	add	r3, r2
 8005eee:	4619      	mov	r1, r3
 8005ef0:	68f8      	ldr	r0, [r7, #12]
 8005ef2:	f7ff fe07 	bl	8005b04 <move_window>
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005efa:	7ffb      	ldrb	r3, [r7, #31]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d148      	bne.n	8005f92 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	005b      	lsls	r3, r3, #1
 8005f0a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8005f0e:	4413      	add	r3, r2
 8005f10:	687a      	ldr	r2, [r7, #4]
 8005f12:	b292      	uxth	r2, r2
 8005f14:	4611      	mov	r1, r2
 8005f16:	4618      	mov	r0, r3
 8005f18:	f7ff fb7f 	bl	800561a <st_word>
			fs->wflag = 1;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	2201      	movs	r2, #1
 8005f20:	70da      	strb	r2, [r3, #3]
			break;
 8005f22:	e039      	b.n	8005f98 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	6a1a      	ldr	r2, [r3, #32]
 8005f28:	68bb      	ldr	r3, [r7, #8]
 8005f2a:	09db      	lsrs	r3, r3, #7
 8005f2c:	4413      	add	r3, r2
 8005f2e:	4619      	mov	r1, r3
 8005f30:	68f8      	ldr	r0, [r7, #12]
 8005f32:	f7ff fde7 	bl	8005b04 <move_window>
 8005f36:	4603      	mov	r3, r0
 8005f38:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005f3a:	7ffb      	ldrb	r3, [r7, #31]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d12a      	bne.n	8005f96 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	009b      	lsls	r3, r3, #2
 8005f50:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8005f54:	4413      	add	r3, r2
 8005f56:	4618      	mov	r0, r3
 8005f58:	f7ff fb3c 	bl	80055d4 <ld_dword>
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005f62:	4323      	orrs	r3, r4
 8005f64:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	009b      	lsls	r3, r3, #2
 8005f70:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8005f74:	4413      	add	r3, r2
 8005f76:	6879      	ldr	r1, [r7, #4]
 8005f78:	4618      	mov	r0, r3
 8005f7a:	f7ff fb69 	bl	8005650 <st_dword>
			fs->wflag = 1;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	2201      	movs	r2, #1
 8005f82:	70da      	strb	r2, [r3, #3]
			break;
 8005f84:	e008      	b.n	8005f98 <put_fat+0x1ce>
		}
	}
 8005f86:	bf00      	nop
 8005f88:	e006      	b.n	8005f98 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8005f8a:	bf00      	nop
 8005f8c:	e004      	b.n	8005f98 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8005f8e:	bf00      	nop
 8005f90:	e002      	b.n	8005f98 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8005f92:	bf00      	nop
 8005f94:	e000      	b.n	8005f98 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8005f96:	bf00      	nop
	return res;
 8005f98:	7ffb      	ldrb	r3, [r7, #31]
}
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	3724      	adds	r7, #36	; 0x24
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	bd90      	pop	{r4, r7, pc}

08005fa2 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8005fa2:	b580      	push	{r7, lr}
 8005fa4:	b088      	sub	sp, #32
 8005fa6:	af00      	add	r7, sp, #0
 8005fa8:	60f8      	str	r0, [r7, #12]
 8005faa:	60b9      	str	r1, [r7, #8]
 8005fac:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8005fae:	2300      	movs	r3, #0
 8005fb0:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	2b01      	cmp	r3, #1
 8005fbc:	d904      	bls.n	8005fc8 <remove_chain+0x26>
 8005fbe:	69bb      	ldr	r3, [r7, #24]
 8005fc0:	695b      	ldr	r3, [r3, #20]
 8005fc2:	68ba      	ldr	r2, [r7, #8]
 8005fc4:	429a      	cmp	r2, r3
 8005fc6:	d301      	bcc.n	8005fcc <remove_chain+0x2a>
 8005fc8:	2302      	movs	r3, #2
 8005fca:	e04b      	b.n	8006064 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d00c      	beq.n	8005fec <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8005fd2:	f04f 32ff 	mov.w	r2, #4294967295
 8005fd6:	6879      	ldr	r1, [r7, #4]
 8005fd8:	69b8      	ldr	r0, [r7, #24]
 8005fda:	f7ff fef6 	bl	8005dca <put_fat>
 8005fde:	4603      	mov	r3, r0
 8005fe0:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8005fe2:	7ffb      	ldrb	r3, [r7, #31]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d001      	beq.n	8005fec <remove_chain+0x4a>
 8005fe8:	7ffb      	ldrb	r3, [r7, #31]
 8005fea:	e03b      	b.n	8006064 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8005fec:	68b9      	ldr	r1, [r7, #8]
 8005fee:	68f8      	ldr	r0, [r7, #12]
 8005ff0:	f7ff fe43 	bl	8005c7a <get_fat>
 8005ff4:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8005ff6:	697b      	ldr	r3, [r7, #20]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d031      	beq.n	8006060 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8005ffc:	697b      	ldr	r3, [r7, #20]
 8005ffe:	2b01      	cmp	r3, #1
 8006000:	d101      	bne.n	8006006 <remove_chain+0x64>
 8006002:	2302      	movs	r3, #2
 8006004:	e02e      	b.n	8006064 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8006006:	697b      	ldr	r3, [r7, #20]
 8006008:	f1b3 3fff 	cmp.w	r3, #4294967295
 800600c:	d101      	bne.n	8006012 <remove_chain+0x70>
 800600e:	2301      	movs	r3, #1
 8006010:	e028      	b.n	8006064 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8006012:	2200      	movs	r2, #0
 8006014:	68b9      	ldr	r1, [r7, #8]
 8006016:	69b8      	ldr	r0, [r7, #24]
 8006018:	f7ff fed7 	bl	8005dca <put_fat>
 800601c:	4603      	mov	r3, r0
 800601e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8006020:	7ffb      	ldrb	r3, [r7, #31]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d001      	beq.n	800602a <remove_chain+0x88>
 8006026:	7ffb      	ldrb	r3, [r7, #31]
 8006028:	e01c      	b.n	8006064 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800602a:	69bb      	ldr	r3, [r7, #24]
 800602c:	691a      	ldr	r2, [r3, #16]
 800602e:	69bb      	ldr	r3, [r7, #24]
 8006030:	695b      	ldr	r3, [r3, #20]
 8006032:	3b02      	subs	r3, #2
 8006034:	429a      	cmp	r2, r3
 8006036:	d20b      	bcs.n	8006050 <remove_chain+0xae>
			fs->free_clst++;
 8006038:	69bb      	ldr	r3, [r7, #24]
 800603a:	691b      	ldr	r3, [r3, #16]
 800603c:	1c5a      	adds	r2, r3, #1
 800603e:	69bb      	ldr	r3, [r7, #24]
 8006040:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8006042:	69bb      	ldr	r3, [r7, #24]
 8006044:	791b      	ldrb	r3, [r3, #4]
 8006046:	f043 0301 	orr.w	r3, r3, #1
 800604a:	b2da      	uxtb	r2, r3
 800604c:	69bb      	ldr	r3, [r7, #24]
 800604e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8006050:	697b      	ldr	r3, [r7, #20]
 8006052:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8006054:	69bb      	ldr	r3, [r7, #24]
 8006056:	695b      	ldr	r3, [r3, #20]
 8006058:	68ba      	ldr	r2, [r7, #8]
 800605a:	429a      	cmp	r2, r3
 800605c:	d3c6      	bcc.n	8005fec <remove_chain+0x4a>
 800605e:	e000      	b.n	8006062 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8006060:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8006062:	2300      	movs	r3, #0
}
 8006064:	4618      	mov	r0, r3
 8006066:	3720      	adds	r7, #32
 8006068:	46bd      	mov	sp, r7
 800606a:	bd80      	pop	{r7, pc}

0800606c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b088      	sub	sp, #32
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
 8006074:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d10d      	bne.n	800609e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8006082:	693b      	ldr	r3, [r7, #16]
 8006084:	68db      	ldr	r3, [r3, #12]
 8006086:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8006088:	69bb      	ldr	r3, [r7, #24]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d004      	beq.n	8006098 <create_chain+0x2c>
 800608e:	693b      	ldr	r3, [r7, #16]
 8006090:	695b      	ldr	r3, [r3, #20]
 8006092:	69ba      	ldr	r2, [r7, #24]
 8006094:	429a      	cmp	r2, r3
 8006096:	d31b      	bcc.n	80060d0 <create_chain+0x64>
 8006098:	2301      	movs	r3, #1
 800609a:	61bb      	str	r3, [r7, #24]
 800609c:	e018      	b.n	80060d0 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800609e:	6839      	ldr	r1, [r7, #0]
 80060a0:	6878      	ldr	r0, [r7, #4]
 80060a2:	f7ff fdea 	bl	8005c7a <get_fat>
 80060a6:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	2b01      	cmp	r3, #1
 80060ac:	d801      	bhi.n	80060b2 <create_chain+0x46>
 80060ae:	2301      	movs	r3, #1
 80060b0:	e070      	b.n	8006194 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060b8:	d101      	bne.n	80060be <create_chain+0x52>
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	e06a      	b.n	8006194 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80060be:	693b      	ldr	r3, [r7, #16]
 80060c0:	695b      	ldr	r3, [r3, #20]
 80060c2:	68fa      	ldr	r2, [r7, #12]
 80060c4:	429a      	cmp	r2, r3
 80060c6:	d201      	bcs.n	80060cc <create_chain+0x60>
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	e063      	b.n	8006194 <create_chain+0x128>
		scl = clst;
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80060d0:	69bb      	ldr	r3, [r7, #24]
 80060d2:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80060d4:	69fb      	ldr	r3, [r7, #28]
 80060d6:	3301      	adds	r3, #1
 80060d8:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80060da:	693b      	ldr	r3, [r7, #16]
 80060dc:	695b      	ldr	r3, [r3, #20]
 80060de:	69fa      	ldr	r2, [r7, #28]
 80060e0:	429a      	cmp	r2, r3
 80060e2:	d307      	bcc.n	80060f4 <create_chain+0x88>
				ncl = 2;
 80060e4:	2302      	movs	r3, #2
 80060e6:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80060e8:	69fa      	ldr	r2, [r7, #28]
 80060ea:	69bb      	ldr	r3, [r7, #24]
 80060ec:	429a      	cmp	r2, r3
 80060ee:	d901      	bls.n	80060f4 <create_chain+0x88>
 80060f0:	2300      	movs	r3, #0
 80060f2:	e04f      	b.n	8006194 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80060f4:	69f9      	ldr	r1, [r7, #28]
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	f7ff fdbf 	bl	8005c7a <get_fat>
 80060fc:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d00e      	beq.n	8006122 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	2b01      	cmp	r3, #1
 8006108:	d003      	beq.n	8006112 <create_chain+0xa6>
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006110:	d101      	bne.n	8006116 <create_chain+0xaa>
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	e03e      	b.n	8006194 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8006116:	69fa      	ldr	r2, [r7, #28]
 8006118:	69bb      	ldr	r3, [r7, #24]
 800611a:	429a      	cmp	r2, r3
 800611c:	d1da      	bne.n	80060d4 <create_chain+0x68>
 800611e:	2300      	movs	r3, #0
 8006120:	e038      	b.n	8006194 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8006122:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8006124:	f04f 32ff 	mov.w	r2, #4294967295
 8006128:	69f9      	ldr	r1, [r7, #28]
 800612a:	6938      	ldr	r0, [r7, #16]
 800612c:	f7ff fe4d 	bl	8005dca <put_fat>
 8006130:	4603      	mov	r3, r0
 8006132:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8006134:	7dfb      	ldrb	r3, [r7, #23]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d109      	bne.n	800614e <create_chain+0xe2>
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d006      	beq.n	800614e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8006140:	69fa      	ldr	r2, [r7, #28]
 8006142:	6839      	ldr	r1, [r7, #0]
 8006144:	6938      	ldr	r0, [r7, #16]
 8006146:	f7ff fe40 	bl	8005dca <put_fat>
 800614a:	4603      	mov	r3, r0
 800614c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800614e:	7dfb      	ldrb	r3, [r7, #23]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d116      	bne.n	8006182 <create_chain+0x116>
		fs->last_clst = ncl;
 8006154:	693b      	ldr	r3, [r7, #16]
 8006156:	69fa      	ldr	r2, [r7, #28]
 8006158:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800615a:	693b      	ldr	r3, [r7, #16]
 800615c:	691a      	ldr	r2, [r3, #16]
 800615e:	693b      	ldr	r3, [r7, #16]
 8006160:	695b      	ldr	r3, [r3, #20]
 8006162:	3b02      	subs	r3, #2
 8006164:	429a      	cmp	r2, r3
 8006166:	d804      	bhi.n	8006172 <create_chain+0x106>
 8006168:	693b      	ldr	r3, [r7, #16]
 800616a:	691b      	ldr	r3, [r3, #16]
 800616c:	1e5a      	subs	r2, r3, #1
 800616e:	693b      	ldr	r3, [r7, #16]
 8006170:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8006172:	693b      	ldr	r3, [r7, #16]
 8006174:	791b      	ldrb	r3, [r3, #4]
 8006176:	f043 0301 	orr.w	r3, r3, #1
 800617a:	b2da      	uxtb	r2, r3
 800617c:	693b      	ldr	r3, [r7, #16]
 800617e:	711a      	strb	r2, [r3, #4]
 8006180:	e007      	b.n	8006192 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8006182:	7dfb      	ldrb	r3, [r7, #23]
 8006184:	2b01      	cmp	r3, #1
 8006186:	d102      	bne.n	800618e <create_chain+0x122>
 8006188:	f04f 33ff 	mov.w	r3, #4294967295
 800618c:	e000      	b.n	8006190 <create_chain+0x124>
 800618e:	2301      	movs	r3, #1
 8006190:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8006192:	69fb      	ldr	r3, [r7, #28]
}
 8006194:	4618      	mov	r0, r3
 8006196:	3720      	adds	r7, #32
 8006198:	46bd      	mov	sp, r7
 800619a:	bd80      	pop	{r7, pc}

0800619c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800619c:	b480      	push	{r7}
 800619e:	b087      	sub	sp, #28
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
 80061a4:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061b0:	3304      	adds	r3, #4
 80061b2:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	0a5b      	lsrs	r3, r3, #9
 80061b8:	68fa      	ldr	r2, [r7, #12]
 80061ba:	8952      	ldrh	r2, [r2, #10]
 80061bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80061c0:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80061c2:	693b      	ldr	r3, [r7, #16]
 80061c4:	1d1a      	adds	r2, r3, #4
 80061c6:	613a      	str	r2, [r7, #16]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d101      	bne.n	80061d6 <clmt_clust+0x3a>
 80061d2:	2300      	movs	r3, #0
 80061d4:	e010      	b.n	80061f8 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 80061d6:	697a      	ldr	r2, [r7, #20]
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	429a      	cmp	r2, r3
 80061dc:	d307      	bcc.n	80061ee <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 80061de:	697a      	ldr	r2, [r7, #20]
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	1ad3      	subs	r3, r2, r3
 80061e4:	617b      	str	r3, [r7, #20]
 80061e6:	693b      	ldr	r3, [r7, #16]
 80061e8:	3304      	adds	r3, #4
 80061ea:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80061ec:	e7e9      	b.n	80061c2 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80061ee:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80061f0:	693b      	ldr	r3, [r7, #16]
 80061f2:	681a      	ldr	r2, [r3, #0]
 80061f4:	697b      	ldr	r3, [r7, #20]
 80061f6:	4413      	add	r3, r2
}
 80061f8:	4618      	mov	r0, r3
 80061fa:	371c      	adds	r7, #28
 80061fc:	46bd      	mov	sp, r7
 80061fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006202:	4770      	bx	lr

08006204 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b086      	sub	sp, #24
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
 800620c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800621a:	d204      	bcs.n	8006226 <dir_sdi+0x22>
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	f003 031f 	and.w	r3, r3, #31
 8006222:	2b00      	cmp	r3, #0
 8006224:	d001      	beq.n	800622a <dir_sdi+0x26>
		return FR_INT_ERR;
 8006226:	2302      	movs	r3, #2
 8006228:	e063      	b.n	80062f2 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	683a      	ldr	r2, [r7, #0]
 800622e:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	689b      	ldr	r3, [r3, #8]
 8006234:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8006236:	697b      	ldr	r3, [r7, #20]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d106      	bne.n	800624a <dir_sdi+0x46>
 800623c:	693b      	ldr	r3, [r7, #16]
 800623e:	781b      	ldrb	r3, [r3, #0]
 8006240:	2b02      	cmp	r3, #2
 8006242:	d902      	bls.n	800624a <dir_sdi+0x46>
		clst = fs->dirbase;
 8006244:	693b      	ldr	r3, [r7, #16]
 8006246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006248:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800624a:	697b      	ldr	r3, [r7, #20]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d10c      	bne.n	800626a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	095b      	lsrs	r3, r3, #5
 8006254:	693a      	ldr	r2, [r7, #16]
 8006256:	8912      	ldrh	r2, [r2, #8]
 8006258:	4293      	cmp	r3, r2
 800625a:	d301      	bcc.n	8006260 <dir_sdi+0x5c>
 800625c:	2302      	movs	r3, #2
 800625e:	e048      	b.n	80062f2 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8006260:	693b      	ldr	r3, [r7, #16]
 8006262:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	61da      	str	r2, [r3, #28]
 8006268:	e029      	b.n	80062be <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800626a:	693b      	ldr	r3, [r7, #16]
 800626c:	895b      	ldrh	r3, [r3, #10]
 800626e:	025b      	lsls	r3, r3, #9
 8006270:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006272:	e019      	b.n	80062a8 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	6979      	ldr	r1, [r7, #20]
 8006278:	4618      	mov	r0, r3
 800627a:	f7ff fcfe 	bl	8005c7a <get_fat>
 800627e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006280:	697b      	ldr	r3, [r7, #20]
 8006282:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006286:	d101      	bne.n	800628c <dir_sdi+0x88>
 8006288:	2301      	movs	r3, #1
 800628a:	e032      	b.n	80062f2 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800628c:	697b      	ldr	r3, [r7, #20]
 800628e:	2b01      	cmp	r3, #1
 8006290:	d904      	bls.n	800629c <dir_sdi+0x98>
 8006292:	693b      	ldr	r3, [r7, #16]
 8006294:	695b      	ldr	r3, [r3, #20]
 8006296:	697a      	ldr	r2, [r7, #20]
 8006298:	429a      	cmp	r2, r3
 800629a:	d301      	bcc.n	80062a0 <dir_sdi+0x9c>
 800629c:	2302      	movs	r3, #2
 800629e:	e028      	b.n	80062f2 <dir_sdi+0xee>
			ofs -= csz;
 80062a0:	683a      	ldr	r2, [r7, #0]
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	1ad3      	subs	r3, r2, r3
 80062a6:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80062a8:	683a      	ldr	r2, [r7, #0]
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	429a      	cmp	r2, r3
 80062ae:	d2e1      	bcs.n	8006274 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 80062b0:	6979      	ldr	r1, [r7, #20]
 80062b2:	6938      	ldr	r0, [r7, #16]
 80062b4:	f7ff fcc2 	bl	8005c3c <clust2sect>
 80062b8:	4602      	mov	r2, r0
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	697a      	ldr	r2, [r7, #20]
 80062c2:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	69db      	ldr	r3, [r3, #28]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d101      	bne.n	80062d0 <dir_sdi+0xcc>
 80062cc:	2302      	movs	r3, #2
 80062ce:	e010      	b.n	80062f2 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	69da      	ldr	r2, [r3, #28]
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	0a5b      	lsrs	r3, r3, #9
 80062d8:	441a      	add	r2, r3
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80062de:	693b      	ldr	r3, [r7, #16]
 80062e0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062ea:	441a      	add	r2, r3
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80062f0:	2300      	movs	r3, #0
}
 80062f2:	4618      	mov	r0, r3
 80062f4:	3718      	adds	r7, #24
 80062f6:	46bd      	mov	sp, r7
 80062f8:	bd80      	pop	{r7, pc}

080062fa <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80062fa:	b580      	push	{r7, lr}
 80062fc:	b086      	sub	sp, #24
 80062fe:	af00      	add	r7, sp, #0
 8006300:	6078      	str	r0, [r7, #4]
 8006302:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	695b      	ldr	r3, [r3, #20]
 800630e:	3320      	adds	r3, #32
 8006310:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	69db      	ldr	r3, [r3, #28]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d003      	beq.n	8006322 <dir_next+0x28>
 800631a:	68bb      	ldr	r3, [r7, #8]
 800631c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006320:	d301      	bcc.n	8006326 <dir_next+0x2c>
 8006322:	2304      	movs	r3, #4
 8006324:	e0aa      	b.n	800647c <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8006326:	68bb      	ldr	r3, [r7, #8]
 8006328:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800632c:	2b00      	cmp	r3, #0
 800632e:	f040 8098 	bne.w	8006462 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	69db      	ldr	r3, [r3, #28]
 8006336:	1c5a      	adds	r2, r3, #1
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	699b      	ldr	r3, [r3, #24]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d10b      	bne.n	800635c <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8006344:	68bb      	ldr	r3, [r7, #8]
 8006346:	095b      	lsrs	r3, r3, #5
 8006348:	68fa      	ldr	r2, [r7, #12]
 800634a:	8912      	ldrh	r2, [r2, #8]
 800634c:	4293      	cmp	r3, r2
 800634e:	f0c0 8088 	bcc.w	8006462 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2200      	movs	r2, #0
 8006356:	61da      	str	r2, [r3, #28]
 8006358:	2304      	movs	r3, #4
 800635a:	e08f      	b.n	800647c <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800635c:	68bb      	ldr	r3, [r7, #8]
 800635e:	0a5b      	lsrs	r3, r3, #9
 8006360:	68fa      	ldr	r2, [r7, #12]
 8006362:	8952      	ldrh	r2, [r2, #10]
 8006364:	3a01      	subs	r2, #1
 8006366:	4013      	ands	r3, r2
 8006368:	2b00      	cmp	r3, #0
 800636a:	d17a      	bne.n	8006462 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800636c:	687a      	ldr	r2, [r7, #4]
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	699b      	ldr	r3, [r3, #24]
 8006372:	4619      	mov	r1, r3
 8006374:	4610      	mov	r0, r2
 8006376:	f7ff fc80 	bl	8005c7a <get_fat>
 800637a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800637c:	697b      	ldr	r3, [r7, #20]
 800637e:	2b01      	cmp	r3, #1
 8006380:	d801      	bhi.n	8006386 <dir_next+0x8c>
 8006382:	2302      	movs	r3, #2
 8006384:	e07a      	b.n	800647c <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8006386:	697b      	ldr	r3, [r7, #20]
 8006388:	f1b3 3fff 	cmp.w	r3, #4294967295
 800638c:	d101      	bne.n	8006392 <dir_next+0x98>
 800638e:	2301      	movs	r3, #1
 8006390:	e074      	b.n	800647c <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	695b      	ldr	r3, [r3, #20]
 8006396:	697a      	ldr	r2, [r7, #20]
 8006398:	429a      	cmp	r2, r3
 800639a:	d358      	bcc.n	800644e <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d104      	bne.n	80063ac <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2200      	movs	r2, #0
 80063a6:	61da      	str	r2, [r3, #28]
 80063a8:	2304      	movs	r3, #4
 80063aa:	e067      	b.n	800647c <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80063ac:	687a      	ldr	r2, [r7, #4]
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	699b      	ldr	r3, [r3, #24]
 80063b2:	4619      	mov	r1, r3
 80063b4:	4610      	mov	r0, r2
 80063b6:	f7ff fe59 	bl	800606c <create_chain>
 80063ba:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80063bc:	697b      	ldr	r3, [r7, #20]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d101      	bne.n	80063c6 <dir_next+0xcc>
 80063c2:	2307      	movs	r3, #7
 80063c4:	e05a      	b.n	800647c <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80063c6:	697b      	ldr	r3, [r7, #20]
 80063c8:	2b01      	cmp	r3, #1
 80063ca:	d101      	bne.n	80063d0 <dir_next+0xd6>
 80063cc:	2302      	movs	r3, #2
 80063ce:	e055      	b.n	800647c <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80063d0:	697b      	ldr	r3, [r7, #20]
 80063d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063d6:	d101      	bne.n	80063dc <dir_next+0xe2>
 80063d8:	2301      	movs	r3, #1
 80063da:	e04f      	b.n	800647c <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80063dc:	68f8      	ldr	r0, [r7, #12]
 80063de:	f7ff fb4d 	bl	8005a7c <sync_window>
 80063e2:	4603      	mov	r3, r0
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d001      	beq.n	80063ec <dir_next+0xf2>
 80063e8:	2301      	movs	r3, #1
 80063ea:	e047      	b.n	800647c <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	3330      	adds	r3, #48	; 0x30
 80063f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80063f4:	2100      	movs	r1, #0
 80063f6:	4618      	mov	r0, r3
 80063f8:	f7ff f977 	bl	80056ea <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80063fc:	2300      	movs	r3, #0
 80063fe:	613b      	str	r3, [r7, #16]
 8006400:	6979      	ldr	r1, [r7, #20]
 8006402:	68f8      	ldr	r0, [r7, #12]
 8006404:	f7ff fc1a 	bl	8005c3c <clust2sect>
 8006408:	4602      	mov	r2, r0
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	62da      	str	r2, [r3, #44]	; 0x2c
 800640e:	e012      	b.n	8006436 <dir_next+0x13c>
						fs->wflag = 1;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	2201      	movs	r2, #1
 8006414:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8006416:	68f8      	ldr	r0, [r7, #12]
 8006418:	f7ff fb30 	bl	8005a7c <sync_window>
 800641c:	4603      	mov	r3, r0
 800641e:	2b00      	cmp	r3, #0
 8006420:	d001      	beq.n	8006426 <dir_next+0x12c>
 8006422:	2301      	movs	r3, #1
 8006424:	e02a      	b.n	800647c <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006426:	693b      	ldr	r3, [r7, #16]
 8006428:	3301      	adds	r3, #1
 800642a:	613b      	str	r3, [r7, #16]
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006430:	1c5a      	adds	r2, r3, #1
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	62da      	str	r2, [r3, #44]	; 0x2c
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	895b      	ldrh	r3, [r3, #10]
 800643a:	461a      	mov	r2, r3
 800643c:	693b      	ldr	r3, [r7, #16]
 800643e:	4293      	cmp	r3, r2
 8006440:	d3e6      	bcc.n	8006410 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006446:	693b      	ldr	r3, [r7, #16]
 8006448:	1ad2      	subs	r2, r2, r3
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	697a      	ldr	r2, [r7, #20]
 8006452:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8006454:	6979      	ldr	r1, [r7, #20]
 8006456:	68f8      	ldr	r0, [r7, #12]
 8006458:	f7ff fbf0 	bl	8005c3c <clust2sect>
 800645c:	4602      	mov	r2, r0
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	68ba      	ldr	r2, [r7, #8]
 8006466:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800646e:	68bb      	ldr	r3, [r7, #8]
 8006470:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006474:	441a      	add	r2, r3
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800647a:	2300      	movs	r3, #0
}
 800647c:	4618      	mov	r0, r3
 800647e:	3718      	adds	r7, #24
 8006480:	46bd      	mov	sp, r7
 8006482:	bd80      	pop	{r7, pc}

08006484 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b086      	sub	sp, #24
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
 800648c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8006494:	2100      	movs	r1, #0
 8006496:	6878      	ldr	r0, [r7, #4]
 8006498:	f7ff feb4 	bl	8006204 <dir_sdi>
 800649c:	4603      	mov	r3, r0
 800649e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80064a0:	7dfb      	ldrb	r3, [r7, #23]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d12b      	bne.n	80064fe <dir_alloc+0x7a>
		n = 0;
 80064a6:	2300      	movs	r3, #0
 80064a8:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	69db      	ldr	r3, [r3, #28]
 80064ae:	4619      	mov	r1, r3
 80064b0:	68f8      	ldr	r0, [r7, #12]
 80064b2:	f7ff fb27 	bl	8005b04 <move_window>
 80064b6:	4603      	mov	r3, r0
 80064b8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80064ba:	7dfb      	ldrb	r3, [r7, #23]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d11d      	bne.n	80064fc <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6a1b      	ldr	r3, [r3, #32]
 80064c4:	781b      	ldrb	r3, [r3, #0]
 80064c6:	2be5      	cmp	r3, #229	; 0xe5
 80064c8:	d004      	beq.n	80064d4 <dir_alloc+0x50>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6a1b      	ldr	r3, [r3, #32]
 80064ce:	781b      	ldrb	r3, [r3, #0]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d107      	bne.n	80064e4 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80064d4:	693b      	ldr	r3, [r7, #16]
 80064d6:	3301      	adds	r3, #1
 80064d8:	613b      	str	r3, [r7, #16]
 80064da:	693a      	ldr	r2, [r7, #16]
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	429a      	cmp	r2, r3
 80064e0:	d102      	bne.n	80064e8 <dir_alloc+0x64>
 80064e2:	e00c      	b.n	80064fe <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80064e4:	2300      	movs	r3, #0
 80064e6:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80064e8:	2101      	movs	r1, #1
 80064ea:	6878      	ldr	r0, [r7, #4]
 80064ec:	f7ff ff05 	bl	80062fa <dir_next>
 80064f0:	4603      	mov	r3, r0
 80064f2:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80064f4:	7dfb      	ldrb	r3, [r7, #23]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d0d7      	beq.n	80064aa <dir_alloc+0x26>
 80064fa:	e000      	b.n	80064fe <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80064fc:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80064fe:	7dfb      	ldrb	r3, [r7, #23]
 8006500:	2b04      	cmp	r3, #4
 8006502:	d101      	bne.n	8006508 <dir_alloc+0x84>
 8006504:	2307      	movs	r3, #7
 8006506:	75fb      	strb	r3, [r7, #23]
	return res;
 8006508:	7dfb      	ldrb	r3, [r7, #23]
}
 800650a:	4618      	mov	r0, r3
 800650c:	3718      	adds	r7, #24
 800650e:	46bd      	mov	sp, r7
 8006510:	bd80      	pop	{r7, pc}

08006512 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8006512:	b580      	push	{r7, lr}
 8006514:	b084      	sub	sp, #16
 8006516:	af00      	add	r7, sp, #0
 8006518:	6078      	str	r0, [r7, #4]
 800651a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	331a      	adds	r3, #26
 8006520:	4618      	mov	r0, r3
 8006522:	f7ff f83f 	bl	80055a4 <ld_word>
 8006526:	4603      	mov	r3, r0
 8006528:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	781b      	ldrb	r3, [r3, #0]
 800652e:	2b03      	cmp	r3, #3
 8006530:	d109      	bne.n	8006546 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	3314      	adds	r3, #20
 8006536:	4618      	mov	r0, r3
 8006538:	f7ff f834 	bl	80055a4 <ld_word>
 800653c:	4603      	mov	r3, r0
 800653e:	041b      	lsls	r3, r3, #16
 8006540:	68fa      	ldr	r2, [r7, #12]
 8006542:	4313      	orrs	r3, r2
 8006544:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8006546:	68fb      	ldr	r3, [r7, #12]
}
 8006548:	4618      	mov	r0, r3
 800654a:	3710      	adds	r7, #16
 800654c:	46bd      	mov	sp, r7
 800654e:	bd80      	pop	{r7, pc}

08006550 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b084      	sub	sp, #16
 8006554:	af00      	add	r7, sp, #0
 8006556:	60f8      	str	r0, [r7, #12]
 8006558:	60b9      	str	r1, [r7, #8]
 800655a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800655c:	68bb      	ldr	r3, [r7, #8]
 800655e:	331a      	adds	r3, #26
 8006560:	687a      	ldr	r2, [r7, #4]
 8006562:	b292      	uxth	r2, r2
 8006564:	4611      	mov	r1, r2
 8006566:	4618      	mov	r0, r3
 8006568:	f7ff f857 	bl	800561a <st_word>
	if (fs->fs_type == FS_FAT32) {
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	781b      	ldrb	r3, [r3, #0]
 8006570:	2b03      	cmp	r3, #3
 8006572:	d109      	bne.n	8006588 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	f103 0214 	add.w	r2, r3, #20
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	0c1b      	lsrs	r3, r3, #16
 800657e:	b29b      	uxth	r3, r3
 8006580:	4619      	mov	r1, r3
 8006582:	4610      	mov	r0, r2
 8006584:	f7ff f849 	bl	800561a <st_word>
	}
}
 8006588:	bf00      	nop
 800658a:	3710      	adds	r7, #16
 800658c:	46bd      	mov	sp, r7
 800658e:	bd80      	pop	{r7, pc}

08006590 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b086      	sub	sp, #24
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800659e:	2100      	movs	r1, #0
 80065a0:	6878      	ldr	r0, [r7, #4]
 80065a2:	f7ff fe2f 	bl	8006204 <dir_sdi>
 80065a6:	4603      	mov	r3, r0
 80065a8:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80065aa:	7dfb      	ldrb	r3, [r7, #23]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d001      	beq.n	80065b4 <dir_find+0x24>
 80065b0:	7dfb      	ldrb	r3, [r7, #23]
 80065b2:	e03e      	b.n	8006632 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	69db      	ldr	r3, [r3, #28]
 80065b8:	4619      	mov	r1, r3
 80065ba:	6938      	ldr	r0, [r7, #16]
 80065bc:	f7ff faa2 	bl	8005b04 <move_window>
 80065c0:	4603      	mov	r3, r0
 80065c2:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80065c4:	7dfb      	ldrb	r3, [r7, #23]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d12f      	bne.n	800662a <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6a1b      	ldr	r3, [r3, #32]
 80065ce:	781b      	ldrb	r3, [r3, #0]
 80065d0:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80065d2:	7bfb      	ldrb	r3, [r7, #15]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d102      	bne.n	80065de <dir_find+0x4e>
 80065d8:	2304      	movs	r3, #4
 80065da:	75fb      	strb	r3, [r7, #23]
 80065dc:	e028      	b.n	8006630 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6a1b      	ldr	r3, [r3, #32]
 80065e2:	330b      	adds	r3, #11
 80065e4:	781b      	ldrb	r3, [r3, #0]
 80065e6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80065ea:	b2da      	uxtb	r2, r3
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6a1b      	ldr	r3, [r3, #32]
 80065f4:	330b      	adds	r3, #11
 80065f6:	781b      	ldrb	r3, [r3, #0]
 80065f8:	f003 0308 	and.w	r3, r3, #8
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d10a      	bne.n	8006616 <dir_find+0x86>
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6a18      	ldr	r0, [r3, #32]
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	3324      	adds	r3, #36	; 0x24
 8006608:	220b      	movs	r2, #11
 800660a:	4619      	mov	r1, r3
 800660c:	f7ff f888 	bl	8005720 <mem_cmp>
 8006610:	4603      	mov	r3, r0
 8006612:	2b00      	cmp	r3, #0
 8006614:	d00b      	beq.n	800662e <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8006616:	2100      	movs	r1, #0
 8006618:	6878      	ldr	r0, [r7, #4]
 800661a:	f7ff fe6e 	bl	80062fa <dir_next>
 800661e:	4603      	mov	r3, r0
 8006620:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8006622:	7dfb      	ldrb	r3, [r7, #23]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d0c5      	beq.n	80065b4 <dir_find+0x24>
 8006628:	e002      	b.n	8006630 <dir_find+0xa0>
		if (res != FR_OK) break;
 800662a:	bf00      	nop
 800662c:	e000      	b.n	8006630 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800662e:	bf00      	nop

	return res;
 8006630:	7dfb      	ldrb	r3, [r7, #23]
}
 8006632:	4618      	mov	r0, r3
 8006634:	3718      	adds	r7, #24
 8006636:	46bd      	mov	sp, r7
 8006638:	bd80      	pop	{r7, pc}

0800663a <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800663a:	b580      	push	{r7, lr}
 800663c:	b084      	sub	sp, #16
 800663e:	af00      	add	r7, sp, #0
 8006640:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8006648:	2101      	movs	r1, #1
 800664a:	6878      	ldr	r0, [r7, #4]
 800664c:	f7ff ff1a 	bl	8006484 <dir_alloc>
 8006650:	4603      	mov	r3, r0
 8006652:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8006654:	7bfb      	ldrb	r3, [r7, #15]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d11c      	bne.n	8006694 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	69db      	ldr	r3, [r3, #28]
 800665e:	4619      	mov	r1, r3
 8006660:	68b8      	ldr	r0, [r7, #8]
 8006662:	f7ff fa4f 	bl	8005b04 <move_window>
 8006666:	4603      	mov	r3, r0
 8006668:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800666a:	7bfb      	ldrb	r3, [r7, #15]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d111      	bne.n	8006694 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	6a1b      	ldr	r3, [r3, #32]
 8006674:	2220      	movs	r2, #32
 8006676:	2100      	movs	r1, #0
 8006678:	4618      	mov	r0, r3
 800667a:	f7ff f836 	bl	80056ea <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6a18      	ldr	r0, [r3, #32]
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	3324      	adds	r3, #36	; 0x24
 8006686:	220b      	movs	r2, #11
 8006688:	4619      	mov	r1, r3
 800668a:	f7ff f80d 	bl	80056a8 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800668e:	68bb      	ldr	r3, [r7, #8]
 8006690:	2201      	movs	r2, #1
 8006692:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8006694:	7bfb      	ldrb	r3, [r7, #15]
}
 8006696:	4618      	mov	r0, r3
 8006698:	3710      	adds	r7, #16
 800669a:	46bd      	mov	sp, r7
 800669c:	bd80      	pop	{r7, pc}
	...

080066a0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b088      	sub	sp, #32
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
 80066a8:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	60fb      	str	r3, [r7, #12]
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	3324      	adds	r3, #36	; 0x24
 80066b4:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80066b6:	220b      	movs	r2, #11
 80066b8:	2120      	movs	r1, #32
 80066ba:	68b8      	ldr	r0, [r7, #8]
 80066bc:	f7ff f815 	bl	80056ea <mem_set>
	si = i = 0; ni = 8;
 80066c0:	2300      	movs	r3, #0
 80066c2:	613b      	str	r3, [r7, #16]
 80066c4:	693b      	ldr	r3, [r7, #16]
 80066c6:	61fb      	str	r3, [r7, #28]
 80066c8:	2308      	movs	r3, #8
 80066ca:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80066cc:	69fb      	ldr	r3, [r7, #28]
 80066ce:	1c5a      	adds	r2, r3, #1
 80066d0:	61fa      	str	r2, [r7, #28]
 80066d2:	68fa      	ldr	r2, [r7, #12]
 80066d4:	4413      	add	r3, r2
 80066d6:	781b      	ldrb	r3, [r3, #0]
 80066d8:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80066da:	7efb      	ldrb	r3, [r7, #27]
 80066dc:	2b20      	cmp	r3, #32
 80066de:	d94e      	bls.n	800677e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80066e0:	7efb      	ldrb	r3, [r7, #27]
 80066e2:	2b2f      	cmp	r3, #47	; 0x2f
 80066e4:	d006      	beq.n	80066f4 <create_name+0x54>
 80066e6:	7efb      	ldrb	r3, [r7, #27]
 80066e8:	2b5c      	cmp	r3, #92	; 0x5c
 80066ea:	d110      	bne.n	800670e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80066ec:	e002      	b.n	80066f4 <create_name+0x54>
 80066ee:	69fb      	ldr	r3, [r7, #28]
 80066f0:	3301      	adds	r3, #1
 80066f2:	61fb      	str	r3, [r7, #28]
 80066f4:	68fa      	ldr	r2, [r7, #12]
 80066f6:	69fb      	ldr	r3, [r7, #28]
 80066f8:	4413      	add	r3, r2
 80066fa:	781b      	ldrb	r3, [r3, #0]
 80066fc:	2b2f      	cmp	r3, #47	; 0x2f
 80066fe:	d0f6      	beq.n	80066ee <create_name+0x4e>
 8006700:	68fa      	ldr	r2, [r7, #12]
 8006702:	69fb      	ldr	r3, [r7, #28]
 8006704:	4413      	add	r3, r2
 8006706:	781b      	ldrb	r3, [r3, #0]
 8006708:	2b5c      	cmp	r3, #92	; 0x5c
 800670a:	d0f0      	beq.n	80066ee <create_name+0x4e>
			break;
 800670c:	e038      	b.n	8006780 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800670e:	7efb      	ldrb	r3, [r7, #27]
 8006710:	2b2e      	cmp	r3, #46	; 0x2e
 8006712:	d003      	beq.n	800671c <create_name+0x7c>
 8006714:	693a      	ldr	r2, [r7, #16]
 8006716:	697b      	ldr	r3, [r7, #20]
 8006718:	429a      	cmp	r2, r3
 800671a:	d30c      	bcc.n	8006736 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800671c:	697b      	ldr	r3, [r7, #20]
 800671e:	2b0b      	cmp	r3, #11
 8006720:	d002      	beq.n	8006728 <create_name+0x88>
 8006722:	7efb      	ldrb	r3, [r7, #27]
 8006724:	2b2e      	cmp	r3, #46	; 0x2e
 8006726:	d001      	beq.n	800672c <create_name+0x8c>
 8006728:	2306      	movs	r3, #6
 800672a:	e044      	b.n	80067b6 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800672c:	2308      	movs	r3, #8
 800672e:	613b      	str	r3, [r7, #16]
 8006730:	230b      	movs	r3, #11
 8006732:	617b      	str	r3, [r7, #20]
			continue;
 8006734:	e022      	b.n	800677c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8006736:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800673a:	2b00      	cmp	r3, #0
 800673c:	da04      	bge.n	8006748 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800673e:	7efb      	ldrb	r3, [r7, #27]
 8006740:	3b80      	subs	r3, #128	; 0x80
 8006742:	4a1f      	ldr	r2, [pc, #124]	; (80067c0 <create_name+0x120>)
 8006744:	5cd3      	ldrb	r3, [r2, r3]
 8006746:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8006748:	7efb      	ldrb	r3, [r7, #27]
 800674a:	4619      	mov	r1, r3
 800674c:	481d      	ldr	r0, [pc, #116]	; (80067c4 <create_name+0x124>)
 800674e:	f7ff f80e 	bl	800576e <chk_chr>
 8006752:	4603      	mov	r3, r0
 8006754:	2b00      	cmp	r3, #0
 8006756:	d001      	beq.n	800675c <create_name+0xbc>
 8006758:	2306      	movs	r3, #6
 800675a:	e02c      	b.n	80067b6 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800675c:	7efb      	ldrb	r3, [r7, #27]
 800675e:	2b60      	cmp	r3, #96	; 0x60
 8006760:	d905      	bls.n	800676e <create_name+0xce>
 8006762:	7efb      	ldrb	r3, [r7, #27]
 8006764:	2b7a      	cmp	r3, #122	; 0x7a
 8006766:	d802      	bhi.n	800676e <create_name+0xce>
 8006768:	7efb      	ldrb	r3, [r7, #27]
 800676a:	3b20      	subs	r3, #32
 800676c:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800676e:	693b      	ldr	r3, [r7, #16]
 8006770:	1c5a      	adds	r2, r3, #1
 8006772:	613a      	str	r2, [r7, #16]
 8006774:	68ba      	ldr	r2, [r7, #8]
 8006776:	4413      	add	r3, r2
 8006778:	7efa      	ldrb	r2, [r7, #27]
 800677a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800677c:	e7a6      	b.n	80066cc <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800677e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8006780:	68fa      	ldr	r2, [r7, #12]
 8006782:	69fb      	ldr	r3, [r7, #28]
 8006784:	441a      	add	r2, r3
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800678a:	693b      	ldr	r3, [r7, #16]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d101      	bne.n	8006794 <create_name+0xf4>
 8006790:	2306      	movs	r3, #6
 8006792:	e010      	b.n	80067b6 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8006794:	68bb      	ldr	r3, [r7, #8]
 8006796:	781b      	ldrb	r3, [r3, #0]
 8006798:	2be5      	cmp	r3, #229	; 0xe5
 800679a:	d102      	bne.n	80067a2 <create_name+0x102>
 800679c:	68bb      	ldr	r3, [r7, #8]
 800679e:	2205      	movs	r2, #5
 80067a0:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80067a2:	7efb      	ldrb	r3, [r7, #27]
 80067a4:	2b20      	cmp	r3, #32
 80067a6:	d801      	bhi.n	80067ac <create_name+0x10c>
 80067a8:	2204      	movs	r2, #4
 80067aa:	e000      	b.n	80067ae <create_name+0x10e>
 80067ac:	2200      	movs	r2, #0
 80067ae:	68bb      	ldr	r3, [r7, #8]
 80067b0:	330b      	adds	r3, #11
 80067b2:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80067b4:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80067b6:	4618      	mov	r0, r3
 80067b8:	3720      	adds	r7, #32
 80067ba:	46bd      	mov	sp, r7
 80067bc:	bd80      	pop	{r7, pc}
 80067be:	bf00      	nop
 80067c0:	08008490 	.word	0x08008490
 80067c4:	08008420 	.word	0x08008420

080067c8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b086      	sub	sp, #24
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
 80067d0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80067d6:	693b      	ldr	r3, [r7, #16]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80067dc:	e002      	b.n	80067e4 <follow_path+0x1c>
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	3301      	adds	r3, #1
 80067e2:	603b      	str	r3, [r7, #0]
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	781b      	ldrb	r3, [r3, #0]
 80067e8:	2b2f      	cmp	r3, #47	; 0x2f
 80067ea:	d0f8      	beq.n	80067de <follow_path+0x16>
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	781b      	ldrb	r3, [r3, #0]
 80067f0:	2b5c      	cmp	r3, #92	; 0x5c
 80067f2:	d0f4      	beq.n	80067de <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80067f4:	693b      	ldr	r3, [r7, #16]
 80067f6:	2200      	movs	r2, #0
 80067f8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	781b      	ldrb	r3, [r3, #0]
 80067fe:	2b1f      	cmp	r3, #31
 8006800:	d80a      	bhi.n	8006818 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2280      	movs	r2, #128	; 0x80
 8006806:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800680a:	2100      	movs	r1, #0
 800680c:	6878      	ldr	r0, [r7, #4]
 800680e:	f7ff fcf9 	bl	8006204 <dir_sdi>
 8006812:	4603      	mov	r3, r0
 8006814:	75fb      	strb	r3, [r7, #23]
 8006816:	e043      	b.n	80068a0 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006818:	463b      	mov	r3, r7
 800681a:	4619      	mov	r1, r3
 800681c:	6878      	ldr	r0, [r7, #4]
 800681e:	f7ff ff3f 	bl	80066a0 <create_name>
 8006822:	4603      	mov	r3, r0
 8006824:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006826:	7dfb      	ldrb	r3, [r7, #23]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d134      	bne.n	8006896 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800682c:	6878      	ldr	r0, [r7, #4]
 800682e:	f7ff feaf 	bl	8006590 <dir_find>
 8006832:	4603      	mov	r3, r0
 8006834:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800683c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800683e:	7dfb      	ldrb	r3, [r7, #23]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d00a      	beq.n	800685a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8006844:	7dfb      	ldrb	r3, [r7, #23]
 8006846:	2b04      	cmp	r3, #4
 8006848:	d127      	bne.n	800689a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800684a:	7afb      	ldrb	r3, [r7, #11]
 800684c:	f003 0304 	and.w	r3, r3, #4
 8006850:	2b00      	cmp	r3, #0
 8006852:	d122      	bne.n	800689a <follow_path+0xd2>
 8006854:	2305      	movs	r3, #5
 8006856:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8006858:	e01f      	b.n	800689a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800685a:	7afb      	ldrb	r3, [r7, #11]
 800685c:	f003 0304 	and.w	r3, r3, #4
 8006860:	2b00      	cmp	r3, #0
 8006862:	d11c      	bne.n	800689e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8006864:	693b      	ldr	r3, [r7, #16]
 8006866:	799b      	ldrb	r3, [r3, #6]
 8006868:	f003 0310 	and.w	r3, r3, #16
 800686c:	2b00      	cmp	r3, #0
 800686e:	d102      	bne.n	8006876 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8006870:	2305      	movs	r3, #5
 8006872:	75fb      	strb	r3, [r7, #23]
 8006874:	e014      	b.n	80068a0 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	695b      	ldr	r3, [r3, #20]
 8006880:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006884:	4413      	add	r3, r2
 8006886:	4619      	mov	r1, r3
 8006888:	68f8      	ldr	r0, [r7, #12]
 800688a:	f7ff fe42 	bl	8006512 <ld_clust>
 800688e:	4602      	mov	r2, r0
 8006890:	693b      	ldr	r3, [r7, #16]
 8006892:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006894:	e7c0      	b.n	8006818 <follow_path+0x50>
			if (res != FR_OK) break;
 8006896:	bf00      	nop
 8006898:	e002      	b.n	80068a0 <follow_path+0xd8>
				break;
 800689a:	bf00      	nop
 800689c:	e000      	b.n	80068a0 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800689e:	bf00      	nop
			}
		}
	}

	return res;
 80068a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80068a2:	4618      	mov	r0, r3
 80068a4:	3718      	adds	r7, #24
 80068a6:	46bd      	mov	sp, r7
 80068a8:	bd80      	pop	{r7, pc}

080068aa <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80068aa:	b480      	push	{r7}
 80068ac:	b087      	sub	sp, #28
 80068ae:	af00      	add	r7, sp, #0
 80068b0:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80068b2:	f04f 33ff 	mov.w	r3, #4294967295
 80068b6:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d031      	beq.n	8006924 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	617b      	str	r3, [r7, #20]
 80068c6:	e002      	b.n	80068ce <get_ldnumber+0x24>
 80068c8:	697b      	ldr	r3, [r7, #20]
 80068ca:	3301      	adds	r3, #1
 80068cc:	617b      	str	r3, [r7, #20]
 80068ce:	697b      	ldr	r3, [r7, #20]
 80068d0:	781b      	ldrb	r3, [r3, #0]
 80068d2:	2b20      	cmp	r3, #32
 80068d4:	d903      	bls.n	80068de <get_ldnumber+0x34>
 80068d6:	697b      	ldr	r3, [r7, #20]
 80068d8:	781b      	ldrb	r3, [r3, #0]
 80068da:	2b3a      	cmp	r3, #58	; 0x3a
 80068dc:	d1f4      	bne.n	80068c8 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80068de:	697b      	ldr	r3, [r7, #20]
 80068e0:	781b      	ldrb	r3, [r3, #0]
 80068e2:	2b3a      	cmp	r3, #58	; 0x3a
 80068e4:	d11c      	bne.n	8006920 <get_ldnumber+0x76>
			tp = *path;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	1c5a      	adds	r2, r3, #1
 80068f0:	60fa      	str	r2, [r7, #12]
 80068f2:	781b      	ldrb	r3, [r3, #0]
 80068f4:	3b30      	subs	r3, #48	; 0x30
 80068f6:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80068f8:	68bb      	ldr	r3, [r7, #8]
 80068fa:	2b09      	cmp	r3, #9
 80068fc:	d80e      	bhi.n	800691c <get_ldnumber+0x72>
 80068fe:	68fa      	ldr	r2, [r7, #12]
 8006900:	697b      	ldr	r3, [r7, #20]
 8006902:	429a      	cmp	r2, r3
 8006904:	d10a      	bne.n	800691c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8006906:	68bb      	ldr	r3, [r7, #8]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d107      	bne.n	800691c <get_ldnumber+0x72>
					vol = (int)i;
 800690c:	68bb      	ldr	r3, [r7, #8]
 800690e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8006910:	697b      	ldr	r3, [r7, #20]
 8006912:	3301      	adds	r3, #1
 8006914:	617b      	str	r3, [r7, #20]
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	697a      	ldr	r2, [r7, #20]
 800691a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800691c:	693b      	ldr	r3, [r7, #16]
 800691e:	e002      	b.n	8006926 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8006920:	2300      	movs	r3, #0
 8006922:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8006924:	693b      	ldr	r3, [r7, #16]
}
 8006926:	4618      	mov	r0, r3
 8006928:	371c      	adds	r7, #28
 800692a:	46bd      	mov	sp, r7
 800692c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006930:	4770      	bx	lr
	...

08006934 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b082      	sub	sp, #8
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
 800693c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2200      	movs	r2, #0
 8006942:	70da      	strb	r2, [r3, #3]
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	f04f 32ff 	mov.w	r2, #4294967295
 800694a:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800694c:	6839      	ldr	r1, [r7, #0]
 800694e:	6878      	ldr	r0, [r7, #4]
 8006950:	f7ff f8d8 	bl	8005b04 <move_window>
 8006954:	4603      	mov	r3, r0
 8006956:	2b00      	cmp	r3, #0
 8006958:	d001      	beq.n	800695e <check_fs+0x2a>
 800695a:	2304      	movs	r3, #4
 800695c:	e038      	b.n	80069d0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	3330      	adds	r3, #48	; 0x30
 8006962:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006966:	4618      	mov	r0, r3
 8006968:	f7fe fe1c 	bl	80055a4 <ld_word>
 800696c:	4603      	mov	r3, r0
 800696e:	461a      	mov	r2, r3
 8006970:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8006974:	429a      	cmp	r2, r3
 8006976:	d001      	beq.n	800697c <check_fs+0x48>
 8006978:	2303      	movs	r3, #3
 800697a:	e029      	b.n	80069d0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006982:	2be9      	cmp	r3, #233	; 0xe9
 8006984:	d009      	beq.n	800699a <check_fs+0x66>
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800698c:	2beb      	cmp	r3, #235	; 0xeb
 800698e:	d11e      	bne.n	80069ce <check_fs+0x9a>
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006996:	2b90      	cmp	r3, #144	; 0x90
 8006998:	d119      	bne.n	80069ce <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	3330      	adds	r3, #48	; 0x30
 800699e:	3336      	adds	r3, #54	; 0x36
 80069a0:	4618      	mov	r0, r3
 80069a2:	f7fe fe17 	bl	80055d4 <ld_dword>
 80069a6:	4603      	mov	r3, r0
 80069a8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80069ac:	4a0a      	ldr	r2, [pc, #40]	; (80069d8 <check_fs+0xa4>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d101      	bne.n	80069b6 <check_fs+0x82>
 80069b2:	2300      	movs	r3, #0
 80069b4:	e00c      	b.n	80069d0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	3330      	adds	r3, #48	; 0x30
 80069ba:	3352      	adds	r3, #82	; 0x52
 80069bc:	4618      	mov	r0, r3
 80069be:	f7fe fe09 	bl	80055d4 <ld_dword>
 80069c2:	4603      	mov	r3, r0
 80069c4:	4a05      	ldr	r2, [pc, #20]	; (80069dc <check_fs+0xa8>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d101      	bne.n	80069ce <check_fs+0x9a>
 80069ca:	2300      	movs	r3, #0
 80069cc:	e000      	b.n	80069d0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80069ce:	2302      	movs	r3, #2
}
 80069d0:	4618      	mov	r0, r3
 80069d2:	3708      	adds	r7, #8
 80069d4:	46bd      	mov	sp, r7
 80069d6:	bd80      	pop	{r7, pc}
 80069d8:	00544146 	.word	0x00544146
 80069dc:	33544146 	.word	0x33544146

080069e0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b096      	sub	sp, #88	; 0x58
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	60f8      	str	r0, [r7, #12]
 80069e8:	60b9      	str	r1, [r7, #8]
 80069ea:	4613      	mov	r3, r2
 80069ec:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80069ee:	68bb      	ldr	r3, [r7, #8]
 80069f0:	2200      	movs	r2, #0
 80069f2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80069f4:	68f8      	ldr	r0, [r7, #12]
 80069f6:	f7ff ff58 	bl	80068aa <get_ldnumber>
 80069fa:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80069fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	da01      	bge.n	8006a06 <find_volume+0x26>
 8006a02:	230b      	movs	r3, #11
 8006a04:	e22e      	b.n	8006e64 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8006a06:	4aa8      	ldr	r2, [pc, #672]	; (8006ca8 <find_volume+0x2c8>)
 8006a08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a0e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8006a10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d101      	bne.n	8006a1a <find_volume+0x3a>
 8006a16:	230c      	movs	r3, #12
 8006a18:	e224      	b.n	8006e64 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8006a1a:	68bb      	ldr	r3, [r7, #8]
 8006a1c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006a1e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8006a20:	79fb      	ldrb	r3, [r7, #7]
 8006a22:	f023 0301 	bic.w	r3, r3, #1
 8006a26:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8006a28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a2a:	781b      	ldrb	r3, [r3, #0]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d01a      	beq.n	8006a66 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8006a30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a32:	785b      	ldrb	r3, [r3, #1]
 8006a34:	4618      	mov	r0, r3
 8006a36:	f7fe fd17 	bl	8005468 <disk_status>
 8006a3a:	4603      	mov	r3, r0
 8006a3c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8006a40:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006a44:	f003 0301 	and.w	r3, r3, #1
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d10c      	bne.n	8006a66 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8006a4c:	79fb      	ldrb	r3, [r7, #7]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d007      	beq.n	8006a62 <find_volume+0x82>
 8006a52:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006a56:	f003 0304 	and.w	r3, r3, #4
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d001      	beq.n	8006a62 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8006a5e:	230a      	movs	r3, #10
 8006a60:	e200      	b.n	8006e64 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 8006a62:	2300      	movs	r3, #0
 8006a64:	e1fe      	b.n	8006e64 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8006a66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a68:	2200      	movs	r2, #0
 8006a6a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8006a6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a6e:	b2da      	uxtb	r2, r3
 8006a70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a72:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8006a74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a76:	785b      	ldrb	r3, [r3, #1]
 8006a78:	4618      	mov	r0, r3
 8006a7a:	f7fe fd0f 	bl	800549c <disk_initialize>
 8006a7e:	4603      	mov	r3, r0
 8006a80:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8006a84:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006a88:	f003 0301 	and.w	r3, r3, #1
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d001      	beq.n	8006a94 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8006a90:	2303      	movs	r3, #3
 8006a92:	e1e7      	b.n	8006e64 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8006a94:	79fb      	ldrb	r3, [r7, #7]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d007      	beq.n	8006aaa <find_volume+0xca>
 8006a9a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006a9e:	f003 0304 	and.w	r3, r3, #4
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d001      	beq.n	8006aaa <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8006aa6:	230a      	movs	r3, #10
 8006aa8:	e1dc      	b.n	8006e64 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8006aaa:	2300      	movs	r3, #0
 8006aac:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8006aae:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006ab0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006ab2:	f7ff ff3f 	bl	8006934 <check_fs>
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8006abc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006ac0:	2b02      	cmp	r3, #2
 8006ac2:	d14b      	bne.n	8006b5c <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	643b      	str	r3, [r7, #64]	; 0x40
 8006ac8:	e01f      	b.n	8006b0a <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8006aca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006acc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006ad0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ad2:	011b      	lsls	r3, r3, #4
 8006ad4:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8006ad8:	4413      	add	r3, r2
 8006ada:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8006adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ade:	3304      	adds	r3, #4
 8006ae0:	781b      	ldrb	r3, [r3, #0]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d006      	beq.n	8006af4 <find_volume+0x114>
 8006ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ae8:	3308      	adds	r3, #8
 8006aea:	4618      	mov	r0, r3
 8006aec:	f7fe fd72 	bl	80055d4 <ld_dword>
 8006af0:	4602      	mov	r2, r0
 8006af2:	e000      	b.n	8006af6 <find_volume+0x116>
 8006af4:	2200      	movs	r2, #0
 8006af6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006af8:	009b      	lsls	r3, r3, #2
 8006afa:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8006afe:	440b      	add	r3, r1
 8006b00:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006b04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b06:	3301      	adds	r3, #1
 8006b08:	643b      	str	r3, [r7, #64]	; 0x40
 8006b0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b0c:	2b03      	cmp	r3, #3
 8006b0e:	d9dc      	bls.n	8006aca <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8006b10:	2300      	movs	r3, #0
 8006b12:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8006b14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d002      	beq.n	8006b20 <find_volume+0x140>
 8006b1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b1c:	3b01      	subs	r3, #1
 8006b1e:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8006b20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b22:	009b      	lsls	r3, r3, #2
 8006b24:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8006b28:	4413      	add	r3, r2
 8006b2a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8006b2e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8006b30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d005      	beq.n	8006b42 <find_volume+0x162>
 8006b36:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006b38:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006b3a:	f7ff fefb 	bl	8006934 <check_fs>
 8006b3e:	4603      	mov	r3, r0
 8006b40:	e000      	b.n	8006b44 <find_volume+0x164>
 8006b42:	2303      	movs	r3, #3
 8006b44:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8006b48:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006b4c:	2b01      	cmp	r3, #1
 8006b4e:	d905      	bls.n	8006b5c <find_volume+0x17c>
 8006b50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b52:	3301      	adds	r3, #1
 8006b54:	643b      	str	r3, [r7, #64]	; 0x40
 8006b56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b58:	2b03      	cmp	r3, #3
 8006b5a:	d9e1      	bls.n	8006b20 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8006b5c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006b60:	2b04      	cmp	r3, #4
 8006b62:	d101      	bne.n	8006b68 <find_volume+0x188>
 8006b64:	2301      	movs	r3, #1
 8006b66:	e17d      	b.n	8006e64 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8006b68:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006b6c:	2b01      	cmp	r3, #1
 8006b6e:	d901      	bls.n	8006b74 <find_volume+0x194>
 8006b70:	230d      	movs	r3, #13
 8006b72:	e177      	b.n	8006e64 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8006b74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b76:	3330      	adds	r3, #48	; 0x30
 8006b78:	330b      	adds	r3, #11
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	f7fe fd12 	bl	80055a4 <ld_word>
 8006b80:	4603      	mov	r3, r0
 8006b82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b86:	d001      	beq.n	8006b8c <find_volume+0x1ac>
 8006b88:	230d      	movs	r3, #13
 8006b8a:	e16b      	b.n	8006e64 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8006b8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b8e:	3330      	adds	r3, #48	; 0x30
 8006b90:	3316      	adds	r3, #22
 8006b92:	4618      	mov	r0, r3
 8006b94:	f7fe fd06 	bl	80055a4 <ld_word>
 8006b98:	4603      	mov	r3, r0
 8006b9a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8006b9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d106      	bne.n	8006bb0 <find_volume+0x1d0>
 8006ba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ba4:	3330      	adds	r3, #48	; 0x30
 8006ba6:	3324      	adds	r3, #36	; 0x24
 8006ba8:	4618      	mov	r0, r3
 8006baa:	f7fe fd13 	bl	80055d4 <ld_dword>
 8006bae:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8006bb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bb2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006bb4:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8006bb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bb8:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8006bbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bbe:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8006bc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bc2:	789b      	ldrb	r3, [r3, #2]
 8006bc4:	2b01      	cmp	r3, #1
 8006bc6:	d005      	beq.n	8006bd4 <find_volume+0x1f4>
 8006bc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bca:	789b      	ldrb	r3, [r3, #2]
 8006bcc:	2b02      	cmp	r3, #2
 8006bce:	d001      	beq.n	8006bd4 <find_volume+0x1f4>
 8006bd0:	230d      	movs	r3, #13
 8006bd2:	e147      	b.n	8006e64 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8006bd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bd6:	789b      	ldrb	r3, [r3, #2]
 8006bd8:	461a      	mov	r2, r3
 8006bda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bdc:	fb02 f303 	mul.w	r3, r2, r3
 8006be0:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8006be2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006be4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006be8:	b29a      	uxth	r2, r3
 8006bea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bec:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8006bee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bf0:	895b      	ldrh	r3, [r3, #10]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d008      	beq.n	8006c08 <find_volume+0x228>
 8006bf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bf8:	895b      	ldrh	r3, [r3, #10]
 8006bfa:	461a      	mov	r2, r3
 8006bfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bfe:	895b      	ldrh	r3, [r3, #10]
 8006c00:	3b01      	subs	r3, #1
 8006c02:	4013      	ands	r3, r2
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d001      	beq.n	8006c0c <find_volume+0x22c>
 8006c08:	230d      	movs	r3, #13
 8006c0a:	e12b      	b.n	8006e64 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8006c0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c0e:	3330      	adds	r3, #48	; 0x30
 8006c10:	3311      	adds	r3, #17
 8006c12:	4618      	mov	r0, r3
 8006c14:	f7fe fcc6 	bl	80055a4 <ld_word>
 8006c18:	4603      	mov	r3, r0
 8006c1a:	461a      	mov	r2, r3
 8006c1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c1e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8006c20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c22:	891b      	ldrh	r3, [r3, #8]
 8006c24:	f003 030f 	and.w	r3, r3, #15
 8006c28:	b29b      	uxth	r3, r3
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d001      	beq.n	8006c32 <find_volume+0x252>
 8006c2e:	230d      	movs	r3, #13
 8006c30:	e118      	b.n	8006e64 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8006c32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c34:	3330      	adds	r3, #48	; 0x30
 8006c36:	3313      	adds	r3, #19
 8006c38:	4618      	mov	r0, r3
 8006c3a:	f7fe fcb3 	bl	80055a4 <ld_word>
 8006c3e:	4603      	mov	r3, r0
 8006c40:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8006c42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d106      	bne.n	8006c56 <find_volume+0x276>
 8006c48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c4a:	3330      	adds	r3, #48	; 0x30
 8006c4c:	3320      	adds	r3, #32
 8006c4e:	4618      	mov	r0, r3
 8006c50:	f7fe fcc0 	bl	80055d4 <ld_dword>
 8006c54:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8006c56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c58:	3330      	adds	r3, #48	; 0x30
 8006c5a:	330e      	adds	r3, #14
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	f7fe fca1 	bl	80055a4 <ld_word>
 8006c62:	4603      	mov	r3, r0
 8006c64:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8006c66:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d101      	bne.n	8006c70 <find_volume+0x290>
 8006c6c:	230d      	movs	r3, #13
 8006c6e:	e0f9      	b.n	8006e64 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8006c70:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006c72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c74:	4413      	add	r3, r2
 8006c76:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006c78:	8912      	ldrh	r2, [r2, #8]
 8006c7a:	0912      	lsrs	r2, r2, #4
 8006c7c:	b292      	uxth	r2, r2
 8006c7e:	4413      	add	r3, r2
 8006c80:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8006c82:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c86:	429a      	cmp	r2, r3
 8006c88:	d201      	bcs.n	8006c8e <find_volume+0x2ae>
 8006c8a:	230d      	movs	r3, #13
 8006c8c:	e0ea      	b.n	8006e64 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8006c8e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c92:	1ad3      	subs	r3, r2, r3
 8006c94:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006c96:	8952      	ldrh	r2, [r2, #10]
 8006c98:	fbb3 f3f2 	udiv	r3, r3, r2
 8006c9c:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8006c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d103      	bne.n	8006cac <find_volume+0x2cc>
 8006ca4:	230d      	movs	r3, #13
 8006ca6:	e0dd      	b.n	8006e64 <find_volume+0x484>
 8006ca8:	200001dc 	.word	0x200001dc
		fmt = FS_FAT32;
 8006cac:	2303      	movs	r3, #3
 8006cae:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8006cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cb4:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d802      	bhi.n	8006cc2 <find_volume+0x2e2>
 8006cbc:	2302      	movs	r3, #2
 8006cbe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8006cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cc4:	f640 72f5 	movw	r2, #4085	; 0xff5
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d802      	bhi.n	8006cd2 <find_volume+0x2f2>
 8006ccc:	2301      	movs	r3, #1
 8006cce:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8006cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cd4:	1c9a      	adds	r2, r3, #2
 8006cd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cd8:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8006cda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cdc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006cde:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8006ce0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006ce2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ce4:	441a      	add	r2, r3
 8006ce6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ce8:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8006cea:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cee:	441a      	add	r2, r3
 8006cf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cf2:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8006cf4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006cf8:	2b03      	cmp	r3, #3
 8006cfa:	d11e      	bne.n	8006d3a <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8006cfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cfe:	3330      	adds	r3, #48	; 0x30
 8006d00:	332a      	adds	r3, #42	; 0x2a
 8006d02:	4618      	mov	r0, r3
 8006d04:	f7fe fc4e 	bl	80055a4 <ld_word>
 8006d08:	4603      	mov	r3, r0
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d001      	beq.n	8006d12 <find_volume+0x332>
 8006d0e:	230d      	movs	r3, #13
 8006d10:	e0a8      	b.n	8006e64 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8006d12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d14:	891b      	ldrh	r3, [r3, #8]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d001      	beq.n	8006d1e <find_volume+0x33e>
 8006d1a:	230d      	movs	r3, #13
 8006d1c:	e0a2      	b.n	8006e64 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8006d1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d20:	3330      	adds	r3, #48	; 0x30
 8006d22:	332c      	adds	r3, #44	; 0x2c
 8006d24:	4618      	mov	r0, r3
 8006d26:	f7fe fc55 	bl	80055d4 <ld_dword>
 8006d2a:	4602      	mov	r2, r0
 8006d2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d2e:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8006d30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d32:	695b      	ldr	r3, [r3, #20]
 8006d34:	009b      	lsls	r3, r3, #2
 8006d36:	647b      	str	r3, [r7, #68]	; 0x44
 8006d38:	e01f      	b.n	8006d7a <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8006d3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d3c:	891b      	ldrh	r3, [r3, #8]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d101      	bne.n	8006d46 <find_volume+0x366>
 8006d42:	230d      	movs	r3, #13
 8006d44:	e08e      	b.n	8006e64 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8006d46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d48:	6a1a      	ldr	r2, [r3, #32]
 8006d4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d4c:	441a      	add	r2, r3
 8006d4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d50:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8006d52:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006d56:	2b02      	cmp	r3, #2
 8006d58:	d103      	bne.n	8006d62 <find_volume+0x382>
 8006d5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d5c:	695b      	ldr	r3, [r3, #20]
 8006d5e:	005b      	lsls	r3, r3, #1
 8006d60:	e00a      	b.n	8006d78 <find_volume+0x398>
 8006d62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d64:	695a      	ldr	r2, [r3, #20]
 8006d66:	4613      	mov	r3, r2
 8006d68:	005b      	lsls	r3, r3, #1
 8006d6a:	4413      	add	r3, r2
 8006d6c:	085a      	lsrs	r2, r3, #1
 8006d6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d70:	695b      	ldr	r3, [r3, #20]
 8006d72:	f003 0301 	and.w	r3, r3, #1
 8006d76:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8006d78:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8006d7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d7c:	699a      	ldr	r2, [r3, #24]
 8006d7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d80:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8006d84:	0a5b      	lsrs	r3, r3, #9
 8006d86:	429a      	cmp	r2, r3
 8006d88:	d201      	bcs.n	8006d8e <find_volume+0x3ae>
 8006d8a:	230d      	movs	r3, #13
 8006d8c:	e06a      	b.n	8006e64 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8006d8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d90:	f04f 32ff 	mov.w	r2, #4294967295
 8006d94:	611a      	str	r2, [r3, #16]
 8006d96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d98:	691a      	ldr	r2, [r3, #16]
 8006d9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d9c:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8006d9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006da0:	2280      	movs	r2, #128	; 0x80
 8006da2:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8006da4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006da8:	2b03      	cmp	r3, #3
 8006daa:	d149      	bne.n	8006e40 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8006dac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dae:	3330      	adds	r3, #48	; 0x30
 8006db0:	3330      	adds	r3, #48	; 0x30
 8006db2:	4618      	mov	r0, r3
 8006db4:	f7fe fbf6 	bl	80055a4 <ld_word>
 8006db8:	4603      	mov	r3, r0
 8006dba:	2b01      	cmp	r3, #1
 8006dbc:	d140      	bne.n	8006e40 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 8006dbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006dc0:	3301      	adds	r3, #1
 8006dc2:	4619      	mov	r1, r3
 8006dc4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006dc6:	f7fe fe9d 	bl	8005b04 <move_window>
 8006dca:	4603      	mov	r3, r0
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d137      	bne.n	8006e40 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 8006dd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8006dd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dd8:	3330      	adds	r3, #48	; 0x30
 8006dda:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006dde:	4618      	mov	r0, r3
 8006de0:	f7fe fbe0 	bl	80055a4 <ld_word>
 8006de4:	4603      	mov	r3, r0
 8006de6:	461a      	mov	r2, r3
 8006de8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8006dec:	429a      	cmp	r2, r3
 8006dee:	d127      	bne.n	8006e40 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8006df0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006df2:	3330      	adds	r3, #48	; 0x30
 8006df4:	4618      	mov	r0, r3
 8006df6:	f7fe fbed 	bl	80055d4 <ld_dword>
 8006dfa:	4603      	mov	r3, r0
 8006dfc:	4a1b      	ldr	r2, [pc, #108]	; (8006e6c <find_volume+0x48c>)
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d11e      	bne.n	8006e40 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8006e02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e04:	3330      	adds	r3, #48	; 0x30
 8006e06:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	f7fe fbe2 	bl	80055d4 <ld_dword>
 8006e10:	4603      	mov	r3, r0
 8006e12:	4a17      	ldr	r2, [pc, #92]	; (8006e70 <find_volume+0x490>)
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d113      	bne.n	8006e40 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8006e18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e1a:	3330      	adds	r3, #48	; 0x30
 8006e1c:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8006e20:	4618      	mov	r0, r3
 8006e22:	f7fe fbd7 	bl	80055d4 <ld_dword>
 8006e26:	4602      	mov	r2, r0
 8006e28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e2a:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8006e2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e2e:	3330      	adds	r3, #48	; 0x30
 8006e30:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8006e34:	4618      	mov	r0, r3
 8006e36:	f7fe fbcd 	bl	80055d4 <ld_dword>
 8006e3a:	4602      	mov	r2, r0
 8006e3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e3e:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8006e40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e42:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8006e46:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8006e48:	4b0a      	ldr	r3, [pc, #40]	; (8006e74 <find_volume+0x494>)
 8006e4a:	881b      	ldrh	r3, [r3, #0]
 8006e4c:	3301      	adds	r3, #1
 8006e4e:	b29a      	uxth	r2, r3
 8006e50:	4b08      	ldr	r3, [pc, #32]	; (8006e74 <find_volume+0x494>)
 8006e52:	801a      	strh	r2, [r3, #0]
 8006e54:	4b07      	ldr	r3, [pc, #28]	; (8006e74 <find_volume+0x494>)
 8006e56:	881a      	ldrh	r2, [r3, #0]
 8006e58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e5a:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8006e5c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006e5e:	f7fe fde9 	bl	8005a34 <clear_lock>
#endif
	return FR_OK;
 8006e62:	2300      	movs	r3, #0
}
 8006e64:	4618      	mov	r0, r3
 8006e66:	3758      	adds	r7, #88	; 0x58
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	bd80      	pop	{r7, pc}
 8006e6c:	41615252 	.word	0x41615252
 8006e70:	61417272 	.word	0x61417272
 8006e74:	200001e0 	.word	0x200001e0

08006e78 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b084      	sub	sp, #16
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
 8006e80:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8006e82:	2309      	movs	r3, #9
 8006e84:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d01c      	beq.n	8006ec6 <validate+0x4e>
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d018      	beq.n	8006ec6 <validate+0x4e>
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	781b      	ldrb	r3, [r3, #0]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d013      	beq.n	8006ec6 <validate+0x4e>
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	889a      	ldrh	r2, [r3, #4]
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	88db      	ldrh	r3, [r3, #6]
 8006ea8:	429a      	cmp	r2, r3
 8006eaa:	d10c      	bne.n	8006ec6 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	785b      	ldrb	r3, [r3, #1]
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	f7fe fad8 	bl	8005468 <disk_status>
 8006eb8:	4603      	mov	r3, r0
 8006eba:	f003 0301 	and.w	r3, r3, #1
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d101      	bne.n	8006ec6 <validate+0x4e>
			res = FR_OK;
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8006ec6:	7bfb      	ldrb	r3, [r7, #15]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d102      	bne.n	8006ed2 <validate+0x5a>
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	e000      	b.n	8006ed4 <validate+0x5c>
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	683a      	ldr	r2, [r7, #0]
 8006ed6:	6013      	str	r3, [r2, #0]
	return res;
 8006ed8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006eda:	4618      	mov	r0, r3
 8006edc:	3710      	adds	r7, #16
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	bd80      	pop	{r7, pc}
	...

08006ee4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b088      	sub	sp, #32
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	60f8      	str	r0, [r7, #12]
 8006eec:	60b9      	str	r1, [r7, #8]
 8006eee:	4613      	mov	r3, r2
 8006ef0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8006ef2:	68bb      	ldr	r3, [r7, #8]
 8006ef4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8006ef6:	f107 0310 	add.w	r3, r7, #16
 8006efa:	4618      	mov	r0, r3
 8006efc:	f7ff fcd5 	bl	80068aa <get_ldnumber>
 8006f00:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8006f02:	69fb      	ldr	r3, [r7, #28]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	da01      	bge.n	8006f0c <f_mount+0x28>
 8006f08:	230b      	movs	r3, #11
 8006f0a:	e02b      	b.n	8006f64 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8006f0c:	4a17      	ldr	r2, [pc, #92]	; (8006f6c <f_mount+0x88>)
 8006f0e:	69fb      	ldr	r3, [r7, #28]
 8006f10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f14:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8006f16:	69bb      	ldr	r3, [r7, #24]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d005      	beq.n	8006f28 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8006f1c:	69b8      	ldr	r0, [r7, #24]
 8006f1e:	f7fe fd89 	bl	8005a34 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8006f22:	69bb      	ldr	r3, [r7, #24]
 8006f24:	2200      	movs	r2, #0
 8006f26:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d002      	beq.n	8006f34 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	2200      	movs	r2, #0
 8006f32:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8006f34:	68fa      	ldr	r2, [r7, #12]
 8006f36:	490d      	ldr	r1, [pc, #52]	; (8006f6c <f_mount+0x88>)
 8006f38:	69fb      	ldr	r3, [r7, #28]
 8006f3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d002      	beq.n	8006f4a <f_mount+0x66>
 8006f44:	79fb      	ldrb	r3, [r7, #7]
 8006f46:	2b01      	cmp	r3, #1
 8006f48:	d001      	beq.n	8006f4e <f_mount+0x6a>
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	e00a      	b.n	8006f64 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8006f4e:	f107 010c 	add.w	r1, r7, #12
 8006f52:	f107 0308 	add.w	r3, r7, #8
 8006f56:	2200      	movs	r2, #0
 8006f58:	4618      	mov	r0, r3
 8006f5a:	f7ff fd41 	bl	80069e0 <find_volume>
 8006f5e:	4603      	mov	r3, r0
 8006f60:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8006f62:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f64:	4618      	mov	r0, r3
 8006f66:	3720      	adds	r7, #32
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	bd80      	pop	{r7, pc}
 8006f6c:	200001dc 	.word	0x200001dc

08006f70 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b098      	sub	sp, #96	; 0x60
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	60f8      	str	r0, [r7, #12]
 8006f78:	60b9      	str	r1, [r7, #8]
 8006f7a:	4613      	mov	r3, r2
 8006f7c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d101      	bne.n	8006f88 <f_open+0x18>
 8006f84:	2309      	movs	r3, #9
 8006f86:	e1ad      	b.n	80072e4 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8006f88:	79fb      	ldrb	r3, [r7, #7]
 8006f8a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006f8e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8006f90:	79fa      	ldrb	r2, [r7, #7]
 8006f92:	f107 0110 	add.w	r1, r7, #16
 8006f96:	f107 0308 	add.w	r3, r7, #8
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	f7ff fd20 	bl	80069e0 <find_volume>
 8006fa0:	4603      	mov	r3, r0
 8006fa2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8006fa6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	f040 8191 	bne.w	80072d2 <f_open+0x362>
		dj.obj.fs = fs;
 8006fb0:	693b      	ldr	r3, [r7, #16]
 8006fb2:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8006fb4:	68ba      	ldr	r2, [r7, #8]
 8006fb6:	f107 0314 	add.w	r3, r7, #20
 8006fba:	4611      	mov	r1, r2
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	f7ff fc03 	bl	80067c8 <follow_path>
 8006fc2:	4603      	mov	r3, r0
 8006fc4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8006fc8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d11a      	bne.n	8007006 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8006fd0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006fd4:	b25b      	sxtb	r3, r3
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	da03      	bge.n	8006fe2 <f_open+0x72>
				res = FR_INVALID_NAME;
 8006fda:	2306      	movs	r3, #6
 8006fdc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006fe0:	e011      	b.n	8007006 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006fe2:	79fb      	ldrb	r3, [r7, #7]
 8006fe4:	f023 0301 	bic.w	r3, r3, #1
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	bf14      	ite	ne
 8006fec:	2301      	movne	r3, #1
 8006fee:	2300      	moveq	r3, #0
 8006ff0:	b2db      	uxtb	r3, r3
 8006ff2:	461a      	mov	r2, r3
 8006ff4:	f107 0314 	add.w	r3, r7, #20
 8006ff8:	4611      	mov	r1, r2
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	f7fe fbd2 	bl	80057a4 <chk_lock>
 8007000:	4603      	mov	r3, r0
 8007002:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8007006:	79fb      	ldrb	r3, [r7, #7]
 8007008:	f003 031c 	and.w	r3, r3, #28
 800700c:	2b00      	cmp	r3, #0
 800700e:	d07f      	beq.n	8007110 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8007010:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007014:	2b00      	cmp	r3, #0
 8007016:	d017      	beq.n	8007048 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8007018:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800701c:	2b04      	cmp	r3, #4
 800701e:	d10e      	bne.n	800703e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8007020:	f7fe fc1c 	bl	800585c <enq_lock>
 8007024:	4603      	mov	r3, r0
 8007026:	2b00      	cmp	r3, #0
 8007028:	d006      	beq.n	8007038 <f_open+0xc8>
 800702a:	f107 0314 	add.w	r3, r7, #20
 800702e:	4618      	mov	r0, r3
 8007030:	f7ff fb03 	bl	800663a <dir_register>
 8007034:	4603      	mov	r3, r0
 8007036:	e000      	b.n	800703a <f_open+0xca>
 8007038:	2312      	movs	r3, #18
 800703a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800703e:	79fb      	ldrb	r3, [r7, #7]
 8007040:	f043 0308 	orr.w	r3, r3, #8
 8007044:	71fb      	strb	r3, [r7, #7]
 8007046:	e010      	b.n	800706a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8007048:	7ebb      	ldrb	r3, [r7, #26]
 800704a:	f003 0311 	and.w	r3, r3, #17
 800704e:	2b00      	cmp	r3, #0
 8007050:	d003      	beq.n	800705a <f_open+0xea>
					res = FR_DENIED;
 8007052:	2307      	movs	r3, #7
 8007054:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8007058:	e007      	b.n	800706a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800705a:	79fb      	ldrb	r3, [r7, #7]
 800705c:	f003 0304 	and.w	r3, r3, #4
 8007060:	2b00      	cmp	r3, #0
 8007062:	d002      	beq.n	800706a <f_open+0xfa>
 8007064:	2308      	movs	r3, #8
 8007066:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800706a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800706e:	2b00      	cmp	r3, #0
 8007070:	d168      	bne.n	8007144 <f_open+0x1d4>
 8007072:	79fb      	ldrb	r3, [r7, #7]
 8007074:	f003 0308 	and.w	r3, r3, #8
 8007078:	2b00      	cmp	r3, #0
 800707a:	d063      	beq.n	8007144 <f_open+0x1d4>
				dw = GET_FATTIME();
 800707c:	f7fe f888 	bl	8005190 <get_fattime>
 8007080:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8007082:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007084:	330e      	adds	r3, #14
 8007086:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007088:	4618      	mov	r0, r3
 800708a:	f7fe fae1 	bl	8005650 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800708e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007090:	3316      	adds	r3, #22
 8007092:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007094:	4618      	mov	r0, r3
 8007096:	f7fe fadb 	bl	8005650 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800709a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800709c:	330b      	adds	r3, #11
 800709e:	2220      	movs	r2, #32
 80070a0:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80070a2:	693b      	ldr	r3, [r7, #16]
 80070a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80070a6:	4611      	mov	r1, r2
 80070a8:	4618      	mov	r0, r3
 80070aa:	f7ff fa32 	bl	8006512 <ld_clust>
 80070ae:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80070b0:	693b      	ldr	r3, [r7, #16]
 80070b2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80070b4:	2200      	movs	r2, #0
 80070b6:	4618      	mov	r0, r3
 80070b8:	f7ff fa4a 	bl	8006550 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80070bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070be:	331c      	adds	r3, #28
 80070c0:	2100      	movs	r1, #0
 80070c2:	4618      	mov	r0, r3
 80070c4:	f7fe fac4 	bl	8005650 <st_dword>
					fs->wflag = 1;
 80070c8:	693b      	ldr	r3, [r7, #16]
 80070ca:	2201      	movs	r2, #1
 80070cc:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80070ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d037      	beq.n	8007144 <f_open+0x1d4>
						dw = fs->winsect;
 80070d4:	693b      	ldr	r3, [r7, #16]
 80070d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070d8:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 80070da:	f107 0314 	add.w	r3, r7, #20
 80070de:	2200      	movs	r2, #0
 80070e0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80070e2:	4618      	mov	r0, r3
 80070e4:	f7fe ff5d 	bl	8005fa2 <remove_chain>
 80070e8:	4603      	mov	r3, r0
 80070ea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 80070ee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d126      	bne.n	8007144 <f_open+0x1d4>
							res = move_window(fs, dw);
 80070f6:	693b      	ldr	r3, [r7, #16]
 80070f8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80070fa:	4618      	mov	r0, r3
 80070fc:	f7fe fd02 	bl	8005b04 <move_window>
 8007100:	4603      	mov	r3, r0
 8007102:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8007106:	693b      	ldr	r3, [r7, #16]
 8007108:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800710a:	3a01      	subs	r2, #1
 800710c:	60da      	str	r2, [r3, #12]
 800710e:	e019      	b.n	8007144 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8007110:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007114:	2b00      	cmp	r3, #0
 8007116:	d115      	bne.n	8007144 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8007118:	7ebb      	ldrb	r3, [r7, #26]
 800711a:	f003 0310 	and.w	r3, r3, #16
 800711e:	2b00      	cmp	r3, #0
 8007120:	d003      	beq.n	800712a <f_open+0x1ba>
					res = FR_NO_FILE;
 8007122:	2304      	movs	r3, #4
 8007124:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8007128:	e00c      	b.n	8007144 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800712a:	79fb      	ldrb	r3, [r7, #7]
 800712c:	f003 0302 	and.w	r3, r3, #2
 8007130:	2b00      	cmp	r3, #0
 8007132:	d007      	beq.n	8007144 <f_open+0x1d4>
 8007134:	7ebb      	ldrb	r3, [r7, #26]
 8007136:	f003 0301 	and.w	r3, r3, #1
 800713a:	2b00      	cmp	r3, #0
 800713c:	d002      	beq.n	8007144 <f_open+0x1d4>
						res = FR_DENIED;
 800713e:	2307      	movs	r3, #7
 8007140:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8007144:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007148:	2b00      	cmp	r3, #0
 800714a:	d128      	bne.n	800719e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800714c:	79fb      	ldrb	r3, [r7, #7]
 800714e:	f003 0308 	and.w	r3, r3, #8
 8007152:	2b00      	cmp	r3, #0
 8007154:	d003      	beq.n	800715e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8007156:	79fb      	ldrb	r3, [r7, #7]
 8007158:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800715c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800715e:	693b      	ldr	r3, [r7, #16]
 8007160:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8007166:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800716c:	79fb      	ldrb	r3, [r7, #7]
 800716e:	f023 0301 	bic.w	r3, r3, #1
 8007172:	2b00      	cmp	r3, #0
 8007174:	bf14      	ite	ne
 8007176:	2301      	movne	r3, #1
 8007178:	2300      	moveq	r3, #0
 800717a:	b2db      	uxtb	r3, r3
 800717c:	461a      	mov	r2, r3
 800717e:	f107 0314 	add.w	r3, r7, #20
 8007182:	4611      	mov	r1, r2
 8007184:	4618      	mov	r0, r3
 8007186:	f7fe fb8b 	bl	80058a0 <inc_lock>
 800718a:	4602      	mov	r2, r0
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	691b      	ldr	r3, [r3, #16]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d102      	bne.n	800719e <f_open+0x22e>
 8007198:	2302      	movs	r3, #2
 800719a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800719e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	f040 8095 	bne.w	80072d2 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80071a8:	693b      	ldr	r3, [r7, #16]
 80071aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80071ac:	4611      	mov	r1, r2
 80071ae:	4618      	mov	r0, r3
 80071b0:	f7ff f9af 	bl	8006512 <ld_clust>
 80071b4:	4602      	mov	r2, r0
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80071ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071bc:	331c      	adds	r3, #28
 80071be:	4618      	mov	r0, r3
 80071c0:	f7fe fa08 	bl	80055d4 <ld_dword>
 80071c4:	4602      	mov	r2, r0
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	2200      	movs	r2, #0
 80071ce:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80071d0:	693a      	ldr	r2, [r7, #16]
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80071d6:	693b      	ldr	r3, [r7, #16]
 80071d8:	88da      	ldrh	r2, [r3, #6]
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	79fa      	ldrb	r2, [r7, #7]
 80071e2:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	2200      	movs	r2, #0
 80071e8:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	2200      	movs	r2, #0
 80071ee:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	2200      	movs	r2, #0
 80071f4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	3330      	adds	r3, #48	; 0x30
 80071fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80071fe:	2100      	movs	r1, #0
 8007200:	4618      	mov	r0, r3
 8007202:	f7fe fa72 	bl	80056ea <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8007206:	79fb      	ldrb	r3, [r7, #7]
 8007208:	f003 0320 	and.w	r3, r3, #32
 800720c:	2b00      	cmp	r3, #0
 800720e:	d060      	beq.n	80072d2 <f_open+0x362>
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	68db      	ldr	r3, [r3, #12]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d05c      	beq.n	80072d2 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	68da      	ldr	r2, [r3, #12]
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8007220:	693b      	ldr	r3, [r7, #16]
 8007222:	895b      	ldrh	r3, [r3, #10]
 8007224:	025b      	lsls	r3, r3, #9
 8007226:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	689b      	ldr	r3, [r3, #8]
 800722c:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	68db      	ldr	r3, [r3, #12]
 8007232:	657b      	str	r3, [r7, #84]	; 0x54
 8007234:	e016      	b.n	8007264 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800723a:	4618      	mov	r0, r3
 800723c:	f7fe fd1d 	bl	8005c7a <get_fat>
 8007240:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8007242:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007244:	2b01      	cmp	r3, #1
 8007246:	d802      	bhi.n	800724e <f_open+0x2de>
 8007248:	2302      	movs	r3, #2
 800724a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800724e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007250:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007254:	d102      	bne.n	800725c <f_open+0x2ec>
 8007256:	2301      	movs	r3, #1
 8007258:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800725c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800725e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007260:	1ad3      	subs	r3, r2, r3
 8007262:	657b      	str	r3, [r7, #84]	; 0x54
 8007264:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007268:	2b00      	cmp	r3, #0
 800726a:	d103      	bne.n	8007274 <f_open+0x304>
 800726c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800726e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007270:	429a      	cmp	r2, r3
 8007272:	d8e0      	bhi.n	8007236 <f_open+0x2c6>
				}
				fp->clust = clst;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007278:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800727a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800727e:	2b00      	cmp	r3, #0
 8007280:	d127      	bne.n	80072d2 <f_open+0x362>
 8007282:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007284:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007288:	2b00      	cmp	r3, #0
 800728a:	d022      	beq.n	80072d2 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800728c:	693b      	ldr	r3, [r7, #16]
 800728e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007290:	4618      	mov	r0, r3
 8007292:	f7fe fcd3 	bl	8005c3c <clust2sect>
 8007296:	6478      	str	r0, [r7, #68]	; 0x44
 8007298:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800729a:	2b00      	cmp	r3, #0
 800729c:	d103      	bne.n	80072a6 <f_open+0x336>
						res = FR_INT_ERR;
 800729e:	2302      	movs	r3, #2
 80072a0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80072a4:	e015      	b.n	80072d2 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80072a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80072a8:	0a5a      	lsrs	r2, r3, #9
 80072aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80072ac:	441a      	add	r2, r3
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80072b2:	693b      	ldr	r3, [r7, #16]
 80072b4:	7858      	ldrb	r0, [r3, #1]
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	6a1a      	ldr	r2, [r3, #32]
 80072c0:	2301      	movs	r3, #1
 80072c2:	f7fe f911 	bl	80054e8 <disk_read>
 80072c6:	4603      	mov	r3, r0
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d002      	beq.n	80072d2 <f_open+0x362>
 80072cc:	2301      	movs	r3, #1
 80072ce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80072d2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d002      	beq.n	80072e0 <f_open+0x370>
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	2200      	movs	r2, #0
 80072de:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80072e0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80072e4:	4618      	mov	r0, r3
 80072e6:	3760      	adds	r7, #96	; 0x60
 80072e8:	46bd      	mov	sp, r7
 80072ea:	bd80      	pop	{r7, pc}

080072ec <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b08e      	sub	sp, #56	; 0x38
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	60f8      	str	r0, [r7, #12]
 80072f4:	60b9      	str	r1, [r7, #8]
 80072f6:	607a      	str	r2, [r7, #4]
 80072f8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80072fa:	68bb      	ldr	r3, [r7, #8]
 80072fc:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 80072fe:	683b      	ldr	r3, [r7, #0]
 8007300:	2200      	movs	r2, #0
 8007302:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	f107 0214 	add.w	r2, r7, #20
 800730a:	4611      	mov	r1, r2
 800730c:	4618      	mov	r0, r3
 800730e:	f7ff fdb3 	bl	8006e78 <validate>
 8007312:	4603      	mov	r3, r0
 8007314:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8007318:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800731c:	2b00      	cmp	r3, #0
 800731e:	d107      	bne.n	8007330 <f_read+0x44>
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	7d5b      	ldrb	r3, [r3, #21]
 8007324:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8007328:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800732c:	2b00      	cmp	r3, #0
 800732e:	d002      	beq.n	8007336 <f_read+0x4a>
 8007330:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007334:	e115      	b.n	8007562 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	7d1b      	ldrb	r3, [r3, #20]
 800733a:	f003 0301 	and.w	r3, r3, #1
 800733e:	2b00      	cmp	r3, #0
 8007340:	d101      	bne.n	8007346 <f_read+0x5a>
 8007342:	2307      	movs	r3, #7
 8007344:	e10d      	b.n	8007562 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	68da      	ldr	r2, [r3, #12]
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	699b      	ldr	r3, [r3, #24]
 800734e:	1ad3      	subs	r3, r2, r3
 8007350:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8007352:	687a      	ldr	r2, [r7, #4]
 8007354:	6a3b      	ldr	r3, [r7, #32]
 8007356:	429a      	cmp	r2, r3
 8007358:	f240 80fe 	bls.w	8007558 <f_read+0x26c>
 800735c:	6a3b      	ldr	r3, [r7, #32]
 800735e:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8007360:	e0fa      	b.n	8007558 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	699b      	ldr	r3, [r3, #24]
 8007366:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800736a:	2b00      	cmp	r3, #0
 800736c:	f040 80c6 	bne.w	80074fc <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	699b      	ldr	r3, [r3, #24]
 8007374:	0a5b      	lsrs	r3, r3, #9
 8007376:	697a      	ldr	r2, [r7, #20]
 8007378:	8952      	ldrh	r2, [r2, #10]
 800737a:	3a01      	subs	r2, #1
 800737c:	4013      	ands	r3, r2
 800737e:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8007380:	69fb      	ldr	r3, [r7, #28]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d12f      	bne.n	80073e6 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	699b      	ldr	r3, [r3, #24]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d103      	bne.n	8007396 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	689b      	ldr	r3, [r3, #8]
 8007392:	633b      	str	r3, [r7, #48]	; 0x30
 8007394:	e013      	b.n	80073be <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800739a:	2b00      	cmp	r3, #0
 800739c:	d007      	beq.n	80073ae <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	699b      	ldr	r3, [r3, #24]
 80073a2:	4619      	mov	r1, r3
 80073a4:	68f8      	ldr	r0, [r7, #12]
 80073a6:	f7fe fef9 	bl	800619c <clmt_clust>
 80073aa:	6338      	str	r0, [r7, #48]	; 0x30
 80073ac:	e007      	b.n	80073be <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80073ae:	68fa      	ldr	r2, [r7, #12]
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	69db      	ldr	r3, [r3, #28]
 80073b4:	4619      	mov	r1, r3
 80073b6:	4610      	mov	r0, r2
 80073b8:	f7fe fc5f 	bl	8005c7a <get_fat>
 80073bc:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80073be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073c0:	2b01      	cmp	r3, #1
 80073c2:	d804      	bhi.n	80073ce <f_read+0xe2>
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	2202      	movs	r2, #2
 80073c8:	755a      	strb	r2, [r3, #21]
 80073ca:	2302      	movs	r3, #2
 80073cc:	e0c9      	b.n	8007562 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80073ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073d4:	d104      	bne.n	80073e0 <f_read+0xf4>
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	2201      	movs	r2, #1
 80073da:	755a      	strb	r2, [r3, #21]
 80073dc:	2301      	movs	r3, #1
 80073de:	e0c0      	b.n	8007562 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073e4:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80073e6:	697a      	ldr	r2, [r7, #20]
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	69db      	ldr	r3, [r3, #28]
 80073ec:	4619      	mov	r1, r3
 80073ee:	4610      	mov	r0, r2
 80073f0:	f7fe fc24 	bl	8005c3c <clust2sect>
 80073f4:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80073f6:	69bb      	ldr	r3, [r7, #24]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d104      	bne.n	8007406 <f_read+0x11a>
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	2202      	movs	r2, #2
 8007400:	755a      	strb	r2, [r3, #21]
 8007402:	2302      	movs	r3, #2
 8007404:	e0ad      	b.n	8007562 <f_read+0x276>
			sect += csect;
 8007406:	69ba      	ldr	r2, [r7, #24]
 8007408:	69fb      	ldr	r3, [r7, #28]
 800740a:	4413      	add	r3, r2
 800740c:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	0a5b      	lsrs	r3, r3, #9
 8007412:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8007414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007416:	2b00      	cmp	r3, #0
 8007418:	d039      	beq.n	800748e <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800741a:	69fa      	ldr	r2, [r7, #28]
 800741c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800741e:	4413      	add	r3, r2
 8007420:	697a      	ldr	r2, [r7, #20]
 8007422:	8952      	ldrh	r2, [r2, #10]
 8007424:	4293      	cmp	r3, r2
 8007426:	d905      	bls.n	8007434 <f_read+0x148>
					cc = fs->csize - csect;
 8007428:	697b      	ldr	r3, [r7, #20]
 800742a:	895b      	ldrh	r3, [r3, #10]
 800742c:	461a      	mov	r2, r3
 800742e:	69fb      	ldr	r3, [r7, #28]
 8007430:	1ad3      	subs	r3, r2, r3
 8007432:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007434:	697b      	ldr	r3, [r7, #20]
 8007436:	7858      	ldrb	r0, [r3, #1]
 8007438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800743a:	69ba      	ldr	r2, [r7, #24]
 800743c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800743e:	f7fe f853 	bl	80054e8 <disk_read>
 8007442:	4603      	mov	r3, r0
 8007444:	2b00      	cmp	r3, #0
 8007446:	d004      	beq.n	8007452 <f_read+0x166>
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	2201      	movs	r2, #1
 800744c:	755a      	strb	r2, [r3, #21]
 800744e:	2301      	movs	r3, #1
 8007450:	e087      	b.n	8007562 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	7d1b      	ldrb	r3, [r3, #20]
 8007456:	b25b      	sxtb	r3, r3
 8007458:	2b00      	cmp	r3, #0
 800745a:	da14      	bge.n	8007486 <f_read+0x19a>
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	6a1a      	ldr	r2, [r3, #32]
 8007460:	69bb      	ldr	r3, [r7, #24]
 8007462:	1ad3      	subs	r3, r2, r3
 8007464:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007466:	429a      	cmp	r2, r3
 8007468:	d90d      	bls.n	8007486 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	6a1a      	ldr	r2, [r3, #32]
 800746e:	69bb      	ldr	r3, [r7, #24]
 8007470:	1ad3      	subs	r3, r2, r3
 8007472:	025b      	lsls	r3, r3, #9
 8007474:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007476:	18d0      	adds	r0, r2, r3
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	3330      	adds	r3, #48	; 0x30
 800747c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007480:	4619      	mov	r1, r3
 8007482:	f7fe f911 	bl	80056a8 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8007486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007488:	025b      	lsls	r3, r3, #9
 800748a:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800748c:	e050      	b.n	8007530 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	6a1b      	ldr	r3, [r3, #32]
 8007492:	69ba      	ldr	r2, [r7, #24]
 8007494:	429a      	cmp	r2, r3
 8007496:	d02e      	beq.n	80074f6 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	7d1b      	ldrb	r3, [r3, #20]
 800749c:	b25b      	sxtb	r3, r3
 800749e:	2b00      	cmp	r3, #0
 80074a0:	da18      	bge.n	80074d4 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80074a2:	697b      	ldr	r3, [r7, #20]
 80074a4:	7858      	ldrb	r0, [r3, #1]
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	6a1a      	ldr	r2, [r3, #32]
 80074b0:	2301      	movs	r3, #1
 80074b2:	f7fe f839 	bl	8005528 <disk_write>
 80074b6:	4603      	mov	r3, r0
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d004      	beq.n	80074c6 <f_read+0x1da>
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	2201      	movs	r2, #1
 80074c0:	755a      	strb	r2, [r3, #21]
 80074c2:	2301      	movs	r3, #1
 80074c4:	e04d      	b.n	8007562 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	7d1b      	ldrb	r3, [r3, #20]
 80074ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80074ce:	b2da      	uxtb	r2, r3
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80074d4:	697b      	ldr	r3, [r7, #20]
 80074d6:	7858      	ldrb	r0, [r3, #1]
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80074de:	2301      	movs	r3, #1
 80074e0:	69ba      	ldr	r2, [r7, #24]
 80074e2:	f7fe f801 	bl	80054e8 <disk_read>
 80074e6:	4603      	mov	r3, r0
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d004      	beq.n	80074f6 <f_read+0x20a>
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	2201      	movs	r2, #1
 80074f0:	755a      	strb	r2, [r3, #21]
 80074f2:	2301      	movs	r3, #1
 80074f4:	e035      	b.n	8007562 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	69ba      	ldr	r2, [r7, #24]
 80074fa:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	699b      	ldr	r3, [r3, #24]
 8007500:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007504:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8007508:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800750a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	429a      	cmp	r2, r3
 8007510:	d901      	bls.n	8007516 <f_read+0x22a>
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	699b      	ldr	r3, [r3, #24]
 8007520:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007524:	4413      	add	r3, r2
 8007526:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007528:	4619      	mov	r1, r3
 800752a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800752c:	f7fe f8bc 	bl	80056a8 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8007530:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007534:	4413      	add	r3, r2
 8007536:	627b      	str	r3, [r7, #36]	; 0x24
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	699a      	ldr	r2, [r3, #24]
 800753c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800753e:	441a      	add	r2, r3
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	619a      	str	r2, [r3, #24]
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	681a      	ldr	r2, [r3, #0]
 8007548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800754a:	441a      	add	r2, r3
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	601a      	str	r2, [r3, #0]
 8007550:	687a      	ldr	r2, [r7, #4]
 8007552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007554:	1ad3      	subs	r3, r2, r3
 8007556:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2b00      	cmp	r3, #0
 800755c:	f47f af01 	bne.w	8007362 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8007560:	2300      	movs	r3, #0
}
 8007562:	4618      	mov	r0, r3
 8007564:	3738      	adds	r7, #56	; 0x38
 8007566:	46bd      	mov	sp, r7
 8007568:	bd80      	pop	{r7, pc}

0800756a <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800756a:	b580      	push	{r7, lr}
 800756c:	b08c      	sub	sp, #48	; 0x30
 800756e:	af00      	add	r7, sp, #0
 8007570:	60f8      	str	r0, [r7, #12]
 8007572:	60b9      	str	r1, [r7, #8]
 8007574:	607a      	str	r2, [r7, #4]
 8007576:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8007578:	68bb      	ldr	r3, [r7, #8]
 800757a:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	2200      	movs	r2, #0
 8007580:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	f107 0210 	add.w	r2, r7, #16
 8007588:	4611      	mov	r1, r2
 800758a:	4618      	mov	r0, r3
 800758c:	f7ff fc74 	bl	8006e78 <validate>
 8007590:	4603      	mov	r3, r0
 8007592:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8007596:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800759a:	2b00      	cmp	r3, #0
 800759c:	d107      	bne.n	80075ae <f_write+0x44>
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	7d5b      	ldrb	r3, [r3, #21]
 80075a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80075a6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d002      	beq.n	80075b4 <f_write+0x4a>
 80075ae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80075b2:	e14b      	b.n	800784c <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	7d1b      	ldrb	r3, [r3, #20]
 80075b8:	f003 0302 	and.w	r3, r3, #2
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d101      	bne.n	80075c4 <f_write+0x5a>
 80075c0:	2307      	movs	r3, #7
 80075c2:	e143      	b.n	800784c <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	699a      	ldr	r2, [r3, #24]
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	441a      	add	r2, r3
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	699b      	ldr	r3, [r3, #24]
 80075d0:	429a      	cmp	r2, r3
 80075d2:	f080 812d 	bcs.w	8007830 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	699b      	ldr	r3, [r3, #24]
 80075da:	43db      	mvns	r3, r3
 80075dc:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80075de:	e127      	b.n	8007830 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	699b      	ldr	r3, [r3, #24]
 80075e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	f040 80e3 	bne.w	80077b4 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	699b      	ldr	r3, [r3, #24]
 80075f2:	0a5b      	lsrs	r3, r3, #9
 80075f4:	693a      	ldr	r2, [r7, #16]
 80075f6:	8952      	ldrh	r2, [r2, #10]
 80075f8:	3a01      	subs	r2, #1
 80075fa:	4013      	ands	r3, r2
 80075fc:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80075fe:	69bb      	ldr	r3, [r7, #24]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d143      	bne.n	800768c <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	699b      	ldr	r3, [r3, #24]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d10c      	bne.n	8007626 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	689b      	ldr	r3, [r3, #8]
 8007610:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8007612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007614:	2b00      	cmp	r3, #0
 8007616:	d11a      	bne.n	800764e <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	2100      	movs	r1, #0
 800761c:	4618      	mov	r0, r3
 800761e:	f7fe fd25 	bl	800606c <create_chain>
 8007622:	62b8      	str	r0, [r7, #40]	; 0x28
 8007624:	e013      	b.n	800764e <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800762a:	2b00      	cmp	r3, #0
 800762c:	d007      	beq.n	800763e <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	699b      	ldr	r3, [r3, #24]
 8007632:	4619      	mov	r1, r3
 8007634:	68f8      	ldr	r0, [r7, #12]
 8007636:	f7fe fdb1 	bl	800619c <clmt_clust>
 800763a:	62b8      	str	r0, [r7, #40]	; 0x28
 800763c:	e007      	b.n	800764e <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800763e:	68fa      	ldr	r2, [r7, #12]
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	69db      	ldr	r3, [r3, #28]
 8007644:	4619      	mov	r1, r3
 8007646:	4610      	mov	r0, r2
 8007648:	f7fe fd10 	bl	800606c <create_chain>
 800764c:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800764e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007650:	2b00      	cmp	r3, #0
 8007652:	f000 80f2 	beq.w	800783a <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8007656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007658:	2b01      	cmp	r3, #1
 800765a:	d104      	bne.n	8007666 <f_write+0xfc>
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	2202      	movs	r2, #2
 8007660:	755a      	strb	r2, [r3, #21]
 8007662:	2302      	movs	r3, #2
 8007664:	e0f2      	b.n	800784c <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007668:	f1b3 3fff 	cmp.w	r3, #4294967295
 800766c:	d104      	bne.n	8007678 <f_write+0x10e>
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	2201      	movs	r2, #1
 8007672:	755a      	strb	r2, [r3, #21]
 8007674:	2301      	movs	r3, #1
 8007676:	e0e9      	b.n	800784c <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800767c:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	689b      	ldr	r3, [r3, #8]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d102      	bne.n	800768c <f_write+0x122>
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800768a:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	7d1b      	ldrb	r3, [r3, #20]
 8007690:	b25b      	sxtb	r3, r3
 8007692:	2b00      	cmp	r3, #0
 8007694:	da18      	bge.n	80076c8 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007696:	693b      	ldr	r3, [r7, #16]
 8007698:	7858      	ldrb	r0, [r3, #1]
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	6a1a      	ldr	r2, [r3, #32]
 80076a4:	2301      	movs	r3, #1
 80076a6:	f7fd ff3f 	bl	8005528 <disk_write>
 80076aa:	4603      	mov	r3, r0
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d004      	beq.n	80076ba <f_write+0x150>
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	2201      	movs	r2, #1
 80076b4:	755a      	strb	r2, [r3, #21]
 80076b6:	2301      	movs	r3, #1
 80076b8:	e0c8      	b.n	800784c <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	7d1b      	ldrb	r3, [r3, #20]
 80076be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80076c2:	b2da      	uxtb	r2, r3
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80076c8:	693a      	ldr	r2, [r7, #16]
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	69db      	ldr	r3, [r3, #28]
 80076ce:	4619      	mov	r1, r3
 80076d0:	4610      	mov	r0, r2
 80076d2:	f7fe fab3 	bl	8005c3c <clust2sect>
 80076d6:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80076d8:	697b      	ldr	r3, [r7, #20]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d104      	bne.n	80076e8 <f_write+0x17e>
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	2202      	movs	r2, #2
 80076e2:	755a      	strb	r2, [r3, #21]
 80076e4:	2302      	movs	r3, #2
 80076e6:	e0b1      	b.n	800784c <f_write+0x2e2>
			sect += csect;
 80076e8:	697a      	ldr	r2, [r7, #20]
 80076ea:	69bb      	ldr	r3, [r7, #24]
 80076ec:	4413      	add	r3, r2
 80076ee:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	0a5b      	lsrs	r3, r3, #9
 80076f4:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80076f6:	6a3b      	ldr	r3, [r7, #32]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d03c      	beq.n	8007776 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80076fc:	69ba      	ldr	r2, [r7, #24]
 80076fe:	6a3b      	ldr	r3, [r7, #32]
 8007700:	4413      	add	r3, r2
 8007702:	693a      	ldr	r2, [r7, #16]
 8007704:	8952      	ldrh	r2, [r2, #10]
 8007706:	4293      	cmp	r3, r2
 8007708:	d905      	bls.n	8007716 <f_write+0x1ac>
					cc = fs->csize - csect;
 800770a:	693b      	ldr	r3, [r7, #16]
 800770c:	895b      	ldrh	r3, [r3, #10]
 800770e:	461a      	mov	r2, r3
 8007710:	69bb      	ldr	r3, [r7, #24]
 8007712:	1ad3      	subs	r3, r2, r3
 8007714:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007716:	693b      	ldr	r3, [r7, #16]
 8007718:	7858      	ldrb	r0, [r3, #1]
 800771a:	6a3b      	ldr	r3, [r7, #32]
 800771c:	697a      	ldr	r2, [r7, #20]
 800771e:	69f9      	ldr	r1, [r7, #28]
 8007720:	f7fd ff02 	bl	8005528 <disk_write>
 8007724:	4603      	mov	r3, r0
 8007726:	2b00      	cmp	r3, #0
 8007728:	d004      	beq.n	8007734 <f_write+0x1ca>
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	2201      	movs	r2, #1
 800772e:	755a      	strb	r2, [r3, #21]
 8007730:	2301      	movs	r3, #1
 8007732:	e08b      	b.n	800784c <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	6a1a      	ldr	r2, [r3, #32]
 8007738:	697b      	ldr	r3, [r7, #20]
 800773a:	1ad3      	subs	r3, r2, r3
 800773c:	6a3a      	ldr	r2, [r7, #32]
 800773e:	429a      	cmp	r2, r3
 8007740:	d915      	bls.n	800776e <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	6a1a      	ldr	r2, [r3, #32]
 800774c:	697b      	ldr	r3, [r7, #20]
 800774e:	1ad3      	subs	r3, r2, r3
 8007750:	025b      	lsls	r3, r3, #9
 8007752:	69fa      	ldr	r2, [r7, #28]
 8007754:	4413      	add	r3, r2
 8007756:	f44f 7200 	mov.w	r2, #512	; 0x200
 800775a:	4619      	mov	r1, r3
 800775c:	f7fd ffa4 	bl	80056a8 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	7d1b      	ldrb	r3, [r3, #20]
 8007764:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007768:	b2da      	uxtb	r2, r3
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800776e:	6a3b      	ldr	r3, [r7, #32]
 8007770:	025b      	lsls	r3, r3, #9
 8007772:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8007774:	e03f      	b.n	80077f6 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	6a1b      	ldr	r3, [r3, #32]
 800777a:	697a      	ldr	r2, [r7, #20]
 800777c:	429a      	cmp	r2, r3
 800777e:	d016      	beq.n	80077ae <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	699a      	ldr	r2, [r3, #24]
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8007788:	429a      	cmp	r2, r3
 800778a:	d210      	bcs.n	80077ae <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800778c:	693b      	ldr	r3, [r7, #16]
 800778e:	7858      	ldrb	r0, [r3, #1]
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007796:	2301      	movs	r3, #1
 8007798:	697a      	ldr	r2, [r7, #20]
 800779a:	f7fd fea5 	bl	80054e8 <disk_read>
 800779e:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d004      	beq.n	80077ae <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	2201      	movs	r2, #1
 80077a8:	755a      	strb	r2, [r3, #21]
 80077aa:	2301      	movs	r3, #1
 80077ac:	e04e      	b.n	800784c <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	697a      	ldr	r2, [r7, #20]
 80077b2:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	699b      	ldr	r3, [r3, #24]
 80077b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077bc:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80077c0:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80077c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	429a      	cmp	r2, r3
 80077c8:	d901      	bls.n	80077ce <f_write+0x264>
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	699b      	ldr	r3, [r3, #24]
 80077d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077dc:	4413      	add	r3, r2
 80077de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077e0:	69f9      	ldr	r1, [r7, #28]
 80077e2:	4618      	mov	r0, r3
 80077e4:	f7fd ff60 	bl	80056a8 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	7d1b      	ldrb	r3, [r3, #20]
 80077ec:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80077f0:	b2da      	uxtb	r2, r3
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80077f6:	69fa      	ldr	r2, [r7, #28]
 80077f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077fa:	4413      	add	r3, r2
 80077fc:	61fb      	str	r3, [r7, #28]
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	699a      	ldr	r2, [r3, #24]
 8007802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007804:	441a      	add	r2, r3
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	619a      	str	r2, [r3, #24]
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	68da      	ldr	r2, [r3, #12]
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	699b      	ldr	r3, [r3, #24]
 8007812:	429a      	cmp	r2, r3
 8007814:	bf38      	it	cc
 8007816:	461a      	movcc	r2, r3
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	60da      	str	r2, [r3, #12]
 800781c:	683b      	ldr	r3, [r7, #0]
 800781e:	681a      	ldr	r2, [r3, #0]
 8007820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007822:	441a      	add	r2, r3
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	601a      	str	r2, [r3, #0]
 8007828:	687a      	ldr	r2, [r7, #4]
 800782a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800782c:	1ad3      	subs	r3, r2, r3
 800782e:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2b00      	cmp	r3, #0
 8007834:	f47f aed4 	bne.w	80075e0 <f_write+0x76>
 8007838:	e000      	b.n	800783c <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800783a:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	7d1b      	ldrb	r3, [r3, #20]
 8007840:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007844:	b2da      	uxtb	r2, r3
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800784a:	2300      	movs	r3, #0
}
 800784c:	4618      	mov	r0, r3
 800784e:	3730      	adds	r7, #48	; 0x30
 8007850:	46bd      	mov	sp, r7
 8007852:	bd80      	pop	{r7, pc}

08007854 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8007854:	b580      	push	{r7, lr}
 8007856:	b086      	sub	sp, #24
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	f107 0208 	add.w	r2, r7, #8
 8007862:	4611      	mov	r1, r2
 8007864:	4618      	mov	r0, r3
 8007866:	f7ff fb07 	bl	8006e78 <validate>
 800786a:	4603      	mov	r3, r0
 800786c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800786e:	7dfb      	ldrb	r3, [r7, #23]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d168      	bne.n	8007946 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	7d1b      	ldrb	r3, [r3, #20]
 8007878:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800787c:	2b00      	cmp	r3, #0
 800787e:	d062      	beq.n	8007946 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	7d1b      	ldrb	r3, [r3, #20]
 8007884:	b25b      	sxtb	r3, r3
 8007886:	2b00      	cmp	r3, #0
 8007888:	da15      	bge.n	80078b6 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800788a:	68bb      	ldr	r3, [r7, #8]
 800788c:	7858      	ldrb	r0, [r3, #1]
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	6a1a      	ldr	r2, [r3, #32]
 8007898:	2301      	movs	r3, #1
 800789a:	f7fd fe45 	bl	8005528 <disk_write>
 800789e:	4603      	mov	r3, r0
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d001      	beq.n	80078a8 <f_sync+0x54>
 80078a4:	2301      	movs	r3, #1
 80078a6:	e04f      	b.n	8007948 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	7d1b      	ldrb	r3, [r3, #20]
 80078ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078b0:	b2da      	uxtb	r2, r3
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80078b6:	f7fd fc6b 	bl	8005190 <get_fattime>
 80078ba:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80078bc:	68ba      	ldr	r2, [r7, #8]
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078c2:	4619      	mov	r1, r3
 80078c4:	4610      	mov	r0, r2
 80078c6:	f7fe f91d 	bl	8005b04 <move_window>
 80078ca:	4603      	mov	r3, r0
 80078cc:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80078ce:	7dfb      	ldrb	r3, [r7, #23]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d138      	bne.n	8007946 <f_sync+0xf2>
					dir = fp->dir_ptr;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078d8:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	330b      	adds	r3, #11
 80078de:	781a      	ldrb	r2, [r3, #0]
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	330b      	adds	r3, #11
 80078e4:	f042 0220 	orr.w	r2, r2, #32
 80078e8:	b2d2      	uxtb	r2, r2
 80078ea:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	6818      	ldr	r0, [r3, #0]
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	689b      	ldr	r3, [r3, #8]
 80078f4:	461a      	mov	r2, r3
 80078f6:	68f9      	ldr	r1, [r7, #12]
 80078f8:	f7fe fe2a 	bl	8006550 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	f103 021c 	add.w	r2, r3, #28
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	68db      	ldr	r3, [r3, #12]
 8007906:	4619      	mov	r1, r3
 8007908:	4610      	mov	r0, r2
 800790a:	f7fd fea1 	bl	8005650 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	3316      	adds	r3, #22
 8007912:	6939      	ldr	r1, [r7, #16]
 8007914:	4618      	mov	r0, r3
 8007916:	f7fd fe9b 	bl	8005650 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	3312      	adds	r3, #18
 800791e:	2100      	movs	r1, #0
 8007920:	4618      	mov	r0, r3
 8007922:	f7fd fe7a 	bl	800561a <st_word>
					fs->wflag = 1;
 8007926:	68bb      	ldr	r3, [r7, #8]
 8007928:	2201      	movs	r2, #1
 800792a:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800792c:	68bb      	ldr	r3, [r7, #8]
 800792e:	4618      	mov	r0, r3
 8007930:	f7fe f916 	bl	8005b60 <sync_fs>
 8007934:	4603      	mov	r3, r0
 8007936:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	7d1b      	ldrb	r3, [r3, #20]
 800793c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007940:	b2da      	uxtb	r2, r3
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8007946:	7dfb      	ldrb	r3, [r7, #23]
}
 8007948:	4618      	mov	r0, r3
 800794a:	3718      	adds	r7, #24
 800794c:	46bd      	mov	sp, r7
 800794e:	bd80      	pop	{r7, pc}

08007950 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8007950:	b580      	push	{r7, lr}
 8007952:	b084      	sub	sp, #16
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8007958:	6878      	ldr	r0, [r7, #4]
 800795a:	f7ff ff7b 	bl	8007854 <f_sync>
 800795e:	4603      	mov	r3, r0
 8007960:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8007962:	7bfb      	ldrb	r3, [r7, #15]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d118      	bne.n	800799a <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	f107 0208 	add.w	r2, r7, #8
 800796e:	4611      	mov	r1, r2
 8007970:	4618      	mov	r0, r3
 8007972:	f7ff fa81 	bl	8006e78 <validate>
 8007976:	4603      	mov	r3, r0
 8007978:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800797a:	7bfb      	ldrb	r3, [r7, #15]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d10c      	bne.n	800799a <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	691b      	ldr	r3, [r3, #16]
 8007984:	4618      	mov	r0, r3
 8007986:	f7fe f819 	bl	80059bc <dec_lock>
 800798a:	4603      	mov	r3, r0
 800798c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800798e:	7bfb      	ldrb	r3, [r7, #15]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d102      	bne.n	800799a <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2200      	movs	r2, #0
 8007998:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800799a:	7bfb      	ldrb	r3, [r7, #15]
}
 800799c:	4618      	mov	r0, r3
 800799e:	3710      	adds	r7, #16
 80079a0:	46bd      	mov	sp, r7
 80079a2:	bd80      	pop	{r7, pc}

080079a4 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b090      	sub	sp, #64	; 0x40
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
 80079ac:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	f107 0208 	add.w	r2, r7, #8
 80079b4:	4611      	mov	r1, r2
 80079b6:	4618      	mov	r0, r3
 80079b8:	f7ff fa5e 	bl	8006e78 <validate>
 80079bc:	4603      	mov	r3, r0
 80079be:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 80079c2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d103      	bne.n	80079d2 <f_lseek+0x2e>
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	7d5b      	ldrb	r3, [r3, #21]
 80079ce:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 80079d2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d002      	beq.n	80079e0 <f_lseek+0x3c>
 80079da:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80079de:	e1e6      	b.n	8007dae <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	f000 80d1 	beq.w	8007b8c <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 80079ea:	683b      	ldr	r3, [r7, #0]
 80079ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079f0:	d15a      	bne.n	8007aa8 <f_lseek+0x104>
			tbl = fp->cltbl;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079f6:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 80079f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079fa:	1d1a      	adds	r2, r3, #4
 80079fc:	627a      	str	r2, [r7, #36]	; 0x24
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	617b      	str	r3, [r7, #20]
 8007a02:	2302      	movs	r3, #2
 8007a04:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	689b      	ldr	r3, [r3, #8]
 8007a0a:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8007a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d03a      	beq.n	8007a88 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8007a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a14:	613b      	str	r3, [r7, #16]
 8007a16:	2300      	movs	r3, #0
 8007a18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a1c:	3302      	adds	r3, #2
 8007a1e:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8007a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a22:	60fb      	str	r3, [r7, #12]
 8007a24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a26:	3301      	adds	r3, #1
 8007a28:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007a2e:	4618      	mov	r0, r3
 8007a30:	f7fe f923 	bl	8005c7a <get_fat>
 8007a34:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8007a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a38:	2b01      	cmp	r3, #1
 8007a3a:	d804      	bhi.n	8007a46 <f_lseek+0xa2>
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2202      	movs	r2, #2
 8007a40:	755a      	strb	r2, [r3, #21]
 8007a42:	2302      	movs	r3, #2
 8007a44:	e1b3      	b.n	8007dae <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a4c:	d104      	bne.n	8007a58 <f_lseek+0xb4>
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	2201      	movs	r2, #1
 8007a52:	755a      	strb	r2, [r3, #21]
 8007a54:	2301      	movs	r3, #1
 8007a56:	e1aa      	b.n	8007dae <f_lseek+0x40a>
					} while (cl == pcl + 1);
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	3301      	adds	r3, #1
 8007a5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a5e:	429a      	cmp	r2, r3
 8007a60:	d0de      	beq.n	8007a20 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8007a62:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a64:	697b      	ldr	r3, [r7, #20]
 8007a66:	429a      	cmp	r2, r3
 8007a68:	d809      	bhi.n	8007a7e <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8007a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a6c:	1d1a      	adds	r2, r3, #4
 8007a6e:	627a      	str	r2, [r7, #36]	; 0x24
 8007a70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a72:	601a      	str	r2, [r3, #0]
 8007a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a76:	1d1a      	adds	r2, r3, #4
 8007a78:	627a      	str	r2, [r7, #36]	; 0x24
 8007a7a:	693a      	ldr	r2, [r7, #16]
 8007a7c:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8007a7e:	68bb      	ldr	r3, [r7, #8]
 8007a80:	695b      	ldr	r3, [r3, #20]
 8007a82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a84:	429a      	cmp	r2, r3
 8007a86:	d3c4      	bcc.n	8007a12 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a8e:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8007a90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a92:	697b      	ldr	r3, [r7, #20]
 8007a94:	429a      	cmp	r2, r3
 8007a96:	d803      	bhi.n	8007aa0 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8007a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	601a      	str	r2, [r3, #0]
 8007a9e:	e184      	b.n	8007daa <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8007aa0:	2311      	movs	r3, #17
 8007aa2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8007aa6:	e180      	b.n	8007daa <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	68db      	ldr	r3, [r3, #12]
 8007aac:	683a      	ldr	r2, [r7, #0]
 8007aae:	429a      	cmp	r2, r3
 8007ab0:	d902      	bls.n	8007ab8 <f_lseek+0x114>
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	68db      	ldr	r3, [r3, #12]
 8007ab6:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	683a      	ldr	r2, [r7, #0]
 8007abc:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8007abe:	683b      	ldr	r3, [r7, #0]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	f000 8172 	beq.w	8007daa <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 8007ac6:	683b      	ldr	r3, [r7, #0]
 8007ac8:	3b01      	subs	r3, #1
 8007aca:	4619      	mov	r1, r3
 8007acc:	6878      	ldr	r0, [r7, #4]
 8007ace:	f7fe fb65 	bl	800619c <clmt_clust>
 8007ad2:	4602      	mov	r2, r0
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8007ad8:	68ba      	ldr	r2, [r7, #8]
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	69db      	ldr	r3, [r3, #28]
 8007ade:	4619      	mov	r1, r3
 8007ae0:	4610      	mov	r0, r2
 8007ae2:	f7fe f8ab 	bl	8005c3c <clust2sect>
 8007ae6:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8007ae8:	69bb      	ldr	r3, [r7, #24]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d104      	bne.n	8007af8 <f_lseek+0x154>
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	2202      	movs	r2, #2
 8007af2:	755a      	strb	r2, [r3, #21]
 8007af4:	2302      	movs	r3, #2
 8007af6:	e15a      	b.n	8007dae <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8007af8:	683b      	ldr	r3, [r7, #0]
 8007afa:	3b01      	subs	r3, #1
 8007afc:	0a5b      	lsrs	r3, r3, #9
 8007afe:	68ba      	ldr	r2, [r7, #8]
 8007b00:	8952      	ldrh	r2, [r2, #10]
 8007b02:	3a01      	subs	r2, #1
 8007b04:	4013      	ands	r3, r2
 8007b06:	69ba      	ldr	r2, [r7, #24]
 8007b08:	4413      	add	r3, r2
 8007b0a:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	699b      	ldr	r3, [r3, #24]
 8007b10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	f000 8148 	beq.w	8007daa <f_lseek+0x406>
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6a1b      	ldr	r3, [r3, #32]
 8007b1e:	69ba      	ldr	r2, [r7, #24]
 8007b20:	429a      	cmp	r2, r3
 8007b22:	f000 8142 	beq.w	8007daa <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	7d1b      	ldrb	r3, [r3, #20]
 8007b2a:	b25b      	sxtb	r3, r3
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	da18      	bge.n	8007b62 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007b30:	68bb      	ldr	r3, [r7, #8]
 8007b32:	7858      	ldrb	r0, [r3, #1]
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	6a1a      	ldr	r2, [r3, #32]
 8007b3e:	2301      	movs	r3, #1
 8007b40:	f7fd fcf2 	bl	8005528 <disk_write>
 8007b44:	4603      	mov	r3, r0
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d004      	beq.n	8007b54 <f_lseek+0x1b0>
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	2201      	movs	r2, #1
 8007b4e:	755a      	strb	r2, [r3, #21]
 8007b50:	2301      	movs	r3, #1
 8007b52:	e12c      	b.n	8007dae <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	7d1b      	ldrb	r3, [r3, #20]
 8007b58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b5c:	b2da      	uxtb	r2, r3
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8007b62:	68bb      	ldr	r3, [r7, #8]
 8007b64:	7858      	ldrb	r0, [r3, #1]
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007b6c:	2301      	movs	r3, #1
 8007b6e:	69ba      	ldr	r2, [r7, #24]
 8007b70:	f7fd fcba 	bl	80054e8 <disk_read>
 8007b74:	4603      	mov	r3, r0
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d004      	beq.n	8007b84 <f_lseek+0x1e0>
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	2201      	movs	r2, #1
 8007b7e:	755a      	strb	r2, [r3, #21]
 8007b80:	2301      	movs	r3, #1
 8007b82:	e114      	b.n	8007dae <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	69ba      	ldr	r2, [r7, #24]
 8007b88:	621a      	str	r2, [r3, #32]
 8007b8a:	e10e      	b.n	8007daa <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	68db      	ldr	r3, [r3, #12]
 8007b90:	683a      	ldr	r2, [r7, #0]
 8007b92:	429a      	cmp	r2, r3
 8007b94:	d908      	bls.n	8007ba8 <f_lseek+0x204>
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	7d1b      	ldrb	r3, [r3, #20]
 8007b9a:	f003 0302 	and.w	r3, r3, #2
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d102      	bne.n	8007ba8 <f_lseek+0x204>
			ofs = fp->obj.objsize;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	68db      	ldr	r3, [r3, #12]
 8007ba6:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	699b      	ldr	r3, [r3, #24]
 8007bac:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8007bae:	2300      	movs	r3, #0
 8007bb0:	637b      	str	r3, [r7, #52]	; 0x34
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007bb6:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	f000 80a7 	beq.w	8007d0e <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8007bc0:	68bb      	ldr	r3, [r7, #8]
 8007bc2:	895b      	ldrh	r3, [r3, #10]
 8007bc4:	025b      	lsls	r3, r3, #9
 8007bc6:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8007bc8:	6a3b      	ldr	r3, [r7, #32]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d01b      	beq.n	8007c06 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8007bce:	683b      	ldr	r3, [r7, #0]
 8007bd0:	1e5a      	subs	r2, r3, #1
 8007bd2:	69fb      	ldr	r3, [r7, #28]
 8007bd4:	fbb2 f2f3 	udiv	r2, r2, r3
 8007bd8:	6a3b      	ldr	r3, [r7, #32]
 8007bda:	1e59      	subs	r1, r3, #1
 8007bdc:	69fb      	ldr	r3, [r7, #28]
 8007bde:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8007be2:	429a      	cmp	r2, r3
 8007be4:	d30f      	bcc.n	8007c06 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8007be6:	6a3b      	ldr	r3, [r7, #32]
 8007be8:	1e5a      	subs	r2, r3, #1
 8007bea:	69fb      	ldr	r3, [r7, #28]
 8007bec:	425b      	negs	r3, r3
 8007bee:	401a      	ands	r2, r3
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	699b      	ldr	r3, [r3, #24]
 8007bf8:	683a      	ldr	r2, [r7, #0]
 8007bfa:	1ad3      	subs	r3, r2, r3
 8007bfc:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	69db      	ldr	r3, [r3, #28]
 8007c02:	63bb      	str	r3, [r7, #56]	; 0x38
 8007c04:	e022      	b.n	8007c4c <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	689b      	ldr	r3, [r3, #8]
 8007c0a:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8007c0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d119      	bne.n	8007c46 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	2100      	movs	r1, #0
 8007c16:	4618      	mov	r0, r3
 8007c18:	f7fe fa28 	bl	800606c <create_chain>
 8007c1c:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8007c1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c20:	2b01      	cmp	r3, #1
 8007c22:	d104      	bne.n	8007c2e <f_lseek+0x28a>
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2202      	movs	r2, #2
 8007c28:	755a      	strb	r2, [r3, #21]
 8007c2a:	2302      	movs	r3, #2
 8007c2c:	e0bf      	b.n	8007dae <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007c2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c34:	d104      	bne.n	8007c40 <f_lseek+0x29c>
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	2201      	movs	r2, #1
 8007c3a:	755a      	strb	r2, [r3, #21]
 8007c3c:	2301      	movs	r3, #1
 8007c3e:	e0b6      	b.n	8007dae <f_lseek+0x40a>
					fp->obj.sclust = clst;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007c44:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007c4a:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8007c4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d05d      	beq.n	8007d0e <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 8007c52:	e03a      	b.n	8007cca <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 8007c54:	683a      	ldr	r2, [r7, #0]
 8007c56:	69fb      	ldr	r3, [r7, #28]
 8007c58:	1ad3      	subs	r3, r2, r3
 8007c5a:	603b      	str	r3, [r7, #0]
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	699a      	ldr	r2, [r3, #24]
 8007c60:	69fb      	ldr	r3, [r7, #28]
 8007c62:	441a      	add	r2, r3
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	7d1b      	ldrb	r3, [r3, #20]
 8007c6c:	f003 0302 	and.w	r3, r3, #2
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d00b      	beq.n	8007c8c <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007c78:	4618      	mov	r0, r3
 8007c7a:	f7fe f9f7 	bl	800606c <create_chain>
 8007c7e:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8007c80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d108      	bne.n	8007c98 <f_lseek+0x2f4>
							ofs = 0; break;
 8007c86:	2300      	movs	r3, #0
 8007c88:	603b      	str	r3, [r7, #0]
 8007c8a:	e022      	b.n	8007cd2 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007c90:	4618      	mov	r0, r3
 8007c92:	f7fd fff2 	bl	8005c7a <get_fat>
 8007c96:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007c98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c9e:	d104      	bne.n	8007caa <f_lseek+0x306>
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2201      	movs	r2, #1
 8007ca4:	755a      	strb	r2, [r3, #21]
 8007ca6:	2301      	movs	r3, #1
 8007ca8:	e081      	b.n	8007dae <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8007caa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cac:	2b01      	cmp	r3, #1
 8007cae:	d904      	bls.n	8007cba <f_lseek+0x316>
 8007cb0:	68bb      	ldr	r3, [r7, #8]
 8007cb2:	695b      	ldr	r3, [r3, #20]
 8007cb4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007cb6:	429a      	cmp	r2, r3
 8007cb8:	d304      	bcc.n	8007cc4 <f_lseek+0x320>
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	2202      	movs	r2, #2
 8007cbe:	755a      	strb	r2, [r3, #21]
 8007cc0:	2302      	movs	r3, #2
 8007cc2:	e074      	b.n	8007dae <f_lseek+0x40a>
					fp->clust = clst;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007cc8:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8007cca:	683a      	ldr	r2, [r7, #0]
 8007ccc:	69fb      	ldr	r3, [r7, #28]
 8007cce:	429a      	cmp	r2, r3
 8007cd0:	d8c0      	bhi.n	8007c54 <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	699a      	ldr	r2, [r3, #24]
 8007cd6:	683b      	ldr	r3, [r7, #0]
 8007cd8:	441a      	add	r2, r3
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8007cde:	683b      	ldr	r3, [r7, #0]
 8007ce0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d012      	beq.n	8007d0e <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8007ce8:	68bb      	ldr	r3, [r7, #8]
 8007cea:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007cec:	4618      	mov	r0, r3
 8007cee:	f7fd ffa5 	bl	8005c3c <clust2sect>
 8007cf2:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8007cf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d104      	bne.n	8007d04 <f_lseek+0x360>
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	2202      	movs	r2, #2
 8007cfe:	755a      	strb	r2, [r3, #21]
 8007d00:	2302      	movs	r3, #2
 8007d02:	e054      	b.n	8007dae <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 8007d04:	683b      	ldr	r3, [r7, #0]
 8007d06:	0a5b      	lsrs	r3, r3, #9
 8007d08:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007d0a:	4413      	add	r3, r2
 8007d0c:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	699a      	ldr	r2, [r3, #24]
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	68db      	ldr	r3, [r3, #12]
 8007d16:	429a      	cmp	r2, r3
 8007d18:	d90a      	bls.n	8007d30 <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	699a      	ldr	r2, [r3, #24]
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	7d1b      	ldrb	r3, [r3, #20]
 8007d26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d2a:	b2da      	uxtb	r2, r3
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	699b      	ldr	r3, [r3, #24]
 8007d34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d036      	beq.n	8007daa <f_lseek+0x406>
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	6a1b      	ldr	r3, [r3, #32]
 8007d40:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007d42:	429a      	cmp	r2, r3
 8007d44:	d031      	beq.n	8007daa <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	7d1b      	ldrb	r3, [r3, #20]
 8007d4a:	b25b      	sxtb	r3, r3
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	da18      	bge.n	8007d82 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007d50:	68bb      	ldr	r3, [r7, #8]
 8007d52:	7858      	ldrb	r0, [r3, #1]
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	6a1a      	ldr	r2, [r3, #32]
 8007d5e:	2301      	movs	r3, #1
 8007d60:	f7fd fbe2 	bl	8005528 <disk_write>
 8007d64:	4603      	mov	r3, r0
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d004      	beq.n	8007d74 <f_lseek+0x3d0>
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	2201      	movs	r2, #1
 8007d6e:	755a      	strb	r2, [r3, #21]
 8007d70:	2301      	movs	r3, #1
 8007d72:	e01c      	b.n	8007dae <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	7d1b      	ldrb	r3, [r3, #20]
 8007d78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d7c:	b2da      	uxtb	r2, r3
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8007d82:	68bb      	ldr	r3, [r7, #8]
 8007d84:	7858      	ldrb	r0, [r3, #1]
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007d8c:	2301      	movs	r3, #1
 8007d8e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007d90:	f7fd fbaa 	bl	80054e8 <disk_read>
 8007d94:	4603      	mov	r3, r0
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d004      	beq.n	8007da4 <f_lseek+0x400>
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	2201      	movs	r2, #1
 8007d9e:	755a      	strb	r2, [r3, #21]
 8007da0:	2301      	movs	r3, #1
 8007da2:	e004      	b.n	8007dae <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007da8:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8007daa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8007dae:	4618      	mov	r0, r3
 8007db0:	3740      	adds	r7, #64	; 0x40
 8007db2:	46bd      	mov	sp, r7
 8007db4:	bd80      	pop	{r7, pc}

08007db6 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 8007db6:	b580      	push	{r7, lr}
 8007db8:	b084      	sub	sp, #16
 8007dba:	af00      	add	r7, sp, #0
 8007dbc:	6078      	str	r0, [r7, #4]
 8007dbe:	460b      	mov	r3, r1
 8007dc0:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 8007dc2:	78fb      	ldrb	r3, [r7, #3]
 8007dc4:	2b0a      	cmp	r3, #10
 8007dc6:	d103      	bne.n	8007dd0 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8007dc8:	210d      	movs	r1, #13
 8007dca:	6878      	ldr	r0, [r7, #4]
 8007dcc:	f7ff fff3 	bl	8007db6 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	685b      	ldr	r3, [r3, #4]
 8007dd4:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	db25      	blt.n	8007e28 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	1c5a      	adds	r2, r3, #1
 8007de0:	60fa      	str	r2, [r7, #12]
 8007de2:	687a      	ldr	r2, [r7, #4]
 8007de4:	4413      	add	r3, r2
 8007de6:	78fa      	ldrb	r2, [r7, #3]
 8007de8:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	2b3c      	cmp	r3, #60	; 0x3c
 8007dee:	dd12      	ble.n	8007e16 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	6818      	ldr	r0, [r3, #0]
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	f103 010c 	add.w	r1, r3, #12
 8007dfa:	68fa      	ldr	r2, [r7, #12]
 8007dfc:	f107 0308 	add.w	r3, r7, #8
 8007e00:	f7ff fbb3 	bl	800756a <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8007e04:	68ba      	ldr	r2, [r7, #8]
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	429a      	cmp	r2, r3
 8007e0a:	d101      	bne.n	8007e10 <putc_bfd+0x5a>
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	e001      	b.n	8007e14 <putc_bfd+0x5e>
 8007e10:	f04f 33ff 	mov.w	r3, #4294967295
 8007e14:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	68fa      	ldr	r2, [r7, #12]
 8007e1a:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	689b      	ldr	r3, [r3, #8]
 8007e20:	1c5a      	adds	r2, r3, #1
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	609a      	str	r2, [r3, #8]
 8007e26:	e000      	b.n	8007e2a <putc_bfd+0x74>
	if (i < 0) return;
 8007e28:	bf00      	nop
}
 8007e2a:	3710      	adds	r7, #16
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	bd80      	pop	{r7, pc}

08007e30 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b084      	sub	sp, #16
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	685b      	ldr	r3, [r3, #4]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	db16      	blt.n	8007e6e <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	6818      	ldr	r0, [r3, #0]
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	f103 010c 	add.w	r1, r3, #12
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	685b      	ldr	r3, [r3, #4]
 8007e4e:	461a      	mov	r2, r3
 8007e50:	f107 030c 	add.w	r3, r7, #12
 8007e54:	f7ff fb89 	bl	800756a <f_write>
 8007e58:	4603      	mov	r3, r0
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d107      	bne.n	8007e6e <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	685b      	ldr	r3, [r3, #4]
 8007e62:	68fa      	ldr	r2, [r7, #12]
 8007e64:	4293      	cmp	r3, r2
 8007e66:	d102      	bne.n	8007e6e <putc_flush+0x3e>
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	689b      	ldr	r3, [r3, #8]
 8007e6c:	e001      	b.n	8007e72 <putc_flush+0x42>
	return EOF;
 8007e6e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007e72:	4618      	mov	r0, r3
 8007e74:	3710      	adds	r7, #16
 8007e76:	46bd      	mov	sp, r7
 8007e78:	bd80      	pop	{r7, pc}

08007e7a <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 8007e7a:	b480      	push	{r7}
 8007e7c:	b083      	sub	sp, #12
 8007e7e:	af00      	add	r7, sp, #0
 8007e80:	6078      	str	r0, [r7, #4]
 8007e82:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	683a      	ldr	r2, [r7, #0]
 8007e88:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	605a      	str	r2, [r3, #4]
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	685a      	ldr	r2, [r3, #4]
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	609a      	str	r2, [r3, #8]
}
 8007e98:	bf00      	nop
 8007e9a:	370c      	adds	r7, #12
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea2:	4770      	bx	lr

08007ea4 <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 8007ea4:	b40e      	push	{r1, r2, r3}
 8007ea6:	b580      	push	{r7, lr}
 8007ea8:	b0a7      	sub	sp, #156	; 0x9c
 8007eaa:	af00      	add	r7, sp, #0
 8007eac:	6078      	str	r0, [r7, #4]
	UINT i, j, w;
	DWORD v;
	TCHAR c, d, str[32], *p;


	putc_init(&pb, fp);
 8007eae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007eb2:	6879      	ldr	r1, [r7, #4]
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	f7ff ffe0 	bl	8007e7a <putc_init>

	va_start(arp, fmt);
 8007eba:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8007ebe:	67bb      	str	r3, [r7, #120]	; 0x78

	for (;;) {
		c = *fmt++;
 8007ec0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007ec4:	1c5a      	adds	r2, r3, #1
 8007ec6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007eca:	781b      	ldrb	r3, [r3, #0]
 8007ecc:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == 0) break;			/* End of string */
 8007ed0:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	f000 81f4 	beq.w	80082c2 <f_printf+0x41e>
		if (c != '%') {				/* Non escape character */
 8007eda:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8007ede:	2b25      	cmp	r3, #37	; 0x25
 8007ee0:	d008      	beq.n	8007ef4 <f_printf+0x50>
			putc_bfd(&pb, c);
 8007ee2:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 8007ee6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007eea:	4611      	mov	r1, r2
 8007eec:	4618      	mov	r0, r3
 8007eee:	f7ff ff62 	bl	8007db6 <putc_bfd>
			continue;
 8007ef2:	e1e5      	b.n	80082c0 <f_printf+0x41c>
		}
		w = f = 0;
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8007efa:	2300      	movs	r3, #0
 8007efc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		c = *fmt++;
 8007f00:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007f04:	1c5a      	adds	r2, r3, #1
 8007f06:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007f0a:	781b      	ldrb	r3, [r3, #0]
 8007f0c:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == '0') {				/* Flag: '0' padding */
 8007f10:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8007f14:	2b30      	cmp	r3, #48	; 0x30
 8007f16:	d10b      	bne.n	8007f30 <f_printf+0x8c>
			f = 1; c = *fmt++;
 8007f18:	2301      	movs	r3, #1
 8007f1a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8007f1e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007f22:	1c5a      	adds	r2, r3, #1
 8007f24:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007f28:	781b      	ldrb	r3, [r3, #0]
 8007f2a:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 8007f2e:	e024      	b.n	8007f7a <f_printf+0xd6>
		} else {
			if (c == '-') {			/* Flag: left justified */
 8007f30:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8007f34:	2b2d      	cmp	r3, #45	; 0x2d
 8007f36:	d120      	bne.n	8007f7a <f_printf+0xd6>
				f = 2; c = *fmt++;
 8007f38:	2302      	movs	r3, #2
 8007f3a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8007f3e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007f42:	1c5a      	adds	r2, r3, #1
 8007f44:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007f48:	781b      	ldrb	r3, [r3, #0]
 8007f4a:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
			}
		}
		while (IsDigit(c)) {		/* Precision */
 8007f4e:	e014      	b.n	8007f7a <f_printf+0xd6>
			w = w * 10 + c - '0';
 8007f50:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8007f54:	4613      	mov	r3, r2
 8007f56:	009b      	lsls	r3, r3, #2
 8007f58:	4413      	add	r3, r2
 8007f5a:	005b      	lsls	r3, r3, #1
 8007f5c:	461a      	mov	r2, r3
 8007f5e:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8007f62:	4413      	add	r3, r2
 8007f64:	3b30      	subs	r3, #48	; 0x30
 8007f66:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			c = *fmt++;
 8007f6a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007f6e:	1c5a      	adds	r2, r3, #1
 8007f70:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007f74:	781b      	ldrb	r3, [r3, #0]
 8007f76:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		while (IsDigit(c)) {		/* Precision */
 8007f7a:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8007f7e:	2b2f      	cmp	r3, #47	; 0x2f
 8007f80:	d903      	bls.n	8007f8a <f_printf+0xe6>
 8007f82:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8007f86:	2b39      	cmp	r3, #57	; 0x39
 8007f88:	d9e2      	bls.n	8007f50 <f_printf+0xac>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 8007f8a:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8007f8e:	2b6c      	cmp	r3, #108	; 0x6c
 8007f90:	d003      	beq.n	8007f9a <f_printf+0xf6>
 8007f92:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8007f96:	2b4c      	cmp	r3, #76	; 0x4c
 8007f98:	d10d      	bne.n	8007fb6 <f_printf+0x112>
			f |= 4; c = *fmt++;
 8007f9a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8007f9e:	f043 0304 	orr.w	r3, r3, #4
 8007fa2:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8007fa6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007faa:	1c5a      	adds	r2, r3, #1
 8007fac:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007fb0:	781b      	ldrb	r3, [r3, #0]
 8007fb2:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		}
		if (!c) break;
 8007fb6:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	f000 8183 	beq.w	80082c6 <f_printf+0x422>
		d = c;
 8007fc0:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8007fc4:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		if (IsLower(d)) d -= 0x20;
 8007fc8:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8007fcc:	2b60      	cmp	r3, #96	; 0x60
 8007fce:	d908      	bls.n	8007fe2 <f_printf+0x13e>
 8007fd0:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8007fd4:	2b7a      	cmp	r3, #122	; 0x7a
 8007fd6:	d804      	bhi.n	8007fe2 <f_printf+0x13e>
 8007fd8:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8007fdc:	3b20      	subs	r3, #32
 8007fde:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		switch (d) {				/* Type is... */
 8007fe2:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8007fe6:	3b42      	subs	r3, #66	; 0x42
 8007fe8:	2b16      	cmp	r3, #22
 8007fea:	f200 8098 	bhi.w	800811e <f_printf+0x27a>
 8007fee:	a201      	add	r2, pc, #4	; (adr r2, 8007ff4 <f_printf+0x150>)
 8007ff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ff4:	080080ff 	.word	0x080080ff
 8007ff8:	080080e7 	.word	0x080080e7
 8007ffc:	0800810f 	.word	0x0800810f
 8008000:	0800811f 	.word	0x0800811f
 8008004:	0800811f 	.word	0x0800811f
 8008008:	0800811f 	.word	0x0800811f
 800800c:	0800811f 	.word	0x0800811f
 8008010:	0800811f 	.word	0x0800811f
 8008014:	0800811f 	.word	0x0800811f
 8008018:	0800811f 	.word	0x0800811f
 800801c:	0800811f 	.word	0x0800811f
 8008020:	0800811f 	.word	0x0800811f
 8008024:	0800811f 	.word	0x0800811f
 8008028:	08008107 	.word	0x08008107
 800802c:	0800811f 	.word	0x0800811f
 8008030:	0800811f 	.word	0x0800811f
 8008034:	0800811f 	.word	0x0800811f
 8008038:	08008051 	.word	0x08008051
 800803c:	0800811f 	.word	0x0800811f
 8008040:	0800810f 	.word	0x0800810f
 8008044:	0800811f 	.word	0x0800811f
 8008048:	0800811f 	.word	0x0800811f
 800804c:	08008117 	.word	0x08008117
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
 8008050:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008052:	1d1a      	adds	r2, r3, #4
 8008054:	67ba      	str	r2, [r7, #120]	; 0x78
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	67fb      	str	r3, [r7, #124]	; 0x7c
			for (j = 0; p[j]; j++) ;
 800805a:	2300      	movs	r3, #0
 800805c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008060:	e004      	b.n	800806c <f_printf+0x1c8>
 8008062:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008066:	3301      	adds	r3, #1
 8008068:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800806c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800806e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008072:	4413      	add	r3, r2
 8008074:	781b      	ldrb	r3, [r3, #0]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d1f3      	bne.n	8008062 <f_printf+0x1be>
			if (!(f & 2)) {
 800807a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800807e:	f003 0302 	and.w	r3, r3, #2
 8008082:	2b00      	cmp	r3, #0
 8008084:	d11a      	bne.n	80080bc <f_printf+0x218>
				while (j++ < w) putc_bfd(&pb, ' ');
 8008086:	e005      	b.n	8008094 <f_printf+0x1f0>
 8008088:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800808c:	2120      	movs	r1, #32
 800808e:	4618      	mov	r0, r3
 8008090:	f7ff fe91 	bl	8007db6 <putc_bfd>
 8008094:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008098:	1c5a      	adds	r2, r3, #1
 800809a:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800809e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80080a2:	429a      	cmp	r2, r3
 80080a4:	d8f0      	bhi.n	8008088 <f_printf+0x1e4>
			}
			while (*p) putc_bfd(&pb, *p++);
 80080a6:	e009      	b.n	80080bc <f_printf+0x218>
 80080a8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80080aa:	1c5a      	adds	r2, r3, #1
 80080ac:	67fa      	str	r2, [r7, #124]	; 0x7c
 80080ae:	781a      	ldrb	r2, [r3, #0]
 80080b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80080b4:	4611      	mov	r1, r2
 80080b6:	4618      	mov	r0, r3
 80080b8:	f7ff fe7d 	bl	8007db6 <putc_bfd>
 80080bc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80080be:	781b      	ldrb	r3, [r3, #0]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d1f1      	bne.n	80080a8 <f_printf+0x204>
			while (j++ < w) putc_bfd(&pb, ' ');
 80080c4:	e005      	b.n	80080d2 <f_printf+0x22e>
 80080c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80080ca:	2120      	movs	r1, #32
 80080cc:	4618      	mov	r0, r3
 80080ce:	f7ff fe72 	bl	8007db6 <putc_bfd>
 80080d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80080d6:	1c5a      	adds	r2, r3, #1
 80080d8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80080dc:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80080e0:	429a      	cmp	r2, r3
 80080e2:	d8f0      	bhi.n	80080c6 <f_printf+0x222>
			continue;
 80080e4:	e0ec      	b.n	80082c0 <f_printf+0x41c>

		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 80080e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80080e8:	1d1a      	adds	r2, r3, #4
 80080ea:	67ba      	str	r2, [r7, #120]	; 0x78
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	b2da      	uxtb	r2, r3
 80080f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80080f4:	4611      	mov	r1, r2
 80080f6:	4618      	mov	r0, r3
 80080f8:	f7ff fe5d 	bl	8007db6 <putc_bfd>
 80080fc:	e0e0      	b.n	80082c0 <f_printf+0x41c>

		case 'B' :					/* Binary */
			r = 2; break;
 80080fe:	2302      	movs	r3, #2
 8008100:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8008104:	e014      	b.n	8008130 <f_printf+0x28c>

		case 'O' :					/* Octal */
			r = 8; break;
 8008106:	2308      	movs	r3, #8
 8008108:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800810c:	e010      	b.n	8008130 <f_printf+0x28c>

		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 800810e:	230a      	movs	r3, #10
 8008110:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8008114:	e00c      	b.n	8008130 <f_printf+0x28c>

		case 'X' :					/* Hexdecimal */
			r = 16; break;
 8008116:	2310      	movs	r3, #16
 8008118:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800811c:	e008      	b.n	8008130 <f_printf+0x28c>

		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
 800811e:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 8008122:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008126:	4611      	mov	r1, r2
 8008128:	4618      	mov	r0, r3
 800812a:	f7ff fe44 	bl	8007db6 <putc_bfd>
 800812e:	e0c7      	b.n	80082c0 <f_printf+0x41c>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 8008130:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8008134:	f003 0304 	and.w	r3, r3, #4
 8008138:	2b00      	cmp	r3, #0
 800813a:	d004      	beq.n	8008146 <f_printf+0x2a2>
 800813c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800813e:	1d1a      	adds	r2, r3, #4
 8008140:	67ba      	str	r2, [r7, #120]	; 0x78
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	e00c      	b.n	8008160 <f_printf+0x2bc>
 8008146:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800814a:	2b44      	cmp	r3, #68	; 0x44
 800814c:	d104      	bne.n	8008158 <f_printf+0x2b4>
 800814e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008150:	1d1a      	adds	r2, r3, #4
 8008152:	67ba      	str	r2, [r7, #120]	; 0x78
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	e003      	b.n	8008160 <f_printf+0x2bc>
 8008158:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800815a:	1d1a      	adds	r2, r3, #4
 800815c:	67ba      	str	r2, [r7, #120]	; 0x78
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		if (d == 'D' && (v & 0x80000000)) {
 8008164:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8008168:	2b44      	cmp	r3, #68	; 0x44
 800816a:	d10e      	bne.n	800818a <f_printf+0x2e6>
 800816c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008170:	2b00      	cmp	r3, #0
 8008172:	da0a      	bge.n	800818a <f_printf+0x2e6>
			v = 0 - v;
 8008174:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008178:	425b      	negs	r3, r3
 800817a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			f |= 8;
 800817e:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8008182:	f043 0308 	orr.w	r3, r3, #8
 8008186:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		}
		i = 0;
 800818a:	2300      	movs	r3, #0
 800818c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		do {
			d = (TCHAR)(v % r); v /= r;
 8008190:	f897 2096 	ldrb.w	r2, [r7, #150]	; 0x96
 8008194:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008198:	fbb3 f1f2 	udiv	r1, r3, r2
 800819c:	fb02 f201 	mul.w	r2, r2, r1
 80081a0:	1a9b      	subs	r3, r3, r2
 80081a2:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
 80081a6:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 80081aa:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80081ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80081b2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 80081b6:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 80081ba:	2b09      	cmp	r3, #9
 80081bc:	d90b      	bls.n	80081d6 <f_printf+0x332>
 80081be:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80081c2:	2b78      	cmp	r3, #120	; 0x78
 80081c4:	d101      	bne.n	80081ca <f_printf+0x326>
 80081c6:	2227      	movs	r2, #39	; 0x27
 80081c8:	e000      	b.n	80081cc <f_printf+0x328>
 80081ca:	2207      	movs	r2, #7
 80081cc:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 80081d0:	4413      	add	r3, r2
 80081d2:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
			str[i++] = d + '0';
 80081d6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80081da:	1c5a      	adds	r2, r3, #1
 80081dc:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80081e0:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 80081e4:	3230      	adds	r2, #48	; 0x30
 80081e6:	b2d2      	uxtb	r2, r2
 80081e8:	f107 0198 	add.w	r1, r7, #152	; 0x98
 80081ec:	440b      	add	r3, r1
 80081ee:	f803 2c8c 	strb.w	r2, [r3, #-140]
		} while (v && i < sizeof str / sizeof str[0]);
 80081f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d003      	beq.n	8008202 <f_printf+0x35e>
 80081fa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80081fe:	2b1f      	cmp	r3, #31
 8008200:	d9c6      	bls.n	8008190 <f_printf+0x2ec>
		if (f & 8) str[i++] = '-';
 8008202:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8008206:	f003 0308 	and.w	r3, r3, #8
 800820a:	2b00      	cmp	r3, #0
 800820c:	d00a      	beq.n	8008224 <f_printf+0x380>
 800820e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008212:	1c5a      	adds	r2, r3, #1
 8008214:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8008218:	f107 0298 	add.w	r2, r7, #152	; 0x98
 800821c:	4413      	add	r3, r2
 800821e:	222d      	movs	r2, #45	; 0x2d
 8008220:	f803 2c8c 	strb.w	r2, [r3, #-140]
		j = i; d = (f & 1) ? '0' : ' ';
 8008224:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008228:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800822c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8008230:	f003 0301 	and.w	r3, r3, #1
 8008234:	2b00      	cmp	r3, #0
 8008236:	d001      	beq.n	800823c <f_printf+0x398>
 8008238:	2330      	movs	r3, #48	; 0x30
 800823a:	e000      	b.n	800823e <f_printf+0x39a>
 800823c:	2320      	movs	r3, #32
 800823e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 8008242:	e007      	b.n	8008254 <f_printf+0x3b0>
 8008244:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 8008248:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800824c:	4611      	mov	r1, r2
 800824e:	4618      	mov	r0, r3
 8008250:	f7ff fdb1 	bl	8007db6 <putc_bfd>
 8008254:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8008258:	f003 0302 	and.w	r3, r3, #2
 800825c:	2b00      	cmp	r3, #0
 800825e:	d108      	bne.n	8008272 <f_printf+0x3ce>
 8008260:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008264:	1c5a      	adds	r2, r3, #1
 8008266:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800826a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800826e:	429a      	cmp	r2, r3
 8008270:	d8e8      	bhi.n	8008244 <f_printf+0x3a0>
		do {
			putc_bfd(&pb, str[--i]);
 8008272:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008276:	3b01      	subs	r3, #1
 8008278:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800827c:	f107 020c 	add.w	r2, r7, #12
 8008280:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008284:	4413      	add	r3, r2
 8008286:	781a      	ldrb	r2, [r3, #0]
 8008288:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800828c:	4611      	mov	r1, r2
 800828e:	4618      	mov	r0, r3
 8008290:	f7ff fd91 	bl	8007db6 <putc_bfd>
		} while (i);
 8008294:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008298:	2b00      	cmp	r3, #0
 800829a:	d1ea      	bne.n	8008272 <f_printf+0x3ce>
		while (j++ < w) putc_bfd(&pb, d);
 800829c:	e007      	b.n	80082ae <f_printf+0x40a>
 800829e:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 80082a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80082a6:	4611      	mov	r1, r2
 80082a8:	4618      	mov	r0, r3
 80082aa:	f7ff fd84 	bl	8007db6 <putc_bfd>
 80082ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80082b2:	1c5a      	adds	r2, r3, #1
 80082b4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80082b8:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80082bc:	429a      	cmp	r2, r3
 80082be:	d8ee      	bhi.n	800829e <f_printf+0x3fa>
		c = *fmt++;
 80082c0:	e5fe      	b.n	8007ec0 <f_printf+0x1c>
		if (c == 0) break;			/* End of string */
 80082c2:	bf00      	nop
 80082c4:	e000      	b.n	80082c8 <f_printf+0x424>
		if (!c) break;
 80082c6:	bf00      	nop
	}

	va_end(arp);

	return putc_flush(&pb);
 80082c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80082cc:	4618      	mov	r0, r3
 80082ce:	f7ff fdaf 	bl	8007e30 <putc_flush>
 80082d2:	4603      	mov	r3, r0
}
 80082d4:	4618      	mov	r0, r3
 80082d6:	379c      	adds	r7, #156	; 0x9c
 80082d8:	46bd      	mov	sp, r7
 80082da:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80082de:	b003      	add	sp, #12
 80082e0:	4770      	bx	lr
 80082e2:	bf00      	nop

080082e4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80082e4:	b480      	push	{r7}
 80082e6:	b087      	sub	sp, #28
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	60f8      	str	r0, [r7, #12]
 80082ec:	60b9      	str	r1, [r7, #8]
 80082ee:	4613      	mov	r3, r2
 80082f0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80082f2:	2301      	movs	r3, #1
 80082f4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80082f6:	2300      	movs	r3, #0
 80082f8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80082fa:	4b1f      	ldr	r3, [pc, #124]	; (8008378 <FATFS_LinkDriverEx+0x94>)
 80082fc:	7a5b      	ldrb	r3, [r3, #9]
 80082fe:	b2db      	uxtb	r3, r3
 8008300:	2b00      	cmp	r3, #0
 8008302:	d131      	bne.n	8008368 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008304:	4b1c      	ldr	r3, [pc, #112]	; (8008378 <FATFS_LinkDriverEx+0x94>)
 8008306:	7a5b      	ldrb	r3, [r3, #9]
 8008308:	b2db      	uxtb	r3, r3
 800830a:	461a      	mov	r2, r3
 800830c:	4b1a      	ldr	r3, [pc, #104]	; (8008378 <FATFS_LinkDriverEx+0x94>)
 800830e:	2100      	movs	r1, #0
 8008310:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8008312:	4b19      	ldr	r3, [pc, #100]	; (8008378 <FATFS_LinkDriverEx+0x94>)
 8008314:	7a5b      	ldrb	r3, [r3, #9]
 8008316:	b2db      	uxtb	r3, r3
 8008318:	4a17      	ldr	r2, [pc, #92]	; (8008378 <FATFS_LinkDriverEx+0x94>)
 800831a:	009b      	lsls	r3, r3, #2
 800831c:	4413      	add	r3, r2
 800831e:	68fa      	ldr	r2, [r7, #12]
 8008320:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8008322:	4b15      	ldr	r3, [pc, #84]	; (8008378 <FATFS_LinkDriverEx+0x94>)
 8008324:	7a5b      	ldrb	r3, [r3, #9]
 8008326:	b2db      	uxtb	r3, r3
 8008328:	461a      	mov	r2, r3
 800832a:	4b13      	ldr	r3, [pc, #76]	; (8008378 <FATFS_LinkDriverEx+0x94>)
 800832c:	4413      	add	r3, r2
 800832e:	79fa      	ldrb	r2, [r7, #7]
 8008330:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8008332:	4b11      	ldr	r3, [pc, #68]	; (8008378 <FATFS_LinkDriverEx+0x94>)
 8008334:	7a5b      	ldrb	r3, [r3, #9]
 8008336:	b2db      	uxtb	r3, r3
 8008338:	1c5a      	adds	r2, r3, #1
 800833a:	b2d1      	uxtb	r1, r2
 800833c:	4a0e      	ldr	r2, [pc, #56]	; (8008378 <FATFS_LinkDriverEx+0x94>)
 800833e:	7251      	strb	r1, [r2, #9]
 8008340:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8008342:	7dbb      	ldrb	r3, [r7, #22]
 8008344:	3330      	adds	r3, #48	; 0x30
 8008346:	b2da      	uxtb	r2, r3
 8008348:	68bb      	ldr	r3, [r7, #8]
 800834a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800834c:	68bb      	ldr	r3, [r7, #8]
 800834e:	3301      	adds	r3, #1
 8008350:	223a      	movs	r2, #58	; 0x3a
 8008352:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008354:	68bb      	ldr	r3, [r7, #8]
 8008356:	3302      	adds	r3, #2
 8008358:	222f      	movs	r2, #47	; 0x2f
 800835a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800835c:	68bb      	ldr	r3, [r7, #8]
 800835e:	3303      	adds	r3, #3
 8008360:	2200      	movs	r2, #0
 8008362:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008364:	2300      	movs	r3, #0
 8008366:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8008368:	7dfb      	ldrb	r3, [r7, #23]
}
 800836a:	4618      	mov	r0, r3
 800836c:	371c      	adds	r7, #28
 800836e:	46bd      	mov	sp, r7
 8008370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008374:	4770      	bx	lr
 8008376:	bf00      	nop
 8008378:	20000204 	.word	0x20000204

0800837c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800837c:	b580      	push	{r7, lr}
 800837e:	b082      	sub	sp, #8
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
 8008384:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8008386:	2200      	movs	r2, #0
 8008388:	6839      	ldr	r1, [r7, #0]
 800838a:	6878      	ldr	r0, [r7, #4]
 800838c:	f7ff ffaa 	bl	80082e4 <FATFS_LinkDriverEx>
 8008390:	4603      	mov	r3, r0
}
 8008392:	4618      	mov	r0, r3
 8008394:	3708      	adds	r7, #8
 8008396:	46bd      	mov	sp, r7
 8008398:	bd80      	pop	{r7, pc}
	...

0800839c <__libc_init_array>:
 800839c:	b570      	push	{r4, r5, r6, lr}
 800839e:	4d0d      	ldr	r5, [pc, #52]	; (80083d4 <__libc_init_array+0x38>)
 80083a0:	4c0d      	ldr	r4, [pc, #52]	; (80083d8 <__libc_init_array+0x3c>)
 80083a2:	1b64      	subs	r4, r4, r5
 80083a4:	10a4      	asrs	r4, r4, #2
 80083a6:	2600      	movs	r6, #0
 80083a8:	42a6      	cmp	r6, r4
 80083aa:	d109      	bne.n	80083c0 <__libc_init_array+0x24>
 80083ac:	4d0b      	ldr	r5, [pc, #44]	; (80083dc <__libc_init_array+0x40>)
 80083ae:	4c0c      	ldr	r4, [pc, #48]	; (80083e0 <__libc_init_array+0x44>)
 80083b0:	f000 f820 	bl	80083f4 <_init>
 80083b4:	1b64      	subs	r4, r4, r5
 80083b6:	10a4      	asrs	r4, r4, #2
 80083b8:	2600      	movs	r6, #0
 80083ba:	42a6      	cmp	r6, r4
 80083bc:	d105      	bne.n	80083ca <__libc_init_array+0x2e>
 80083be:	bd70      	pop	{r4, r5, r6, pc}
 80083c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80083c4:	4798      	blx	r3
 80083c6:	3601      	adds	r6, #1
 80083c8:	e7ee      	b.n	80083a8 <__libc_init_array+0xc>
 80083ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80083ce:	4798      	blx	r3
 80083d0:	3601      	adds	r6, #1
 80083d2:	e7f2      	b.n	80083ba <__libc_init_array+0x1e>
 80083d4:	08008518 	.word	0x08008518
 80083d8:	08008518 	.word	0x08008518
 80083dc:	08008518 	.word	0x08008518
 80083e0:	0800851c 	.word	0x0800851c

080083e4 <memset>:
 80083e4:	4402      	add	r2, r0
 80083e6:	4603      	mov	r3, r0
 80083e8:	4293      	cmp	r3, r2
 80083ea:	d100      	bne.n	80083ee <memset+0xa>
 80083ec:	4770      	bx	lr
 80083ee:	f803 1b01 	strb.w	r1, [r3], #1
 80083f2:	e7f9      	b.n	80083e8 <memset+0x4>

080083f4 <_init>:
 80083f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083f6:	bf00      	nop
 80083f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083fa:	bc08      	pop	{r3}
 80083fc:	469e      	mov	lr, r3
 80083fe:	4770      	bx	lr

08008400 <_fini>:
 8008400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008402:	bf00      	nop
 8008404:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008406:	bc08      	pop	{r3}
 8008408:	469e      	mov	lr, r3
 800840a:	4770      	bx	lr
